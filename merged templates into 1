<?php

/**
 * Base Template
 *
 * This file contains the core structure and functions for building the template
 * and allows several different versions to built around it. No output is actually
 * made from this file as it only contains functions to help with the template
 * construction.
 *
 * This file should never be called directly, but should be extended from another
 * class that processes the data to display, only using these functions for the
 * core global elements such as the <head> and separate opening and closing <body>
 * tags, along with the global navbar and footer.
 *
 * This means that the class file that extends this only has to deal with the
 * page-specific content and how to lay it out. An example file that extends this
 * one is T_Main.php in this folder.
 *
 * For an example of a completely self-enclosed template file look at T_Admin.php
 * in this folder.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */
class T_Base {

	/**
	 * Build the HTML down to the opening body tag and include extra css
     *
     * Creates the opening <doctype> and <html> tags, inserts the <head>
     * tag before finally creating the opening <body> tag. The closing <body>
     * and <html> tags are created in the bodyEnd() function.
     *
     * The <head> is craetd via the head() function and contains the global
     * css and meta tags as well as and page-specific ones requested when the
     * template was called.
	 *
	 * @return string 					Template to the opening <body> tag
	 */
    public function bodyStart () {

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';


        /**
         * Include the <head> section
         *
         * If a page needs any extra css apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out .= self::head ();

        // Open the body tag

        $out .= '<body class="'.$this->body_class.'">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

	/**
	 * Finish the HTML
	 *
	 * @return string 					Template for the end of the HTML
	 */
    public function bodyEnd () {

		/**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

	/**
	 * Build the <head> section
	 *
	 * Builds the entire <head> tag and includes any global or
	 * page specific css and meta tags.
	 *
	 * @return     string      <head> section
	 */
    private function head () {
		/*
            We build the contents of the <head> gradually so we create a $out
            variable containing the opening tag and concatenate to it as we go along.
         */
		$out = '<head>';

		/*
            Include the <meta> tags

            Each of the meta tags should initially be stored in the meta_tags()
            function in /app/core/Settings.php with a default content to be used
            if an alternative is not set.

            For page specific meta tags, set a key/pairing array in the view as
            $params['meta'] with the name and content of each once you want to
            overwrite.

            You can also set global meta tags manually and this is required for any
            that do not use a name and content combination.
         */
        $out .=  ' <meta charset="utf-8">';

        /*
            As there may be overrides for some of the meta tags set in the page/view, we initially store the default meta tags in a $tags variable so it can be easily manipulated.
         */
        $tags = Settings::meta_tags();

        /*
            If any page-specific meta tags have been passed in, they would have
            been set to $this->meta in the called template file (by default
            /app/core/Templates/Main.php).
            We loop though these and for each one, overwrite the matching tag
            name in $tags.
         */
        if(isset($this->meta))
        {
            foreach ($this->meta as $name => $content) {

                $tags[$name] = $content;
            }
        }

        /*
            Finally, we loop through the tags array and create a meta tag for each one, adding it to the $out variable.
         */
        foreach ($tags as $name => $content) {
            $out .= Php2Html::meta([
                    'name' => $name,
                    'content' => $content
            ])."\n";
        }

		/*
            Set the Page Title

            If the page title has been passed in from the view, show the site name as set in Settings.php followed by a colon and then the page title.
            Otherwise, it just shows the site name.

            You can change this to suit your needs.
         */
		$title = isset($this->page_title) ? Settings::site_details('site_name') .': '.$this->page_title: Settings::site_details('site_name');
		$out .=  '<title>' . $title. '</title>';

		// Link the Favicon
		$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

		/*
            Call in the stylesheets

            Again, you can have global style sheets as well as page, specific ones. Wherever they are set, they are called from the css() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full stylesheet link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['css'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/site' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
		$out .= Settings::css('remote/bootstrap/v4');

        // Loop through the page specific styles
        if(isset($this->css))
        {
            foreach ($this->css as $stylesheet) {
                $out .= Settings::css($stylesheet);
            }
        }


        $out .= Settings::css('local/site');

        // Close the head tag
        $out .=  '</head>';

        // Echo the $out variable
		echo $out;

    } // head()

	/**
	 * Build the required scripts
	 *
	 * Builds the js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts () {
        $out = '';

        /*
            Call in the any scripts

            Again, you can have global scripts as well as page, specific ones. Wherever they are set, they are called from the js() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full script link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4' would return the string at
            'remote' => 'bootstrap' => 'v4'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['js'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/default' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
         $out .= Settings::js('remote/jquery');
         $out .= Settings::js('remote/popper');
         $out .= Settings::js('remote/bootstrap/v4');
         $out .= Settings::js('remote/font-awesome-5');

        // Loop through the page specific styles
        if(isset($this->js)) {
            foreach ($this->js as $script) {
                $out .= Settings::js($script);
            }
        }

        $out .= Settings::js('local/default');

        // Echo the $out variable
        echo $out;

    } // scripts()

	/**
	 * Build the top navigation menu
	 *
	 * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
	 * in the required links and dropdowns
	 *
	 * @return string 	nav
	 */
    public function topNav () {
        // Main Site Top Navigation Menu
        $nav_items = [
            'Home' => ['link', '/'],
            'Users' => ['link', '/Users/'],
            'Faults' => ['link', '/Faults/'],
            'Call Log' => ['link', '/CallLog/'],
            '\'One Thing\'' => ['link', '/OneThing/'],
            'Ideas' => ['link', '/Ideas/'],

        ]; // $nav_items

        $out = '';

        $toggle_button = Php2Html::button ([
            'content' => Php2Html::span ([
                    'content' => '',
                    'class' => 'navbar-toggler-icon'
            ]),
            'class' => 'navbar-toggler navbar-toggler-right mr-auto',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#main-nav',
            ],
            'aria' => [
                'controls' => 'main-nav',
                'expanded' => 'false',
                'label' => 'Toggle navigation',

            ],
        ]);

         $menu = '';
         foreach ($nav_items as $key => $value)
 		{
 			// 'type' is set as 'link'
            if($value[0] == 'link') {
 				/*
 					Build a <li> with the class of .nav-item
 					Inside this put an <a> with a value of $value[1] (the link)
 					and a display of $key (the link name)
 				 */
                 $params['href'] = $value[1];
                 $params['class'] = 'text-light';
                 $params['content'] = $key;
                 $menu .= Php2Bs::bs_nav_item ([
                     'content' => Php2Bs::bs_nav_link (
                         $params
                     )
                 ]);
            }

 			// 'type' is set as 'dropdown'
             if($value[0] == 'dropdown') {
 				/*
 					Build a <li> with the class of .nav-item dropdown .

 					Inside this, build an <a> with a class of dropdown-toggle. This
 					will then use the Bootstap toggle class.
 					Set the id to the $key (the link name) appended with '_menu'. This
 					will be to target the correct dropdown menu. Also set the display to $key.

 					Build a <div> with the class of .dropdown-menu. Give it an
 					aria-labelledby of $key appended with '_menu' so it matches
 					the <a> that triggers it.

 					Finally, inside the div, loop through the links (stored in $value[1]) and creat an <a> for each one.
 				 */
                  $links = '';
                  foreach ($value[1] as $items => $item)
                  {


                      $links .= Php2Bs::bs_dropdown_item([
							'content' => $items,
                            'href' => $item[1]
                      ]);

                       //$out .= '  <a class="dropdown-item" href="'.$item[1].'">'.$menu.'</a>';
                  }

                 $menu .= Php2Bs::bs_nav_dropdown([

                         'li' => [
                             //'class' => 'nav-item dropdown',
                         ],
                         'a' => [
                             'content' => $key,
                             'id' => $key.'_menu',
                             'class' => 'text-info-100',
                             'data_attr' => [
                                 'toggle' => 'dropdown',

                             ],
                             'aria' => [
                                 'haspopup' => 'main-nav',
                                 'expanded' => 'true',
                                 'expanded' => 'false',

                             ],
                         ],
                         'menu' => [
                             'content' => $links,
                         ]

                 ]);
             }
         }


        $nav_params['content'] = Php2Bs::bs_navbar_nav ([
			'content' => $menu
        ]);
        $nav_params['class'] = 'mr-auto';
        $nav_params['id'] = 'main-nav';

        $navbar_collapse = Php2Bs::bs_navbar_collapse (
            $nav_params
        );

        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            $user_button_text = 'Login';
        } else {
            $user_button_text = 'Logout / Profile';
        }

        $user_button = Php2Html::ul ([
            'content' => Php2Html::li ([
                'content' => Php2Html::a ([
                    'content' => $user_button_text,
                    'href' => '#',
                    'id' => 'left',
                    'class' => 'text-light nav-link position-relative',
                    'data_attr' => [
                         'toggle' => 'collapse',
                         'target' => '#nav-user'
                    ],
                    'aria' => [
                         'controls' => 'nav-user',
                         'expanded' => 'false',
                         'label' => 'Toggle user navigation'
                    ]
                ]),
                'class' => 'navbar-item',
            ]),
            'class' => 'navbar-nav',
        ]);


         $out = Php2Bs::bs_navbar ([
            // Navbar content
            'content' => Php2Bs::bs_container ([
                'content' =>  $toggle_button.$navbar_collapse.$user_button,
                'class' => 'text-white',
                //'type' => 'fluid'
            ]),
            'class' => 'navbar-expand-lg navbar-dark bg-dark invert sticky-top h-1 pl-2 p-md-0'


        ]);
        $out .= Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => Php2Bs::bs_container ([
                'content' => $this->user_box (),


            ]),
            'class' => 'collapse py-2 bg-light text-dark border-bottom border-dark',
            'id' => 'nav-user'
        ]);


 		echo $out;
     } // topNav()
     /**
      * Basic outputs for test
      *
      * These are just temporary functions to show something in the
      * left and right columns.
      *
      * All will be replaced with something more useful.
      */
     protected function user_box () {
         $model = new M_Users();

         if($model->isLoggedIn()) {

             $model->find(Session::get(Settings::members()['login_session']));

             $link_array = [
                 'Profile' => [
                     'href' => '/Users/'.$model->data()->username,
                 ],
                 'Edit Details' => [
                     'href' => '/Users/Edit',
                 ]
             ];

             if($model->hasPermission('admin')) {
                 $link_array['Admin Area'] = ['href' => '/Admin'];
             }


             $content = '';
             $content .= Php2Bs::bs_list_group ([
                 'content' => $link_array,
                 'group_type' => 'a',
                 'class' => ' mb-2'
             ]);

             $content .= $model->logoutForm();
         } else {
             $content = $model->loginForm();
         }

         return $content;

     }

	/**
	 * Build footer
	 *
	 * Sets the page footer
	 *
	 * @return string 	footer
	 */
    public function footer () {
        $out = Php2Bs::bs_footer ([
            'content' => Php2Bs::bs_container ([
                'content' =>  'Footer content.',
                'class' => 'text-white',
            ]),
            'class' => 'bg-dark',
        ]);
		echo $out;
    } // footer()


}




































<?php

/**
 * Main Template
 *
 * This file contains actual content of the page and buiilds the template
 * using the functions in Base_Template.
 *
 * To allow for multiple versions of the same template, we can pass in a
 * version. Check content() in this class to see how it is used
 *
 * app/views/home/index.php gives a fukll example of how to build the remplate
 * from within a view.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	new T_Main($content, $args)
 * @return 		string     Entire HTML page
 */
class T_Main extends T_Base {

	/**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and at the end of it, called the Template() function
     * to create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$args          Additional arguments
	 */
    public function __construct($content, $args=array()) {

		// Set the displayed content to $this->content
		$this->content = $content;

		/*
            If a 'page_title' has been passed set it to $this->page_title, otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle, if required.

            These variables get checked in the content() function and then added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT show, even if it has been set.
         */
		$this->page_title = (isset($args['page_title'])) ? $args['page_title'] : null;
        $this->page_subtitle = (isset($args['page_subtitle'])) ? $args['page_subtitle'] : null;

		/*
           Set the layout version

           If a layout has been passed from the view via $args['layout'] set $this->layout to it otherwise use 'default'.

           These variables get checked in the layout() function within this file and will return a layout based on that is set here.

           To see the demo layout versions and instructions on how to edit them or create a new one, see layout() and its comments.
		 */
        if(isset($args['layout'])) {
            $this->layout = $args['layout'];
        } else {
            $this->layout = 'default';
        }

        /*
            Set any page specific meta tags. These will be set in the view as a key/value pairing and will override the defaults set in /app/core/Settings.php->meta_tags()
         */
        if(isset($args['meta'])) {$this->meta =$args['meta'];}

        /*
            Set any page specific css. These will be set in the view as an array
            of path strings.
         */
        if(isset($args['css'])) {$this->css =$args['css'];}

        /*
            Set any page specific js. These will be set in the view as an array
            of path strings.
         */
        if(isset($args['js'])) {$this->js =$args['js'];}

        $this->sidebar = (isset($args['sidebar'])) ? $args['sidebar'].'_sidebar' : 'default_sidebar';

        $this->show_banner = (isset($args['hide_banner']) && $args['hide_banner']) ? false : true;

        $this->body_class = (isset($args['body_class'])) ? $args['body_class'] : '';
		// Call the template function
        self::Template();

    } // __construct


	/**
	 * Build the entire template
	 *
	 * We build this up gradually via functions contained eihter in this file or in
	 * the Base_Template file it extends
	 * @return 	HTML page
	 */
    private function Template () {
		// Build the start of the page up to the opening body tag, including the <head>
        self::bodyStart ();

        // Build banner
        if($this->show_banner) {
            self::banner ();
        }


        // Build top navigation bar
        self::topNav ();

		// Show the actual content for the page
        self::content ();

		// Show the footer
        self::footer ();

		// Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()

    /**
     * Page banner
     *
     * Simply creates the banner that shows at the top of the page.
     *
     * Theoretically, this could be placed in the T_Base file but, if you are
     * running multiple sites based around the same template, having it in the
     * specific template files means it can be styled independently.
     *
     * The output of this is a fluid bootstrap container (to force it full width
     * ensuring any background colour stretches across the screen), inside which
     * we place a standard container so the content matches the width of the rest
     * of the page. Inside that inner container, we place a <h1> with the title.
     *
     * To simplify the construction, we build them individually, innermost first,
     * and pass each into it's parent.
     *
     * @return string 					Banner
     */
    public function banner () {

        // Build the H! tag as $title
        $title = Php2Html::h ([
            'size' => '1',
            'class' => 'title',
            'content' => 'Main Template',
        ]); // $title

        // Build the inner container as $inner_container, passing in $title as the content
        $inner_container = Php2Bs::bs_container ([
            'content' => $title
        ]); // $inner_container

        // Echo out the outer container, passing in $inner_container as the content and include some formatting
        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'class' => 'bg-info text-light pb-2',
            'content' => $inner_container
        ]); // container

    } // banner()

	/**
	 * Show the actual page content
	 *
	 * We show the actual content of the page using a pre-defined layout that has
     * either been set when calling the template from the view or as a default.
	 *
	 * This function returns the entire content, aside from the wrapper created with
     * the base file this extends and the content is built before being passed into a
     * 'bs_container' function from the Php2Bs (Bootstrap) class to create the entire
     * content area.
	 *
	 * @return     string  	   Page content
	 */
    private function content () {

        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $args['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $args['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title) {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);

            /*
                If a subtitle has been set, add it to $title as a paragraph
                using the p() function in the Php2Html class with a class of 'lead-description'.
             */
            if($this->page_subtitle) {
                $title .=  Php2Html::p([
                    'class' => 'lead description',
                    'content' => $this->page_subtitle
                ]);
            }

            /*
                Now $title will contain everything required in the page_title
                div so we add it to $content using the div() function in the
                Php2Html class.
             */

             $this->content = Php2Bs::bs_column ([
                 'content' => Php2Html::h([
                     'class' => 'col-12',
                     'size' => '4',
                     'content' => $title
                 ]).breadcrumbs().$this->content
             ]);
        } // $this->page_title

        /*
            Now we just need to call the function that builds the page content, including all columns that may have been requested. The content could be called into one of several different layouts. The reason for this is you may want a slightly different layout for certain content such as some pages having a content specific sidebar.We do this by simply passing the layout() function into a Bootstrap container function.

            layout() will generate the required columns, which will have already been populated with the $this->content variable created in the construct and any data that is specified in the indicidual column functions.
         */
        echo Php2Bs::bs_container ([
            'content' => $this->layout()
        ]); // container

    } // content()

    /**
     * Set the correct layout
     *
     * Each of the different available layouts are created using the 'bs_row'
     * and 'bs_column' functions from the Php2Bs (Bootstrap) class.
     *
     * The required layout is set to $this->layout in the __construct of
     * this file. If it has been passed in from the view as $args['layout']
     * that is what it will be set to, otherwise it will be set to 'default'.
     *
     * We run a switch on $this->layout and return a row (bs_row). As well
     * as setting any attributes, such as id's and classes, we pass in a
     * parameter called 'content'. This will be be any number of functions
     * that create columns using specific functions.
     *
     * The columns themselves could have multiple functions included and
     * these are explained at the start of the columns functions below. Note
     * that any classes applied to the rows will be inherited by the
     * columns unless they have overriding classes.
     *
     * To add a new layout, create a new case in the switch statement,
     * matching the format of the existing ones and create any new columns
     * that are required.
     *
     * @return  string  Page Layout
     */
    protected function layout () {

        switch ($this->layout) {
            /*
                Full Width

                This is a single column layout using the main_column_full()
                function, with an id of main_content and a class of bg-light
             */
            case 'full-width':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_full (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Left column

                This is a two column layout using the left_Column () and
                main_column() functions concatenated, with an id of main_content and a class of bg-dark text-info
             */
            case 'left-col':
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                    'class' => 'bg-dark text-info',
                ]);
            break;

            /*
                Right column

                This is a two column layout using the main_column() and
                right_Column () functions concatenated, with an id of main_content and a class of text-danger
            */
            case 'right-col':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_medium ()
								.self::right_Column (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Three column

                This is a three column layout using the left_Column (),
                main_column() and right_Column () functions concatenated,
                with an id of multi_column.
            */
            case 'three-col':
                return Php2Bs::bs_row ([
                	'content' => self::left_Column ()
								.self::main_column_small ()
								.self::right_Column (),
                	'id' => 'multi_column',
                ]);
            break;

            /*
                Test layout

                This is here as a simple way of testing new things or
                playing around with layouts and contains a few more attributes.
            */
            case 'test':
                return Php2Bs::bs_row ([
					'content' => self::main_column_full (),
                    'class' => 'bg-info',
                    'id' => 'main_content',
                    'data_attr' => [
                        'ref' => 'refdata',
                        'cat' => 'news'
                    ]
                ]);
            break;

            /*
                Default layout

                If no layout has been specified in the view, we default to
                the left column one.
            */
            default:
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                ]);
            break;
        } // Layout switch
    }

    /**
     * Layout column functions
     *
     * These are the functions that are called in to the rows created in
     * layout() and are all created using the 'bs_column' function
     * from the Php2Bs (Bootstrap) class.
     *
     * As when creating the rows we can set any attributes, such as id's and
     * classes, with the actual required output being passed as 'content'.
     *
     */

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {
        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9'
        ]);
    } // main_column_medium ()

    /*
        Full Main Column

        Used in the 'full-width' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with at all breakpoints.
     */
    private function main_column_full () {
        return $this->content;
    } // main_column_full ()

    /*
        Small Main Column

        Used in the 'three-col' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        However, this time we also concatenate the function demo_extra_box() to give extra content to the column.

        Using the Bootstrap grid sizes it is full with, changing to 6/12
        width at the medium breakpoint.
     */
	private function main_column_small () {
        return Php2Bs::bs_column ([
			'content' => $this->content
						.$this->demo_extra_box (),
			'id' => 'main_small_column',
			'class' => 'col-md-6'
        ]);

    } // main_column_small ()

	/*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.

        TODO: Put something more useful in here
     */
    private function left_Column () {
        return Php2Bs::bs_column ([
			'content' => 'Left Hand Box',
			'id' => 'left',
			'class' => 'col-12 col-md-3 left-col bg-warning pt-2'
        ]);
    } // left_Column ()

    /*
        Left Column

        Used in the 'default', 'right-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        side_menu () and user_box () functions (the same as we did in left_column () but in a different order. Also, in this one we concatenate them into a variable first, rather than straight into the bs_column function.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.

        TODO: Check if this content is required and tidy up
     */
	private function right_Column () {

        return Php2Bs::bs_column ([
			'content' => $this->{$this->sidebar}(),
			'id' => 'right',
			'class' => 'col-12 col-md-3 right-col bg-info pt-2 mt-4 mt-md-0'
        ]);
    } // right_Column ()

    private function calls_sidebar() {
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Call Log Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Call',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/CallLog/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Today',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Today'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Week',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Week'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Month',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Month'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Year',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Year'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    private function ideas_sidebar() {
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Ideas Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Idea',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/Ideas/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/Ideas/'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    private function faults_sidebar() {
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Faults Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Fault',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/Faults/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Today',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Today'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Week',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Week'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Month',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Month'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Year',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Year'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    private function default_sidebar() {
        $model = new M_Users();
        $latestuser = $model->mostRecent();
        $latest_user_date = new DateTime($latestuser->joined);

        $n = $latestuser->username;
        $d = $latest_user_date->format('d/m/Y g:ia');
        $userbox_content = Php2Html::p ([
            'content' => 'Total : '.$model->count(),
        ]);
        $userbox_content .= Php2Html::p ([
            'content' => "Most recent <br> $n joined<br>$d",
        ]);

        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Members'
            ),
            'body' => array (
                'content' => $userbox_content,
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    /*
        Demo Box

        This is purely to show how extra content can be tacked on to any of the columns. It is only used in main_column_small(), which is the content area on the 'three-col' version.
    */
    private function demo_extra_box () {

        return Php2Bs::bs_alert([
            'heading' => 'Alert Example',
            'content' => Php2Html::p([
                'content' => 'Stuff can go here.'
            ]),
            'dismissible' => false,
            'color' => 'warning',
        ]);
    } // demo_extra_box ()

}





































<?php

/**
 * Home Page View
 *
 * This only controls the view from the home page of the site.
 *
 * No formatting is carried out anywhere and all that is passed in is an
 * array. The entire layout is styled within this file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	/app/controllers/home.php->index()
 * @link 		http://site.com/
 *
 */

 /**
  * Collect the passed in data and turn it into an object
  * @var array
  */
$data = (object)$data;

# Uncomment the below to see any data passed in or any $_POST data
// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');

/**
 * Set the parameters for the page
 *
 * As well as the content to display, there are some other parameters that
 * the call to the template also accepts. These are stored in an array called
 * $params and can either be set within this file, or passed in from the
 * controller.
 *
 * This example file contains all available parameters to give an explanation
 * of what can be used an how to use it, some of which are set within this file,
 * some of which are passed from the controller.
 */

/*
    Set the page version.

    The default template system provides several different layouts that can be
    used, within a standard wrapper.

    The layouts can be edited and new ones added in the layout_switcher() function
    in the called template file and the demos ones are
    'full-width' - single column layout
    'left-col'  - two column layout with left sidebar and content to the right
    'right-col' - two column layout with right sidebar and content to the left
    'three-col' - three column layout with both sidebars and content in the middle
    'test' - a playground for testing styles.

    This parameter can be ommitted and if so, the layout will default to the
    default case within the switch statement in layout_switcher().

    In this demo, the layout is set within this file, but can be passed in from
    the controller.
 */
$params['layout'] = 'full-width';

/*
    Set the page title and subtitle.

    To set the page title, which will be shown at the top of the page and also part of the <title> in <head> set it to $params['page_title'].

    In this demo, we are sending the title from the controller as
    'page_name' but have set it to only populate $params['page_title'] if
    it has been passed in. You can set it manually in this file.

    This parameter can be ommitted and if so, no title or subtitle will
    show and the <title> in <head> will not include anything and default
    to whatever is set as the $title variable in the head() function in
    the Base template.

    To set a subtitle for the page set a $params['page_subtitle']. This
    works in exactly the same way as the page title other than it does not
    affect the  <title> in <head> and will not show if a page title is not
    set. Again, for this demo, we are assuming it to be from the controller, this time as 'page_subtitle', and leave it empty if it does not exist.

 */
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;

/*
    Override meta tags

    You can override any of the default meta tags stored in the meta_tags()
    function in /app/core/Settings.php by including them in via $params['meta'].

    You can override as many as needed and simply created a key/value pair for
    each one that you want to override.

    It would be recommended to set this in the $data passed to this page from
    the controller, espcially if this view is being used for multiple page
    types and content.

    If you do not need to override any, you can omit the variable completely.
 */
$params['meta'] = ['description' => 'Description set in page'];

/*
    Add page specific css

    You can any page specific stylesheets stored called from the css() function in /app/core/Settings.php by including them in via $params['css'].

    These are set in a multidimensional array and return the full stylesheet link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4_beta' would return the string at
    'remote' => 'bootstrap' => 'v4_beta'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['css'] = [
    'remote/simple-line-icons',
    #'path/to/css2',
    #'path/to/css3'
];

/*
    Add page specific js

    You can any page specific stylesheets stored called from the js() function in /app/core/Settings.php by including them in via $params['js'].

    These are set in a multidimensional array and return the full script link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4_beta' would return the string at
    'remote' => 'bootstrap' => 'v4_beta'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['js'] = [
    'remote/jquery_ui',
    #'path/to/js2',
    #'path/to/js3'
];

$params['hide_banner'] = true;
$params['body_class'] = 'bg-dark text-light';
/**
 * Start the output string that will be passed to the template
 * @var string
 */
 $content = '';
 $content .= '<h4>Holding area for all the new stuff!</h4>';
 $content .= '<p>As we are currently in the process of moving everything across to a new system, as well as adding the new features, we have had to create an interim area.</p>';
 $content .= '<p>Currently, for most script generation, you would use the Original Selenium folders as usual. For Pet, you can use the new, faster method in the interim site. Anything else will be going in the new hub site..</p>';
 $content .= '<div class="card mb-3 border-primary text-dark">';
 $content .= '    <h4 class="card-header bg-primary text-light">';
 $content .= '    Links';
 $content .= '    </h4>';
 $content .= '  <div class="card-body">';
 $content .= '  <b>Original Selenium Folders</b><br>';
 $content .= '    <a href="http://10.60.151.86/current/Selenium" target="_blank">Current</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/regression/Selenium" target="_blank">Regression</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting1/Selenium" target="_blank">Scripting 1</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting2/Selenium" target="_blank">Scripting 2</a>' ;

 $content .= '  <br><br><b>Interim site</b><br>';
 $content .= '    <a href="/dev/Selenium" target="_blank">Home Page</a>' ;

 $content .= '  <br><br><b>New Hub site</b><br>';
 $content .= '    <a href="/Selenium" target="_blank">Home Page</a>' ;
 $content .= '   | ';
 $content .= '    <a href="/Admin" target="_blank">Admin</a>' ;
 $content .= '  <br><br><b>Other Links</b><br>';
 $content .= '    <a href="http://10.60.151.86/phpmyadmin" target="_blank">Database</a>' ;

 $content .= '  <br><br><b>File Locations</b>';
 $content .= '    <br>WebOpts MVT list - \\\\ZEUS\\Ecommerce\\Webopt MVT folder\\Agendas\\' ;
 $content .= '    <br>Firefox 54.0.1 Installation - \\\\10.60.151.86\\files\\Firefox Installs\\' ;

 $content .= '  <br><br><b>Known Issues</b>';
 $content .= '  <br>Remember me function causes count() on boolean error in M_Users line 991(ish)' ;
 $content .= '  <br>Main template edit link goes to /Members/ instead of /Users/' ;

 $content .= '  </div>';
 $content .= '</div>';



/**
 * Pass the details to the template
 *
 * @var string 	Data to be shown
 * @var string 	Version on template to use
 * @var string 	Title of the page
 */
$template = new T_Main ($content,$params);



















<?php

/**
 * Faults View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/home/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Faults/
 *
 */

$data = (object)$data;
$model = new M_Ideas();
$params['layout'] = 'right-col';
//Set the parameters for the page
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['meta'] = ['description' => 'Description set in page'];
$params['js'] = [
    'remote/ckeditor',
    #'path/to/js2',
    #'path/to/js3'
];
$params['sidebar'] = 'ideas';
$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

# Show the required data based on passed in page type



# TODO Better overview page

if($data->page_type == 'add') {

    if(isset($data->form)) {
        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-secondary mb-1',
            'body' => [
                'class' => 'bg-light',
                'content' => $data->form,
            ],
        ]);// bs_card
    }


}

if($data->page_type == 'view') {
    $title = $data->record->title;
    $user = new M_Users();
    $user->find($data->record->created_by);
    $date = new DateTime($data->record->created_date);

    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1 ',
        'header' => array (
            'content' => $title,
            'class' => 'font-weight-bold'
        ),
        'body' => array (
            'content' => $data->record->details,
            'class' => 'p-2',
        ),
        'footer' => array (
            'content' => 'Posted by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
            'class' => 'font-italic font-weight-bold bg-secondary text-light p-2'
        ),
    ]);// bs_card


    if(isset($data->comments)) {
        $content .= Php2Html::h([
            'size'=> '4',
            'content' => 'Comments'
        ]);
        foreach ($data->comments as $key => $value) {

            $user = new M_Users();
            $user->find($value->created_by);
            $date = new DateTime($value->created_date);
            $content .= Php2Bs::bs_card ([
                'class' => 'border-primary bg-light mb-1 ',
                'body' => array (
                    'content' => $value->details.'<hr>'.$user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
                    'class' => 'p-2',
                ),

            ]);// bs_card
        }
    }

    $content .= $data->comment_form;

}

if($data->page_type == 'overview') {

    $list = '';

    foreach ($data->list as $key => $value) {

        $date = new DateTime($value->created_date);
        $user = new M_Users();
        $user->find($value->created_by);
        if($value->category == '-1') {
            $cat_name = 'Other';
        } else {
            $model->findCats($value->category);

            $cat_name = $model->data()->category_name;
        }

        switch ($value->status) {
            case 'o':
                $status = 'Open';
                break;
            case 'c':
                $status = 'Closed';
                break;
            case 'i':
                $status = 'In Progress';
                break;
            default:
                # code...
                break;
        }


        $show_category = Php2Html::i(['content' => '', 'class' => 'far fa-folder-open mr-2']).
        Php2Html::span(['content' => $cat_name, 'class' => 'border-secondary border-right mr-2 pr-2']);

        $show_status = Php2Html::i(['content' => '', 'class' => 'fas fa-battery-half mx-2']).
        Php2Html::span(['content' => $status, 'class' => 'border-secondary border-right mr-2 pr-2']);

        $show_comments = Php2Html::i(['content' => '', 'class' => 'fas fa-comments mx-2']).
        Php2Html::span(['content' => count($model->listingComments($value->id))]);

        $details_row = Php2Bs::bs_column ([
            'content' => $value->details,
            'class' => 'text-truncate',
            'style' => 'height:20px;'
        ]).
        '<hr>'.
        $show_category.
        $show_status.
        $show_comments.
        Php2Html::a(['class'=>'float-right','content' => 'View', 'href'=>'/Ideas/Details/'.$value->id]);


        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => Php2Html::a(['content' => $value->title, 'href'=>'/Ideas/Details/'.$value->id]),
                'class' => 'font-weight-bold'
            ),
            'body' => array (
                'content' => $details_row,
                'class' => 'p-2',
            ),
            'footer' => array (
                'content' => 'Posted by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
                'class' => 'font-italic font-weight-bold bg-secondary text-light p-2'
            ),
        ]);// bs_card
    }


} // $data->page_type == 'overview'


// Pass the details to the template
$template = new T_Main ($content,$params);
?>




