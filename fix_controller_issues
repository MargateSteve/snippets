<?php

/**
 * Admin Usergroups Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Admin/Usergroups.
 *
 * Only contains one function, index(), which powers two different pages.
 *
 * If a parameter has been passed in the URL, we assume to be on the edit
 * page for a group, with that parameter presumed to be a slugified version
 * of the group name. This page will contain both edit and delete forms.
 *
 * If no parameter has been passed, we default to the Usergroup overview page
 * containing the form to add a new group and a list of existing groups.
 *
 * An explanation of how controllers work and how we pass the information to
 * the view can be found in app/controllers/Admin/home.
 *
 * @package     Core
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Admin/Usergroups
 * @link 	http://yoursite/Admin/Usergroups/{Groupname}
 */
class Usergroups extends Controller
{
    // Set the access rights for the variables, including any defaults
    private $_base_model,
            $_logs;

    // Construct the class
	public function __construct () {
		$this->_base_model = $this->model('M_Usergroups');
        $this->_logs = new Logs();
	} // __construct ()


    /**
	 * Admin Usergroups View
	 *
	 * This is the only view on the page so if a parameter has been passed
	 * in the URL, we assume to be on the edit page, otherwise we are on
	 * the overview page.
	 *
	 * @param  id/string   $group  Group ID or sluified name
	 * @return 	   /app/views/home/admin/groups.php
     * @example 	http://yoursite/Admin/Usergroups
     * @example 	http://yoursite/Admin/Usergroups/{Group}
	 *
	 */
  	public function index($group=null) {
        // Set the default view data.
        $view_data = [
            'page_name' => $this->_base_model->_plural_name,
            'page_type' => 'overview',
        ];

        /*
            Check if the group has been passed in

            If a group has been passed in, we have two options. If the group
            actually exists, we need to show the edit form, otherwise we need to
            show a message that the group does not exist.

            If a group has not been passed in, we assume that we are on the user
            group overview page so show the add for and a listing of existing
            groups.

            The processes follow the same as Users->edit() and Users->delete()
            so check those for extra commenting.
         */
        if($group) {
            // There is a group parameter so amend and add view data.
			$view_data = [
                'page_name' => 'Edit ' . $this->_base_model->_single_name,
				'page_type' => 'edit',
			];

            // Check to see if the group exists
            if($this->_base_model->find($group)) {
                $group_data = $this->_base_model->data();

                if (Input::exists(['name'=>'delete_usergroup'])) {

                    if($this->_base_model->delete($group_data->{$this->_base_model->_id_column}, $group_data->{$this->_base_model->_display_column})) {
                        $this->_base_model->userAlerts([
                            'msg' => 'delete_success'
                        ]);
                    }
                } else {
                    $view_data['delete_form'] =  $this->_base_model->deleteForm();

                    $view_data['form'] =  $this->_base_model->defaultForm([
                        'version'=>'edit',
                        'data'=> objectToArray($this->_base_model->data())
                    ]);
                } // Delete form




                $view_data['page_name'] .= ' - ' . $this->_base_model->data()->{$this->_base_model->_display_column};




                /*
                    The group exists so we append the page name so it also includes
                    the name of the usergroup. We also add both the edit and delete
                    forms to the $view_data, passing the data from the specified
                    group to the edit one.
                 */

            /*
                The group exists so we append the page name so it also includes
                the name of the usergroup. We also add both the edit and delete
                forms to the $view_data, passing the data from the specified
                group to the edit one.
             */










                /*
                    We now need to check if either the update or delete forms
                    have been posted.

                    If they have, we run any required validation and attempt
                    to process them.
                 */
                 if (Input::exists(['name'=>'update_'.strtolower($this->_base_model->_single_name)])) {
                     unset($_POST['update_'.strtolower($this->_base_model->_single_name)]);

                     $post_data = stripPostData (
                         $_POST,
                         $this->_base_model->data()
                     );

                     if($post_data) {
                         $validation = $this->_base_model->validate($post_data, $type='update', $this->_base_model->data()->id);

                         if ($validation->passed()) {
                             // Validation passed so attempt the update
                             if($this->_base_model->update(
                                 $this->_base_model->data(), $post_data)
                             ) {
                                 $this->_base_model->userAlerts([
                                     'msg' => 'update_success',
                                 ]);

                                 // The update was successful, so see if 'group_name' has changed
                                 if(isset($post_data[$this->_base_model->_display_column]) && $this->_base_model->data()->group_name !== $post_data[$this->_base_model->_display_column]) {
                                     Redirect::to('/Admin/'.$this->_base_model->_admin_dir.'/'.slugify($post_data[$this->_base_model->_display_column]));
                                 }

                                 // Re-find the group to pass updated details to the view
                                 $this->_base_model->find($this->_base_model->data()->id);

                             } else {
                                 // Update failed
                                 $this->_base_model->userAlerts([
                                     'msg' => 'update_fail',
                                     'errors' => ['unspecified', '']
                                 ]);
                             } // attempt update
                         } else {
                             // Validation failed so send the message and errors
                             $this->_base_model->userAlerts([
                                 'msg' => 'update_fail',
                                 'errors' => $validation->errors()
                             ]);
                         } // check validation
                     } else {
                          // No data had changed so just set the status
                          // TODO: Work out a better way to deal with empty posts
                          $this->_base_model->userAlerts([
                              'msg' => 'no_change'
                          ]);
                        ## Logs::update_table_no_change([
                        ##      'record' =>  $this->_base_model->data()->id,
                        ##      'target' => $this->_base_model->_db_table
                        ##  ]);

                     } // data changed
                 } // update form posted

                /*
                    Now we move onto a delete request.

                    This is far simpler than the update one as we do not perform
                    any checks or validation. We already have the info we need to
                    delete the record so we simply attempt it and set a 'status'.
                 */


            } else {
                /*
                    The group was not found so we assume it is an incorrect
                    parameter. We set 'form' to null as we have nothing to edit
                    and set the 'status'.
                 */
                $view_data['form'] = null;
                $view_data['message'] = $this->_base_model->messages('admin_not_found');
            }
        } else {
            $errors = null;
            $view_data['form'] =  $this->_base_model->defaultForm([
                'errors' => $errors,
                'version'=> 'create'
            ]);
            /*
                There is no group parameter so we default to the overview version of the page showing the add form and the listing.

                First we check to see if the add form has been
                posted.
             */
            if (Input::exists(['name'=>'add_usergroup'])) {
                // Update form posted so unset the submit button from $_POST
                unset($_POST['add_usergroup']);

                    /*
                        We now create a variable called $_postdata and set $_POST to it to preserve the original data in case we need it again.

                        We also run another function to unset unrequired validation rules to avoid them firing on unset fields.
                     */
                    $_postdata = $_POST;

                    $_rules = stripValidateRules (
                        $_postdata,
                        $this->_base_model->validation_rules()
                    );

                    // Open a new instance of the validation class
                    $validate = new Validate();

                    /*
                        Check the posted data against the validation
                        rules using the check () function from the
                        Validate () class.
                        If successful, the $validation->passed()
                        function will return true.
                     */
                    $validation = $validate->check(
                        $_postdata,
                        $_rules
                    );

                    /*
                        If validation has passed, we attempt to create a new record
                        using the create () function in the model.
                     */
                    if ($validation->passed()) {
                        // Validation passed so attempt the update
                        if($this->_base_model->create($_postdata)) {
                            // The create was successful
                            $view_data['message'] = $this->_base_model->messages('create_success');
                            $view_data['insert_id'] = $this->_base_model->_insertId;

                            $this->_logs->insert_table_success([
                                'record' => $_params['insert_id'],
                                'area' => 'f',
                                'target' => 'user_groups'
                            ]);
                        } else {
                            $view_data['message'] = $this->_base_model->messages('create_fail');
                        }
                    } else {
                        // The validation failed so set the status and errors
                        $view_data['message'] = $this->_base_model->messages('create_fail');
                        $view_data['errors'] = $validation->errors();
                        $this->_logs->insert_table_fail(
                            ['target' => 'user_groups', 'area' => 'a'],
                            $view_data['errors'],
                            $_postdata
                        );
                    }

            }
            // Include the listing of records using listing() in the model.
            $view_data['listing'] = $this->_base_model->listing ();
        }  // Category exists?

		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view('admin/usergroups', $view_data);
  	} // index()
}




==================================================================================================================================










<?php

/**
 * Usergroups Model
 *
 * This is the default model for any data relating to usergroups and contains the
 * standard functions for data manipulation, insertion, deletion retrieval and
 * displays.
 *
 * A full explanation of how models and their functions work can be found in the
 * same function within '/models/M_Users.php' so commenting in this file is
 * minimised.
 *
 * Any functionality that us different from M_Users is, however, fully explained
 * or there is a reference to where a full explanation can be found.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once '/src/init.php';


class M_Usergroups
{
    /*
        Set the access rights for the variables, including any defaults

        See '/models/M_Users.php' for more information
     */
    private $_admin_area,
            $_data,
            $_db,
            $_logs,
            $_model_name = 'M_Usergroups';

    public  $_admin_dir = 'Usergroups',
            $_insertId,
            $_db_table = 'user_groups',
            $_display_column = 'group_name',
            $_id_column = 'usergroup_id',
            $_single_name = 'Usergroup',
            $_plural_name = 'Usergroups';


    /**
     * Construct the class
     * See '/models/M_Users.php'
     */
    public function __construct() {
        $this->_db = DB::dbConnect();
        $this->_logs = new Logs();
        $this->_admin_area = (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? true : false;
    } //__construct ()

    //////////////////////////////
    // Standard class functions //
    //////////////////////////////

    /**
     * Get the total number of records
     * See '/models/M_Users.php'
     * @return int 	    Count of rows
     */
    public function count() {
        return $this->_db->query('SELECT * FROM '.$this->_db_table)->count();
    } // count()

    /**
     * Create a new record
     * See '/models/M_Users.php' - the only difference here is that we, obviously,
     * do not need to create the hashed password and salt as that is only for
     * users.
     *
     * Also, as we are outside the users model, we have to open that to a
     * variable to be able to access the currentUser() function as we cannot
     * access it with $this->.
     *
     * @param  array  $post_data    Form $_POST data
     * @return boolean              Success status
     */
    public function create ($post_data) {
        $user = new M_Users();
        $post_data['user'] = $user->currentUser();
        $post_data['created'] = date('Y-m-d H:i:s');

		if (!$this->_db->insert($this->_db_table, $post_data)){
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with '.$this->_model_name.'->create()';
            }
            Logs::insert_table_fail([
                'target' => $this->_db_table,
                'errors' => ['unspecified'=>null],
            ]);
            return false;
		}

        $this->_insertId = $this->_db->insertId();
        Logs::insert_table_success([
            'record' => $this->_insertId,
            'target' => $this->_db_table
        ]);
		return true;
	} // create()

    /**
     * Return a records data
     * See '/models/M_Users.php'
     * @return array 	Record data
     *
     */
    public function data () {
        return $this->_data;
    } // data ()

    /**
     * Add / Edit form
     * See '/models/M_Users.php'
     * @param  array    $params    Version, record, area and error details
     * @return string               Usergroup create/edit form
     */
    public function defaultForm($params=null) {
        $field_data = [];
        $form_fields = [
            'group_name', 'permissions'
        ];

        $version = (isset($params['version']) && $params['version'] == 'edit') ? 'edit' : 'create';

        if($version == 'create') {
            $button_text = 'Add';
            $button_name = 'add_'.strtolower($this->_single_name);
        } else {
            $button_text = 'Update';
            $button_name = 'update_'.strtolower($this->_single_name);
            array_push($form_fields, 'created');
        }

        foreach ($form_fields as $value) {
            // Check for errors
            if (isset($params['errors'][$value])) {
                // Errors found for the field so add invalid class
                $field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            } // if isset($params['errors'][$value])

            // Check for posted data if an account update has been attempted
            if (Input::exists(['name'=>'update_'.strtolower($this->_single_name)]) && Input::exists($value) && trim(Input::get($value)) !== false) {

                // There is posted data so set that as the value
                $field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($params['data'][$value])) {
                    // There is a record passed in so set that as the value
                    $field_data[$value]['val'] = $params['data'][$value];
                } else {
                    // There is no record passed in so set the value as blank
                    $field_data[$value]['val'] = '';
                } // if isset($params['data'])
            } // if (Input::exists($value))
        } // foreach($form_fields)

        /*
            With user groups, the 'permissions' column has a specific format
            that must be used for the json lookup to work. If there is no
            value (either posted or existing) for it, we add the template.
         */
        if(!$field_data['permissions']['val']) {
            $field_data['permissions']['val'] = '{"god": 0, "admin": 0, "mod": 0}';
        }

        $content = '';
        // Group name form group
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => Php2Html::label ([
                    'for' => 'GroupName',
                    'content' => 'Group Name',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'class' => '',
                    'type' => 'text',
                    'id' => 'GroupName',
                    'value' => $field_data['group_name']['val'],
                    'name' => 'group_name',
                    'placeholder' => 'Add Group Name',
                    'aria' => [
                        'label' => 'Group Name',
                    ],
                ]) // Php2Bs::bs_input_text
            ])// Php2Bs::bs_form_group
        ]); // Group name row

        // Permissions form row
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => Php2Html::label ([
                    'for' => 'Permissions',
                    'content' => 'Permissions',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_textarea ([
                    'class' => '',
                    'type' => 'text',
                    'id' => 'Permissions',
                    'content' => $field_data['permissions']['val'],
                    'name' => 'permissions',
                    'placeholder' => 'Add Permissions',
                    'aria' => [
                        'label' => 'Permissions',
                    ],
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
        ]); // Permissions row

        // If in edit mode and admin area show the field to edit the created date.
        if($version == 'edit' && $this->_admin_area) {
            $content .= Php2Bs::bs_form_row ([
                'content' =>
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-12',
                    'content' => Php2Html::label ([
                        'for' => 'Created',
                        'content' => 'Created',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .Php2Bs::bs_input_text ([
                        'class' => '',
                        'type' => 'text',
                        'id' => 'Created',
                        'value' => $field_data['created']['val'],
                        'name' => 'created',
                        'placeholder' => 'Add Created Date',
                        'aria' => [
                            'label' => 'Created',
                        ],
                    ]) // Php2Bs::bs_input_text
                ])// Php2Bs::bs_form_group
            ]); // Created row
        }
        // Add the button form group
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-12',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => 'float-right',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' => $button_text,
                    'name' => $button_name
                ]) // Php2Bs::bs_button
            ]) // Php2Bs::bs_form_group
        ]); // Button row

        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]); //  Php2Html::form
    } // defaultForm()
    /**
     * Delete a record
     * See '/models/M_Users.php'
     * @param  int      $record    Record id
     * @param  string   $name      Display name of the record
     * @return boolean              Success status
     */
    public function delete ($record, $name) {
    	if(!$this->_db->delete($this->_db_table, array($this->_id_column, '=', $record))) {
            // The insert was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with '.$this->_model_name.'->delete()';
            }
		    return false;
    	}
        ## Logs::delete_table_success([
        ##     'record' => $record,
        ##     'name' => $name,
        ##     'target' => $this->_db_table
        ## ]);
        return true;
	} // delete()

    /**
     * Delete form
     * See '/models/M_Users.php'
     * @return string               Usergroup delete form
     */
    public function deleteForm () {
        // Compile the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => Php2Bs::bs_form_row ([
                'content' => Php2Bs::bs_form_group ([
                    'class' => '',
                    'content' => Php2Bs::bs_button ([
                        'button_type' => 'submit',
                        'color' => 'danger',
                        'size' => 'sm',
                        'class' => 'float-right',
                        'content' => 'Delete',
                        'name' => 'delete_'.strtolower($this->_single_name)
                    ])
                ]),
            ])
        ]); //  Php2Html::form
    } // deleteForm

    /**
     * Find a record
     * See '/models/M_Users.php'
     *
     * The only difference here is that if the record is not numeric it can only
     * be the $_display_column set as a variable at the top of this class (in
     * this case 'group_name'). Also, as this will be passed into the url with
     * underscores replacing any spaces, we run the slugify() function from the
     * 'slugify_string.php' function file to re-instate the spaces.
     *
     * @param  string/email/int 	$record  	Group identifier
     * @return Boolean/Array
     */
    public function find($record=null) {
        if ($record) {
            if(is_numeric($record) && (int) $record == $record) {
                $field = $this->_id_column;
            } else {
                /*
                    If not numeric, it must be the 'group_name' field that is stored as $_display_column.

                    We also amend the value of $record to replace any
                    underscores that were added before showing it in the url.
                 */
                $field = $this->_display_column;
                $record = slugify ($record, $direction = 'reverse');
            }
            $this->_db->get($this->_db_table, array($field, '=', $record));
            if ($this->_db->count()) {
                $this->_data = $this->_db->first();
                return true;
            }
        }
        return false;
    } // find ()

    /**
     * Return a list of activity logs
     * See '/models/M_Users.php'
     * @return array  List of Records
     */
    public function getLogs ($record=null) {
        return Logs::get_table ($this->_db_table, $record);
    }

    /**
     * Return a list of all recordsecords
     * See '/models/M_Users.php'
     * @return array  List of Records
     */
    public function listing () {
        $list = [];
        foreach ($this->_db->query('SELECT * FROM `' . $this->_db_table . '`')->results() as $key => $value) {
            $list[$value->{$this->_id_column}] = $value;
            unset($list[$value->{$this->_id_column}]->{$this->_id_column});
        }
        return $list;
    } // listing ()

    /**
     * Update a record
     * See '/models/M_Users.php'
     * @param  int      $record     User ID
     * @param  array    $post_data  $_POST data
     * @return bool                 Success status
     */
    public function update($record, $post_data) {
        $post_data['modified'] = date('Y-m-d H:i:s');
        if (!$this->_db->update($this->_db_table, $record->id, $post_data)) {
            // The update was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with '.$this->_model_name.'->update()';
            }

            Logs::update_table_fail([
                'record' => $record->id,
                'target' => $this->_db_table,
                'errors' => ['unspecified'=>null],
            ]);
            return false;
        }
        Logs::update_table_success([
            'record' => $record->id,
            'target' => $this->_db_table,
            'old' => objectToArray($record),
            'new' => $post_data
        ]);
        return true;
    } // update ()

    /**
     * Set messages to be displayed
     * See '/models/M_Users.php'
     * @param  string $msg  Optional key to retreive a single message
     * @return array        Either a single element or all
     */
	public function userAlerts ($params) {

        $admin_record_link = Php2Bs::bs_alert_link([
            'content' => 'View',
            'href'=>'/Admin/'.$this->_admin_dir.'/{{insert_id}}'
        ]).' in admin area';

        $admin_list_link = Php2Bs::bs_alert_link([
            'content' => 'View',
            'href'=>'/Admin/'.$this->_admin_dir
        ]).' the list or add a new one';


		// Use 'title' => false, for an alert with no title
	    $array = [
            'create_success' => [
				'title' => $this->_single_name.' created',
				'alert_color' => 'success',
				'content' => 'The '.
                    strtolower($this->_single_name).
                    ' has been created.'.
                    ($this->_admin_area) ? '<br>'.$admin_record_link :'',
			],
            'create_fail' => [
                'title' => $this->_single_name.' not created',
                'alert_color' => 'danger',
                'content' => 'Please correct the following errors...<br>{{errors}}',
			],
            'delete_success' => [
				'title' => $this->_single_name.' deleted',
				'alert_color' => 'success',
				'content' => 'The '. strtolower($this->_single_name).' has been deleted.'.
                ($this->_admin_area) ? '<br>'.$admin_list_link :'',
				'dismissible' => false,
			],
            'no_change' => [
				'title' => $this->_single_name.' not updated',
				'alert_color' => 'info',
				'content' => 'You did not change any data.'
			],
            'not_found' => [
				'title' => $this->_single_name.' not found',
                'alert_color' => 'warning',
				'content' => 'The '. strtolower($this->_single_name).' could not be found.'. ($this->_admin_area) ? $admin_list_link :'',
                'dismissible' => false,
			],
            'update_fail' => [
                'title' => $this->_single_name.' not updated',
                'alert_color' => 'danger',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],
			'update_success' => [
				'title' => $this->_single_name.' updated',
				'alert_color' => 'success',
				'content' => 'The '. strtolower($this->_single_name).' has been updated.'
			],
		];


        /*
            If a message key has been passed in, just return that element, otherwise return the whole array.
         */
        if(isset($params['msg'])) {
            Messages::userAlert($array[$params['msg']], $params);
        } else {
            return $array;
        }
	}

    /**
     * Validate posted data
     * See '/models/M_Users.php'
     * @param  array    $post_data  Form $_POST data
     * @param  string   $type       Whether we are updating or inserting. Insert is default.
     * @param  int      $record     Id of the record on updates
     * @return array                Status and errors
     */
    public function validate ($post_data, $type='insert', $record=null) {
        $rules = stripValidateRules (
            $post_data,
            $this->validation_rules()
        );

        $validate = new Validate();
        $check = $validate->check(
            $post_data,
            $rules
        );

        if(!$check->passed()) {
            if($type=='insert') {
                ## Logs::insert_table_fail([
                ##     'target' => $this->_db_table,
                ##     'errors' => $check->errors(),
                ##     'post' => $post_data
                ## ]);
            }

            if($type=='update') {
                ## Logs::update_table_fail([
                ##     'record' => $record,
                ##     'target' => $this->_db_table,
                ##     'errors' => $check->errors(),
                ##     'post' => $post_data
                ## ]);
            }

        }

        return $check;
    }

    /**
     * Set the validation rules
     * See '/models/M_Users.php'
     * @return array Validation rules
     */
	public function validation_rules() {
        return[
            'group_name' => [
                'required' => true,
                'unique' => $this->_db_table,
            ],
			'permissions' => [
                'required' => true,
            ],
        ];
    } // validation_rules()

}




================================================================================================================================







<?php

/**
 * Admin Usergroups View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/admin/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Usergroups
 * @example 	http://yoursite/Admin/Usergroups/{Usergroup Name Slug}
 *
 */

 nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');

//Set the parameters for the page
$params['layout'] = 'right-col';
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;

// Highlight the correct menu item
$params['menu_category'] = 'Users';

// As there is only one submenu item for Usergoups, we set that too
$params['menu_item'] = 'Usergroups';

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= Session::flash('userAlert');

/////////////////////////////////////////////////////////////////////////
// Show the relevant content based on the $data['page_type'] passed in //
/////////////////////////////////////////////////////////////////////////

/**
 * Edit page
 *
 * Shows the edit form for the specified usergroup, along with any validation
 * from previous form post attempts. This is all done in the controller and
 * the passed in $data['edit_form'] is ready to display.
 *
 * @link 	    http://yoursite/Admin/Usergroups/{Usergroup Name Slug}
 */
if($data['page_type'] == 'edit') {

    /*
        We will only have passed $data['form'] to the view if the page is
        being viewed by a logged in user, so we use that to check whether we need
        to show anything. If the user is not logged in, a messaage to that effect
        will have been passed trough and shown as an alert.

        If the user is logged in, we always need the forms, even after posting so
        just add them to the content inside cards.
     */
	if(isset($data['form'])) {

		// Add the form to the content in a card
		$content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update Usergroup'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['form'],
                'class' => '',
            ],
        ]);// bs_card edit form

		// Add the deleteform to the content in a card
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Delete Usergroup'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => Php2Html::p(['content'=>'This will delete the usergroup and cannot be undone.']).$data['delete_form'],
                'class' => '',
            ],
        ]);// bs_card delete form

    } // !isset($data->status) || $data->status !== 'admin_not_found'

} // $data->page_type == 'edit'

/**
 * Usergroup overview page
 *
 * Two sets of data get passsed into this view, a form to add a new
 * usergroup and a list of all usergroups.
 *
 * The list of usergroups will have been passed in via $data['listing']
 * but as it is still in the raw data stored in the database, we want to
 * change the group name to a link, before showing it in a table, via the
 * make_table() function in Php2Html.
 *
 * An explantion of this can be found in the '/app/views/admin/users.php'.
 *
 * @link 	    http://yoursite/Admin/Usergroups
 */
if($data['page_type'] == 'overview') {

	// Show the create form
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1',
        'body' => [
            'content' => $data['form'],
            'class' => '',

        ],
        'header' => [
            'content' => 'Add user group',
        ]
    ]);// bs_card create form

	// Show the listing
    if(isset($data['listing'])) {

		/*
		 	Loop through the list passed to the view and for each one,
			replacing the 'group_name' element with a link to that
			elements edit page.
		 */
        foreach ($data['listing'] as $key => $value) {

            $data['listing'][$key]->group_name = Php2Html::a ([
                'content' => $value->group_name,
                'href' => '/Admin/Usergroups/'.slugify($value->group_name)
            ]);

        }

        // Build the table
        $table = Php2Html::make_table ([
            'columns' => [
                'group_name' => [
                    'alias' => 'Name',
                    'th_class' => 'bg-dark text-light',
                    'global_class' => 'text-danger'
                ],
                'permissions' => [
                    'alias' => 'Permissions',
                    'th_class' => 'bg-dark text-light',
                ],
            ],
            // The listing is an object so convert it to an array
            'data' => objectToArray($data['listing']),
            'settings' => [
                'show_header' => true,
                //'border' =>'1',
                'class' =>'table mb-0'
            ]
        ]); // make table()


		// Add the table to the content inside a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1',
            'body' => [
                'content' => $table,
                'class' => 'p-0',
            ],
        ]);// bs_card table
    } // show listing

} // $data->page_type == 'overview'

// Pass the details to the template
new T_Admin ($content,$params);














=================================================================================================================================












<?php

/**
 * Settings Core Class
 *
 * This file either contains or provides access to all of the required
 * settings and variables throughout the site.
 *
 * There are two different methods of storing these settings.
 *
 * Any that are fairly static get stored in one of a number of specific
 * functions. With these if it is likely that you will need more than
 * one of the settings contained at one time (such as db() which
 * contains all of the database connection settings) you just call the
 * function cold and return all of the elements - $db = SiteSettings::db().
 * For those where you may only need one of the elements (such as the css()
 * or js() functions), you call the class with a path to the element -
 * $css = SiteSettings::css('remote/bootstrap/v4').
 *
 * Any settings that may frequently change are stored in the settings table
 * in the database and maintained via /Admin/Settings. There is a function
 * here to call any of these so to call the 'site_name' setting from the
 * database, you would use $name = SiteSettings::get('site_name').
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';

class SiteSettings
{
    /////////////////////////////
    // Locally stored settings //
    /////////////////////////////

    /**
     * Available CSS files
     *
     * Contains an array of all css files that can be used within the
     * site and allows you to pick a single one to return.
     *
     * To call a file, call the function and as the $path, drill down to
     * the required file using / as a seperator.
     *
     * SiteSettings::css('local/admin') will return
     * <link rel="stylesheet" href="/includes/css/admin.css">
     *
     * SiteSettings::css('remote/bootstrap/v4') will return
     * <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
     *
     * @param   string  $path   Array path to the required file
     * @return  string  The tag for the requested file
     */
    public static function css ($path) {
        $array = [
            // Locally Hosted
            'local' => [
                'site' => '<link rel="stylesheet" type="text/css"   href="/includes/css/site.css?v='.rand(1,100).'" />',
                'admin' => '<link rel="stylesheet" type="text/css"  href="/includes/css/admin.css">',
            ],
            // Remotely Hosted
            'remote' => [
                // Font Awesome 4.7
                'font-awesome' => '<script defer src="https://use.fontawesome.com/releases/v5.0.10/js/all.js" integrity="sha384-slN8GvtUJGnv6ca26v8EzVaR9DC58QEwsIk9q1QXdCU8Yu8ck/tL/5szYlBbqmS+" crossorigin="anonymous"></script>

',

                // Simple Line Icons
                'simple-line-icons' => '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/simple-line-icons/2.4.1/css/simple-line-icons.css" />',

                //Bootstrap - We have both versions 3 and 4 just in case 3 is still needed
                'bootstrap' => [
                    // Version 3.3.7
                    'v3' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">',

                    // Version 4 beta 3
                    'v4_beta' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy" crossorigin="anonymous">',

                    // Version 4 final
                    'v4' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">',

                ]
            ]
        ];

        // Return the array element specified by $path using set_path() from this file
        return self::set_path($array, $path);

    } // css ()

    /**
     * Return the current date and time
     *
     * Returns the current date and time as a DateTime object that you can
     * format and manipulate.
     *
     * @return  object  Current date and time
     */
    public static function current_datetime () {
        return new DateTime();
    } // current_datetime

    /**
     * Database settings
     *
     * Returns an array of the database connection settings as a
     * $key=>$value pairing where the key is the 'name' and the
     * value is the 'content'.
     *
     * @return  array   Database host, password, username and dbname
     */
    public static function db () {
        return [
            // The database host. Usually 'localhost' or '127.0.0.1'
            'host' => 'localhost',
            // The Username for the database
            'username' => 'root',
            // The Password for the database
            'password' => 'notyou',
            // The Name of the database
            'dbname' => 'hub',
        ];
    } // db()

    /**
     * Available JS files
     *
     * Contains an array of all js files that can be used within the
     * site and allows you to pick a single one to return.
     *
     * To call a file, call the function and as the $path, drill down to
     * the required file using / as a seperator.
     *
     * SiteSettings::css('local/default') will return
     * <script src="default.js"></script>
     *
     * SiteSettings::css('remote/font-awesome-5') will return
     * <script defer src="https://use.fontawesome.com/releases/v5.0.4/js/all.js"></script>
     *
     * @param   string  $path   Array path to the required file
     * @return  string  The tag for the requested file
     */
    public static function js ($path) {
        $array = [
            // Locally Hosted
            'local' => [
                'default' => '<script src="default.js"></script>',
            ],
            // Remotely Hosted
            'remote' => [
                // JQuery
                'jquery' => '<script src="https://code.jquery.com/jquery-3.1.1.js" integrity="sha256-16cdPddA6VdVInumRGo6IbivbERE8p7CQR3HzTBuELA=" crossorigin="anonymous"></script>',
                'jquery_ui' => '<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js" integrity="sha256-T0Vest3yCU7pafRw9r+settMBX6JkKN06dqBnpQ8d30=" crossorigin="anonymous"></script>',

                // Font Awesome 5.0.4
                'font-awesome-5' => '<script defer src="https://use.fontawesome.com/releases/v5.0.10/js/all.js" integrity="sha384-slN8GvtUJGnv6ca26v8EzVaR9DC58QEwsIk9q1QXdCU8Yu8ck/tL/5szYlBbqmS+" crossorigin="anonymous"></script>',

                //Bootstrap - We have both versions 3 and 4 just in case 3 is still needed
                'bootstrap' => [
                    // Version 3.3.7
                    'v3' => '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>',

                    // Version 4
                    'v4' => '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>',
                ],
                'popper' => '<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>',
                'ckeditor' => '<script src="https://cdn.ckeditor.com/4.8.0/standard/ckeditor.js"></script>'
            ]
        ];

        // Return the array element specified by $path using set_path() from this file
        return self::set_path($array, $path);

    } // js ()

    /**
     * Meta Tags
     *
     * Returns an array of meta tags as a $key=>$value pairing
     * where the key is the 'name' and the value is the 'content'.
     *
     * These get processed in a foreach loop in the head() function
     * in the base template (by default /app/core/Templates/Base.php).
     *
     * @return  array   Various meta tags
     */
    public static function meta_tags () {
        return [
            'description' => 'Enter a description',
            'author' => 'Your Name',
            'viewport' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
            'keyword' => 'Bootstrap,Admin,Template,PHP,MVC,Framework,jQuery,CSS,HTML,Dashboard'
        ];
    } // meta_tags ()


    /////////////////////////////////
    // Database settings functions //
    /////////////////////////////////

    /**
     * Retrieve settings stored in the database
     *
     * This function allows you to either retrieve all of the settings stored in
     * the settings table as an array or simply retrieve the value of a specified
     * one.
     *
     * To retrieve all simply call the function with no parameters. To retrieve
     * the value of a specific setting, pass the setting_name in the function.
     *
     * @param  string/null  $_key   The stored setting_name or null to return all
     * @return string/array          The value of the setting or an array of all settings
     */
    public static function get($_key=null){
        $db = DB::dbConnect();
        /*
            Check to see if a setting name has been specified
         */
        if ($_key) {
            // A setting name is specified so query the database for it
            $data = $db->dbConnect()->get('settings', array('setting_name', '=', $_key));
            // If there is a matching record, return just the 'value' column

            if ($db->count()) {
                return $db->first()->value;
            }
        } else {
            // No setting name is specified so query the database for all
            $data = DB::dbConnect()->query('SELECT * FROM `settings`');

            // As long as the table is not empty, return all of the results as an array
            if ($data->count()) {
                return $data->results();
            }
        }

        // If we have hit this point, there was nothing found in the query so return false
        return false;
    } // get ()


    ////////////////////
    // Misc functions //
    ////////////////////

    /**
     * Get a specified element from an array
     *
     * Looks through the specified array for the path that has been
     * set and returns the value if found.
     *
     * Paths are set using / as a separator for each element to
     * drill down through.
     *
     * @param   array     $array   The array to choose from
     * @param   string    $path    The path to the array element
     * @return  string    The value of the element
     */
    private static function set_path ($array, $path) {

        /*
            Explode the $path and re-set it to itself.

            Looks at the$ path and classes / as a separator. It explodes
            that data so we now have an array conatining an element
            for each part of the path.
         */
        $path = explode('/', $path);

        /*
            Set the first part of the $path array to a parameter called
            $result and then unset it.

            $reuslt now contains the first level key of the passed in
            array.
         */
        $result = $array[$path[0]];
        unset($path[0]);

        /*
            Loop through the remaining elements in path and for each,
            if they exist, build upon result.

            If the path was 'remote/bootstrap/v4', the process would be
            $result = $array['remote']
            $result = $array['remote']['bootstrap']
            $result = $array['remote']['bootstrap']['v4']
            with the final one being the one returned.
         */
        foreach ($path as $bit) {
            // Check to see if the key exists
            if(isset($result[$bit])) {
                // If the key does exist, replace $result with the new key
                $result = $result[$bit];
            }
        } // foreach $path

        // Return the value of the element
        return $result;
    } // set_path

}














=================================================================================================================================


















<?php

/**
 * Database class
 *
 * Controls all database CRUD functions as well as opening up an instance
 * of this class.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the inititisation file
require_once 'src/init.php';

class DB
{
	// Set any private variables
    private static $_instance = null,
                   $_instance_old = null,
                   $_instance_data = null;
    private $_pdo,
            $_query,
            $_error = false,
            $_results,
            $_count = 0;

	/**
	 * Construct the database connection
	 *
	 *	Opens up a connection to the database and assigns it to
	 *	$this->_pdo to make it re-usable.
	 *
	 * The connection parameters are called using the values set in
     * '/app/core/SiteSettings.php->db()'
	 *
	 * @return 	Database connection
	 */
    private function __construct($type='new') {

        $db = SiteSettings::db();

        if($type=='old') {$db['dbname'] = 'dev_scripting';}
        if($type=='data') {$db['dbname'] = 'selenium_data';}

        try {
            $this->_pdo = new PDO('mysql:host=' . $db['host'] . ';dbname=' . $db['dbname'],  $db['username'], $db['password']);

        } catch(PDOException $e) {
            die($e->getMessage());
        }
    } //__construct ()

	/**
	 * Create a new Database instance
	 *
	 * Creates a new instance of the database class that can be assigned to a
	 * variable and re-used.
	 *
	 * @return Database connection
	 * @example $this->db = DB::dbConnect();
	 */
    public static function dbConnect() {
		// If an instance has not already been set, set it
        if(!isset(self::$_instance)) {
            self::$_instance = new DB();
        }
		// Return the instance
        return self::$_instance;
    } // dbConnect()

    public static function dbConnect_dev() {
		// If an instance has not already been set, set it
        if(!isset(self::$_instance_old)) {
            self::$_instance_old = new DB($type='old');
        }
		// Return the instance
        return self::$_instance_old;
    } // dbConnect()


    public static function dbConnect_data() {
        // If an instance has not already been set, set it
        if(!isset(self::$_instance_data)) {
            self::$_instance_data = new DB($type='data');
        }
        // Return the instance
        return self::$_instance_data;
    } // dbConnect()

	/**
	 * Perform a query on an SQL statement
	 *
	 * All of the variables created are private so cannot be called
	 * externally, but each has it's own public function.
	 *
	 * If you are using parameters, you need to replace the position where
	 * their values would be with ?
	 *
	 * self::db()->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash));
	 *
	 * @param  string 	$sql    SQL statement
	 * @param  array  	$params Paremeters to add to the string
	 * @return array         	Query results, errors and count
	 */
    public function query ($sql, $params = array()) {
		// Set error to false by default
        $this->error = false;
		/*
			We attempt to prepare the query and if it is succesful,
			we bind the parameters and execute it.
		 */
        if ($this->_query = $this->_pdo->prepare($sql)) {
			/*
				The query is prepared so we have to check to see if
				there are any parameters.

				If there are we loop through them annd then bind them
				to the query
			 */

			// Set the counter to one
            $x = 1;

			// Check to see if there are any parameters
            if(count($params)) {
				/*
					There are parameters so we loop through them and
					bind each
				 */
                foreach($params as $param) {
					// Bind the parameter with it's counter position
                    $this->_query->bindValue($x, $param);

					// Increment the counter
                    $x++;
                }
            }

			/*
				Now that the parameters have been bound, we try to execute
				the query.
				If succesful we set the results and row count, otherwise we
				set the error.
			 */
            if($this->_query->execute()) {
				// The query executed succesfully so set the results and count
                $this->_results = $this->_query->fetchAll(PDO::FETCH_OBJ);
                $this->_count = $this->_query->rowCount();
            } else {
				// The query failed so set error to true
                $this->_error = true;
            }
        } // prepare

		// Return anything that has been set as a result of the wquery attempt
        return $this;

    } // query ()


	/**
	 * Perfom a simple action on a table
	 *
	 * Allows you to perform a quick SELECT or DELETE on a table when
	 * only one parameter needs to be set.
	 *
	 * @param  string $action SELECT/DELETE
	 * @param  string $table  The name of the table
	 * @param  array  $where  An array of parameters - field, operator, value
	 * @return array          The output from the query() function in this class
	 */
    public function action ($action, $table, $where = array()) {
		/*
			A $where array MUST contain exactly three paramenters for this to
			work so the first thing to do is check that.

		 */
        if (count($where) === 3) {
			// There are three parameters so set the available operators
            $operators = array('=', '>', '<', '>=', '<=');

			/*
				As the $where array is set as field, operator, value we can easily set them to named variables
			 */
            $field = $where[0];
            $operator = $where[1];
            $value = $where[2];

			/*
				The next check is to make sure that the supplied operator is
				one of the ones set in $operators
			 */
            if (in_array($operator, $operators)) {
				// The operator matches so create the SQL statement
                $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";

				// Try to execute the query using the query() function.
                if(!$this->query($sql, array($value))->error()) {

					// Return anything returned from the query
                    return $this;
                }
            } // Operator check
        }// count check

        return false;
    } // action ()

	/**
	 * Perform a quick select on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example get('users', array('joined', '>', '2017-01-01'))
	 */
    public function get ($table, $where) {
        return $this->action('SELECT *', $table, $where);
    } // get ()

	/**
	 * Perform a quick delete on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example delete('users', array('joined', '>', '2017-01-01'))
	 */
    public function delete ($table, $where) {
        return $this->action('DELETE', $table, $where);
    } // delete ()


	/**
	 * Insert a row into a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example insert('users', array('username' => 'SteveB', 'active' => '1'))
	 */
    public function insert ($table, $fields = array()) {
		/*
			The $fields array will have a $key => $value pairing for
			each field having data inserted. The $key will matche the
			table field name and the $value will be the value to insert.

			We use array_keys extract the keys from the $fields array
			and assigned them to $keys.
		 */
        $keys = array_keys($fields);

		// Create a default $values variable
        $values = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create a ? to
			place in the fields section of the insert statement
		 */
        foreach($fields as $field) {
			// Add a placeholder to $values
            $values .= '?';

			// If we are not on the last pairing, add a comma to $values
            if ($x < count($fields)) {
                $values .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach

		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the fields and values.

			Using the example at the top of this function, the statement would be
			INSERT INTO `users` (`username`, `active`) VALUES (?, ?)

			We then pass the statement into the query() function
		 */
        $sql = "INSERT INTO `{$table}` (`" . implode('`,`', $keys) . "`) VALUES ({$values})";


		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error()) {
			// Return anything returned from the query
			return true;
        }

        return false;

    } // insert()


	/**
	 * Update a row in a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param   int 	$id     The id of the row to update
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example update('users', 1, array('username' => 'SteveBNew', 'active' => '0'))
	 */
    public function update ($table, $id, $fields = array()) {
		// Create a default $set variable to hold the values and fields
        $set = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create an x=? to
			place in the values section of the update statement
		 */
        foreach ($fields as $name => $value) {
			// Add a field = ?
            $set .= "`{$name}` = ?";

			// If we are not on the last pairing, add a comma to $set
            if ($x < count($fields)) {
                $set .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach


		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the values in $set.

			Using the example at the top of this function, the statement would be
			UPDATE `users` SET `username`='SteveBNew',`active`='0' WHERE id=1

			We then pass the statement into the query() function
		 */
        $sql = "UPDATE `{$table}` SET {$set} WHERE id = {$id}";

		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error()) {
			// Return anything returned from the query
			return true;
        }

        return false;

    } // update ()

	//////////////////////////////////////////////////
	// Public functions to call private variables  //
	//////////////////////////////////////////////////

	// Allow a single row of results data to be called publically
    public function first () {
        return $this->results()[0];
    }

	// Allow a results set data to be called publically
    public function results () {
        return $this->_results;
    }

	// Return a row count
    public function count () {
        return $this->_count;
    }

	// Return an error
    public function error () {
        return $this->_error;
    }

     //  Get the id of the last inserted row
    public function insertId () {
       return $this->_pdo->lastInsertId();
    } // insertId ()

}







=======================================================================================================================











<?php

/**
 * Users Model
 *
 * Contains the standard functions for data manipulation, as well as the CRUD
 * forms and displays.
 *
 * This model also contains functions relating to subsidiary user functions such
 * as usergroups and permission.
 *
 * Note that Users have a lot more functionality than moss sections so there is
 * a lot more to this one than most models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';

class M_Users
{
    private
        $_data,
        $_db_table = 'users',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the database as well as the Logs
     * core class (/app/core/Logs.php) used to record activity.
     */
    public function __construct() {
        $this->db = DB::dbConnect();
        $this->_logs = new Logs();
    } //__construct ()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
     * Check the user cookie
     *
     * Checks to see if there is a login cookie stored, based on the 'user_cookie'
     * record in the `settings` database table.
     *
     * If a cookie exists, it checks for a matching record in the `login_cookie`
     * table and if one is found, sets the $_SESSION to log the user in. If a
     * cookie exists but no match is found, the cookie is just deleted.
     *
     * @param string $hash The hash value stored in the login cookie table
     */
    public function checkCookie() {

        /*
            We only need to do anything if a cookie exists so we first check that using exists() in /'app/core/Cookie.php' passing the the 'user_cookie' value from the `settings` database table.
         */
        if (Cookie::exists(SiteSettings::get('user_cookie'))) {
            /*
                There is a cookie do we check the `login_cookie` table for any records where the 'hash' column matches the hash in the cookie.
             */
            $hashCheck = $this->db->get('login_cookie', array('hash', '=', Cookie::get(SiteSettings::get('user_cookie'))));

            /*
                If there is a matching record, we can now log the user in.

                We first use the find() function within this class, using the value of the user_id column in the `login_cookie` table as the user reference.
                This will store the users details in $this->data() and we then create two $_SESSION variables, based on names set in the `settings` table in the database, to store the users id as the login reference, and their user group.
                The reason we also store the user group as a $_SESSION is so we do not have to queery the database each time we need to access it.

                If there is no matching record, we simply delete the cookie.
             */
            if ($hashCheck->count()) {
                if ($this->find($hashCheck->first()->user_id)) {
                    Session::put(SiteSettings::get('session_user_id'), $this->data()->id);
                    Session::put(SiteSettings::get('session_user_group'), $this->data()->group);
                }
            } else {
                Cookie::delete(SiteSettings::get('user_cookie'));
            }
        }
    } // checkCookie()

    /**
     * Check the user hash
     *
     * Checks an email/hash combination for a matching value in the user_hash
     * table, returning the true or false depending on whether a match was found.
     *
     * @param  email 	$email 	Users Email address
     * @param  sha256 	$hash  	Stored hash
     * @return int        		Count of returned results
     *
     */
    public function checkUserHash ($email, $hash) {
        if($this->db->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash))->count()) {
            return true;
        }
        return false;
    } // checkUserHash()

    /**
     * Creates a record in the user_hash table
     *
     * Whenever a user has to verify by email, the link they are sent will
     * contain their email address and a hash string that matches a row in the
     * `user_hash` table.
     *
     * This is to ensure a valid request has been used.
     *
     * @param  array 	$_fields 	Email and Hash
     */
    public function createUserHash($_fields) {
        /*
            The fields passed in will be the email address and hash. We also want to enter the time the record was inserted in the 'stamp' column so we create that first.
         */
        $_fields['stamp'] = SiteSettings::current_datetime()->format('Y-m-d H:i:s');

        // Insert into the `user_hash` table
        if (!$this->db->insert('user_hash', $_fields)) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->createUserHash()';
            }
        }
    } // createUserHash()

    /**
     * Create a new user
     *
     * Attempts to create a new user in the 'users' table based on validated
     * $_POST data. Validation should be run before calling this function.

     * Before insertion, we create a new salt to add and then use this to
     * make the posted password more secure. We also add the current date
     * and time as 'joined'.
     *
     * It also sets the id of the inserted record to $this->_insertId a
     * public function that can be called to show the id after insertion.
     *
     * @param  array    $_postdata  $_POST data
     * @return bool                 Success status
     */
    public function create ($_postdata=[]) {
        $_postdata['salt'] = Hash::salt(32);
        $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);
        $_postdata['joined'] = date('Y-m-d H:i:s');

        if (!$this->db->insert($this->_db_table, $_postdata)){
            // The insert was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->create()';
            }
            return false;
        }
        $this->_insertId = $this->db->insertId();
        return true;

    } // create()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
     * Delete a record
     *
     *  Deletes the specified record from $this->_db_table
     *
     * @param  int  $record  Record ID
     */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
		if(!$this->db->delete($this->_db_table, array('id', '=', $record))) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->delete()';
            }

			return false;
		}

        return true;

	} // delete()

    /**
     * Delete record form
     *
     * Simply shows a button to delete the current record. We do not need to pass
     * in any parameters as the user is set in the url.
     *
     */
    public function deleteForm () {

        $content = '';

        $bottom_row = Php2Bs::bs_form_group ([
            'class' => '',
            'content' => Php2Bs::bs_button ([
                'button_type' => 'submit',
                'color' => 'danger',
                'size' => 'sm',
                'class' => 'float-right',
                'content' => 'Delete',
                'name' => 'delete_user'
            ])
        ]); // $bottom_row

        // Wrap whatever we have in $bottom_row in a form row
        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row,
        ]); // Php2Bs::bs_form_row


        // Compile the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

        return $content;
    } // deleteForm ()

    /**
     * Delete the user cookie
     *
     * Deletes the remember me cookie and also removes the record from the
     * `login_cookie` table. The cookie name is based on the name set in
     * 'user_cookie' in the `settings` database table
     *
     * @param  int 	$user 	User ID
     */
    public function deleteCookie() {
        /*
            Delete the record from the `login_cookie` table where the hash column matches the hash in the coookie.
         */
        $this->db->delete('login_cookie', array('hash', '=', Cookie::get(SiteSettings::get('user_cookie'))));

        /*
            Delete the cookie.
         */
        Cookie::delete(SiteSettings::get('user_cookie'));
    } // deleteCookie()

    /**
     * Delete user hash
     *
     * Deletes any records from the 'user_hash' table that match the passed in
     * email address.
     *
     * @param  email  $_email  Email address
     */
    public function deleteUserHash ($_email) {

        if(!self::db ()->delete('user_hash', array('email', '=', $_email))) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->deleteUserHash()';
            }

            return false;
        }
    } // deleteUserHash ()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     * @param  string/email/int 	$group  	User identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record) {
            /*
                A record has been passed in so we now need to check what parameter
                has been used to determine which field we are going to check it
                against in the table.

                For Users, the $_record will either be the id, username or email
                so we do not have to manipulate it at all. There will be some
                occasions where we have to tweak $_record to suit what is stored
                in the database compared to what we can use in a url. Ideally in
                these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as
                usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record) {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = (filter_var($_record, FILTER_VALIDATE_EMAIL)) ? 'email' :   'username';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = $this->db->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    /**
	 * Check if a remember me cookie exists
	 *
	 * Simply checks if a cookie, based on the 'user_cookie' record in the
	 * `settings` database table is stored on the users device, returning a true
	 * or false, using exists() in /'app/core/Cookie.php.
     *
	 * @return boolean Cookie existence
	 */
	public function hasCookie() {
        return (Cookie::exists(SiteSettings::get('user_cookie'))) ? true : false ;
    } // hasCookie()

    /**
     * Check a user has the required permission
     *
     * Each user group can have multiple permissions and these are stored as a
     * json string in the 'permissions' column of the usergroups table. If the
     * required permission is there, it returns true, otherwise it reurns false.
     *
     * For example, if a groups permissions were as follows
     * {"super_admin":0, "admin": 1,"mod":1}
     *
     * hasPermission('super_admin') would return false
     * hasPermission('admin') would return true
     * hasPermission('mod') would return true
     *
     * @param  string  $key The permission name
     * @return boolean      Permission status
     * @example hasPermission('admin')
     */
    public function hasPermission ($key) {
        // Get the user group details for the current user
        $usergroup = $this->db->get(
            'user_groups',
            ['usergroup_id', '=', Session::get(SiteSettings::get('session_user_group'))]
        );

        // As long as the user group is set, check if that group has the requested permission
        if($usergroup->count()) {
            // Set the permissions of the users group to $permissions array
            $permissions = json_decode($usergroup->first()->permissions, true);

            // Check if the requested permission exists in the array
            if ($permissions[$key] == true) {
                // The permission exists so return true
                return true;
            }
        }
        return false;
    } // hasPermission()

    /**
     * Check if a user is logged in
     *
     * Simply checks for existance of the login $_SESSION variable deined by the
     * 'session_user_id' in the `settings` table in the database.
     * @return boolean Login Status
     */
    public function isLoggedIn() {
        return (Session::exists(SiteSettings::get('session_user_id'))) ? true : false ;
    } // isLoggedIn()

    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing() {
        // Select all records from the database
        $list = $this->db->query('SELECT
        *
        FROM `' . $this->_db_table . '`'
        );

        // Return the results as an array
        return $list->results();
    } // listing()

    /**
     * Show the login form
     *
     * Displays the login form that is both shown from the user box on every page
     * but also the login page at http://yoursite/Login and the admin login page
     * http://yoursite/Admin/Login.
     *
     * One of the things that can be shown on the form is a link to the full
     * login page for help. We do not need this if we are already on that page
     * or in the admin area so we can use the $_params to pass in
     * 'hide_help'=>true if we do not need it.
     *
     * @param  array    $_params    Settings
     * @return 	string 	Login Form
     */
    public function loginForm($_params=null){

        /*
            To start the form , we create an empty variable to hold the content and then add
            to it as we go along. As it is a small form, we simply build it in a linear fashion.

            For the username and password, we use the input groups from Bootstrap, with the contents set as FontAwesome icons.
         */

        $content = '';
        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],
            'prepend' => [
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],
            'input' => [
                //'class' => 'bg-info',
                'type' => 'text',
                'id' => 'Username',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],
        ]); // #Username


        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],
            'prepend' => [
                'content' => '<i class="fas fa-key fa-sm"></i>',
                'id' => 'password_field'
            ],
            'input' => [
                'type' => 'password',
                'id' => 'Password',
                'name' => 'password',
                'placeholder' => 'Password',
                'aria' => [
                    'label' => 'Password',
                    'describedby' => 'password_field',
                ]
            ],
        ]); // #Password

        /*
            Next we add a checkbox to allow the user to specify whether wants to remain logged in, even when the browser is closed.

            When this is selected, a cookie is stored on the users machine/device that allows the system to recognise them on future visits.
         */
        $content .= Php2Bs::bs_form_check ([
            'label' => [
                'for' => 'Remember',
                'content' => 'Remember Login?',
                'class' => 'mb-0',
            ],
            'checkbox' => [
                'id' => 'Remember',
                'name' => 'remember',
                'class' => 'form-check-input',
            ],
            'outer' => [

            ]
        ]); // #Remember

        /*
            If we are not in the admin area and have not specifed that we want the link to the full login/help page to be show, we add it to $content.
         */
        if(!isset($_form_data['admin']) && !isset($_form_data['hide_help'])) {
            $content .= Php2Html::a ([
                'content' => 'Login Help',
                'href' => '/Login/'
            ]);
        }

        /*
            The last thing that we add to content is the submit button.
         */
        $content .= Php2Bs::bs_button ([
            'button_type' => 'submit',
            'color' => 'primary',
            'size' => 'sm',
            'class' => 'float-right',
            'content' => 'Login',
            'name' => 'login'
        ]);

        /*
            Finally, we pass whatever is stored in $content, into a form, along with a method of post. There is no need to set action as we are posting back to the same page.

            We simply return the form.
         */
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

    } // loginForm()

    /**
     * Show the logout form
     *
     * Displays the logout form that is both shown from the user box on every page
     * when a user is logged in and is simply a single button, created in the
     * same way as the submit button for the login form.
     *
     * @return 	string 	Logout Form
     */
    public function logoutForm() {

        /*
            Create the button.
         */
        $content = Php2Bs::bs_button ([
            'button_type' => 'submit',
            'color' => 'primary',
            'size' => 'sm',
            'class' => 'btn-block',
            'content' => 'Logout',
            'name' => 'logout'
        ]);

        /*
            Return the form with the button passed in. There is no need to set action as we are posting back to the same page.
         */
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

    } // loginForm()

    /**
     * Set messages to be displayed
     *
     * An array of messages relating to the model that will be shown as a Bootstrap
     * alert following form posts or to show errors. This can either be retieved
     * as the entire array (by ommitting the $msg parameter), or individually by
     * passing in a key such as messages('already_verified').
     *
     * For an explanation on how the messages work, please refer to
     * '/src/functions/show_page_alerts.php'.
     *
     * @param  string $msg  Optional key to retreive a single message
     * @return array        Either a single element or all
     */
    public function messages ($msg=null) {
        $array = [
            'account_update_no_change' => [
                'title' => 'Account Not Updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.',
            ],
            'account_update_success' => [
                'title' => 'Account Updated',
                'alert_color' => 'success',
                'content' => 'Your account has been updated.',
            ],
            'already_verified' => [
                'title' => 'Account Already Verified',
                'alert_color' => 'info',
                'content' => 'The account associated with that email address has already bee verified.',
                'dismissible' => false,
            ],
            'incorrect_hash' => [
                'title' => 'Incorrect Link',
                'alert_color' => 'danger',
                'content' => 'The details provided did not match that account.<br>Please use the link provided in your registration email or click the link below to send another.<br>{{alert_link}}',
            ],
            'login_banned' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you are banned.',
                'alert_color' => 'info',
            ],
            'login_empty_fields' => [
                'title' => 'Login failed',
                'content' => 'Both fields must be filled in.',
                'alert_color' => 'danger',
            ],
            'login_not_found' => [
                'title' => 'Login failed',
                'content' => 'The user was not found.',
                'alert_color' => 'info',
            ],
            'login_not_pw' => [
                'title' => 'Login failed',
                'content' => 'The password was incorrect.',
                'alert_color' => 'danger',
            ],
            'login_unverified' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you have not verified your account. Please check your email for the verification link.',
                'alert_color' => 'info',
            ],
            'not_found' => [
                'title' => 'User not found',
                'content' => 'The User could not be found. ',
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'register_success_auto' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and you can now log in. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_success_email' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created. You will receive an email containing a link to complete the registration. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_success_manual' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and is awaiting authorisation. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_validation' => [
                'title' => 'Registration unsuccesful',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],
            'resend_email' => [
                'title' => 'Email sent',
                'content' => 'A new link to verify your account has been sent.',
                'dismissible' => false,
            ],
            'update_validation_failed' => [
                'title' => 'Update unsuccesful',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],








            'admin_not_found' => [
                'title' => 'User not found',
                'content' => 'The User could not be found. '
                . Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Users/Listing']),
                'alert_color' => 'info',
                'dismissible' => false,
            ],







            'send_link_fail' => [
                'title' => 'Link not sent',
                'alert_color' => 'danger',
                'content' => 'Please enter something to search for.'
            ],
            'pw_email_sent' => [
                'title' => 'Email sent',
                'alert_color' => 'success',
                'content' => [
                    'The email has been sent to the account matching the details. Please click on the link in it to reset your password.',
                    ' If you do do receive it, check your spam or junk folders. Otherwise, <a class="alert-link" href="/Members/ResetPassword">try again</a>..']
            ],
            'hash_fail' => [
                'title' => 'Incorrect Parameters',
                'alert_color' => 'warning',
                'content' => 'We could not recognise the details. Please use the link from the email you received or enter your username, email or user id below to send another.'
            ],

            'admin_create_success' => [
                'title' => 'Account Created',
                'alert_color' => 'success',
                'content' => 'The account has been created.',
            ],

            'pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'Your password has been updated.',
            ],
            'admin_pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'The password has been updated.',
            ],


            'admin_account_delete_success' => [
                'title' => 'Account Deleted',
                'alert_color' => 'success',
                'content' => 'The account has been deleted.',
                'dismissible' => false,
            ],
            'admin_account_update_success' => [
                'title' => 'Account Updated',
                'alert_color' => 'success',
                'content' => 'The account has been updated.',
            ],

            'incorrect_verify_link' => [
                'title' => 'Incorrect Link',
                'alert_color' => 'success',
                'content' => ['The details provided did not match any accounts.','Please use the link provided in your registration email.'],
            ],
            'account_verified' => [
                'title' => 'Account Verified',
                'alert_color' => 'success',
                'content' => ['content'=>'Your account has been verified.','You can now log in using the details you used to register.',Php2Html::a(['content'=>'Home', 'href'=>'/'])],
                'dismissible' => false,
            ],
            'admin_user_unverified' => [
                'title' => 'Account not verified',
                'alert_color' => 'warning',
                'content' => '',
                'dismissible' => false,
            ],
            'admin_user_banned' => [
                'title' => 'Account banned',
                'alert_color' => 'danger',
                'content' => '',
                'dismissible' => false,
            ],
            'not_logged_in' => [
                'title' => 'Not Permitted',
                'alert_color' => 'warning',
                'content' => 'You must be logged in to view this page.',
                'dismissible' => false,
            ]
        ];

        /*
            If a message key has been passed in, just return that element, otherwise return the whole array.
         */
        if($msg) {
            return $array[$msg];
        } else {
            return $array;
        }
    } // messages()

    /**
     * Get the total most recent record
     *
     * To get the latest record, we run a select query on $this->_db_table,
     * ordering by the most recent joined date and limiting to just the first
     * (most recent) record.
     *
     * @return int 	    Count of rows
     */
    public function mostRecent() {
        // Select the most recent record from the database
        $_qry  =  $this->db->query('SELECT * FROM '.$this->_db_table .' ORDER BY `joined` DESC LIMIT 1');

        // Return details of the record
        return $_qry->first();
    } // mostRecent()

    /**
     * Set the user cookie
     *
     * Sets a cookie when a user selects 'Remember me' on the login form.
     *
     * The cookie is stored with the name set in 'user_cookie' in the `settings`
     * database table and contains a unique hash with an expiry based on what is
     * set as 'cookie_expiry in the `settings` database table.
     *
     * A corresponding record is placed in the `login_cookie` database table with
     * the hash and the users id.
     *
     * @param string $hash The hash value stored in the login cookie table
     */
    public function setCookie() {
        /*
            Create a new hash to store in the cookie using the unique() function in '/app/core/Hash.php'.
         */
        $_hash = Hash::unique();

        /*
            Check to see if this user already has a login hash. If there is, something is wrong with logouts, but all we will do is just re-use those details.
         */
        $hashCheck = $this->db->get('login_cookie', array('user_id', '=', $this->data()->id));

        /*
            If there is no existing record, we add a new one to the `login_cookie` table, otherwise we simply use the hash already stored for that user in the `login_cookie` table.
         */
        if (!$hashCheck->count()) {
            $this->db->insert('login_cookie', array(
                'user_id' => $this->data()->id,
                'hash' => $_hash
            ));
        } else {
            $_hash = $hashCheck->first()->hash;
        }

        /*
            Set the cookie using the put() function in '/app/core/Cookie.php'.
         */
        Cookie::put(SiteSettings::get('user_cookie'), $_hash, SiteSettings::get('cookie_expiry'));
    } // setCookie()

    /**
     * Attempt a login
     *
     * Takes the $_POST data from the login form and checks the information
     * against the `users` table in the database.
     *
     * If a login attempt fails, it also stores the url the request was made
     * from before redirrecting to the full login page. On successful login from
     * there, the user is return to the page from which they made the original
     * request.
     *
     * If a login is succesful it enters a record into the activity table using
     * logout_success() function in the Logs core class.
     *
     * @return Session/Cookie Login status and attempt information
     */
    public function tryLogin() {

        /*
            If we have a failed attempt at a login, followed by a succesfule one
            from the full login page, we want to take the user back to the page
            that they made the original attempt.

            To do this, when a login is attempted, if $_SESSION['refer_page']
            does not already exist and we are NOT on the full login page, we
            we set it with the current URL to redirect back to.
         */
        if (!Session::exists('refer_page') && $_SERVER['REQUEST_URI'] !== '/Login/') {
            Session::put('refer_page', $_SERVER['REQUEST_URI']);
        }

        /*
            We check the login attempt in stages as there are certain things that will mean a failure so we check those before we attempt to process anything.

            As soon as anything fails, we set the failure details as a session and redirect to the full login page. We also set a login failed record to the activity table via login_fail() in the Logs core class, set in the __construct() of this file to $this->_logs.
         */

        // Check if both fields have been filled
        if (!Input::get('username')|| !Input::get('password')) {
            // At least one field is empty so fail
            $this->_logs->login_fail([
                'user' => (!empty(Input::get('username'))) ? Input::get('username') : 'unknown',
                'reason' => 'empty_field'
            ]);
            Session::put('message',$this->messages('login_empty_fields'));
            Redirect::to('/Login/');
        } else {
            // Both fields have been filled so check that the username exists
            if (!$this->find (Input::get('username'))) {
                // The username does not exist so fail
                $this->_logs->login_fail([
                    'user' => Input::get('username'),
                    'reason' => 'user_not_found'
                ]);
                Session::put('message',$this->messages('login_not_found'));
                Redirect::to('/Login/');
            } else {
                // The username does exist check they are allowed to login
                if($this->data()->status == '0') {
                    // The user has not verified so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_unverified'
                    ]);
                    Session::put('message',$this->messages('login_unverified'));
                    Redirect::to('/Login/');
                }

                if($this->data()->status == '-1') {
                    // The user is banned so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_banned'
                    ]);
                    Session::put('message',$this->messages('login_banned'));
                    Redirect::to('/Login/');
                }

                /*
                    If we have got this far, the user exists, is verified and is not banned, so are allowed to login.

                    We check the users password from the database against a string created using the posted password and the users salt from the database, via the make() function in core/Hash.php.
                 */
                if ($this->data()->password === Hash::make(Input::get('password'), $this->data()->salt)) {
                    /*
                        The password is correct for the user so log them in by
                        setting their id to the login session, as set in members()
                        in core/Settings.php
                     */
                    Session::put(SiteSettings::get('session_user_id'), $this->data()->id);
                    Session::put(SiteSettings::get('session_user_group'), $this->data()->group);

                    // Enter the login success record into the 'activity' table.
                    $this->_logs->login_success();

                    // If the user has ticked the 'Remember Me' box, store a login cookie.
                    if (Input::exists(['name'=>'remember'])) {
                        $this->setCookie();
                    }

                    /*
                        If we are on the full login page and the original request
                        came from any page another page, send them back there.

                        If they started on the full login page, send them to the
                        home page.
                     */
                    if($_SERVER['REQUEST_URI'] == '/Login/') {
                        if(Session::exists('refer_page')) {
                            Redirect::to(Session::get('refer_page'));
                        } else {
                            Redirect::to('/');
                        }
                    }
                } else {
                    // The password is incorrect so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'incorrect_pw'
                    ]);
                    Session::put('message',$this->messages('login_not_pw'));
                    Redirect::to('/Login/');
                } // password check
            } // user exists
        } // username and password filled
    }// tryLogin()

    /**
     * Attempt a logout
     *
     * Simply deletes all existing $_SESSION variables and cookies relating to
     * the current user and and enters it into the activity table using
     * logout_success() function in the Logs core class. We call this first as
     * we need the $_SESSION data to create the record.
     *
     * @return Session/Cookie Login deletion
     */
    public function tryLogout() {

        // Enter a record in the activity table
        $this->_logs->logout_success();

        // Delete the users $_SESSION data
        Session::delete(SiteSettings::get('session_user_id'));
        Session::delete(SiteSettings::get('session_user_group'));

        // If a login cookie is set, delete that as well
        if($this->hasCookie()) {
            $this->deleteCookie();
        }
    } // tryLogout()

    /**
     * Update a user
     *
     * Updates a users details in the 'users' table based on validated
     * $_POST data. Validation should be run before calling this function.
     * @param  int      $record     User ID
     * @param  array    $_postdata  $_POST data
     * @return bool                 Success status
     */
    public function update($_record, $_postdata) {
        if (!$this->db->update($this->_db_table, $_record, $_postdata)) {
            // The update was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->update()';
            }
            return false;
        }
        return true;
    } // update

    /**
     * User form
     *
     * Single function to control both the registration and edit user forms in
     * the front end and admin area.
     *
     * Several parts of this form get hidden depending on parameters passed in.
     *
     * The parameters that can be used are
     * 'errors' an array errored field names and error messagesfollowing a failed
     * post attempt.
     * 'version' whether we are in create mode or edit mode.
     * 'area' shows which part of the site we are on where 'user' refers to front
     * end and 'admin' refers to backend.
     * 'data' will contain the user information in edit mode.
     *
     * @param  array    $_params    Version, area and error details
     * @return string               User create/edit form
     */
    public function userForm ($_params) {
        /*
            After a failed post, want to repopulate the form with
            the posted data so the user does not have to fill it all in again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'username' => [
                'help_text' => 'Usernames must be between 5 and 20 characters, only using letters, numbers and underscores. Usernames CANNOT start with a number.'
            ]
            , 'email' => [
                'help_text' => 'This must be your valid @saga.co.uk email address.'
            ]
            , 'firstname' => [
            ]
            , 'lastname' => [
            ]
            , 'ext' => [
                'help_text' => 'Your internal extension number.'
            ]

        ];

        /*
            If we are in create mode we need the password fields so add those to $_form_fields. If we are in the front end, we also need the terms added.
         */
        if($_params['version'] == 'create') {
            $_form_fields['password'] = [
                'help_text' => 'Passwords must be a minimum of 6 characters.'
            ];
            $_form_fields['confirm_password'] = [
            ];

            if($_params['area'] == 'user') {
                $_form_fields[] = 'terms';
            }
        }

        /*
            We now loop through the form fields array to check for validation
            and data.

            First we check to see if there is a matching value in the 'errors'
            parameter passed in to the function. If there is we set the class
            for that field in $_field_data to 'is-invalid'. If there is no
            matching value, if there is any post data, we assume it must have
            been succesful so set the class to 'is-valid', otherwise we just
            leave it blank.

            Then we check for any posted data, from a failed form submit. If
            there is a match, we set it to the 'val' for that field in
            $_field_data. If there is no match, we check to see if a record has been passed in via the 'data' parameter passed in to the function (create mode).
            Again, if there is a match, we add that to 'val', otherwise we are left
            with nothing to use as 'val' so leave it blank.

            When creating the actual input for the field, we add anything in 'class'
            to the input class="" and the 'val' to the value="".
        */
        foreach ($_form_fields as $fields => $field) {
            foreach ($_params['data'] as $key => $value) {


                // Check for posted data if an account update has been attempted
                if (Input::exists($key) && trim(Input::get($key)) !== false) {
                    // There is posted data so set that as the value
                    $_field_data[$key]['val'] = Input::get($key);

                    if (isset($_params['errors'][$key])) {
                        // Errors found for the field so add invalid class
                        $_field_data[$key]['class'] = 'is-invalid';
                    } else {
                        // No errors found so if there is posted data, add the valid class
                        $_field_data[$key]['class'] = (Input::exists()) ? 'is-valid' : '';
                    }

                } else {
                    // There is no posted data so see if a record has been passed in
                    if (isset($_params['data'])) {
                        // There is a record passed in so set that as the value
                        $_field_data[$key]['val'] = $_field_data[$key]['val'] = $value;
                    } else {
                        // There is no record passed in so set the value as blank
                        $_field_data[$key]['val'] = '';
                    }
                } // if (Input::exists($value))
            }

            // Check for errors



        } // foreach($_form_fields)
        /*
            We now have everything we need so can start building the form.

            We create the content first and then pass it into the form once we have
            all of the fields created.

            To start, we create an empty variable to hold the content and then add
            to it as we go along.
         */
        $content = '';

        // Add the Username and Email form row
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            # Username
            Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => Php2Html::label ([
                    'for' => 'Username_input',
                    'content' => 'Username',
                    'class' => 'mb-0',
                    'aria' => [
                        'described-by' =>'username_help'
                    ],
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Username_input',
                    'name' => 'username',
                    'placeholder' => 'Username',
                    'class' => $_field_data['username']['class'],
                    'value' => $_field_data['username']['val'],
                    'aria' => [
                        'describedby' => 'Username_input'
                    ],
                ]) // Php2Bs::bs_input_text
                . Php2Bs::bs_form_text ([
                    'id' => 'username_help',
                    'class' => 'text-muted',
                    'content' => $_form_fields['username']['help_text']
                ]) // Php2Bs::bs_form_text
            ]) // Php2Bs::bs_form_group
            # Email
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => Php2Html::label ([
                    'for' => 'Email_input',
                    'content' => 'Email',
                    'class' => 'mb-0',
                    'aria' => [
                        'described-by' =>'email_help'
                    ],
                ]) // Php2Html::label
                .Php2Bs::bs_input_email ([
                    'id' => 'Email_input',
                    'name' => 'email',
                    'placeholder' => 'you@saga.co.uk',
                    'class' => $_field_data['email']['class'],
                    'value' => $_field_data['email']['val'],
                    'aria' => [
                        'describedby' => 'Email_input'
                    ],
                ]) // Php2Bs::bs_input_email
                . Php2Bs::bs_form_text ([
                    'id' => 'email_help',
                    'class' => 'text-muted',
                    'content' => $_form_fields['email']['help_text']
                ]) // Php2Bs::bs_form_text
            ]) // Php2Bs::bs_form_group
        ]); // Username and password row

        // First and Last Names Row
        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Firstname
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Firstname_input',
                    'content' => 'First name',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Firstname_input',
                    'name' => 'firstname',
                    'placeholder' => 'Your first name',
                    'class' => $_field_data['firstname']['class'],
                    'value' => $_field_data['firstname']['val'],
                    'aria' => array (
                        'describedby' => 'Firstname_input'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Lastname
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Surname_input',
                    'content' => 'Surname',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Surname_input',
                    'name' => 'lastname',
                    'placeholder' => 'Your surname',
                    'class' => $_field_data['lastname']['class'],
                    'value' => $_field_data['lastname']['val'],
                    'aria' => array (
                        'describedby' => 'Surname_input'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
        ]); // First and last names row

        // Password Row - only if we are in create mode
        if($_params['version'] == 'create') {
            // Password Row
            $content .= Php2Bs::bs_form_row ([
                //'class' => '',
                'content' =>
                # Password
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Password',
                        'content' => 'Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .Php2Bs::bs_input_password ([
                        'id' => 'Passsword',
                        'name' => 'password',
                        'placeholder' => 'Passsword',
                        'class' => $_field_data['password']['class'],
                        'value' => $_field_data['password']['val'],
                        'aria' => [
                            'describedby' => 'Password'
                        ],
                    ]) // password
                    . Php2Bs::bs_form_text ([
                        'id' => 'password_help',
                        'class' => 'text-muted',
                        'content' => $_form_fields['password']['help_text']
                    ]) // Php2Bs::bs_form_text
                ]) // Php2Html::div.form-group

                # Confirm_Password
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Confirm_Password',
                        'content' => 'Confirm Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                        'id' => 'Confirm_Password',
                        'name' => 'confirm_password',
                        'placeholder' => 'Confirm Password',
                        'class' => $_field_data['confirm_password']['class'],
                        'value' => $_field_data['confirm_password']['val'],
                        'aria' => [
                            'describedby' => 'Confirm_Password'
                        ],
                    ]) // Php2Bs::bs_input_password
                ]) // Php2Bs::bs_form_group
            ]); // Php2Bs::bs_form_row
        } // Password row

        // Extension number row
        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Firstname
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Ext_number',
                    'content' => 'Extension number',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Ext_number',
                    'name' => 'ext',
                    'placeholder' => 'Extension number',
                    'class' => $_field_data['ext']['class'],
                    'value' => $_field_data['ext']['val'],
                    'aria' => array (
                        'describedby' => 'Ext_number'
                    ),
                ]) // Php2Bs::bs_input_text
                . Php2Bs::bs_form_text ([
                    'id' => 'extention_help',
                    'class' => 'text-muted',
                    'content' => $_form_fields['ext']['help_text']
                ]) // Php2Bs::bs_form_text
            ]) // Php2Bs::bs_form_group
        ]); // Extension number row


        /*
            If we are in edit mode in the admin area, we can also change the
            usergroup and the users status (active, banned, unverified) from
            the same form so we have to add them to $content.

            We create them individually as  $group_select and $status_select
            before passing them into the form.
         */
        if($_params['version'] == 'edit' && $_params['area'] == 'admin') {

            // Open up the Usergroups model
            $groups = new M_Usergroups ();

            /*
                Create an empty $options variable to hold the contents of the
                select menu that we will use to choose a group.
             */
            $options = '';

            /*
                Loop through the list of usergroups and for each one, create
                and <option> tag to go inside the select menu and add it
                to $content.
             */
            foreach ($groups->listing() as $key => $value) {
                $options .= Php2Html::option ([
                    'content' => $value->group_name,
                    'value' => $value->id,
                    'is_selected' => ($value->id == $_params['data']->group) ? true: false,
                ]);
            }

            /*
                Create the select menu, using the $options variable and
                assign it to $group_select.
             */
            $group_select = Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'GroupName',
                'name' => 'group'
            ]);

            /*
                We now do exactly the same for the $status_select, except
                that the listing is a hand built array that we create
                directly in the foreach
             */
            $options = '';
            foreach (['-1' =>'Banned', '0' => 'Unverified', '1' => 'Active'] as $key => $value) {

                $options .= Php2Html::option ([
                    'content' => $value,
                    'value' => $key,
                    'is_selected' => ($key == $_params['data']->status) ? true: false,
                ]);
            }

            $status_select =  Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'StatusName',
                'name' => 'status'
            ]);

            // Now add both dropdowns to the form
            $content .= Php2Bs::bs_form_row ([
                'content' =>
                # User Group
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'GroupName',
                        'content' => 'User Group',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .$group_select
                ]) // Php2Html::div.form-group

                # Status
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'StatusName',
                        'content' => 'Status',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .$status_select
                ]) // Php2Bs::bs_form_group
            ]); // Php2Bs::bs_form_row
        } // Password row

        /*
            If we are in front end create mode, we require both the Accept Terms
            checkbox as well as the submit button, otherwise we just need the
            submit button.

            As we do not know if we will need both, we create an empty $bottom_row
            variable and add what it requires, before passing it into a form row.
         */
        $bottom_row = '';

        /*
            If we are in front end create mode, we need to create a 'terms' checkbox an its parameters.
         */
        if(in_array("terms", $_form_fields)) {
            // Create the parameters for the checkbox
            $checkbox_array = [
                'id' => 'Terms',
                'name' => 'terms',
                'class' => $_field_data['terms']['class'],
                'aria' => [
                    'describedby' => 'Terms'
                ],
            ];

            // If it was checked on a previous post attempt, re-check it
            if($_field_data['terms']['val']) {
                $checkbox_array['checked'] = '';
            } // if($_field_data['terms']['val'])

            // Create the terms form group with the parameters set above
            $bottom_row .= Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' =>
                # Terms
                Php2Bs::bs_form_check ([
                    'label' => [
                        'for' => 'Terms',
                        'content' => 'Accept Terms Below',
                    ],
                    'checkbox' => $checkbox_array,
                    'outer' => [

                    ]
                ])
            ]); // Php2Bs::bs_form_group
        } // if(in_array("terms", $_form_fields))

        /*
            The submit button also comes in a form-group but as we always want it to
            appear on the right, we give it a class of 'col-md-6' when the terms
            form-group is also required (that also uses 'col-md-6'), and 'col-12'
            when we are showing just the button.

            We set this to $button_group_size, based on whether or not 'terms'
            has been added to the $_form_fields array.
         */
        $button_group_size = (in_array("terms", $_form_fields)) ? 'col-md-6': 'col-12';

        // Set the details for the submit button based on the version
        if($_params['version'] == 'create') {
            $button_name = 'register';
            $button_text = 'Register';

        } else {
            $button_name = 'update_user';
            $button_text = 'Update';
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row.Php2Bs::bs_form_group ([
                'class' => $button_group_size,
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'color' => 'primary',
                    'size' => 'sm',
                    'class' => 'float-right',
                    'content' => $button_text,
                    'name' => $button_name
                ]) // Php2Bs::bs_button
            ])// Php2Bs::bs_form_group
        ]); // Bottom row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

    } // userForm ()

    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being processed.
     *
     * See the '/app/core/Validate.php' class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'username' => [
                'required' => true,
                'min' => 5,
                'max' => 20,
                'preg_match' => '/^[a-zA-Z]\w*[a-zA-Z0-9_]$/',
                'unique' => 'users',
                'error_text' => 'Usernames must be between 5 and 20 characters, only using letters, numbers and underscores.'
            ],
            'email' => [
                'required' => true,
                'filter' => "email",
                'unique' => 'users',
                'error_text' => 'You must use a valid and accesible email address.'
            ],
            'firstname' => [
                'required' => true,
            ],
            'lastname' => [
                'required' => true,
            ],
            'password' => [
                'required' => true,
                'min' => 6
            ],
            'confirm_password' => [
                'required' => true,
                'matches' => 'password',
                'error_text' => 'Confirm must match'
            ],
            'terms' => [
                'required' => true,
                'error_text' => 'You must read and accept the terms and conditions'
            ],
            'ext' => [
                'required' => true,
            ]
        ];
    } // validation_rules()



####################################################



    /**
	 *	Change a users password
	 *
	 *	Creates a new salt and hashed password and updates a users
	 *	record with them.
	 *
	 *	@param 	int		$user		User ID
	 **/
	public function changePassword ($user) {
		// We always use validation as an object so we do this for constency
		$_validate = (object)array();

		// Place the $_POST data into a variable that will get manipulated.
		$_postdata = $_POST;

		/*
			The forms all have .req-token to prevent double-posting on page
			refresh. This generates a new $_SESSSION['token'] value and also
			adds a hidden form element containing the $_SESSSION['token'].

			We need to check that the posted token matches the current $_SESSSION['token']
			and only proceed if it does.
		 */
		if(!Token::check(Input::get('token'))) {
    		// The token check failed so set the errors to 'token'
    		$_validate->error = 'token';

    	} else {
			/*
				The token check is succesful, so we again unset that from the $_postdata array, along with the
				submit button, to ensure we only have insert data left.
			*/
			unset($_postdata->token);
			unset($_postdata->reset_password_submit);

			/*
				We now attempt to validate the contents of $_postdata.

				The validation for this form is passed directly into Form_Functions::postValidate(), along with the $_postdata and
				this checks each field in $_postdata against it's relevant validation if it exists.

				The function returns a boolean 'status' as to  whether validation was passed. If validation failed, it will also contain any
				validation errors that have been generated.
			 */
			$_validate = Form_Functions::postValidate($_postdata,
			array (
			    'password' => [
					'validation' => [
					    'required' => true,
					    'min' => 6
					],
				],
			    'confirm_password' => array(
				'type' => 'password',
				'error' => 'You must enter a confirmation password that matches the password',
				'validation' => array(
				    'required' => true,
				    'matches' => 'password'
				),
			    ))
			);

			if($_validate->status)
			{
				// Create a new salt
				$salt = Hash::salt(32);

				/*
					The original $_postdata -> password cannot be entered as it is a raw string of readable data.

					We replace this with a hashed password, generated using the salt we just created and also create
					a new element in $_postdata with the salt as when logging in, we will need the updated salt to match
					the stored, hashed, password.
				*/
				$_postdata = array(
				'password' => Hash::make(Input::get('password'), $salt),
				'salt' => $salt
				);

				// Now we have the correct $_postdata so use quickUpdate() to process it.
				$this->quickUpdate($user, $_postdata);
			}
		}

		// Return any errors
		return (isset($_validate->error)) ? $_validate->error : false ;
    } // changePassword()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordForm($_form_data=[]){

        /*
            After a failed post, want to repopulate the form with
            the posted data so the user does not have to fill it all in again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'password', 'confirm_password'
        ];

        foreach ($_form_fields as $value) {
            // Check for errors
            if (isset($_form_data['errors'][$value])) {
                // Errors found for the field so add invalid class
                $_field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data
            if (Input::exists($value)) {
                // There is posted data so set that as the value
                $_field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_form_data['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$value]['val'] = $_form_data['data']->$value;
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$value]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)


        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Password
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Password',
                    'content' => 'Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                    'id' => 'Passsword',
                    'name' => 'password',
                    'placeholder' => 'Passsword',
                    'class' => $_field_data['password']['class'],
                    'value' => $_field_data['password']['val'],
                    'aria' => [
                        'describedby' => 'Password'
                    ],
                ]) // password
            ]) // Php2Html::div.form-group
            # Confirm_Password
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Confirm_Password',
                    'content' => 'Confirm Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
            .Php2Bs::bs_input_password ([
                    'id' => 'Confirm_Password',
                    'name' => 'confirm_password',
                    'placeholder' => 'Confirm Password',
                    'class' => $_field_data['confirm_password']['class'],
                    'value' => $_field_data['confirm_password']['val'],
                    'aria' => [
                        'describedby' => 'Confirm_Password'
                    ],
                ]) // Php2Bs::bs_input_password
            ]) // Php2Bs::bs_form_group
        ]); // Php2Bs::bs_form_row

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Reset',
            'name' => 'reset_password'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordLinkForm($_form_data=[]){
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-2'
            ],

            'prepend' => [
                'class' => '',
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],

            'input' => [
                'class' => '',
                'type' => 'text',
                'id' => 'Username',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],

        ]); // Php2Html::div.form-group

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Send Email',
            'name' => 'send_reset_email'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()


    public function sendPasswordLinkMail ($email, $hash) {
        // Insert the email and has as a record in user_hash
        try {
            SendMail::sendPasswordLink($email, $hash);
        } catch(Exception $e) {
        die();
        }

    } // sendVerifyMail()



}

















===============================================================================================================================



