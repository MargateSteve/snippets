<?php

/**
 * Database class
 *
 * Controls all database CRUD functions as well as opening up an instance
 * of this class.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the inititisation file

class Ajax
{
	// Set any private variables
    private static $_instance = null,
                   $_instance_old = null,
                   $_instance_data = null;
    private $_pdo,
            $_query,
            $_error = false,
            $_results,
            $_count = 0;

	/**
	 * Construct the database connection
	 *
	 *	Opens up a connection to the database and assigns it to
	 *	$this->_pdo to make it re-usable.
	 *
	 * The connection parameters are called using the values set in
     * '/app/core/SiteSettings.php->db()'
	 *
	 * @return 	Database connection
	 */
    public function __construct($type='new') {

        $this->db_host = 'localhost';
        $this->db_user = 'root';
        $this->db_pw = 'notyou';
        $this->db_hub = 'hub';
        $this->db_dev_scripting = 'dev_scripting';
        $this->db_selenium_data= 'selenium_data';

    } //__construct ()

    public function db_hub () {

        try {
            $this->_pdo = new PDO('mysql:host=' . $this->db_host . ';dbname=' . $this->db_hub,  $this->db_user, $this->db_pw);

        } catch(PDOException $e) {
            die($e->getMessage());
        }

    }

    public function db_dev_scripting () {

        try {
            $this->_pdo = new PDO('mysql:host=' . $this->db_host . ';dbname=' . $this->db_dev_scripting,  $this->db_user, $this->db_pw);

        } catch(PDOException $e) {
            die($e->getMessage());
        }

    }

    public function query ($sql, $params = array(), $db=null) {
        //nicePrint_r($params);

        $db = (isset($db)) ? 'db_'.$db : 'db_hub';
        $db=$this->$db();

		// Set error to false by default
        $this->error = false;
		/*
			We attempt to prepare the query and if it is succesful,
			we bind the parameters and execute it.
		 */
        if ($this->_query = $this->_pdo->prepare($sql)) {
			/*
				The query is prepared so we have to check to see if
				there are any parameters.

				If there are we loop through them annd then bind them
				to the query
			 */

			// Set the counter to one
            $x = 1;

			// Check to see if there are any parameters
            if(count($params)) {
				/*
					There are parameters so we loop through them and
					bind each
				 */
                foreach($params as $param) {
					// Bind the parameter with it's counter position
                    $this->_query->bindValue($x, $param);

					// Increment the counter
                    $x++;
                }
            }

			/*
				Now that the parameters have been bound, we try to execute
				the query.
				If succesful we set the results and row count, otherwise we
				set the error.
			 */
            if($this->_query->execute()) {
				// The query executed succesfully so set the results and count
                $this->_results = $this->_query->fetchAll(PDO::FETCH_OBJ);
                $this->_count = $this->_query->rowCount();
            } else {
				// The query failed so set error to true
                $this->_error = true;
            }
        } // prepare

		// Return anything that has been set as a result of the wquery attempt
        return $this;

    } // query ()


    // Allow a single row of results data to be called publically
    public function first () {
        return $this->results()[0];
    }

    // Allow a results set data to be called publically
    public function results () {
        return $this->_results;
    }

    // Return a row count
    public function count () {
        return $this->_count;
    }

    // Return an error
    public function error () {
        return $this->_error;
    }

}





<?php

/**
 * Faults View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/home/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Faults/
 *
 */

//ini_set('display_errors', 1);
//ini_set('display_startup_errors', 1);
//error_reporting(E_ALL);

//nicePrint_r($_SESSION);
//nicePrint_r($_POST);
//      nicePrint_r($data, 'Data');


$settings['layout'] = 'right-col';
//Set the parameters for the page
$settings['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$settings['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;
$settings['meta'] = ['description' => 'Description set in page'];
$settings['js'] = [
    'remote/ckeditor',
    #'path/to/js2',
    #'path/to/js3'
];
$settings['sidebar'] = 'default';
$content = '';
$content .= showPageAlerts ($data);
// Show any messages that have been sent ot the page as an alert

# Show the required data based on passed in page type


if($data['page_type'] == 'current') {

    $content .= Php2Html::div([
        'id' => 'run_holder',
        'content' => ''
    ]);

} // $data->page_type == 'overview'

if($data['page_type'] == 'overview') {
    if(isset($data['running'])) {
        $content .= Php2Html::h([
            'size' => '5',
            'content' => 'There are currently ' . $data['running']['count'] . ' batches running. ' . Php2Html:: a([
                    'content' => 'View Now',
                    'href' => '/Automation/Selenium/Running'
            ]).'.'

        ]);
    }

    $content .= Php2Html::h([
        'class' => 'mt-4',
        'size' => '4',
        'content' => 'Create new batch.. '
    ]);
    $content .= $data['product_picker'];
} // $data->page_type == 'overview'


// Pass the details to the template
$template = new T_Main ($content,$settings);

if($data['page_type'] == 'current') {

    ?>

    <script>


        $(function(){
            function get_running(){
                $('div#run_holder').html('<i class="fas fa-sync fa-spin"></i> Loading');
                $.get('../../src/ajax/test.php', function(json) {

                    var json = $.parseJSON(json);
                    if(!json.count) {
                        $('div#run_holder').html('<i class="fas fa-exclamation-circle text-danger"></i> Nothing currently running');
                    } else {

                        var records = '';
                        $.each(json.results, function(key,value) {
                            records += '<b>'+value.title+'</b><br>Started: '+value.run_started+'  ('+value.total_time+')<br> Current Scenario - '+value.current_scenario+', Started:'+value.current_scenario_start+' ('+value.current_scenario_total_time+')<hr>';

                        });
                        $('div#run_holder').html(records);
                    }

                });

                setTimeout(get_running, 30000); // makes it reload every 5 sec
            }
            get_running(); // start the process...
        });

    </script>

    <?php

}
?>




<?php

require_once '../../app/core/Ajax.php';

$ajax = new Ajax();
//

$runs = $ajax->query('SELECT * FROM `runs`  WHERE `run_started` IS NOT NULL  AND `run_finished` IS NULL', $params=null, $db='dev_scripting');

$array['count'] = $runs->count();

$results = [];
//print_r($ajax->results());
foreach ($runs->results() as $key => $value) {

    $now = new DateTime();
    $started = new DateTime($value->run_started);
    $time_since_start = $now->diff($started);

    $results[$key] = $value;
    $results[$key]->run_started = $started->format('d/m/y G:i');

    if($time_since_start->format('%h')) {
        $results[$key]->total_time = $time_since_start->format('%hh %im %ss');
    } else if ($time_since_start->format('%i')) {
        $results[$key]->total_time = $time_since_start->format('%im %ss');
    } else {
        $results[$key]->total_time = $time_since_start->format('%ss');
    }

    $status = $ajax->query('SELECT scenario_number, start_time FROM `run_results`  WHERE `start_time` IS NOT NULL AND `end_time`  IS NULL AND `run_number` = ? ORDER BY `scenario_number` ASC LIMIT 1', $params=[$value->id], $db='dev_scripting');

    $results[$key]->current_scenario = $status->first()->scenario_number;


    $scenario_started = new DateTime($status->first()->start_time);
    $time_since_scenario_start = $now->diff($scenario_started);

    $results[$key]->current_scenario_start = $scenario_started->format('d/m/y G:i');

    if($time_since_scenario_start->format('%h')) {
        $results[$key]->current_scenario_total_time = $time_since_scenario_start->format('%hh %im %ss');
    } else if ($time_since_scenario_start->format('%i')) {
        $results[$key]->current_scenario_total_time = $time_since_scenario_start->format('%im %ss');
    } else {
        $results[$key]->current_scenario_total_time = $time_since_scenario_start->format('%ss');
    }


}
$array['results'] = $results;
echo json_encode($array);
