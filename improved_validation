<?php

/**
 * Selenium for Private Medical Insurance Model
 *
 * @author  Steve Ball <steven.ball@saga.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steven.ball@saga.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';

class M_Sel_Pmi extends M_Selenium
{
    /*
     Set any global variables that are used by or shared between functions
     within the model.

     Most of these will be created as an empty variable and get set or called
     in the functions using $this-> so $_xxx will become $this->_xxx.

     Private variables can only be accessed from within this class.

     Public variables can be accessed from any file that has opened a
     connection to this file.

     Protected variables can only be accessed from within this class OR any
     class it extends or extends from it.
     */
    private $_admin_area,
            $_data,
            $_db,
            $_db_dev,
            $_db_data,

            $_model_name = 'M_Sel_Pmi',
            $_users;

    // Public variables can be accessed from any file that has opened a connecti
    public  $_insertId;

    protected $_default_test_link,
                $_product;



    /**
     * Construct the class
     *
     * We are currently working with three databases -
     * dev_scripting is where current all Selenium information is stored
     * hub is where we are moving anything that relates to batches
     * selenium_data is where we will store data for use in lists etc (cover levels, vehicles etc)
     *
     * Eventually, the dev_scripting table will be dropped leaving us using the
     * other two, but for now we create a global connection for all three.
     *
     * $this->_db creates a re-usable instance of the hub database
     * $this->_db_dev creates a re-usable instance of the dev_scripting database
     * $this->_db_data creates a re-usable instance of the selenium_data database
     *
     * $this->_logs opens the Logs core class (/app/core/Logs.php) used to record
     * activity.
     *
     * We also run a check to see if we are in the admin area by exploding the
     * url and checking the first part after the domain name. If this equals
     * 'Admin' then we are in the admin area. We set this to $this->_admin_area
     * and use it later on for various things that need to be either hidden or
     * shown, depending on which side of the site we are in, such as when deciding
     * whether to include the user group dropdown on the defaultForm() function
     * (yes in admin, no in frontend).
     *
     * Finally, as we use functions from M_Users.php in several places, we also
     * open a connection to that.
     */
    public function __construct() {
        $this->_db = DB::dbConnect();
        $this->_db_dev = DB::dbConnect_dev();
        $this->_db_data = DB::dbConnect_data();
        $this->_logs = new Logs();
        $this->_admin_area = (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? true : false;
        $this->_product = 'pp';
		$this->_default_test_link = 'https://uat9.web.saga.co.uk/insurance/health-insurance/get-quote/journey/new';
        $this->_users = new M_Users();
    } //__construct ()


    /**
     * Create the batch generation form
     *
     */
    public function generate_form ($errors) {

        if(!$this->_users->isLoggedIn()) {
            $this->userAlerts([
                'msg' => 'not_logged_in',
            ]);

            return false;
        }

        $form = '';

        $form .= Php2Bs::bs_card ([
            'class' => 'border-secondary text-dark bg-light mb-2 ',
            'header' => [
                'class' => 'bg-secondary text-light',
                'content' => Php2Html::h ([
                    'content' => 'Basic Details',#
                    'size' => '4',
                    'class' => 'card-title mb-1'
                ]),
            ],
            'body' => array (
                'content' => $this->gen_form_basics ($errors),
                'class' => '',
            ),
        ]);// bs_card;


        // Add the button form group
        $form .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-12',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => 'float-right',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' =>  'Generate',
                    'name' => 'generate'
                ]) // Php2Bs::bs_button
            ]) // Php2Bs::bs_form_group
        ]); // Button row

        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $form
        ]); //  Php2Html::form
    }


    /**
 * Validate posted data
 * See '/models/M_Users.php'
 * @param  array    $post_data  Form $_POST data
 * @param  string   $type       Whether we are updating or inserting. Insert is default.
 * @param  int      $record     Id of the record on updates
 * @return array                Status and errors
 */
public function validate ($post_data, $type='insert', $record=null) {

    $arrays = [
        'pay_method'
    ];

    foreach($arrays as $value) {
        if(!isset($post_data[$value])) {
            $post_data[$value] = ['failed' => true];
        }
    }

    $rules = stripValidateRules (
        $post_data,
        $this->validation_rules()
    );

    $validate = new Validate();
    $check = $validate->check(
        $post_data,
        $rules
    );

    return $check;
}

/**
 * Set the validation rules
 * See '/models/M_Users.php'
 * @return array Validation rules
 */
public function validation_rules() {
    $local_array =  [
        'cover_level' => [
            'required' => true,
        ],
    ];

    return array_merge($this->global_validation_rules(),$local_array);
} // validation_rules()




}






<?php

/**
 * Validation
 *
 * Contains functions for validation of form fields
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

class Validate {

    private $_passed = false,
            $_errors = array(),
            $_db = null;

    public function __construct() {
        $this->db = DB::dbConnect();
    }

    /**
     * Check the validation rules against an item
     *
     * Takes an array of data passed in the source (usually $_POST) and
     * checks each one against it's list of criteria.
     *
     * Example use for 'username' and 'email'
     *
     *    $validation = $validate->check(
     *         $_POST,
     *         [
     *            'username' => Globals::get('forms/user/username'),
     *            'email' => Globals::get('forms/user/username', 'email'),
     *         ]
     *    );
     *
     * Example validation for 'username' and 'email'
     *
     *    'username' => [
     *      'type' => 'text',
     *      'help' => 'You ....',
     *      'error' => 'You.....',
     *      'validation' => [
     *          'required' => true,
     *          'min' => 6,
     *          'max' => 20,
     *          'preg_match' => 'username',
     *          'unique' => 'users',
     *      ],
     *    ],
     *    'email' => [
     *      'type' => 'text',
     *      'error' => 'You ...',
     *      'validation' => [
     *          'required' => true,
     *          'filter' => "email",
     *          'unique' => 'users',
     *      ],
     *    ],
     *
     *  We then loop through the 'validation' element and check them against what has been posted
     *
     * @param  array    $source     Array of data to check
     * @param  array    $items      Validation rules
     * @return array
     */
    public function check ($source, $items = array()) {


        /**
         *  Loop through the items
         *
         *    Using the 'username' example above, this would give us
         *
         *    $item = 'username'    $rule = 'info'
         *    $item = 'username'    $rule = 'help'
         *    $item = 'username'    $rule = 'error'
         *    $item = 'username'    $rule = 'validation'
         *
        **/
        foreach ($items as $item => $rules) {


            /**
             * Loop through validation rules
             *
             *    Using the 'username' example above, this would give us
             *
             *    $rule = 'field_name'     $rule_value = 'username'
             *    $rule = 'required'       $rule_value = 'true'
             *    $rule = 'min'            $rule_value = 6
             *    $rule = 'max'            $rule_value = 20
             *    $rule = 'max'            $rule_value = 20
             *    $rule = 'preg_match'     $rule_value = 'username'
             *    $rule = 'unique'         $rule_value = 'users'
             *
            **/
    	    if(isset($rules)){
    		    foreach ($rules as $rule => $rule_value) {
    			/**
    			 * Check if the field has been posted
    			 *
    			 * Using the 'username' example
    			 * $source was set to $_POST when the function was called
    			 * $item has been set to 'username' in the first foreach
    			 *
    			 * So $source[$item] = $_POST['username']
    			 *
    			 * If it is set, we set it to $value, trimming any whitespace
    			 * so if the posted 'username' was 'Deadpool', we would now have
    			 *
    			 * $value = 'Deadpool'
    			 * If there is no matching post data set, we set $value to null
    			 *
    			**/
                if(isset($source[$item])) {
    				if(!is_array($source[$item]))
    				{
    					$value = trim($source[$item]);
    				} else {
                        $value = $source[$item];
                    }

    			} else {
    			    $value = null;
    			}

    			// Convert $item to HTML entities
    			$item = escape($item);



                /*
                    Run the rules

                    We now check the current value against it's rules. If it does not match
                    then the relevant error message will added to $this->_errors.

                    The rules available are

                    required        The field must me filled
                    min             The field must contain at least this many characters
                    max             The field must contain no more than this many characters
                    matches         Must match a specifed other input (confirm password/password)
                    unique          There must not already be a record with the same details in the specified column
                    preg_match      Much match the specified rule stored in /app/core/config_files/validation_rules.php
                    filter          Much match the specified filter


                 */
                 $error_field_name = (isset($rules['field_name'])) ? $rules['field_name'] : $item;
                 if ($rule === 'required' &&
     				!isset($value) ||
     				(!$value && !is_numeric($value)) ||
     				(is_array($value) && isset($value['failed']))

     			) {
     			    if(isset($rules['error_wording'])) {
     				$this->addError($rules['error_wording'], $error_field_name);
     			    } else {
     				$this->addError(ucfirst($error_field_name) . " is required", $error_field_name);
     			    }


    			}
                else if(!empty($value))
                {
    			    switch ($rule)
                    {
    				    case 'min':
    				        if (strlen($value) < $rule_value) {
    					         $this->addError("The {$item} must be a minimum of {$rule_value} characters", $item);
    				        }
    				        break;

    				    case 'max':
    				        if (strlen($value) > $rule_value) {
    					        $this->addError("The {$item} must be a maximum of {$rule_value} characters", $item);
    				        }
    				        break;

                        case 'min_val':
        				    if ($value < $rule_value) {
        					$this->addError("The {$item} must be a minimum of {$rule_value} ", $item);
        				    }
        				break;

        				case 'max_val':
        				    if ($value > $rule_value) {
        					$this->addError("The {$item} must be a maximum of {$rule_value} ", $item);
        				    }
        				break;

    				    case 'matches':
    				        if ($value != $source[$rule_value]) {
    				            if(isset($rules['error']))
                                {
    					            $this->addError($rules['error'], $item);
    					        }
                                else
                                {
    					            $this->addError("{$rule_value} must match {$item}", $item);
    					        }

    				        }
    				        break;

    				    case 'unique':
    				        $check = $this->db->get($rule_value, array($item, "=", $value));
    				        if ($check->count()) {
    					        $this->addError(ucfirst($item) . " already exists", $item);
    				        }
    			            break;


    				    case 'preg_match':
    				        if (!preg_match($rule_value, $value)) {

    				            if(isset($rules['error_text'])) {
    				        	    $this->addError($rules['error_text'], $item);
    			        	    }
                                else
                                {
    			        		    $this->addError("{$rule_value} must preg match {$item}", $item);
    				            }
    			        	}
    				        break;

    			    	case 'filter':
    			    	    if($rule_value == 'email') {
    				        	if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {
    				        	    if(isset($rules['error_text'])) {
    				            		$this->addError($rules['error_text'], $item);
    				        	    }
                                    else
                                    {
    				        	    	$this->addError("The {$rule_value} did not match the required filter.", $item);
    				        	    }
    			        		}
    			        	}
    			        	break;

    				    default:
    				        # code...
    				        break;
    			        }

    			    }
    		    }
    	    }
        }

        // If there are no errors, the validation was successful
        if (empty($this->_errors)) {
           $this->_passed = true;
        }

        return $this;
    }

    // Adds an error to the array
    private function addError($error, $field) {
        $this->_errors[$field] = $error;
    }

    // Public functions to show private variables
    public function errors() {
        return $this->_errors;
    }

    public function passed() {
        return $this->_passed;
    }
}





<?php

/**
 * Selenium Model
 *
 * Contains functions for use with all aspects of the Selenium side of things
 * including forms, validation and generating.
 *
 * As all of the Selenium product models (M_Sel_Pmi, M_Sel_Home etc) extend this
 * model, any of the functions and variables in here can be accessed from those
 * using $this->.
 *
 * @author  Steve Ball <steven.ball@saga.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steven.ball@saga.co.uk>
*/

// Include the initiation file
require_once 'src/init.php';

class M_Selenium
{
    private $_admin_area,
            $_data,
            $_db,
            $_db_dev,
            $_db_data,
            $_logs,
            $_model_name = 'M_Selenium';
    public  $_admin_dir = 'Selenium',
            $_frontend_dir = 'Selenium',
            $_insertId,
            $_db_table = 'runs',
            $_display_column = 'title',
            $_single_name = '',
            $_plural_name = '';


    /**
     * Construct the database connection
     *
     *	Opens up a connection to the database and assigns it to
     *	$this->_pdo to make it re-usable.
     *
     * The connection parameters are called using Globals on values held
     * in /app/core/config_files/db.php
     *
     * @return 	Database connection
     */
    public function __construct() {
        $this->_db = DB::dbConnect();
        $this->_db_dev = DB::dbConnect_dev();
        $this->_db_data = DB::dbConnect_data();
        $this->_logs = new Logs();
        $this->_admin_area = (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? true : false;
    } //__construct ()



    public function product_picker() {
        $products = new Products();

        nicePrint_r($products->listing());

        $links = '';

        foreach ($products->listing() as $key => $value) {
            $links .= Php2Bs::bs_column ([
                'class' => 'col-sm-6 p-1',
                'content' => Php2Html::div ([
                    'class' => 'bg-dark  p-2',
                    'content' => Php2Html::a ([
                        'class' => 'text-light w-100',
                        'style' => 'font-size:20px;',
                        'href' => '/Selenium/GenerateForm/'.$value->prod_name,
                        'content' => Php2Html::i ([
                            'class' => $value->icon . ' fa-fw ml-2 mr-4',
                            'data_attr' => [
                                'fa-transform' => 'grow-6'
                            ]
                        ]).$value->prod_name
                    ])
                ])

            ]);
        }
        return Php2Bs::bs_row ([
            'content' => $links
        ]);
    }


    public function currently_running() {
        $qry = $this->_db_dev ->query('SELECT * FROM `runs`  WHERE `run_started` IS NOT NULL AND `run_finished`  IS NULL');
        return $qry->count();
    }


    /**
     * Creates the basic details section of generate forms
     *
     * All products will have the same section at the start of their generate
     * form, containing any fields that are common throughout all. These
     * basically related to the details of the batch itself, such as the
     * trans_type, link and title.
     *
     * We also do all of the formatting for this section of the form here,
     * using rows and columns for positioning and adding validation classes to
     * the fields following form post.
     *
     * @param 	$errors      Errors from a previous form post
     * @return  string       Form section
     */
    protected function gen_form_basics ($errors=null) {
        $form = '';

        /*
         The first form elements we add are the number of scenarios, pr/ref
         number and the title. These all go in the same row so we will build
         each element individually and then pass them to the form row in one go.
         */
         $scenarios = Php2Bs::bs_column ([
            'class' => 'col-12 col-md-5',
            'content' => $this->gen_form_scenarios (isset($errors['scenarios'])? $errors['scenarios'] : '')
        ]);

        $ref_number = Php2Bs::bs_column ([
           'class' => 'col-12 col-md-7',
           'content' => $this->gen_form_ref_number (isset($errors['refNumber'])? $errors['refNumber'] : '')
       ]);

       $title = Php2Bs::bs_column ([
          'class' => 'col-12',
          'content' => $this->gen_form_title (isset($errors['title'])? $errors['title'] : '')
      ]);

        $form .= Php2Bs::bs_row ([
            'content' => $scenarios.$ref_number.$title
        ]);

        $trans_type = Php2Bs::bs_column ([
            'class' => 'col-12  col-md-4',
            'content' => $this->gen_form_trans_type (isset($errors['trans_type'])? $errors['trans_type'] : '')
        ]);
nicePrint_r($_POST);
        $payment_visibility = (!isset($_POST['trans_type']) || $_POST['trans_type']=='q') ? 'display:none;' : '' ;
        $pay_method = Php2Bs::bs_column ([
            'id' => 'payment-method',
            'style' => $payment_visibility,
            'class' => 'col-12',
            'content' => '<hr>'.$this->gen_form_payment_method (isset($errors['pay_method'])? $errors['pay_method'] : '')
        ]);


        $site_type = Php2Bs::bs_column ([
            'class' => 'col-12 col-md-4 mb-1',
            'content' => $this->gen_form_site_type (isset($errors['site_type'])? $errors['site_type'] : '')
        ]);

        $link_visibility = (!isset($_POST['test_or_live']) || $_POST['test_or_live']=='t') ? '' : 'display:none;' ;
        $quote_link = Php2Bs::bs_column ([
            'id' => 'set-link',
            'style' => $link_visibility,
            'class' => 'col-12 ',
            'content' => '<hr>'.$this->gen_form_set_link (isset($errors['set_link'])? $errors['set_link'] : '')
        ]);



        $inc_mysaga = Php2Bs::bs_column ([
            'class' => 'col-12 col-md-4 mb-1',
            'content' => $this->gen_form_inc_mysaga (isset($errors['inc_mysaga'])? $errors['inc_mysaga'] : '')
        ]);

        $link_visibility = (isset($_POST['inc_mysaga']) && $_POST['inc_mysaga']=='1') ? 'd-block' : 'd-none' ;
        $mysaga_link = Php2Bs::bs_column ([
            'id' => 'mysaga_link',
            'class' => 'col-12 col-md-8 ' . $link_visibility,
            'content' => $this->gen_form_mysaga_link (isset($errors['inc_mysaga'])? $errors['inc_mysaga'] : '')
        ]);



        $form .= '<hr>';

        $form .= Php2Bs::bs_row ([
            'content' =>  $trans_type.$site_type.$inc_mysaga
        ]);

        $form .= Php2Bs::bs_row ([
            'content' =>  $quote_link.$pay_method
        ]);



        return $form;// bs_card
    }

    protected function gen_form_inc_mysaga ($errors)  {

            /*
                See if there is any posted data for the field. If there is we set it to $checked
                to ensure the correct radio is selected, otherwise we default to 't'
            */
            $checked = (null !== Input::get('inc_mysaga')) ? Input::get('inc_mysaga') :  '0';

            // Set the details for the radios and the label
            $output = Forms::radiolist([
                'label' => 'Include MySaga',
                'variable' => 'inc_mysaga',
                'display' => $this->_product,
                'breakpoint' => 3,
                'data' => [
                    'Yes' => '1',
                    'No' => '0',
                ],
                'checked' => $checked,
                'help' => [
                    'content' => 'Choose whether you want the scenarios to be run in a specific test environment or in live.
                    <br>
                    If live is selected, all policyholder first names will be \'Citestuser\' and all scenarios will be quotes, even if policies had been selected.'
                ],
                'errors' => $errors,
                'row_class' => 'mb-2',
                'column_class' => 'col-12 col-md-4'
            ]);

            // Return the details
            return $output;
        } // site_type ()


        protected function gen_form_mysaga_link ($errors)  {
            // Set a variable to be used throughout. This should match the name of the table column it is populating.
            $variable = 'mysaga_link';
            $output = '';
            // If the form has been posted (and therefore failed) set the value to re-populate with
            $value = (null !== Input::get($variable)) ? Input::get($variable) : 'https://uat9.web.saga.co.uk/MySaga';

            // Set the details for the input and the label
            $output .= Forms::input_field ([
                'variable' => $variable,
                'placeholder' => 'Enter the MySaga link',
                'value' => $value,
                'name' => $variable,
                'label' => 'MySaga link',
                'class' => '',
                'errors' => $errors,
                'help' => [
                    'title' => 'Set the MySaga link ',
                    'content' => 'This is the MySaga link that you want to run the batch against.',
                ]
            ]);

            // Return the details
            return $output;
        } // set_link()


    /**
         * Test or Live selection
         *
         * Creates two radio buttons, their labels and a header label to set whether we
         * are in a test site or the live one,  and handles any posted data or errors.
         *
         * @param  string      $errors     The error message for the field, if set
         * @return string      Complete input
         **/
        protected function gen_form_site_type ($errors)  {

            /*
                See if there is any posted data for the field. If there is we set it to $checked
                to ensure the correct radio is selected, otherwise we default to 't'
            */
            $checked = (null !== Input::get('test_or_live')) ? Input::get('test_or_live') :  't';

            // Set the details for the radios and the label
            $output = Forms::radiolist([
                'label' => 'Test or Live',
                'variable' => 'test_or_live',
                'display' => $this->_product,
                'breakpoint' => 3,
                'data' => [
        			'Test' => 't',
        			'Live' => 'l',
                ],
                'checked' => $checked,
                'help' => [
                    'content' => 'Choose whether you want the scenarios to be run in a specific test environment or in live.
        			<br>
        			If live is selected, all policyholder first names will be \'Citestuser\' and all scenarios will be quotes, even if policies had been selected.'
                ],
                'errors' => $errors,
                'row_class' => 'mb-2',
                'column_class' => 'col-12 col-md-4'
            ]);

            // Return the details
    		return $output;
    	} // site_type ()

        /**
         * Quote link input
         *
         * Creates a text input to set the quote link url and handles any posted data or errors.
         *
         * @param  string      $errors     The error message for the field, if set
         * @return string      Complete input
         **/
        protected function gen_form_set_link ($errors)  {
    	    // Set a variable to be used throughout. This should match the name of the table column it is populating.
    		$variable = 'set_link';

    		// If the form has been posted (and therefore failed) set the value to re-populate with
    		$value = (null !== Input::get($variable)) ? Input::get($variable) : $this->_default_test_link;

            // Set the details for the input and the label
            $output = Forms::input_field ([
                'variable' => $variable,
                'placeholder' => 'Enter the quote link',
                'value' => $value,
                'name' => $variable,
                 'label' => 'Quote link',
                'errors' => $errors,
                'help' => [
                    'title' => 'Set the test link ',
                    'content' => 'This is the test link that you want to run the batch against. Where appropriate, ensure you use /journey/new at the end',
                ]
            ]);

            // Return the details
    		return $output;
    	} // set_link()



    /**
     * Trans Type selection
     *
     * Creates two radio buttons, their labels and a header label to set whether we
     * are using quotes or policies and handles any posted data or errors.
     *
     * @param  string      $errors     The error message for the field, if set
     * @return string      Complete input
     **/
    protected function gen_form_trans_type ($errors)  {
        /*
            See if there is any posted data for the field. If there is we set it to $checked
            to ensure the correct radio is selected, otherwise we default to 'q'
        */
        $checked = (null !== Input::get('trans_type')) ? Input::get('trans_type') :  'q';

        // Set the details for the radios and the label
        $output = Forms::radiolist([
            'label' => 'Trans Type',
            'variable' => 'trans_type',
            'display' => $this->_product,
            'breakpoint' => 1,
            'data' => [
                'Quotes' => 'q',
                'Policies' => 'p',
            ],
            'checked' => $checked,
            'help' => [
                'content' => 'Choose whether you want the scenarios to be quotes or policies.
                <br>
                There is currently no function to mix these so, if you need both, you will need to run separate batches.'
            ],
            'errors' => $errors,
            'row_class' => 'mb-2',
            'column_class' => 'col-12 col-md-6'

        ]);

        // Return the details
        return $output;
    } // trans_type ()



    /**
     * Payment Method selection
     *
     * Creates two checkboxes, their labels and a header label to set whether we
     * are using monthly payments, annual or both,  and handles any posted data or errors.
     *
     * @param  string      $errors     The error message for the field, if set
     * @return string      Complete input
     **/
    protected function gen_form_payment_method ($errors)  {

        /*
            See if there is any posted data for the field. If there is we set it to $checked
            to ensure the correct radio is selected, otherwise we default to both ('m' and 'a').
        */
        $checked = (null !== Input::get('pay_method')) ? Input::get('pay_method') :  array('m', 'a');

        // Exclude Monthly payments from products that do not allow them
        if($this->_product == 'tl') {unset($checked['m']);}

        // Set the details for the checkboxes and the label
        $output = Forms::checklist ([
            'label' => 'Payment Methods',
            'variable' => 'pay_method',
            'display' => 'key',
            'breakpoint' => 1,
            'data' => [
                'Monthly' => 'm',
                'Annual' => 'a'
            ],
            'checked' => $checked,
            'help' => [
                'content' => 'Select all payment methods that you want included.
                <br>
                Note that Monthly payments are not always available. If this is the case, it will default to annual.'
            ],
            'errors' => $errors,
            'row_class' => 'mb-2',
            'column_class' => 'col-12 col-md-4'

        ]);

        // Show a message on any products that do not allow monthly payments
        if($this->_product == 'tl') {
            $output .= '<p class="font-italic">This product only allows Annual payments.</p>';
        }

        // Return the details
        return $output;
    } // payment_method ()





    /**
     * Number of scenarios input field
     *
     * Creates the number of scenarios input field including the default or
     * previously posted value, as well as the label and help box.
     *
     * @param 	$errors      Errors from a previous form post
     * @return  string       Scenarios input field, label and help
     */
    private function gen_form_scenarios ($errors=null)  {
        /*
            As we use the field name in several places, we create it as a
            variable and then refer to that when required. The field name should
            match the name of the database table column that it is referencing.
         */
        $field_name = 'scenarios';

        /*
            If the form has been posted and failed we want to use the posted value
            in the field to save the user from having to type everything again.

            We do that by checking to see if the field name exists in the $_POST
            data using the Input::get() function from /core/Input.php. If it does
            exist, we assign that to $value and use that in the input.  If it does
            not exist we assign the default number of scenarios value of 50 to it.

            Note that when doing this for an input that has no default value,
            replace the '50' with an empty string of ''.
         */
        $value = (null !== Input::get($field_name)) ? Input::get($field_name) :  '50';

        /*
            Create the input

            We use functions from /core/Form.php to take most of the legwork out
            building the inputs so here we only have to pass in information
            relevant to this particular one.

            is_required     Holds a true/false value to show whether or not the
            field is to be set as required. You can leave this out completely if
            you do not require a label.

            name            The name that will show up in the $_POST data for the
            field.

            input_type      The type of input that we require. In this case it is
            a number field so we also set 'min' and 'max' to show the range that
            it will allow.

            value           The value to set for the input.

            label           The wording to show in the input label.

            errors          An array of errors from a previous for post

            help            If this included, a help button will appear next to
            the label and clicking it will show a popover, where 'title' shows as
            the header and 'content' shows as the body. By default, the popover
            will appear abovve the help button but this can be overidden by
            including another element in 'help' called placement. This can be set
            to 'left', 'right' or 'bottom'.
         */
        $output = Forms::input_field ([
            'is_required' => true,
            'name' => 'scenarios',

            'input_type' => 'number',
            'min' => 10,
            'max' => 100,

            'value' => $value,
            'label' => 'Number of Scenarios',
            'errors' => ($errors) ? $errors : null,
            'help' => [
                'title' => 'Number of Scenarios',
                'content' => 'The number of scenarios that you want included. It is recommended to do a maximum of 50 at a time.',
            ]
        ]);

        // Return the details
        return $output;

    } // gen_form_scenarios ()

    /**
     * Ref number input field
     *
     * Creates the input field for the ref/pr number including the default or
     * previously posted value, as well as the label and help box.
     *
     * See gen_form_scenarios() for fuller commenting as this will only contain
     * notes on anything different.
     *
     * @param 	$errors      Errors from a previous form post
     * @return  string       Ref Number input field, label and help
     */
    private function gen_form_ref_number ($errors=null)  {

        $field_name = 'refNumber';

        // If the input does not exist leave $value empty.
        $value = (null !== Input::get($field_name)) ? Input::get($field_name) :  '';

        /*
         Create the input

         The only way thats this is different from the scenarios input is that it
         is a text input not a number so we set 'input_type' to 'text'  As a
         result of this, we do not set the 'min' and 'max' but do set a
         'placeholder' to appear.'
         */
        $output = Forms::input_field ([
            'is_required' => true,
            'name' => 'refNumber',

            'input_type' => 'text',
            'placeholder' => 'eg. PR6733',

            'value' => $value,
            'label' => 'Ref Number',
            'errors' => ($errors) ? $errors : null,
            'help' => [
                'title' => 'Reference',
                'content' => 'Use the reference number for your test, including the letters (PR/HD/etc) so it is easier to find them again at a later date.<br>If you are just playing around, use something like TEST or something obvious. Do not use real references for test runs.',
            ]
        ]);

        // Return the details
        return $output;

    } // gen_form_ref_number ()

    /**
     * Title input field
     *
     * Creates the input field for the ref/pr number including the default or
     * previously posted value, as well as the label and help box.
     *
     * Works exactly the same as gen_form_ref_number()
     *
     * @param 	$errors      Errors from a previous form post
     * @return  string       Ref Number input field, label and help
     */
    private function gen_form_title ($errors=null)  {

        $field_name = 'title';

        // If the input does not exist leave $value empty.
        $value = (null !== Input::get($field_name)) ? Input::get($field_name) :  '';

        /*
         Create the input

         The only way thats this is different from the scenarios input is that it
         is a text input not a number so we set 'input_type' to 'text'  As a
         result of this, we do not set the 'min' and 'max' but do set a
         'placeholder' to appear.'
         */
        $output = Forms::input_field ([
            'is_required' => true,
            'name' => 'title',

            'input_type' => 'text',
            'placeholder' => 'eg. Preload Quotes 3',

            'value' => $value,
            'label' => 'Run Title',
            'errors' => ($errors) ? $errors : null,
            'help' => [
                'title' => 'Title',
                'content' => 'Give title with a clear description of the run to make it easier to find and re-run at a later date.<br>
                If you are running several batches, number them (such as Preload Quotes 1, Preload Quotes 2) so it is easier to tell them apart.',
            ]
        ]);

        // Return the details
        return $output;

    } // gen_form_title ()

    /**
     * Set messages to be displayed
     *
     * An array of messages relating to the model that will be shown as a Bootstrap
     * alert following form posts or to show errors. This can either be retieved
     * as the entire array (by ommitting the $msg parameter), or individually by
     * passing in a key such as messages('already_verified').
     *
     * For an explanation on how the messages work, please refer to
     * '/src/functions/show_page_alerts.php'.
     *
     * @param  string $msg  Optional key to retreive a single message
     * @return array        Either a single element or all
     */
    public function userAlerts ($msg) {

        $admin_record_link = Php2Bs::bs_alert_link([
            'content' => 'View',
            'href'=>'/Admin/Selenlium/Batch/{{insert_id}}'
        ]).' in admin area';

        $array = [
            'not_logged_in' => [
                'title' => 'Not logged in',
                'alert_color' => 'info',
                'content' => 'You must be logged in to create a new batch',
                'dismissible' => false,
            ],
            'create_fail' => [
               'title' => 'Batch not created',
               'alert_color' => 'danger',
               'content' => 'Please correct the following errors...<br>{{errors}}',
           ],
            'batch_not_found' => [
                'title' => 'Account Already Verified',
                'alert_color' => 'info',
                'content' => 'The account associated with that email address has already bee verified.'.$admin_record_link,
                'dismissible' => false,
            ],

        ];

        /*
            If a message key has been passed in, just return that element, otherwise return the whole array.
         */
        if(isset($msg['msg'])) {
            Messages::userAlert($array[$msg['msg']], $msg);
        } else {
            return $array;
        }
    } // userAlerts()


    /*
		Set any global validation rules

		These are the rules that apply to forms across all products. Each Generate class for the product
		itself will add it's own specific validation.
	*/
	protected function global_validation_rules ()  {
		$array = [
            'refNumber' => [
				'required' => true,
				'min' => 2,
				'max' => 6,
				'error_wording' => 'Must have a reference number between two and six characters'
			],
            'scenarios' => [
				'required' => true,
				'min_val' => 50,
				'max_val' => 100,
                'error_wording' => 'You can only select between 5 and 100 scenarios'
			],
            'title' => [
				'required' => true,
				'min' => 6
			],



            'maxStart_csd' => [
				'required' => true
			],
            'minStart_csd' => [
				'required' => true
			],
	        'ph_age_max' => [
				'required' => true,
				'min_val' => 50,
				'max_val' => 100,
				'error_wording' => 'Must select PH maximum age between 40 and 100'
			],
            'ph_age_min' => [
				'required' => true,
				'min_val' => 50,
				'max_val' => 100,
				'error_wording' => 'Must select PH minimum age between 40 and 100'
			],


            'source_code' => [
				'required' => true,
                'error_wording' => 'You must select at least one source code'
			],

		];

        /*
            If we are dealing with policies, add the relevant rules to
            the array.
         */
        if(Input::get('trans_type') == 'p' ) {
            $array ['pay_method'] = array(
                //'field_name' => 'Payment Method',
                'required' => true,
                'error_wording' => 'You must select a payment method for policies. This has been defaulted to both.'
            );
        }

        /*
            If we are dealing with dev environments, add the relevant
            rules to the array.
         */
        if(Input::get('test_or_live') == 't' ) {
            $array ['set_link'] = array(
                //'field_name' => 'Payment Method',
                'required' => true,
                'error_wording' => 'You must enter the link for test environments.'

            );
        }

        /*
            If we are including MySaga, add the relevant rules to the
            array.
         */
        if(Input::get('inc_mysaga') == '1' ) {
            $array ['mysaga_link'] = array(
                //'field_name' => 'Payment Method',
                'required' => true,
                'error_wording' => 'You must enter the link for MySaga'

            );
        }
        return $array;
	} // global_basics_validation ()

}





