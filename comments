<?php

/**
 * Front End Members Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Members.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Users
 * @link 	http://yoursite/Users/{User}
 * @link 	http://yoursite/Users/Edit
 * @link 	http://yoursite/Users/Listing
 * @link 	http://yoursite/Users/Profile
 * @link 	http://yoursite/Users/ResetPassword
 * @link 	http://yoursite/Users/Verify

 */
class Faults extends Controller
{

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Faults');

	} // __construct ()


    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($params=null) {

        $date =  new DateTime();
        $today_count = $this->_default_model->listingcount($date->format('Y-m-d'));

        $date =  new DateTime('yesterday');
        $yesterday_count = $this->_default_model->listingcount($date->format('Y-m-d'));

        $start = new DateTime("Monday this week");
        $end = new DateTime("today");
        $this_week_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("Monday last week");
        $end = new DateTime("Sunday last week");
        $last_week_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("first day of this month");
        $end = new DateTime("last day of this month");
        $this_month_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("first day of last month");
        $end = new DateTime("last day of last month");
        $last_month_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("first day of January");
        $end = new DateTime();
        $this_year_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("last year January 1st");
        $end = new DateTime("last year December 31st");
        $last_year_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));



        $_view_data = [
            'page_name' => 'Faults Overview',
            'page_type' => 'overview',
            'count' => $this->_default_model->count(),
            'today' => $today_count,
            'yesterday' => $yesterday_count,
            'this_week' => $this_week_count,
            'last_week' => $last_week_count,
            'this_month' => $this_month_count,
            'last_month' => $last_month_count,
            'this_year' => $this_year_count,
            'last_year' => $last_year_count,
			'latest' => $this->_default_model->mostRecent(),
        ];




		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/faults',
            $_view_data
        );
  	} // index()


    public function add ($params=null) {
        if($params){Redirect::to('404'); }


        $_view_data = [
            'page_name' => 'Add New Fault',
            'page_type' => 'add',
            'form' => $this->_default_model->form(['version'=>'create']),
        ];

        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            $_view_data['status'] = 'not_logged_in';
            $_view_data['form'] = null;
        } else {

            if (Input::exists(['name'=>'add_fault'])) {
                unset($_POST['add_fault']);
                if($_POST) {
                   $_postdata = $_POST;
                   nicePrint_r($_postdata, '$_postdata');

                   /*
                        We now run a function called stripValidateRules(), set in /app/functions/global.php, to only use the rules that are required to validate against the $_POST data.
                     */
                    $_rules = stripValidateRules (
                        $_postdata,
                        $this->_default_model->validation_rules()
                    );


                    // Open a new instance of the validation class
                    $validate = new Validate();
                    /*
                        Check the posted data against the validation rules using the check () function from the Validate () class.
                        If successful, the $_validation->passed() function will return true.
                     */
                    $_validation = $validate->check(
                        $_postdata,
                        $_rules
                    );


                    if ($_validation->passed()) {

                        if(!$_postdata['product']) {
                            unset($_postdata['product']);
                        }
                        if($this->_default_model->create($_postdata)) {
                            $_view_data['status'] = 'create_success';
                        } else {
                            $_view_data['status'] = 'create_fail';
                        }
                    } else {
                        $_view_data['status'] = 'validation_failed';
                        $_view_data['errors'] = $_validation->errors();
                        $_view_data['form'] = $this->_default_model->form([
                            'errors' => $_view_data['errors'],
                            'version' => 'create',
                            'area' => 'user',
                        ]);
                    }

               }

            }

        }
        /**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/faults',
            $_view_data
        );

    }



    public function details($fault=null) {

        if(!$fault){Redirect::to('404'); }

        if($this->_default_model->find($fault)) {
            $_view_data = [
                'page_name' => 'Viewing Fault : CFM-'.$this->_default_model->data()->ref,
                'page_type' => 'view',
                'data' => $this->_default_model->data()
            ];
        } else {
            $_view_data = [
                'page_name' => 'Fault not found',
                'page_type' => 'view',
                'status' => 'not_found',
            ];
        }


        $this->view(
            'home/faults',
            $_view_data
        );

    }









	/** 	Show a listing of all Batches
	 *
	 *	Shows a list of all existing batches
	 *
	 *	$name is not used, it is just a reminder that we can pass variables in.
	 *
	 * 	One function from the 'Batches_Model' is used...
	 *	listing() returns an array containing the details of all batches in the database
	**/
	public function listing($type=null, $value=null) {

        if(!$type) {
            $_view_data = [
                'page_name' => 'Fault Listing',
                'page_type' => 'listing',
                'data' => $this->_default_model->listing(),
                'count' => $this->_default_model->listingcount(),
            ];
        } else {
            if ($type == 'Today') {
                $date =  new DateTime();
                $_view_data = [
                    'page_name' => 'Fault Listing for Today',
                    'page_type' => 'listing',
                    'data' => $this->_default_model->listing($date->format('Y-m-d')),
                    'count' => $this->_default_model->listingcount($date->format('Y-m-d')),
                ];
            } else if ($type == 'Month') {
                $start = new DateTime("first day of this month");
                $end = new DateTime("last day of this month");
                $_view_data = [
                    'page_name' => 'Fault Listing for This Month',
                    'page_type' => 'listing',
                    'data' => $this->_default_model->listing($start->format('Y-m-d'), $end->format('Y-m-d')),
                    'count' => $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d')),
                ];
            } else if ($type == 'Week') {
                $start = new DateTime('Monday this week');
                $end = new DateTime();
                $_view_data = [
                    'page_name' => 'Fault Listing for This Week',
                    'page_type' => 'listing',
                    'data' => $this->_default_model->listing($start->format('Y-m-d'), $end->format('Y-m-d')),
                    'count' => $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d')),
                ];
            }else if ($type == 'Year') {
                $start = new DateTime('first day of this year');
                $end = new DateTime();
                $_view_data = [
                    'page_name' => 'Fault Listing for This Year',
                    'page_type' => 'listing',
                    'data' => $this->_default_model->listing($start->format('Y-m-d'), $end->format('Y-m-d')),
                    'count' => $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d')),
                ];
            }
        }


		// Pass the details to the page via showview()
		$this->view(
			// Select the View to use
			'home/faults',
			$_view_data
		) ;
	} // list



    public function edit($params=null) {

        /*
            If we have parameters there has been a url error so send to
            the 404 page
         */
        if($params){Redirect::to('404');}

        $model = $this->model('M_Users');


        $params = [
            'page_name' => 'Edit Profile',
            'page_type' => 'edit',
        ];

        if(!$model->isLoggedIn()) {
            $params['errors'] = true;
            $params['status'] = 'not_logged_in';
        } else {
            $update_errors = '';
            $pw_errors = '';
            if($model->find(Session::get(Settings::members()['login_session']))) {

                if (Input::exists(['name'=>'update_user'])) {
                    unset($_POST['update_user']);

                    $_postdata = stripPostData ($_POST, $model->data());

                    if($_postdata) {
                        $_rules = $model->validation_rules();
                        $_rules = stripValidateRules ($_postdata, $_rules);

                        $validate = new Validate();

                        // Check the posted data against the validation rules
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );


                        if ($validation->passed()) {
                            if($model->update($model->data()->id, $_postdata)) {
                                $params['status'] = 'account_update_success';
                            } else {
                                $params['status'] = 'update_failed_unspecified';
                            }
                        } else {
                            $params['status'] = 'validation_failed';
                            $params['errors'] = $validation->errors();
                        }
                    } else {
                        $params['status'] = 'account_update_no_change';
                    }
                } // End profile form post

                if (Input::exists(['name'=>'reset_password'])) {
                    unset($_POST['reset_password']);

                    $_postdata = stripPostData ($_POST, $model->data());

                    if($_postdata) {
                        $_rules = $model->validation_rules();
                        $_rules = stripValidateRules ($_postdata, $_rules);

                        $validate = new Validate();

                        // Check the posted data against the validation rules
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );


                        if ($validation->passed()) {
                            unset($_postdata['confirm_password']);
                            $_postdata['salt'] = Hash::salt(32);
                            $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

                            if($model->update($model->data()->id, $_postdata)) {
                                $params['status'] = 'pw_update_success';
                            } else {
                                $params['status'] = 'pw_update_failed_unspecified';
                            }
                        } else {
                            $params['status'] = 'validation_failed';
                            $params['errors'] = $validation->errors();
                        }
                    } else {
                        $params['status'] = 'no_change';
                    }

                }

                $params['edit_form'] = $model->userForm([
                    'errors' => (isset($params['errors'])) ? $params['errors'] : '',
                    'version' => 'edit',
                    'area' => 'user',
                    'data' => $model->data()
                ]);

                $params['password_form'] = $model->resetPasswordForm([
                    'errors' => (isset($params['errors'])) ? $params['errors'] : '',
                ]);
            }
        }

        $this->view(
            'home/users',
			$params
		);

    }



}





==========================================================================================



<?php

/**
 * Front End Members Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Members.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Users
 * @link 	http://yoursite/Users/{User}
 * @link 	http://yoursite/Users/Edit
 * @link 	http://yoursite/Users/Listing
 * @link 	http://yoursite/Users/Profile
 * @link 	http://yoursite/Users/ResetPassword
 * @link 	http://yoursite/Users/Verify

 */
class CallLog extends Controller
{

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Calls');

	} // __construct ()


    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($params=null) {

        $date =  new DateTime();
        $today_count = $this->_default_model->listingcount($date->format('Y-m-d'));

        $date =  new DateTime('yesterday');
        $yesterday_count = $this->_default_model->listingcount($date->format('Y-m-d'));

        $start = new DateTime("Monday this week");
        $end = new DateTime("today");
        $this_week_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("Monday last week");
        $end = new DateTime("Sunday last week");
        $last_week_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("first day of this month");
        $end = new DateTime("last day of this month");
        $this_month_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("first day of last month");
        $end = new DateTime("last day of last month");
        $last_month_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("first day of January");
        $end = new DateTime();
        $this_year_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));

        $start = new DateTime("last year January 1st");
        $end = new DateTime("last year December 31st");
        $last_year_count = $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d'));



        $_view_data = [
            'page_name' => 'Calls Overview',
            'page_type' => 'overview',
            'count' => $this->_default_model->count(),
            'today' => $today_count,
            'yesterday' => $yesterday_count,
            'this_week' => $this_week_count,
            'last_week' => $last_week_count,
            'this_month' => $this_month_count,
            'last_month' => $last_month_count,
            'this_year' => $this_year_count,
            'last_year' => $last_year_count,
			'latest' => $this->_default_model->mostRecent(),
        ];




		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/calls',
            $_view_data
        );
  	} // index()


    public function add ($params=null) {
        if($params){Redirect::to('404'); }
        $_view_data = [
            'page_name' => 'Add New Call',
            'page_type' => 'add',
            'form' => $this->_default_model->form(['version'=>'create']),
        ];
        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            $_view_data['status'] = 'not_logged_in';
            $_view_data['form'] = null;
        } else {


            if (Input::exists(['name'=>'add_call'])) {
                unset($_POST['add_call']);
                if($_POST) {
                   $_postdata = $_POST;
                   nicePrint_r($_postdata, '$_postdata');

                   /*
                        We now run a function called stripValidateRules(), set in /app/functions/global.php, to only use the rules that are required to validate against the $_POST data.
                     */
                    $_rules = stripValidateRules (
                        $_postdata,
                        $this->_default_model->validation_rules()
                    );


                    // Open a new instance of the validation class
                    $validate = new Validate();
                    /*
                        Check the posted data against the validation rules using the check () function from the Validate () class.
                        If successful, the $_validation->passed() function will return true.
                     */
                    $_validation = $validate->check(
                        $_postdata,
                        $_rules
                    );


                    if ($_validation->passed()) {

                        if(!$_postdata['product']) {
                            unset($_postdata['product']);
                        }
                        if($this->_default_model->create($_postdata)) {
                            $_view_data['status'] = 'create_success';
                        } else {
                            $_view_data['status'] = 'create_fail';
                        }
                    } else {
                        $_view_data['status'] = 'validation_failed';
                        $_view_data['errors'] = $_validation->errors();
                        $_view_data['form'] = $this->_default_model->form([
                            'errors' => $_view_data['errors'],
                            'version' => 'create',
                            'area' => 'user',
                        ]);
                    }

               }

            }
        }


        /**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/calls',
            $_view_data
        );

    }



    public function details($call=null) {

        if(!$call){Redirect::to('404'); }

        if($this->_default_model->find($call)) {
            $_view_data = [
                'page_name' => 'Viewing Call',
                'page_type' => 'view',
                'data' => $this->_default_model->data()
            ];
        } else {
            $_view_data = [
                'page_name' => 'Call not found',
                'page_type' => 'view',
                'status' => 'not_found',
            ];
        }


        $this->view(
            'home/calls',
            $_view_data
        );

    }









	/** 	Show a listing of all Batches
	 *
	 *	Shows a list of all existing batches
	 *
	 *	$name is not used, it is just a reminder that we can pass variables in.
	 *
	 * 	One function from the 'Batches_Model' is used...
	 *	listing() returns an array containing the details of all batches in the database
	**/
	public function listing($type=null, $value=null) {

        if(!$type) {
            $_view_data = [
                'page_name' => 'Call Listing',
                'page_type' => 'listing',
                'data' => $this->_default_model->listing(),
                'count' => $this->_default_model->listingcount(),
            ];
        } else {
            if ($type == 'Today') {
                $date =  new DateTime();
                $_view_data = [
                    'page_name' => 'Call Listing for Today',
                    'page_type' => 'listing',
                    'data' => $this->_default_model->listing($date->format('Y-m-d')),
                    'count' => $this->_default_model->listingcount($date->format('Y-m-d')),
                ];
            } else if ($type == 'Month') {
                $start = new DateTime("first day of this month");
                $end = new DateTime("last day of this month");
                $_view_data = [
                    'page_name' => 'Call Listing for This Month',
                    'page_type' => 'listing',
                    'data' => $this->_default_model->listing($start->format('Y-m-d'), $end->format('Y-m-d')),
                    'count' => $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d')),
                ];
            } else if ($type == 'Week') {
                $start = new DateTime('Monday this week');
                $end = new DateTime();
                $_view_data = [
                    'page_name' => 'Call Listing for This Week',
                    'page_type' => 'listing',
                    'data' => $this->_default_model->listing($start->format('Y-m-d'), $end->format('Y-m-d')),
                    'count' => $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d')),
                ];
            }else if ($type == 'Year') {
                $start = new DateTime('first day of this year');
                $end = new DateTime();
                $_view_data = [
                    'page_name' => 'Call Listing for This Year',
                    'page_type' => 'listing',
                    'data' => $this->_default_model->listing($start->format('Y-m-d'), $end->format('Y-m-d')),
                    'count' => $this->_default_model->listingcount($start->format('Y-m-d'), $end->format('Y-m-d')),
                ];
            }
        }


		// Pass the details to the page via showview()
		$this->view(
			// Select the View to use
			'home/calls',
			$_view_data
		) ;
	} // list



    public function edit($params=null) {

        /*
            If we have parameters there has been a url error so send to
            the 404 page
         */
        if($params){Redirect::to('404');}

        $model = $this->model('M_Users');


        $params = [
            'page_name' => 'Edit Profile',
            'page_type' => 'edit',
        ];

        if(!$model->isLoggedIn()) {
            $params['errors'] = true;
            $params['status'] = 'not_logged_in';
        } else {
            $update_errors = '';
            $pw_errors = '';
            if($model->find(Session::get(Settings::members()['login_session']))) {

                if (Input::exists(['name'=>'update_user'])) {
                    unset($_POST['update_user']);

                    $_postdata = stripPostData ($_POST, $model->data());

                    if($_postdata) {
                        $_rules = $model->validation_rules();
                        $_rules = stripValidateRules ($_postdata, $_rules);

                        $validate = new Validate();

                        // Check the posted data against the validation rules
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );


                        if ($validation->passed()) {
                            if($model->update($model->data()->id, $_postdata)) {
                                $params['status'] = 'account_update_success';
                            } else {
                                $params['status'] = 'update_failed_unspecified';
                            }
                        } else {
                            $params['status'] = 'validation_failed';
                            $params['errors'] = $validation->errors();
                        }
                    } else {
                        $params['status'] = 'account_update_no_change';
                    }
                } // End profile form post

                if (Input::exists(['name'=>'reset_password'])) {
                    unset($_POST['reset_password']);

                    $_postdata = stripPostData ($_POST, $model->data());

                    if($_postdata) {
                        $_rules = $model->validation_rules();
                        $_rules = stripValidateRules ($_postdata, $_rules);

                        $validate = new Validate();

                        // Check the posted data against the validation rules
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );


                        if ($validation->passed()) {
                            unset($_postdata['confirm_password']);
                            $_postdata['salt'] = Hash::salt(32);
                            $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

                            if($model->update($model->data()->id, $_postdata)) {
                                $params['status'] = 'pw_update_success';
                            } else {
                                $params['status'] = 'pw_update_failed_unspecified';
                            }
                        } else {
                            $params['status'] = 'validation_failed';
                            $params['errors'] = $validation->errors();
                        }
                    } else {
                        $params['status'] = 'no_change';
                    }

                }

                $params['edit_form'] = $model->userForm([
                    'errors' => (isset($params['errors'])) ? $params['errors'] : '',
                    'version' => 'edit',
                    'area' => 'user',
                    'data' => $model->data()
                ]);

                $params['password_form'] = $model->resetPasswordForm([
                    'errors' => (isset($params['errors'])) ? $params['errors'] : '',
                ]);
            }
        }

        $this->view(
            'home/users',
			$params
		);

    }



}





=====================================================================================




<?php

/**
 * Front End Members Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Members.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Users
 * @link 	http://yoursite/Users/{User}
 * @link 	http://yoursite/Users/Edit
 * @link 	http://yoursite/Users/Listing
 * @link 	http://yoursite/Users/Profile
 * @link 	http://yoursite/Users/ResetPassword
 * @link 	http://yoursite/Users/Verify

 */
class OneThing extends Controller
{

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_OneThing');

	} // __construct ()


    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($params=null) {

        $_view_data = [
            'page_name' => 'One Thing',
            'page_type' => 'overview',
            'form' => 	$this->_default_model->form(),
        ];

        if(Input::exists('add_one_thing')) {
            unset($_POST['add_one_thing']);
            if(!Input::get('details')) {
                $_view_data['status'] = 'empty';
            } else {
                if($this->_default_model->create($_POST)) {
                    $_view_data['status'] = 'success';
                }
            }
        }



		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/onething',
            $_view_data
        );
  	} // index()

    public function admin($record=null, $param=null) {

        $_view_data = [
            'page_name' => 'One Thing Admin',
            'page_type' => 'admin',
        ];
        $user = new M_Users();

        if(!$user->isLoggedIn() || !$user->hasPermission('admin')) {
            $_view_data['status'] = 'unauthorised';
        } else {

            if($record) {
                // In view mode
                if($param == 'MarkViewed') {
                    $this->_default_model->update($record, ['viewed'=>1]);
                    $_view_data['status'] = 'marked';
                }
                $this->_default_model->find($record);
                $_view_data['record'] = $this->_default_model->data();

            } else {
                // In list mode
                $_view_data['list'] = $this->_default_model->listing();
            }
        }



        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'home/onething',
            $_view_data
        );
    }

}





=======================================================================================




<?php

/**
 * Front End Members Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Members.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Users
 * @link 	http://yoursite/Users/{User}
 * @link 	http://yoursite/Users/Edit
 * @link 	http://yoursite/Users/Listing
 * @link 	http://yoursite/Users/Profile
 * @link 	http://yoursite/Users/ResetPassword
 * @link 	http://yoursite/Users/Verify

 */
class Ideas extends Controller
{

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Ideas');

	} // __construct ()


    public function add ($params=null) {
        if($params){Redirect::to('404'); }
        $_view_data = [
            'page_name' => 'Add New Idea',
            'page_type' => 'add',
            'form' => $this->_default_model->form(['version'=>'create']),
        ];
        $user= new M_Users();
        if(!$user->isLoggedIn()) {
            $_view_data['status'] = 'not_logged_in';
            $_view_data['form'] = null;
        } else {


            if(Input::exists('add_idea')) {
                unset($_POST['add_idea']);

                $error = false;
                foreach ($_POST as $key => $value) {
                    if(!strlen(trim($value))) {
                        $error = true;
                    }
                }

                if($error) {
                    $_view_data['status'] = 'idea_empty';
                } else {
                    $this->_default_model->create($_POST);
                    $_view_data['status'] = 'success';
                }

            }
        }




        /**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/ideas',
            $_view_data
        );

    }

    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($params=null) {

        $_view_data = [
            'page_name' => 'Ideas',
            'page_type' => 'overview',
            'list' => 	$this->_default_model->listing(),
        ];


		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/ideas',
            $_view_data
        );
  	} // index()

    public function details($record=null) {
        $_view_data = [
            'page_name' => 'Viewing Idea',
            'page_type' => 'view',
        ];

        if(Input::exists(['name'=>'add_comment'])) {
            unset($_POST['add_comment']);
            if(!strlen(trim(Input::get('details')))) {
                $_view_data['status'] = 'comment_empty';
            } else {
                if($this->_default_model->create_comment($record, $_POST)) {
                    $_view_data['status'] = 'comment_success';
                }
            }
        }



        $this->_default_model->find($record);
        $_view_data['record'] = $this->_default_model->data();

        if(count($this->_default_model->listingComments($record))) {
            $_view_data['comments'] = $this->_default_model->listingComments($record);
        }

        $user = new M_Users();
        if($user->isLoggedIn()) {
            $_view_data['comment_form'] = $this->_default_model->comment_form();
        } else {
            $_view_data['comment_form'] = Php2Html::p([
                'content' => 'You must be logged in to add a comment',
                'class' => 'p-2 bg-light border'
            ]);
        }

        $this->view(
            'home/ideas',
            $_view_data
        );
    }

    public function admin($record=null, $param=null) {

        $_view_data = [
            'page_name' => 'One Thing Admin',
            'page_type' => 'admin',
        ];
        $user = new M_Users();

        if(!$user->isLoggedIn() || !$user->hasPermission('admin')) {
            $_view_data['status'] = 'unauthorised';
        } else {

            if($record) {
                // In view mode
                if($param == 'MarkViewed') {
                    $this->_default_model->update($record, ['viewed'=>1]);
                    $_view_data['status'] = 'marked';
                }
                $this->_default_model->find($record);
                $_view_data['record'] = $this->_default_model->data();

            } else {
                // In list mode
                $_view_data['list'] = $this->_default_model->listing();
            }
        }



        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'home/ideas',
            $_view_data
        );
    }

}





===================================================================================




<?php

/**
 * Bootstrap class
 *
 * Turns various Bootstrap 4 components into re-usable functions.
 *
 * Extends Html to incorporate the quick tag building functions
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */
class Php2Bs extends Php2Html {

    public static function bs_col_form_label ($params)
    {
        $default_class = (isset($params['size'])) ? 'col-form-label-'.$params['size'].' ' : 'col-form-label ';
        $params['class'] = (isset($params['class'])) ? $default_class . $params['class'] : $default_class;
        return Php2Html::label (
            $params
        );
    }


    public static function bs_footer ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'footer ' . $params['class'] : 'footer ';
        return Php2Html::footer (
            $params
        );
    }


    public static function bs_container($params)
    {
        $params['container_type'] = isset($params['container_type']) ? 'container-'.$params['container_type'] : 'container' ;
        $params['class'] = (isset($params['class'])) ? $params['container_type'] . ' ' . $params['class'] : $params['container_type'];
        return Php2Html::div (
            $params
        );

    }

    public static function bs_form_row($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-row ' . $params['class'] : 'form-row';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_group($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-group ' . $params['class'] : 'form-group';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_text($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-text ' . $params['class'] : 'form-text';

        return Php2Html::small (
            $params
        );
    }
    public static function bs_navbar($params)
    {
        $params['class'] = (isset($params['class'])) ? 'navbar ' . $params['class'] : 'navbar ';
        return Php2Html::nav (
            $params
        );

    }

    public static function bs_button($params)
    {
        $class = 'btn';

        if(isset($params['color'])) {
            $class .= ' btn-'.$params['color'];
        }

        if(isset($params['size'])) {
            $class .= ' btn-'.$params['size'];
        }

        $class .= (isset($params['class'])) ? ' '.$params['class']:'';

        $params['class'] = $class;


        return Php2Html::button (
           $params
        );

    }

    public static function bs_outline_btn($params)
    {

        $params['class'] = 'btn btn-outline-' . $params['class'];


        return Php2Html::button (
           $content,
           $params
        );

    }

    public static function bs_dropdown_item($params)
    {

        $params['class'] = (isset($params['class'])) ? 'dropdown-item ' . $params['class'] : 'dropdown-item';

        return Php2Html::a (
            $params
        );

    }

    public static function bs_form_check($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-check ' . $params['class'] : 'form-check';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_check_label($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-check-label ' . $params['class'] : 'form-check-label';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_custom_radio_wrapper($params)
    {
        $params['class'] = (isset($params['class'])) ? 'custom-control custom-radio ' . $params['class'] : 'custom-control custom-radio';

        return Php2Html::div (
            $params
        );
    }
    public static function custom_control_label($params)
    {
        $params['class'] = (isset($params['class'])) ? 'custom-control-label ' . $params['class'] : 'custom-control-label';

        return Php2Html::label (
            $params
        );
    }

    public static function bs_custom_radio($params)
    {
        $params['class'] = (isset($params['class'])) ? 'custom-control-input ' . $params['class'] : 'custom-control-input';

        return Php2Html::radio (
            $params
        );
    }

    public static function bs_form_check_input($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-check-input ' . $params['class'] : 'form-check-input';

        return Php2Html::checkbox (
            $params
        );
    }

    public static function bs_input_text($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        if(isset($params['size'])) {
            $params['class'] .= ' form-control-'.$params['size'];
        }
        return Php2Html::input_text (
            $params
        );
    }

    public static function bs_textarea($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::textarea (
            $params
        );
    }
    public static function bs_input_password($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::input_password (
            $params
        );
    }

    public static function bs_input_email($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::input_email (
            $params
        );
    }

    public static function bs_input_group_prepend($params)
    {
        $params['outer']['class'] = (isset($params['class'])) ? 'input-group-prepend ' . $params['class'] : 'input-group-prepend';

        $params['inner']['class'] = 'input-group-text p-1';
        $params['inner']['content'] = $params['content'];

        if(isset($params['id'])) {
            $params['inner']['id'] = $params['id'];
        }

        $params['outer']['content'] = Php2Html::span (
            $params['inner']
        );


        return Php2Html::div (
            $params['outer']
        );
    }

    public static function bs_input_group($params)
    {
        # group class
        # prepend class
        # input class
        $params['group']['class'] = (isset($params['group']['class'])) ? 'input-group ' . $params['group']['class'] : 'input-group';

        $input_type = 'bs_input_'.$params['input']['type'];

        unset($params['input']['type']);

        $params['group']['content'] = self::bs_input_group_prepend (
            $params['prepend']
        );

        $params['group']['content'] .= self::$input_type (
            $params['input']
        );

        return Php2Html::div (
            $params['group']
        );
    }

    public static function bs_nav_dropdown($params)
    {

        $params['li']['class'] = (isset($params['li']['class'])) ? 'nav-item dropdown ' . $params['li']['class'] : 'nav-item dropdown';

        $params['a']['class'] = (isset($params['a']['class'])) ? 'nav-link dropdown-toggle ' . $params['a']['class'] : 'nav-link dropdown-toggle';

        $params['a']['link'] = '#';

        $params['li']['content'] = Php2Html::a (
                $params['a']
                ).
                self::bs_dropdown_menu (
                    $params['menu']
            );
        return Php2Html::li (
            $params['li']
        );
    }

    public static function bs_dropdown_menu ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'dropdown-menu ' . $params['class'] : 'dropdown-menu ';
        return Php2Html::div (
            $params
        );
    }

    public static function bs_navbar_collapse ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'collapse navbar-collapse ' . $params['class'] : 'collapse navbar-collapse ';
        return Php2Html::div (
            $params
        );
    }


    public static function bs_navbar_nav ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'navbar-nav ' . $params['class'] : 'collapse navbar-nav ';
        return Php2Html::ul (
            $params
        );
    }

    public static function bs_nav ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'nav ' . $params['class'] : 'nav ';
        return Php2Html::ul (
            $params
        );
    }

    public static function bs_nav_item ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'nav-item ' . $params['class'] : 'nav-item ';
        return Php2Html::li (
            $params
        );
    }

    public static function bs_nav_link ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'nav-link ' . $params['class'] : 'nav-link';
        return Php2Html::a (
            $params
        );
    }

    public static function bs_list_group_item ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'list-group-item ' . $params['class'] : 'list-group-item';

        if(isset($params['tag'])) {

            if($params['tag'] == 'a') {
                $params['class'] .= ' list-group-item-action';
            }

            return Php2Html::$params['tag'] (
                $params
            );
        } else {
            return Php2Html::li (
                $params
            );
        }

    }

    public static function bs_list_group ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'list-group ' . $params['class'] : 'list-group';

        $list_items = '';

        foreach ($params['content'] as $items => $item) {


            if(isset($item['href'])) {
                $item['tag'] = 'a';
                $item['class'] = (isset($item['link_class'])) ? $item['link_class'] : '';
                $item['content'] = $items;
            } else {
                $item['content'] = $items;
            }



            $list_items .= self::bs_list_group_item (
                $item
            );
        }

        $params['content'] = $list_items;

        return Php2Html::ul (
            $params
        );
    }

    public static function bs_select($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::select (
            $params
        );
    }

    public static function bs_card($array)
    {
        $header = '';
        $body = '';
        $footer = '';


        if(isset($array['header']))
        {
            $array['header']['class'] = (isset($array['header']['class'])) ? 'card-header ' . $array['header']['class'] : 'card-header';

            $header = Php2Html::div (
                $array['header']
            );
        }

        if(isset($array['body']))
        {
            $array['body']['class'] = (isset($array['body']['class'])) ? 'card-body ' . $array['body']['class'] : 'card-body';

            $body = Php2Html::div (
                $array['body']
            );
        }

        if(isset($array['footer']))
        {
            $array['footer']['class'] = (isset($array['footer']['class'])) ? 'card-footer ' . $array['footer']['class'] : 'card-footer';

            $footer = Php2Html::div (
                $array['footer']
            );
        }

        $array['class'] = (isset($array['class'])) ? 'card ' . $array['class'] : 'card';

        $array['content'] = $header.$body.$footer;

        return  Php2Html::div (
            $array
        );


    }


    public static function bs_alert($array)
    {
        $core_class = 'alert alert-';
        $core_class .=(isset($array['color'])) ? $array['color'].' ': 'info ';

        $array['class'] = (!isset($array['class'])) ? $core_class : $core_class.$array['class'];

        $content = $array['content'];
        $array['content'] ='';

        if($array['heading'])
		{
		    $array['content'] .= Php2Html::h([
                'size' => '4',
                'class' => 'alert-heading',
                'content' => $array['heading']
            ]);
		}
        $array['content'] .= $content;
        if($array['dismissible'])
		{
            $array['class'] .= ' alert-dismissible';
		    $array['content'] .= '	<button type="button" class="close" data-dismiss="alert" aria-label="Close">';
        	$array['content'] .= '		<span aria-hidden="true">&times;</span>';
    		$array['content'] .= '	</button>';
		}

        $array['role'] = 'alert';

        return  Php2Html::div (
            $array
        );
    }


	/**
	 * Alert
	 *
	 * @param  string 			$color       danger/info/warning/alert
	 * @param  string/null 		$heading     Optional text to display in 'alert-heading'
	 * @param  string 			$body        The body text for the alert
	 * @param  boolean 			$dismissible Whether to make the alert dismissible
	 * @example 	https://v4-alpha.getbootstrap.com/components/alerts/
	 *
	 * @return string           Bootstrap Alert
	 */




    public static function makeAlert($color = 'info', $heading=null, $body, $dismissible=false)
	{
		// Create the opening alert tage with the correct colour
        $out = '<div class="alert alert-'.$color.'">';

		// If $dismissible=true add the dismiss button
		if($dismissible)
		{
		    $out .= '	<button type="button" class="close" data-dismiss="alert" aria-label="Close">';
        	$out .= '		<span aria-hidden="true">&times;</span>';
    		$out .= '	</button>';
		}
		// If $heading is not empty, add it
        if($heading)
		{
            $out .= '<h4 class="alert-heading">'.$heading.'</h4>';
        }

		// Add the body text
        $out .= $body;

		// Close the alert tag
        $out .= '</div><!-- alert-'.$color. '-->';

        return $out;
    } // makeAlert



	/**
	 * Make a Bootstrap 4 Grid
	 *
	 *	We have two functions to simplify make a Bootstrap grid layout.
	 *
	 *	row ()		Makes a <div class="row">
	 *	column 		Makes a <div class="col-xx-xx">
	 *
	 * These can be used in conjuction with each other in an unlimited amount
	 * of nesting. Each function has a parameter called $inc which will contain
	 * an array of anything to be displayed within.
	 *
	 * To make a row with an id of 'content' and within it a small column with a
	 * class of col-sm-4 and a larger column with a class of col-sm-8, you would use
	 *
	 *
	 * Php2Bs::row (
	 * 		$id = 'content',
	 * 		$class = null,
	 * 		$inc = array (
	 * 			Php2Bs::column (
	 *				$id = null,
	 * 				$class = 'col-sm-4',
	 * 				$inc = array (
	 * 					...
	 * 				)
	 * 			),
	 * 			Php2Bs::column (
	 *				$id = null,
	 * 				$class = 'col-sm-8',
	 * 				$inc = array (
	 * 					...
	 * 				)
	 * 			),
	 * 			Php2Bs::column (
	 *
	 * 			),
	 *
	 * 		)
	 * )
	 *
	 * The $inc within the column sections can be an array of any elements that
	 * you want and can be a mixture of several types including more row() and
	 * column() functions.
	 * Although you can use plain text as an array element, it is recommended to put
	 * anything you need into indivudal functions and call them.
	 *
	 */

	/**
	 * Make a Bootstrap 4 Grid Row
	 *
	 * Creates a <div class="row"></div> with any attributes and content as well as
	 * a formatted end html comment
	 *
	 * @param  string/null 		$id    The id attribute of the row if required
	 * @param  string/null 		$class The class attribute of the row if required
	 * @param  array  			$inc   An array of columns to show
	 * @return string        	Boostrap Row
	 */

     public static function bs_row($params)
 	{
        $params['class'] = (isset($params['class'])) ? 'row ' . $params['class'] : 'row';


        return Php2Html::div(
            $params
        );

    }


	/**
	 * Make a Bootstrap 4 Grid Column
	 *
	 * Creates a <div class="col-xx-xx"></div> with any attributes and content as well as
	 * a formatted end html comment
	 *
	 * @param  string/null 		$id    The id attribute of the column if required
	 * @param  string/null 		$class The class attribute of the column if required
	 * @param  array  			$inc   An array of content to show
	 * @return string        	Boostrap Column
	 */

     // public static function column (
     //     $id = null,
     //     $class = null,
     //     $inc = array ()
     // )

    public static function bs_column($params)
   {
        $params['class'] = (isset($params['class'])) ?  $params['class'] : 'col';


        $content = Php2Html::div(
            $params
        );

        return $content;
    }


    public static function quickCollapse ($params = array ())
	{
        $out = '';

        $out .= '<p';
        if (isset($params['wrap_class'])) {
            $out .= ' class="'.$params['wrap_class'].'"';
        }
        $out .= '>';

        $out .= '<a class="btn ';
        if (isset($params['button']['size'])) {
            $out .= 'btn-'.$params['button']['size'].' ';
        }

        if (isset($params['button']['type'])) {
            $out .= 'btn-'.$params['button']['type'].'-'.$params['button']['color'].'';
        }
        else
        {
            $out .= 'btn-'.$params['button']['color'].'';
        }
        if (isset($params['button']['class'])) {
            $out .= '  '.$params['button']['class'];
        }
        $out .= '"';
        $out .= ' data-toggle="collapse" href="#'.$params['key'].'" aria-expanded="false" aria-controls="'.$params['key'].'e">';
        $out .= $params['text'];
        $out .= '</a>';

        $out .= '</p>';

        $out .= '<div class="collapse" id="'.$params['key'].'">';

        $out .= $params['content'];

        $out .= '</div>';

        return $out;
    }
    public static function breadcrumb ($array)
	{

        $home = (isset($array['site'])) ? '/' . $array['site'] : '/';
        $output = '<nav aria-label="breadcrumb" class="mb-1 " role="navigation">';
        $output .= '<ol class="breadcrumb m-0 p-1">';

        $output .= '<li class="breadcrumb-item"><a href="'.$home.'">Home</a></li>';

        if(isset($array['path']))
        {
            foreach ($array['path'] as $key => $value) {
                $output .= '<li class="breadcrumb-item"><a href="'.$home.$key.'">'.$value.'</a></li>';
            }
        }

        $output .= '<li class="breadcrumb-item active" aria-current="page">'.$array['current'].'</li>';

        $output .= '</ol>';
        $output .= '</nav>';

        return $output . self::htmlComment('breadcrumb');
    }
}





==================================================================================




<?php
/**
 * PHP2HTML
 *
 * A set of Php functions to create HTML tags and other elements
 * within a script, rather than switching betweek Php and HTML.
 *
 * These are fully nestable and can contain all standard attributes
 * such as id's, classes and HTML5 data attributes.
 *
 * Full examples
 * https://github.com/MargateSteve/php2html
 *
 *
 * This file is divide into three sections
 *
 * Build functions
 * These are internal functions which are only used from within the tag functions
 *
 * Tag functions
 * These are the actual functions to be called from other files to generate the tags
 *
 * Other elements
 * Any functions to build elements that go beyound simple tags, such as tables.
 *
 * @license     http://opensource.org/licenses/MIT The MIT License (MIT)
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @link		https://github.com/MargateSteve/php2html
 * @version		1.0.0
 */
class Php2Html {

    /////////////////////
    // Build functions //
    /////////////////////

    /**
     * make_tag ()
     *
     * This is the core function that builds the tags.
     *
     * This is called from all of the individual tag functions with
     * the 'tag' automatically passed in the $array, along with a 'structure'
     * to denote which structure of tag we are building.
     *
     * A full list of attributes that can be used is shown in the comment at the
     * start of the tags section.
     *
     * NOTE: This is a protected function and can only be called via the tag
     * functions in this file.
     *
     * @param   array   $array  The type of tag and all content/attributes
     * @return  string          Complete HTML tag
     */
    protected static function make_tag ($array) {
        // Set the attributes that have been passed in.
        $attr = self::set_attributes ($array);

        /*
            We automatically add a Html comment to the end of every tag.
            This is generated as we go through the parameters but we start
            it off but creating a $comment variable containing the tag itself.
            By default, comments will be created using the tag type, id and class
            but you can add to this by adding 'comment' when calling the function.
            You can also stop a comment from showing by passing in
            'show_comment' => false on an individual call, or permanently for a
            tag by incliding it in the function (see td() and th()).
         */
         if((!isset($array['show_comment']) || $array['show_comment']))  {
            $attr['comment'] = $array['tag'].$attr['comment'];
         }

        /*
            As there are different types of tag structure that need building in
            different ways, we deal with each type individually.The tag Functions
            that call this pass a 'structure' in $array and this is used to show which type we are building.
            We start off with the most common tag structure which has both start and end tags.
         */
        if($array['structure'] == 'full') {
            $output = '<' . $array['tag'];
            $output .= $attr['attributes'];
            $output .= '>';
            $output .=  (isset($array['content'])) ? $array['content'] : '';
            $output .= '</' . $array['tag'] . '>';
        }  // structure = full

        /*
            Next check is to check for tags that only open
         */
        if($array['structure'] == 'single') {
            $output = '<' . $array['tag'];
            $output .= $attr['attributes'];
            // If we creating a meta tag, the content is actually used as an attribute
            $output .= ($array['tag'] == 'meta') ? ' content="'.$array['content'].'"' : '';

            /*
                Some single tags do not need to self-close so the first
                thing we will do is check to see if this is one of them.
             */
            if (
                $array['tag'] == 'hr' ||
                $array['tag'] == 'br' ||
                $array['tag'] == 'img' ||
                $array['tag'] == 'meta'
            ) {
                $output .= '>';
            } else {
                $output .= '/>';
            }
        } // structure = single

        // If we have anything set as a comment add it to the end of the tag
        if($attr['comment']) {
            $output .= self::htmlComment($attr['comment']);
        }

        // Return the entire tag
        return $output;
    } // make_tag ()

    /**
     * set_attributes ()
     *
     * Sets the attributes and their values for the tag.
     *
     * This is called via the make_tag function and the parameters
     * set in $array are passed in from the original tag function call.
     *
     * @param   array   $array   Attributes and their values
     */
    protected static function set_attributes ($array) {

        /*
            We use an array called $output to collect the data
            to return, so we start of by creating two empty elements,
            one to contain the attributes and one to contain the html
            comment to show at the end.
         */
        $output['attributes'] = '';
        $output['comment'] = '';

        /*
            If we are creating a button, if we want it to have a type other
            than 'button' ('submit' for example) we pass in a parameter
            called button_type, containing the required type.
            If none is set, we simply set the type as 'button'.
            Whichever we use, we add it as a type="" attribute.
         */
        if($array['tag'] == 'button') {
            $type = (isset($array['button_type'])) ? $array['button_type'] : 'button';
            $output['attributes'] .= ' type="' . $type . '"';

        }

        /*
            If 'id' or 'class' parameters have been set, we add them
            as their respective attributes.
            Both of these also make up the html comment so we them to
            that as well.
         */
        if(isset($array['id']) && $array['id']) {
            $output['attributes'] .= ' id="' . $array['id'] . '"';
            $output['comment'] .= ' #' . $array['id'];
        }

        if(isset($array['class']) && $array['class']) {
            $output['attributes'] .= ' class="' . $array['class'] . '"';
            $output['comment'] .= ' .' . $array['class'];
        }

        /*
            Next up, we set any standard attributes that have been requested.

            By standard we mean that they follow the attribute="" format. Any
            other versions of attributes will be added after these.

            We create an array of the standard attributes and loop through
            them, checking each to see if exists in the $array or attributes
            passed in. If it does, it creates the attribute and concatenates
            it to the existing $output['attributes'].
         */
         $standard_attributes = [
 			'action',
 			'alt',
 			'cite',
 			'cols',
 			'colspan',
            'datetime',
 			'for',
 			'form',
 			'height',
            'href',
 			'label',
 			'method',
 			'min',
 			'minlength',
 			'max',
 			'maxlength',
 			'name',
 			'placeholder',
 			'ref',
 			'rows',
 			'rowspan',
 			'step',
 			'src',
 			'target',
 			'title',
 			'type',
 			'value',
 			'width',
         ];

         // Loop through the standard attributes
        foreach ($standard_attributes as $value) {
            // If the attribute exists in array, add it to the existing attributes
            if(isset($array[$value])) {
                $output['attributes'] .= ' ' . $value . '="' . $array[$value] . '"';
            }
        }


        /*
            Next up we add any HTML5 data attributes as well as any aria
            meta data that has been set. Both work the same way, in that
            each takes an array of key=>value pairings where the key is
            the part of the attribute name after the -, and value is the
            attribute value.

            For both, we simply loop through add add an attribute for each
            element each one contains.
         */
        if(isset($array['data_attr'])) {
            foreach ($array['data_attr'] as $key => $value) {
                $output['attributes'] .= ' data-' . $key . '="' . $value . '"';
            }
        }

        if(isset($array['aria'])) {
            foreach ($array['aria'] as $key => $value) {
                $output['attributes'] .= ' aria-' . $key . '="' . $value . '"';
            }
        }

        /*
            If there are any required attrubtes not yet avaiable in this file,
            you can just add them as a string and passing it in as 'controls'
         */
        if(isset($array['controls'])) {
            $output['attributes'] .= ' ' . $array['controls'];
        }

        // Add any inlie style that has been passed in.
        if(isset($array['style'])) {
            $output['attributes'] .= ' style="' . $array['style'].'"';
        }

        /*
            Finally we have a set of non-standard attributes that simply
            need to be added raw, without a value.

            We deal with these in exactly the same way as we did with the
            standard ones.
         */

        $non_standard_attributes = [
            'selected', 'required', 'multiple', 'checked', 'disabled'
        ];

        foreach ($non_standard_attributes as $value) {
            if(isset($array[$value])) {
                $output['attributes'] .= ' ' . $value;
            }
        }

        // Return the attributes as a string
        return $output;
    } // set_attributes

	/**
	 * Create a HTML comment
	 * @param  string 	$details 	The text to place in the comment
	 * @return string           	HTML comment
	 */
	protected static function htmlComment ($details) {
        return '<!-- ' . $details . ' -->';
    }


    ///////////////////
    // Tag functions //
    ///////////////////

    /**
     * These are the individually functions that would be called in the script.
     * The tag itself and the type of structure (used to know which type of tag to
     * build in make_tag()) are automatically passed in.
     * All other required parameters should be passed in when calling the tag function.
     *
     * The most used $params value is 'content'. This is what is actually displayed (the
     * content of a div ot the text of a link).
     *
     * Beyond that, there are a range of other values that can be used in $params. These
     * are mainly standard HTML attributes but there are a couple of variations on this.
     *
     * In this early version, these are not necessarily only usable within tags that they
     * apply to so, although nothing will break, using the wrong thing in the wrong
     * place will not comply with HTML standards.
     *
     * Each tag function explains which attributes it can
     * accept, but assume that all can utilise the global attributes of id, class, title,
     * data-xxx and ref.
     */

    // a           <a>
    // href, rel, type, target
    public static function a ($params) {
        //TODO: Add attributes download
        $params['tag'] = 'a';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // abbr        <abbr>
    public static function abbr ($params) {
        $params['tag'] = 'abbr';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // address       <address>
    public static function address ($params) {
        $params['tag'] = 'address';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // article       <article>
    public static function article ($params) {
        $params['tag'] = 'article';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // aside        <aside>
    public static function aside ($params) {
        $params['tag'] = 'aside';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // b            <b>
    public static function b ($params) {
        $params['tag'] = 'b';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // blockquote   <blockquote>
    // cite
    public static function blockquote ($params) {
		$params['tag'] = 'blockquote';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // br           <br>
    public static function br ($params) {
        $params['tag'] = 'br';
        $params['structure'] = 'single';
        $params['show_comment'] = false;
        return self::make_tag ($params);
    }

    // button       <button>
    // form, name, value, disabled, button_type
    public static function button ($params) {
        /*
            Notes
            'disabled' does not require a value ('disabled'=>'')

			'button_type' can be set when calling to fill
            the 'type=""' attribute with any of the following
            values - button, reset, submit.
            If not set it will default to 'type="button"'
         */
        $params['tag'] = 'button';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // checkbox     <checkbox>
    // checked, name, value, disabled
    public static function checkbox ($params) {
        /*
            Note
            'disabled' does not require a value ('disabled'=>'')
            'checked' does not require a value ('checked'=>'')
         */
         $params['tag'] = 'input';
         $params['type'] = 'checkbox';
         $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // cite         <cite>
    public static function cite ($params) {
        $params['tag'] = 'cite';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // code         <code>
    public static function code ($params) {
        $params['tag'] = 'code';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // data           <data>
    // value
    public static function data ($params) {
        $params['tag'] = 'data';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // dd           <dd>
    public static function dd ($params) {
        $params['tag'] = 'dd';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // div           <div>
    public static function div ($params) {
        $params['tag'] = 'div';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // dl           <dl>
    public static function dl ($params) {
        $params['tag'] = 'dl';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // dt           <dt>
    public static function dt ($params) {
        $params['tag'] = 'dt';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }

    // em           <em>
    public static function em ($params) {
        $params['tag'] = 'em';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // fieldset     <fieldset>
    // form, disabled
    public static function fieldset ($params) {
        /* Note
			disabled - no value required ('disabled'=>'')
         */
        $params['tag'] = 'fieldset';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }

    // figcaption   <figcaption>
    public static function figcaption ($params) {
        $params['tag'] = 'figcaption';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // figure       <figure>
    public static function figure ($params) {
        $params['tag'] = 'figure';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // footer       <footer>
    public static function footer ($params) {
        $params['tag'] = 'footer';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // form         <form>
    // action, method
    public static function form ($params) {

        $params['tag'] = 'form';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }


    // h            <h1> <h2> <h3> <h4>
    public static function h ($params) {
        /*
            The size of the 'h' is passed in as 'size' in the $params so
            initially we just set the tag to 'h'. We then append the size if exists, otherwsie default to 1 (<h1>).
         */
        $params['tag'] = 'h';
        $params['tag'] .= isset($params['size']) ? $params['size'] : '1';
        $params['structure'] = 'full';
        $params['show_comment'] = false;
        return self::make_tag ($params);
    }

    // header       <header>
    public static function header ($params) {
        $params['tag'] = 'header';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }

    // hr           <hr>
    public static function hr ($params) {
        $params['tag'] = 'hr';
        $params['structure'] = 'single';
        $params['show_comment'] = false;
        return self::make_tag ($params);
    }

    // i            <i>
    public static function i ($params) {
        $params['tag'] = 'i';
        $params['structure'] = 'full';
        $params['show_comment'] = false;
        return self::make_tag ($params);
    }

    // img          <img>
    // alt, height, src, width
    public static function img ($params) {
        $params['tag'] = 'img';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // input_date    <input type="date">
    // disabled, form, height, width, name, placeholder, required, size, value, step, min, max
    public static function input_date ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'date';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_email    <input type="email">
    // disabled, form, height, width, name, placeholder, required, size, value, multiple
    public static function input_email ($params) {
        /*  Note
            'disabled' does not require a value ('disabled'=>'')
            'required' does not require a value ('required'=>'')
            'multiple' does not require a value ('multiple'=>'')
         */
        $params['tag'] = 'input';
        $params['type'] = 'email';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_hidden <input type="input_hidden">
    // name, value
    public static function input_hidden ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'hidden';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_file    <input type="file">
    // multiple
    public static function input_file ($params) {
        /*  Note
            'multiple' does not require a value ('multiple'=>'')
         */
        $params['tag'] = 'input';
        $params['type'] = 'file';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_number    <input type="number">
    // disabled, form, height, width, name, placeholder, required, size, value, max, min, step
    public static function input_number ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'number';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_search    <input type="search">
    // disabled, form, height, width, name, placeholder, required, size, value, minlength, maxlength
    static function input_password ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'password';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_range    <input type="range">
    // disabled, form, height, width, name, placeholder, required, size, value, max, min, step
    public static function input_range ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'range';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_search    <input type="search">
    // disabled, form, height, width, name, placeholder, required, size, value, minlength, maxlength
    public static function input_search ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'search';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_tel    <input type="tel">
    // disabled, form, height, width, name, placeholder, required, size, value, minlength, maxlength
    public static function input_tel ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'tel';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_text   <input type="text">
    // disabled, form, height, width, name, placeholder, required, size, value
    public static function input_text ($params) {
        /*  Note
            'disabled' does not require a value ('disabled'=>'')
            'required' does not require a value ('required'=>'')
         */
        $params['tag'] = 'input';
        $params['type'] = 'text';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_time   <input type="time">
    // disabled, form, height, width, name, placeholder, required, size, value
    public static function input_time ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'time';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_url    <input type="url">
    // disabled, form, height, width, name, placeholder, required, size, value, minlength, maxlength
    public static function input_url ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'url';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // label         <label>
    // for, form
    public static function label  ($params) {
        $params['tag'] = 'label';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // legend        <legend>
    public static function legend ($params) {
        $params['tag'] = 'legend';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // li            <li>
    // value
    public static function li ($params) {
	    $params['tag'] = 'li';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // main          <main>
    public static function main ($params) {
        $params['tag'] = 'main';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // mark          <mark>
    public static function mark ($params) {
        $params['tag'] = 'mark';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // meta           <meta>
    // content, name
    public static function meta ($params) {
        $params['tag'] = 'meta';
        $params['structure'] = 'single';
        $params['show_comment'] = false;

        return self::make_tag ($params);
    }

    // nav           <nav>
    public static function nav ($params) {
        $params['tag'] = 'nav';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // ol            <ol>
    public static function ol ($params) {
        $params['tag'] = 'ol';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }


    // option        <option>
    // label, disabled, selected
    public static function option  ($params) {
        /*
            To define which option in a select list is
            selected, pass in 'is_selected' as a parameter.
         */
        $params['tag'] = 'option';
        $params['structure'] = 'full';
		if(isset($params['is_selected']) && $params['is_selected']) {$params['selected'] = '';}
        return self::make_tag ($params);
    }

    // optgroup      <optgroup>
    // label, disabled
    public static function optgroup  ($params) {
        $params['tag'] = 'optgroup';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // p             <p>
    public static function p ($params) {
        $params['tag'] = 'p';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // pre          <pre>
    public static function pre ($params) {
        $params['tag'] = 'pre';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // progress     <progress>
    // max, value
    public static function progress  ($params) {
        $params['tag'] = 'progress';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // progress     <progress>
    // checked, name, value, disabled
	public static function radio ($params) {
        /*
            Note
            'disabled' does not require a value ('disabled'=>'')
            'checked' does not require a value ('checked'=>'')
         */
        $params['tag'] = 'input';
        $params['type'] = 'radio';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // s            <s>
    public static function s ($params) {
        $params['tag'] = 's';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }

    // samp         <samp>
    public static function samp ($params) {
        $params['tag'] = 'samp';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // section      <section>
    public static function section ($params) {
        $params['tag'] = 'section';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // select       <select>
    // required, form, multiple, size, disabled
    public static function select  ($params) {
        /*
			To populate a select menu, pass the details for the options in as a key/value array in 'content'
		 */
        $params['tag'] = 'select';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // small        <small>
    public static function small ($params) {
        $params['tag'] = 'small';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // span         <span>
    public static function span ($params) {
        $params['tag'] = 'span';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // strong       <strong>
    public static function strong ($params) {
        $params['tag'] = 'strong';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // sub          <sub>
    public static function sub ($params) {
        $params['tag'] = 'sub';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // sup          <sup>
    public static function sup ($params) {
        $params['tag'] = 'sup';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // table       <table>
    public static function table   ($params) {
        $params['tag'] = 'table';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // tbody        <tbody>
	public static function tbody   ($params) {
		$params['tag'] = 'tbody';
		$params['structure'] = 'full';
		return self::make_tag ($params);
	}

    // textarea    <textarea>
    // cols, required, form, minlength, maxlength, placeholder, rows
    public static function textarea   ($params) {
        $params['tag'] = 'textarea';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // td           <td>
    // colspan, rowspan
	public static function td   ($params) {
		$params['tag'] = 'td';
		$params['structure'] = 'full';
        $params['show_comment'] = false;
		return self::make_tag ($params);
	}

    // tfoot         <tfoot>
	public static function tfoot   ($params) {
		$params['tag'] = 'tfoot';
		$params['structure'] = 'full';

		return self::make_tag ($params);
	}

    // th           <th>
    // colspan, rowspan
	public static function th   ($params) {
		$params['tag'] = 'th';
		$params['structure'] = 'full';
        $params['show_comment'] = false;

		return self::make_tag ($params);
	}

    // th           <thead>
	public static function thead   ($params) {
		$params['tag'] = 'thead';
		$params['structure'] = 'full';
		return self::make_tag ($params);
	}

    // time         <time>
    // datetime
    public static function time ($params) {
        $params['tag'] = 'time';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // tr           <tr>
	public static function tr   ($params) {
		$params['tag'] = 'tr';
		$params['structure'] = 'full';
        $params['comment'] = false;
		return self::make_tag ($params);
	}

    // u            <u>
    public static function u ($params) {
        $params['tag'] = 'u';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }
    // ul           <ul>
    public static function ul ($params) {
        $params['tag'] = 'ul';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }


    ////////////////////
    // Other elements //
    ////////////////////

	/**
	 * Create a HTML table
	 *
	 * Takes an array and relevant parameters and creates a
	 * full HTML table.
	 *
	 * There are three different parameters that can be passed
	 * in, but each of these are an array containing other
	 * parameters.
	 *
	 * 'data' - contains the records to be placed in the table rows.
	 *
	 * 'columns' - contains a seperate array for each column to be
	 * shown, as well as any classes to be applied to either the th,
	 * td or both.
	 * The key for each column will the database column name. The other
	 * parameters that can be used are
	 * 		'alias' - if the table has a header, this will be the name
	 * 		shown in the th.
	 * 		'td_class' - a class to be added to the columns td.
	 * 		'th_class' - a class to be added to the columns th.
	 * 		'global_class' - a class to be added to both the th and td.
	 *
	 * 'settings' - contains anything relating to the table itself,
	 * such as whether to show a header and any table styles. The
	 * parameters that can be used are
	 * 		'show_header' - true/false to set whether to show the thead.
	 * 		'border' - adds a border to the table with a specified width.
	 * 		'class' - adds the specified class(es) to the whole table.
	 *
	 * You can also add a class to a table row by adding a 'tr_class'
	 * element to the relevant record in the array.
	 *
	 * @param  array 	$params 	Content and settings
	 * @return string         		HTML table
	 */
    public static function make_table ($params) {

		// CReate empty variables to build the relevant sections
		$table_head = '';
        $body_rows = '';

		// Loop through the record data
        foreach ($params['data'] as $rows => $row) {
			/*
				On each loop '$row' will contain the data for each of
				the columns. We start of by adding an empty 'content'
				element to it as will be apply the columns to that
				with any formatting required.

				We build the head and body in the same loop so we
				als create an empty variabkle to hold the data for the head.
			 */
			$row['content'] = '';
			$thead = '';

			/*
				We now loop through the columns array that was passed in.

				We build the th's and td's here so we begin by creating an
				array for each of them including empty 'content' and 'class'
				elements. We then add to each of them as we go through.
			 */
            foreach ($params['columns'] as $columns => $column) {
                $td_params = ['content'=>'', 'class'=>''];
                $th_params = ['content'=>'','class'=>''];

				// Add any global classes to both th and td
                if (isset($column['global_class'])) {
                    $th_params['class'] = $column['global_class'];
                    $td_params['class'] = $column['global_class'];
                } // global class

				// Add any td classes to the td
                if (isset($column['td_class'])) {
                    $td_params['class'] = $td_params['class'] . ' ' . $column['td_class'];
                } // td class

                if (isset($column['td_style'])) {
                    $td_params['style'] = $column['td_style'];
                }

				/*
					If we require a table head, we now create the content for the th and
					add any required classes
				 */
                if(isset($params['settings']['show_header']) && $params['settings']['show_header']) {
					/*
						If an alias has been specified, use that as the content for the th,
						otherwise use the column name.
					 */
					$th_params['content'] = (isset($column['alias'])) ? $column['alias'] : $columns;

					// Add any th classes to the th
					if (isset($column['th_class'])) {
                        $th_params['class'] = $th_params['class'] . ' ' . $column['th_class'];
                    } // th_class

					/*
						Pass the th parameters into the th function and add the completed th
						to $table_head
					 */
                    $table_head .= self::th (
                        $th_params
                    );

                } // head

				/*
					At this point, $row[$columns] contains the content for the td, so we simply
					'content' element of $td_params.
				 */
                $td_params['content'] = $row[$columns];

				/*
					Finally pass the $td_params into the td function and add it to the 'content'
					element for $row.
				 */
                $row['content'] .= self::td (
                    $td_params
                );

            } // foreach $params['columns']

			// Remove the 'show_header' element to prevent conflicts
			unset($params['settings']['show_header']);

			// If there is a tr class set, add it to the row class
            if(isset($row['tr_class']))
            {
                $row['class'] = $row['tr_class'];
            }

			// Pass the row into the tr function and add it to $body_rows
            $body_rows .= self::tr (
                $row
            );
        } // foreach $params['data']

		/*
		 	If $table_head is not empty, add the content it contains to the
			existig $thead variable by placing it in a tr via the tr function
			and that into the thead function
		 */
        if ($table_head) {
            $thead .= self::thead ([
                'content'=> self::tr ([
                    'content'=> $table_head,
                ])
            ]);
        } // if $table_head

		/*
			Finally create the table body as $tbody by passing $body_rows
			 into the tbody function
		 */
        $tbody = self::tbody ([
			'content'=> $body_rows,
		]);// $tbody

		/*
			As eveything else we need for the table, such as the class is stored
			in $params['settings'], we add our content as a new element in that
			including whatever is stored in $thead and $tbody
		 */
        $params['settings']['content'] = $thead.$tbody;

		// Pass $params['settings'] into the table function and return it
        return self::table ($params['settings']);
    } // make_table ()


}





=====================================================================================




<?php

/**
 * Settings Model
 *
 * Two different types. If you frequesntly need to take only one element
 * out of a function then the path is put in. If not we will simply set the
 * function to a variable and take the required path from there.
 *
 * REMOVE ALL $path requirements
 * You can get a single element from any function with...
 * Settings::members()['verification']
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 * TODO: Sort out the 404 etc
 */

// Include the initiation file
require_once 'app/init.php';

class Settings
{
    public static function current_datetime ()
    {
        return new DateTime();
    }

    public static function db ()
    {
        return [
            // The database host. Usually 'localhost' or '127.0.0.1'
            'host' => 'localhost',
            // The Username for the database
            'username' => 'root',
            // The Password for the database
            'password' => 'notyou',
            // The Name of the database
            'dbname' => 'hub',
        ];
    }

    public static function members ()
    {
        return [
            'login_session' => 'uid',
            'user_cookie' => 'user',
            'cookie_expiry' => 604800,
            'verification' => 'manual',// auto/manual/email
            'user_login_group' => 'userGroup'

        ];
    }

    public static function site_details ($path)
    {
        $array = array (
            'site_name' => 'Php Framework',
            'home_page' => 'http://framework/',
            'admin_email' => 'srball72@gmail.com',
            'debug_mode' => true,
        );

        return self::set_path($array, $path);
    }

    /**
     * Meta Tags
     *
     * Returns an array of meta tags as a $key=>$value pairing
     * where the key is the 'name' and the value is the 'content'.
     *
     * These get processed in a foreach loop in the head() function
     * in the base template (by default /app/core/Templates/Base.php).
     *
     * @return  array   Key/Value pairing
     */
    public static function meta_tags ()
    {
        return [
            'description' => 'Enter a description',
            'author' => 'Your Name',
            'viewport' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
            'keyword' => 'Bootstrap,Admin,Template,PHP,MVC,Framework,jQuery,CSS,HTML,Dashboard'
        ];
    }

    public static function registration_terms ()
    {
        // Default terms taken from https://www.nibusinessinfo.co.uk/content/sample-website-terms-and-conditions-use
        // Change this to suit your needs.
        return '<h3>Terms and conditions</h3>

                <p>Welcome to our website. If you continue to browse and use this website, you are agreeing to comply with and be bound by the following terms and conditions of use, which together with our privacy policy govern '.self::site_details ('site_name').'\'s relationship with you in relation to this website. If you disagree with any part of these terms and conditions, please do not use our website.</p>

                <p>The term '.self::site_details ('site_name').' or \'us\' or \'we\' refers to the owner of the website whose registered office is [address]. Our company registration number is [company registration number and place of registration]. The term \'you\' refers to the user or viewer of our website.</p>

                <p>The use of this website is subject to the following terms of use:</p>

                <ul>
                    <li>The content of the pages of this website is for your general information and use only. It is subject to change without notice.</li>
                	<li>This website uses cookies to monitor browsing preferences. If you do allow cookies to be used, the following personal information may be stored by us for use by third parties: [insert list of information].</li>
                	<li>Neither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law.</li>
                	<li>Your use of any information or materials on this website is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through this website meet your specific requirements.</li>
                	<li>This website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions.</li>
                	<li>All trade marks reproduced in this website which are not the property of, or licensed to, the operator are acknowledged on the website.</li>
                	<li>Unauthorised use of this website may give rise to a claim for damages and/or be a criminal offence.</li>
                	<li>From time to time this website may also include links to other websites. These links are provided for your convenience to provide further information. They do not signify that we endorse the website(s). We have no responsibility for the content of the linked website(s).</li>
                	<li>Your use of this website and any dispute arising out of such use of the website is subject to the laws of England, Northern Ireland, Scotland and Wales.</li>
                </ul>';
    }

    public static function css ($path)
    {
        $array = [
            'local' => [
                // Main Site Styles
                'site' => '<link rel="stylesheet" href="/includes/css/site.css">',
                'admin' => '<link rel="stylesheet" href="/includes/css/admin.css">',
            ],
            'remote' => [
                // Font Awesome
                'font-awesome' => '<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">',




        		// Simple Line Icons
                'simple-line-icons' => '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/simple-line-icons/2.4.1/css/simple-line-icons.css" />',

        		/*
        			Bootstrap
        			We have both versions 3 and 4 just in case 3 is still needed
        		 */
                'bootstrap' => [
        			// Version 3.3.7
                    'v3' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">',

                    // Version 4 beta 3
                    'v4_beta' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy" crossorigin="anonymous">',

                    'v4' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">',

                ]
            ]
        ];

        return self::set_path($array, $path);

    } // css

    public static function js ($path)
    {
        $array = [
            'local' => [
                // Main Site Styles
                'default' => '<script src="default.js"></script>',
            ],
            'remote' => [
                // JQuery
        		'jquery' => '<script src="https://code.jquery.com/jquery-3.1.1.js" integrity="sha256-16cdPddA6VdVInumRGo6IbivbERE8p7CQR3HzTBuELA=" crossorigin="anonymous"></script>',
                'jquery_ui' => '<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js" integrity="sha256-T0Vest3yCU7pafRw9r+settMBX6JkKN06dqBnpQ8d30=" crossorigin="anonymous"></script>',
                'font-awesome-5' => '<script defer src="https://use.fontawesome.com/releases/v5.0.4/js/all.js"></script>',

                /*
                    Bootstrap
                    We have both versions 3 and 4 just in case 3 is still needed
                 */
                'bootstrap' => [
                    // Version 3.3.7
                    'v3' => '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>',

                    // Version 4
                    'v4' => '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>',
                ],
                'popper' => '<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>',

                'ckeditor' => '<script src="https://cdn.ckeditor.com/4.8.0/standard/ckeditor.js"></script>'
            ]
        ];

        return self::set_path($array, $path);

    } // js


    private static function set_path ($array, $path)
    {
        $path = explode('/', $path);

        $result = $array[$path[0]];
        unset($path[0]);

        foreach ($path as $bit) {
            if(isset($result[$bit])) {

                // If the path does exist, append the path to the $GLOBALS[] type
                $result = $result[$bit];

            }
        }
        return $result;
    }
}





===================================================================================




<?php

/**
 * Database class
 *
 * Controls all database CRUD functions as well as opening up an instance
 * of this class.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the inititisation file
require_once 'app/init.php';

class DB
{
	// Set any private variables
    private static $_instance = null;
    private $_pdo,
            $_query,
            $_error = false,
            $_results,
            $_count = 0;

	/**
	 * Construct the database connection
	 *
	 *	Opens up a connection to the database and assigns it to
	 *	$this->_pdo to make it re-usable.
	 *
	 * The connection parameters are called using Globals on values held
	 * in /app/core/config_files/db.php
	 *
	 * @return 	Database connection
	 */
    private function __construct()
	{
        $db = Settings::db();

        try
		{
            $this->_pdo = new PDO('mysql:host=' . $db['host'] . ';dbname=' . $db['dbname'],  $db['username'], $db['password']);

        } catch(PDOException $e) {
            die($e->getMessage());
        }
    } //__construct ()

	/**
	 * Create a new Database instance
	 *
	 * Creates a new instance of the database class that can be assigned to a
	 * variable and re-used.
	 *
	 * @return Database connection
	 * @example $this->db = DB::dbConnect();
	 */
    public static function dbConnect()
	{
		// If an instance has not already been set, set it
        if(!isset(self::$_instance)) {
            self::$_instance = new DB();
        }
		// Return the instance
        return self::$_instance;
    } // dbConnect()

	/**
	 * Perform a query on an SQL statement
	 *
	 * All of the variables created are private so cannot be called
	 * externally, but each has it's own public function.
	 *
	 * If you are using parameters, you need to replace the position where
	 * their values would be with ?
	 *
	 * self::db()->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash));
	 *
	 * @param  string 	$sql    SQL statement
	 * @param  array  	$params Paremeters to add to the string
	 * @return array         	Query results, errors and count
	 */
    public function query ($sql, $params = array()) {
		// Set error to false by default
        $this->error = false;

		/*
			We attempt to prepare the query and if it is succesful,
			we bind the parameters and execute it.
		 */
        if ($this->_query = $this->_pdo->prepare($sql))
		{
			/*
				The query is prepared so we have to check to see if
				there are any parameters.

				If there are we loop through them annd then bind them
				to the query
			 */

			// Set the counter to one
            $x = 1;

			// Check to see if there are any parameters
            if(count($params))
			{
				/*
					There are parameters so we loop through them and
					bind each
				 */
                foreach($params as $param) {
					// Bind the parameter with it's counter position
                    $this->_query->bindValue($x, $param);

					// Increment the counter
                    $x++;
                }
            }


			/*
				Now that the parameters have been bound, we try to execute
				the query.
				If succesful we set the results and row count, otherwise we
				set the error.
			 */
            if($this->_query->execute())
			{
				// The query executed succesfully so set the results and count
                $this->_results = $this->_query->fetchAll(PDO::FETCH_OBJ);
                $this->_count = $this->_query->rowCount();
            } else
			{
				// The query failed so set error to true
                $this->_error = true;
            }
        } // prepare

		// Return anything that has been set as a result of the wquery attempt
        return $this;

    } // query ()


	/**
	 * Perfom a simple action on a table
	 *
	 * Allows you to perform a quick SELECT or DELETE on a table when
	 * only one parameter needs to be set.
	 *
	 * @param  string $action SELECT/DELETE
	 * @param  string $table  The name of the table
	 * @param  array  $where  An array of parameters - field, operator, value
	 * @return array          The output from the query() function in this class
	 */
    public function action ($action, $table, $where = array())
	{
		/*
			A $where array MUST contain exactly three paramenters for this to
			work so the first thing to do is check that.

		 */
        if (count($where) === 3)
		{
			// There are three parameters so set the available operators
            $operators = array('=', '>', '<', '>=', '<=');

			/*
				As the $where array is set as field, operator, value we can easily set them to named variables
			 */
            $field = $where[0];
            $operator = $where[1];
            $value = $where[2];

			/*
				The next check is to make sure that the supplied operator is
				one of the ones set in $operators
			 */
            if (in_array($operator, $operators))
			{
				// The operator matches so create the SQL statement
                $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";

				// Try to execute the query using the query() function.
                if(!$this->query($sql, array($value))->error()) {

					// Return anything returned from the query
                    return $this;
                }
            } // Operator check
        }// count check

        return false;
    } // action ()

	/**
	 * Perform a quick select on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example get('users', array('joined', '>', '2017-01-01'))
	 */
    public function get ($table, $where)
	{
        return $this->action('SELECT *', $table, $where);
    } // get ()

	/**
	 * Perform a quick delete on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example delete('users', array('joined', '>', '2017-01-01'))
	 */
    public function delete ($table, $where)
	{
        return $this->action('DELETE', $table, $where);
    } // delete ()


	/**
	 * Insert a row into a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example insert('users', array('username' => 'SteveB', 'active' => '1'))
	 */
    public function insert ($table, $fields = array())
	{
		/*
			The $fields array will have a $key => $value pairing for
			each field having data inserted. The $key will matche the
			table field name and the $value will be the value to insert.

			We use array_keys extract the keys from the $fields array
			and assigned them to $keys.
		 */
        $keys = array_keys($fields);

		// Create a default $values variable
        $values = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create a ? to
			place in the fields section of the insert statement
		 */
        foreach($fields as $field)
		{
			// Add a placeholder to $values
            $values .= '?';

			// If we are not on the last pairing, add a comma to $values
            if ($x < count($fields))
			{
                $values .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach

		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the fields and values.

			Using the example at the top of this function, the statement would be
			INSERT INTO `users` (`username`, `active`) VALUES (?, ?)

			We then pass the statement into the query() function
		 */
        $sql = "INSERT INTO `{$table}` (`" . implode('`,`', $keys) . "`) VALUES ({$values})";

		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error())
		{
			// Return anything returned from the query
			return true;
        }

        return false;

    } // insert()


	/**
	 * Update a row in a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param   int 	$id     The id of the row to update
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example update('users', 1, array('username' => 'SteveBNew', 'active' => '0'))
	 */
    public function update ($table, $id, $fields = array())
	{
		// Create a default $set variable to hold the values and fields
        $set = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create an x=? to
			place in the values section of the update statement
		 */
        foreach ($fields as $name => $value)
		{
			// Add a field = ?
            $set .= "`{$name}` = ?";

			// If we are not on the last pairing, add a comma to $set
            if ($x < count($fields)) {
                $set .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach


		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the values in $set.

			Using the example at the top of this function, the statement would be
			UPDATE `users` SET `username`='SteveBNew',`active`='0' WHERE id=1

			We then pass the statement into the query() function
		 */
        $sql = "UPDATE `{$table}` SET {$set} WHERE id = {$id}";

		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error())
		{
			// Return anything returned from the query
			return true;
        }

        return false;

    } // update ()

	//////////////////////////////////////////////////
	// Public functions to call private variables  //
	//////////////////////////////////////////////////

	// Allow a single row of results data to be called publically
    public function first ()
	{
        return $this->results()[0];
    }

	// Allow a results set data to be called publically
    public function results ()
	{
        return $this->_results;
    }

	// Return a row count
    public function count ()
	{
        return $this->_count;
    }

	// Return an error
    public function error ()
	{
        return $this->_error;
    }

     //  Get the id of the last inserted row
    public function insertId () {
       return $this->_pdo->lastInsertId();
    } // insertId ()

}





=========================================================================================




<?php

/**
 * Main Template
 *
 * This file contains actual content of the page and buiilds the template
 * using the functions in Base_Template.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	new Main($content, $params)
 * @return 		string     Entire HTML page
 */
class T_Calls extends Base {

    // To allow for multiple versions of the same template, we can pass in a version. Check content() in this Class to see how it is used

	/**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$params        Additional parameters
	 */
    public function __construct($content, $params=array()) {

		// Set the displayed content to $this->content
		$this->content = $content;

		/*
            If a 'page_title' has been passed set it to $this->page_title,
            otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle,
            if required .

            These variables get checked in the content() function and then
            added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT
            show, even if it has been set.
         */
		$this->page_title = (isset($params['page_title'])) ? $params['page_title'] : null;
        $this->page_subtitle = (isset($params['page_subtitle'])) ? $params['page_subtitle'] : null;

		/**
		 * Set the layout version
		 *
		 * If a layout has been passed from the view via $params['layout'] set $this->layout
		 * to it otherwise use 'default'.
		 *
		 * These variables get checked in the layout_switcher() function within this file
		 * and will return a layout based on that is set here.
		 *
		 * To see the demo layout versions and instructions on how to edit them or create a
		 *  new one, see layout_switcher() and its comments.
		 *
		 * @var string
		 */
        if(isset($params['layout'])) {
            $this->layout = $params['layout'];
        } else {
            $this->layout = 'default';
        }

        /**
         * Set any page specific meta tags. These will be set in the view as a
         * key/value pairing and will override the defaults set in
         * /app/core/Settings.php->meta_tags()
         * @var [type]
         */
        if(isset($params['meta'])) {$this->meta =$params['meta'];}

        /**
         * Set any page specific css. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['css'])) {$this->css =$params['css'];}

        /**
         * Set any page specific js. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['js'])) {$this->js =$params['js'];}

        if(isset($params['alert'])) {
            $this->content = Php2Bs::bs_row ([
                'content' => Php2Bs::bs_container ([
                    'content' => Php2Bs::bs_column ([
                        'content' => $params['alert'],
                        'class' => 'col p-0'
                    ]),
                ])
            ]).$this->content;
        }




		// Call the template function
        self::Template();

    } // __construct


	/**
	 * Build the entire template
	 *
	 * We build this up gradually via functions contained eihter in this file or in
	 * the Base_Template file it extends
	 * @return 	HTML page
	 */
    private function Template () {
		// Build the start of the page up to the opening body tag, including the <head>
        self::bodyStart ();

        // Build banner
        self::banner ();

        // Build top navigation bar
        self::topNav ();

		// Show the actual content for the page
        self::content ();

		// Show the footer
        self::footer ();

		// Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()

    /**
     * Create the top banner
     *
     * @return string 					Banner
     */
    public function banner () {

        $title = Php2Html::h ([
            'size' => '1',
            'class' => 'title',
            'content' => 'Main Template',
        ]); // $title

        $inner_container = Php2Bs::bs_container ([
            'content' => $title
        ]); // $inner_container

        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'class' => 'bg-info text-light pb-2',
            'content' => $inner_container
        ]); // container

    } // banner()

	/**
	 * Show the actual page content
	 *
	 * We show the actual content of the page using a pre-defined
	 * layout that has either been set when calling the template
	 * from the view or as a default.
	 *
	 * This function returns the entire content, aside from the
	 * wrapper created with the base file this extends and the
	 * content is built before being passed into a 'bs_container'
	 * function from the Php2Bs (Bootstrap) class to create the
	 * entire content area.
	 *
	 * @return     string  	   Page content
	 */
    private function content () {

        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $params['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $params['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title)
        {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);

            /*
                If a subtitle has been set, add it to $title as a paragraph
                using the p() function in the Php2Html class with a class of 'lead-description'.
             */
            if($this->page_subtitle)
            {
                $title .=  Php2Html::p([
                    'class' => 'lead description',
                    'content' => $this->page_subtitle
                ]);
            }

            /*
                Now $title will contain everything required in the page_title
                div so we add it to $content using the div() function in the
                Php2Html class.
             */

             $this->content = Php2Bs::bs_column ([

                     'content' => Php2Html::h([
                         'class' => 'col-12',
                         'size' => '4',
                         'content' => $title
                     ]).$this->content
             ]);
            /*
                Show title above both columns instead

            $content .= Php2Html::div([
                'class' => 'page_title',
                'content' => $title
            ]);

             */
        }



        /*
            Call the correct layout of the page

            The main content could be called into one of several different
            layouts. The reason for this is you may want a slightly
            different layout for certain content such as some pages having
            a content specific sidebar.

            This is fully controlled by the layout_switcher () function in
            this file (a separate function has been created as there is an
            infinite number of combinations that you can use) controls all of it so we simply add that to the $content variable.

            See the comments for that function for a list of available ones and how to create a new one.
         */
        $content .= $this->layout_switcher ();


        /*
            We now have the entire content of the page, in the required layout
            version, contained within $content.

            In this template, the entire content area is wrapped in the Bootstrap container within a Bootstrap fluid-container.

            Tp make this, we echo out a bs_container() function from the Php2Bs
            class, with 'container_type' set to fluid.

            Inside this, we set it's 'content' as another bs_container(), but this time without the 'fluid' request. It is in the 'content' for
            this that we actually pass the completed $content.
         */
        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => Php2Bs::bs_container ([
                'content' => $content
            ]) // container
        ]); // container-fluid

    } // content()


    /**
     * Set the correct layout
     *
     * Each of the different available layouts are created using the 'bs_row'
     * and 'bs_column' functions from the Php2Bs (Bootstrap) class.
     *
     * The required layout is set to $this->layout in the __construct of
     * this file. If it has been passed in from the view as $params['layout']
     * that is what it will be set to, otherwise it will be set to 'default'.
     *
     * We run a switch on $this->layout and return a row (bs_row). As well
     * as setting any attributes, such as id's and classes, we pass in a
     * parameter called 'content'. This will be be any number of functions
     * that create columns using specific functions.
     *
     * The columns themselves could have multiple functions included and
     * these are explained at the start of the columns functions below. Note
     * that any classes applied to the rows will be inherited by the
     * columns unless they have overriding classes.
     *
     * To add a new layout, create a new case in the switch statement,
     * matching the format of the existing ones and create any new columns
     * that are required.
     *
     * @return  string  Page Layout
     */
    protected function layout_switcher () {

        switch ($this->layout) {
            /*
                Full Width

                This is a single column layout using the main_column_full()
                function, with an id of main_content and a class of bg-light
             */
            case 'full-width':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_full (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Left column

                This is a two column layout using the left_Column () and
                main_column() functions concatenated, with an id of main_content and a class of bg-dark text-info
             */
            case 'left-col':
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                    'class' => 'bg-dark text-info',
                ]);
            break;

            /*
                Right column

                This is a two column layout using the main_column() and
                right_Column () functions concatenated, with an id of main_content and a class of text-danger
            */
            case 'right-col':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_medium ()
								.self::right_Column (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Three column

                This is a three column layout using the left_Column (),
                main_column() and right_Column () functions concatenated,
                with an id of multi_column.
            */
            case 'three-col':
                return Php2Bs::bs_row ([
                	'content' => self::left_Column ()
								.self::main_column_small ()
								.self::right_Column (),
                	'id' => 'multi_column',
                ]);
            break;

            /*
                Test layout

                This is here as a simple way of testing new things or
                playing around with layouts and contains a few more attributes.
            */
            case 'test':
                return Php2Bs::bs_row ([
					'content' => self::main_column_full (),
                    'class' => 'bg-info',
                    'id' => 'main_content',
                    'data_attr' => [
                        'ref' => 'refdata',
                        'cat' => 'news'
                    ]
                ]);
            break;

            /*
                Default layout

                If no layout has been specified in the view, we default to
                the left column one.
            */
            default:
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                ]);
            break;
        } // Layout switch
    }


    /**
     * Layout column functions
     *
     * These are the functions that are called in to the rows created in
     * layout_switcher() and are all created using the 'bs_column' function
     * from the Php2Bs (Bootstrap) class.
     *
     * As when creating the rows we can set any attributes, such as id's and
     * classes, with the actual required output being passed as 'content'.
     *
     */

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {
        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9'
        ]);
    } // main_column_medium ()

    /*
        Full Main Column

        Used in the 'full-width' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with at all breakpoints.
     */
    private function main_column_full () {
        return $this->content;
    } // main_column_full ()

    /*
        Small Main Column

        Used in the 'three-col' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        However, this time we also concatenate the function demo_extra_box() to give extra content to the column.

        Using the Bootstrap grid sizes it is full with, changing to 6/12
        width at the medium breakpoint.
     */
	private function main_column_small () {
        return Php2Bs::bs_column ([
			'content' => $this->content
						.$this->demo_extra_box (),
			'id' => 'main_small_column',
			'class' => 'col-md-6'
        ]);

    } // main_column_small ()

	/*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
    private function left_Column () {
        return Php2Bs::bs_column ([
			'content' => self::user_box ()
						.self::side_menu (),
			'id' => 'left',
			'class' => 'col-12 col-md-3 left-col bg-warning pt-2'
        ]);
    } // left_Column ()

    /*
        Left Column

        Used in the 'default', 'right-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        side_menu () and user_box () functions (the same as we did in left_column () but in a different order. Also, in this one we concatenate them into a variable first, rather than straight into the bs_column function.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
	private function right_Column () {

        //$userbox_content .= $latestuser->username;
        //$userbox_content .= $latest_user_date->format('d/m/Y g:ia');

        $content = Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Call Log Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Call',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/CallLog/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Today',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Today'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Week',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Week'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Month',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Month'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Year',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Year'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card


		return Php2Bs::bs_column ([
			'content' => $content,
			'id' => 'right',
			'class' => 'col-12 col-md-3 right-col bg-info pt-2 mt-4 mt-md-0'
        ]);
    } // right_Column ()



}





======================================================================================




<?php

/**
 * Main Template
 *
 * This file contains actual content of the page and buiilds the template
 * using the functions in Base_Template.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	new Main($content, $params)
 * @return 		string     Entire HTML page
 */
class T_Faults extends Base {

    // To allow for multiple versions of the same template, we can pass in a version. Check content() in this Class to see how it is used

	/**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$params        Additional parameters
	 */
    public function __construct($content, $params=array()) {

		// Set the displayed content to $this->content
		$this->content = $content;

		/*
            If a 'page_title' has been passed set it to $this->page_title,
            otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle,
            if required .

            These variables get checked in the content() function and then
            added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT
            show, even if it has been set.
         */
		$this->page_title = (isset($params['page_title'])) ? $params['page_title'] : null;
        $this->page_subtitle = (isset($params['page_subtitle'])) ? $params['page_subtitle'] : null;

		/**
		 * Set the layout version
		 *
		 * If a layout has been passed from the view via $params['layout'] set $this->layout
		 * to it otherwise use 'default'.
		 *
		 * These variables get checked in the layout_switcher() function within this file
		 * and will return a layout based on that is set here.
		 *
		 * To see the demo layout versions and instructions on how to edit them or create a
		 *  new one, see layout_switcher() and its comments.
		 *
		 * @var string
		 */
        if(isset($params['layout'])) {
            $this->layout = $params['layout'];
        } else {
            $this->layout = 'default';
        }

        /**
         * Set any page specific meta tags. These will be set in the view as a
         * key/value pairing and will override the defaults set in
         * /app/core/Settings.php->meta_tags()
         * @var [type]
         */
        if(isset($params['meta'])) {$this->meta =$params['meta'];}

        /**
         * Set any page specific css. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['css'])) {$this->css =$params['css'];}

        /**
         * Set any page specific js. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['js'])) {$this->js =$params['js'];}

        if(isset($params['alert'])) {
            $this->content = Php2Bs::bs_row ([
                'content' => Php2Bs::bs_container ([
                    'content' => Php2Bs::bs_column ([
                        'content' => $params['alert'],
                        'class' => 'col p-0'
                    ]),
                ])
            ]).$this->content;
        }




		// Call the template function
        self::Template();

    } // __construct


	/**
	 * Build the entire template
	 *
	 * We build this up gradually via functions contained eihter in this file or in
	 * the Base_Template file it extends
	 * @return 	HTML page
	 */
    private function Template () {
		// Build the start of the page up to the opening body tag, including the <head>
        self::bodyStart ();

        // Build banner
        self::banner ();

        // Build top navigation bar
        self::topNav ();

		// Show the actual content for the page
        self::content ();

		// Show the footer
        self::footer ();

		// Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()

    /**
     * Create the top banner
     *
     * @return string 					Banner
     */
    public function banner () {

        $title = Php2Html::h ([
            'size' => '1',
            'class' => 'title',
            'content' => 'Main Template',
        ]); // $title

        $inner_container = Php2Bs::bs_container ([
            'content' => $title
        ]); // $inner_container

        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'class' => 'bg-info text-light pb-2',
            'content' => $inner_container
        ]); // container

    } // banner()

	/**
	 * Show the actual page content
	 *
	 * We show the actual content of the page using a pre-defined
	 * layout that has either been set when calling the template
	 * from the view or as a default.
	 *
	 * This function returns the entire content, aside from the
	 * wrapper created with the base file this extends and the
	 * content is built before being passed into a 'bs_container'
	 * function from the Php2Bs (Bootstrap) class to create the
	 * entire content area.
	 *
	 * @return     string  	   Page content
	 */
    private function content () {

        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $params['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $params['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title)
        {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);

            /*
                If a subtitle has been set, add it to $title as a paragraph
                using the p() function in the Php2Html class with a class of 'lead-description'.
             */
            if($this->page_subtitle)
            {
                $title .=  Php2Html::p([
                    'class' => 'lead description',
                    'content' => $this->page_subtitle
                ]);
            }

            /*
                Now $title will contain everything required in the page_title
                div so we add it to $content using the div() function in the
                Php2Html class.
             */

             $this->content = Php2Bs::bs_column ([

                     'content' => Php2Html::h([
                         'class' => 'col-12',
                         'size' => '4',
                         'content' => $title
                     ]).$this->content
             ]);
            /*
                Show title above both columns instead

            $content .= Php2Html::div([
                'class' => 'page_title',
                'content' => $title
            ]);

             */
        }



        /*
            Call the correct layout of the page

            The main content could be called into one of several different
            layouts. The reason for this is you may want a slightly
            different layout for certain content such as some pages having
            a content specific sidebar.

            This is fully controlled by the layout_switcher () function in
            this file (a separate function has been created as there is an
            infinite number of combinations that you can use) controls all of it so we simply add that to the $content variable.

            See the comments for that function for a list of available ones and how to create a new one.
         */
        $content .= $this->layout_switcher ();


        /*
            We now have the entire content of the page, in the required layout
            version, contained within $content.

            In this template, the entire content area is wrapped in the Bootstrap container within a Bootstrap fluid-container.

            Tp make this, we echo out a bs_container() function from the Php2Bs
            class, with 'container_type' set to fluid.

            Inside this, we set it's 'content' as another bs_container(), but this time without the 'fluid' request. It is in the 'content' for
            this that we actually pass the completed $content.
         */
        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => Php2Bs::bs_container ([
                'content' => $content
            ]) // container
        ]); // container-fluid

    } // content()


    /**
     * Set the correct layout
     *
     * Each of the different available layouts are created using the 'bs_row'
     * and 'bs_column' functions from the Php2Bs (Bootstrap) class.
     *
     * The required layout is set to $this->layout in the __construct of
     * this file. If it has been passed in from the view as $params['layout']
     * that is what it will be set to, otherwise it will be set to 'default'.
     *
     * We run a switch on $this->layout and return a row (bs_row). As well
     * as setting any attributes, such as id's and classes, we pass in a
     * parameter called 'content'. This will be be any number of functions
     * that create columns using specific functions.
     *
     * The columns themselves could have multiple functions included and
     * these are explained at the start of the columns functions below. Note
     * that any classes applied to the rows will be inherited by the
     * columns unless they have overriding classes.
     *
     * To add a new layout, create a new case in the switch statement,
     * matching the format of the existing ones and create any new columns
     * that are required.
     *
     * @return  string  Page Layout
     */
    protected function layout_switcher () {

        switch ($this->layout) {
            /*
                Full Width

                This is a single column layout using the main_column_full()
                function, with an id of main_content and a class of bg-light
             */
            case 'full-width':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_full (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Left column

                This is a two column layout using the left_Column () and
                main_column() functions concatenated, with an id of main_content and a class of bg-dark text-info
             */
            case 'left-col':
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                    'class' => 'bg-dark text-info',
                ]);
            break;

            /*
                Right column

                This is a two column layout using the main_column() and
                right_Column () functions concatenated, with an id of main_content and a class of text-danger
            */
            case 'right-col':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_medium ()
								.self::right_Column (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Three column

                This is a three column layout using the left_Column (),
                main_column() and right_Column () functions concatenated,
                with an id of multi_column.
            */
            case 'three-col':
                return Php2Bs::bs_row ([
                	'content' => self::left_Column ()
								.self::main_column_small ()
								.self::right_Column (),
                	'id' => 'multi_column',
                ]);
            break;

            /*
                Test layout

                This is here as a simple way of testing new things or
                playing around with layouts and contains a few more attributes.
            */
            case 'test':
                return Php2Bs::bs_row ([
					'content' => self::main_column_full (),
                    'class' => 'bg-info',
                    'id' => 'main_content',
                    'data_attr' => [
                        'ref' => 'refdata',
                        'cat' => 'news'
                    ]
                ]);
            break;

            /*
                Default layout

                If no layout has been specified in the view, we default to
                the left column one.
            */
            default:
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                ]);
            break;
        } // Layout switch
    }


    /**
     * Layout column functions
     *
     * These are the functions that are called in to the rows created in
     * layout_switcher() and are all created using the 'bs_column' function
     * from the Php2Bs (Bootstrap) class.
     *
     * As when creating the rows we can set any attributes, such as id's and
     * classes, with the actual required output being passed as 'content'.
     *
     */

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {
        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9'
        ]);
    } // main_column_medium ()

    /*
        Full Main Column

        Used in the 'full-width' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with at all breakpoints.
     */
    private function main_column_full () {
        return $this->content;
    } // main_column_full ()

    /*
        Small Main Column

        Used in the 'three-col' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        However, this time we also concatenate the function demo_extra_box() to give extra content to the column.

        Using the Bootstrap grid sizes it is full with, changing to 6/12
        width at the medium breakpoint.
     */
	private function main_column_small () {
        return Php2Bs::bs_column ([
			'content' => $this->content
						.$this->demo_extra_box (),
			'id' => 'main_small_column',
			'class' => 'col-md-6'
        ]);

    } // main_column_small ()

	/*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
    private function left_Column () {
        return Php2Bs::bs_column ([
			'content' => self::user_box ()
						.self::side_menu (),
			'id' => 'left',
			'class' => 'col-12 col-md-3 left-col bg-warning pt-2'
        ]);
    } // left_Column ()

    /*
        Left Column

        Used in the 'default', 'right-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        side_menu () and user_box () functions (the same as we did in left_column () but in a different order. Also, in this one we concatenate them into a variable first, rather than straight into the bs_column function.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
	private function right_Column () {

        //$userbox_content .= $latestuser->username;
        //$userbox_content .= $latest_user_date->format('d/m/Y g:ia');

        $content = Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Faults Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Fault',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/Faults/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Today',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Today'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Week',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Week'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Month',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Month'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Year',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Year'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card


		return Php2Bs::bs_column ([
			'content' => $content,
			'id' => 'right',
			'class' => 'col-12 col-md-3 right-col bg-info pt-2 mt-4 mt-md-0'
        ]);
    } // right_Column ()



}





===============================================================================




<?php

/**
 * Main Template Base
 *
 * This file contains the core structure and functions for building the main
 * template all bar the actual page content, which is called using new Main_Template
 * which extends this class.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */
class Base {

	/**
	 * Build the HTML down to the opening body tag and include extra css
	 *
	 * @return string 					Template to the opening <body> tag
	 */
    public function bodyStart ()
	{

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';


        /**
         * Include the <head> section
         *
         * If a page needs any extra css apart from the default, this will
         * have been specified using an $include array when calling new Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out .= self::head ();

        // Open the body tag
        $out .= '<body class="bdy">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

	/**
	 * Finish the HTML
	 *
	 * @return string 					Template for the end of the HTML
	 */
    public function bodyEnd ()
	{

		/**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

	/**
	 * Build the <head> section
	 *
	 * Builds the entire <head> tag and includes any global or
	 * page specific css and meta tags.
	 *
	 * @return     string      <head> section
	 */
    private function head ()
	{
		/*
            We build the contents of the <head> gradually so we create a $out
            variable containing the opening tag and concatenate to it as we go along.
         */
		$out = '<head>';

		/*
            Include the <meta> tags

            Each of the meta tags should initially be stored in the meta_tags()
            function in /app/core/Settings.php with a default content to be used
            if an alternative is not set.

            For page specific meta tags, set a key/pairing array in the view as
            $params['meta'] with the name and content of each once you want to
            overwrite.

            You can also set global meta tags manually and this is required for any
            that do not use a name and content combination.
         */
        $out .=  ' <meta charset="utf-8">';

        /*
            As there may be overrides for some of the meta tags set in the page/view, we initially store the default meta tags in a $tags variable so it can be easily manipulated.
         */
        $tags = Settings::meta_tags();

        /*
            If any page-specific meta tags have been passed in, they would have
            been set to $this->meta in the called template file (by default
            /app/core/Templates/Main.php).
            We loop though these and for each one, overwrite the matching tag
            name in $tags.
         */
        if(isset($this->meta))
        {
            foreach ($this->meta as $name => $content) {

                $tags[$name] = $content;
            }
        }

        /*
            Finally, we loop through the tags array and create a meta tag for each one, adding it to the $out variable.
         */
        foreach ($tags as $name => $content) {
            $out .= Php2Html::meta([
                    'name' => $name,
                    'content' => $content
            ])."\n";
        }

		/*
            Set the Page Title

            If the page title has been passed in from the view, show the site name as set in Settings.php followed by a colon and then the page title.
            Otherwise, it just shows the site name.

            You can change this to suit your needs.
         */
		$title = isset($this->page_title) ? Settings::site_details('site_name') .': '.$this->page_title: Settings::site_details('site_name');
		$out .=  '<title>' . $title. '</title>';

		// Link the Favicon
		$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

		/*
            Call in the stylesheets

            Again, you can have global style sheets as well as page, specific ones. Wherever they are set, they are called from the css() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full stylesheet link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['css'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/site' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
		$out .= Settings::css('remote/bootstrap/v4');

        // Loop through the page specific styles
        if(isset($this->css))
        {
            foreach ($this->css as $stylesheet) {
                $out .= Settings::css($stylesheet);
            }
        }


        $out .= Settings::css('local/site');

        // Close the head tag
        $out .=  '</head>';

        // Echo the $out variable
		echo $out;

    } // head()

	/**
	 * Build the required scripts
	 *
	 * Builds the js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts ()
	{
        $out = '';

        /*
            Call in the any scripts

            Again, you can have global scripts as well as page, specific ones. Wherever they are set, they are called from the js() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full script link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['js'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/default' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
         $out .= Settings::js('remote/jquery');
         $out .= Settings::js('remote/popper');
         $out .= Settings::js('remote/bootstrap/v4');
         $out .= Settings::js('remote/font-awesome-5');

        // Loop through the page specific styles
        if(isset($this->js))
        {
            foreach ($this->js as $script) {
                $out .= Settings::js($script);
            }
        }

        $out .= Settings::js('local/default');

        // Echo the $out variable
        echo $out;

    } // scripts()

	/**
	 * Build the top navigation menu
	 *
	 * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
	 * in the required links and dropdowns
	 *
	 * @return string 	nav
	 */
    public function topNav () {
        // Main Site Top Navigation Menu
        $nav_items = [
            'Home' => ['link', '/'],
            'Users' => ['link', '/Users/'],
            'Faults' => ['link', '/Faults/'],
            'Call Log' => ['link', '/CallLog/'],
            '\'One Thing\'' => ['link', '/OneThing/'],
            'Ideas' => ['link', '/Ideas/'],

        ]; // $nav_items


        $brand = Php2Html::a ([
            'content' => 'UAT Hub',
            'href' => '#',
            'class' => 'navbar-brand'
        ]);

        $out = '';

        $toggle_button = Php2Html::button ([
            'content' => Php2Html::span ([
                    'content' => '',
                    'class' => 'navbar-toggler-icon'
            ]),
            'class' => 'navbar-toggler navbar-toggler-right',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#main-nav',
            ],
            'aria' => [
                'controls' => 'main-nav',
                'expanded' => 'false',
                'label' => 'Toggle navigation',

            ],
        ]);

         $menu = '';
         foreach ($nav_items as $key => $value)
 		{
 			// 'type' is set as 'link'
            if($value[0] == 'link') {
 				/*
 					Build a <li> with the class of .nav-item
 					Inside this put an <a> with a value of $value[1] (the link)
 					and a display of $key (the link name)
 				 */
                 $params['href'] = $value[1];
                 $params['class'] = 'text-light';
                 $params['content'] = $key;
                 $menu .= Php2Bs::bs_nav_item ([
                     'content' => Php2Bs::bs_nav_link (
                         $params
                     )
                 ]);
            }

 			// 'type' is set as 'dropdown'
             if($value[0] == 'dropdown') {
 				/*
 					Build a <li> with the class of .nav-item dropdown .

 					Inside this, build an <a> with a class of dropdown-toggle. This
 					will then use the Bootstap toggle class.
 					Set the id to the $key (the link name) appended with '_menu'. This
 					will be to target the correct dropdown menu. Also set the display to $key.

 					Build a <div> with the class of .dropdown-menu. Give it an
 					aria-labelledby of $key appended with '_menu' so it matches
 					the <a> that triggers it.

 					Finally, inside the div, loop through the links (stored in $value[1]) and creat an <a> for each one.
 				 */
                  $links = '';
                  foreach ($value[1] as $items => $item)
                  {


                      $links .= Php2Bs::bs_dropdown_item([
							'content' => $items,
                            'href' => $item[1]
                      ]);

                       //$out .= '  <a class="dropdown-item" href="'.$item[1].'">'.$menu.'</a>';
                  }

                 $menu .= Php2Bs::bs_nav_dropdown([

                         'li' => [
                             //'class' => 'nav-item dropdown',
                         ],
                         'a' => [
                             'content' => $key,
                             'id' => $key.'_menu',
                             'class' => 'text-info-100',
                             'data_attr' => [
                                 'toggle' => 'dropdown',

                             ],
                             'aria' => [
                                 'haspopup' => 'main-nav',
                                 'expanded' => 'true',
                                 'expanded' => 'false',

                             ],
                         ],
                         'menu' => [
                             'content' => $links,
                         ]

                 ]);
             }
         }


        $nav_params['content'] = Php2Bs::bs_navbar_nav ([
			'content' => $menu
        ]);
        $nav_params['class'] = 'mr-auto';
        $nav_params['id'] = 'main-nav';

        $navbar_collapse = Php2Bs::bs_navbar_collapse (
            $nav_params
        );

        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            $user_button_text = 'Login';
        } else {
            $user_button_text = 'Logout / Profile';
        }

        $user_button = Php2Html::a ([
            'content' => $user_button_text,
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#nav-user'
            ],
            'aria' => [
                 'controls' => 'nav-user',
                 'expanded' => 'false',
                 'label' => 'Toggle user navigation'
            ]
        ]);


         $out = Php2Bs::bs_navbar ([
            // Navbar content
            'content' => Php2Bs::bs_container ([
                'content' =>  $brand.$toggle_button . $navbar_collapse.$user_button,
                'class' => 'text-white',
                //'type' => 'fluid'
            ]),
            'class' => 'navbar-expand-lg navbar-dark bg-dark invert sticky-top h-1 pl-2 p-md-0'


        ]);
        $out .= Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => Php2Bs::bs_container ([
                'content' => $this->user_box (),


            ]),
            'class' => 'collapse py-2 bg-light text-dark border-bottom border-dark',
            'id' => 'nav-user'
        ]);


 		echo $out;
     } // topNav()
     /**
      * Basic outputs for test
      *
      * These are just temporary functions to show something in the
      * left and right columns.
      *
      * All will be replaced with something more useful.
      */
     protected function user_box () {
         $model = new M_Users();

         if($model->isLoggedIn()) {

             $model->find(Session::get(Settings::members()['login_session']));

             $link_array = [
                 'Profile' => [
                     'href' => '/Users/'.$model->data()->username,
                 ],
                 'Edit Details' => [
                     'href' => '/Users/Edit',
                 ]
             ];

             if($model->hasPermission('admin')) {
                 $link_array['Admin Area'] = ['href' => '/Admin'];
             }


             $content = '';
             $content .= Php2Bs::bs_list_group ([
                 'content' => $link_array,
                 'group_type' => 'a',
                 'class' => ' mb-2'
             ]);

             $content .= $model->logoutForm();
         } else {
             $content = $model->loginForm();
         }

         return $content;

     }

	/**
	 * Build footer
	 *
	 * Sets the page footer
	 *
	 * @return string 	footer
	 */
    public function footer ()
	{


        $out = Php2Bs::bs_footer ([
            'content' => Php2Bs::bs_container ([
                'content' =>  'Place sticky footer content here.',
                'class' => 'text-white',
            ]),
            'class' => 'bg-dark',
        ]);

		echo $out;
    } // footer()


}





================================================================================




<?php

/**
 * Main Template
 *
 * This file contains actual content of the page and buiilds the template
 * using the functions in Base_Template.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	new Main($content, $params)
 * @return 		string     Entire HTML page
 */
class T_Ideas extends Base {

    // To allow for multiple versions of the same template, we can pass in a version. Check content() in this Class to see how it is used

	/**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$params        Additional parameters
	 */
    public function __construct($content, $params=array()) {

		// Set the displayed content to $this->content
		$this->content = $content;

		/*
            If a 'page_title' has been passed set it to $this->page_title,
            otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle,
            if required .

            These variables get checked in the content() function and then
            added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT
            show, even if it has been set.
         */
		$this->page_title = (isset($params['page_title'])) ? $params['page_title'] : null;
        $this->page_subtitle = (isset($params['page_subtitle'])) ? $params['page_subtitle'] : null;

		/**
		 * Set the layout version
		 *
		 * If a layout has been passed from the view via $params['layout'] set $this->layout
		 * to it otherwise use 'default'.
		 *
		 * These variables get checked in the layout_switcher() function within this file
		 * and will return a layout based on that is set here.
		 *
		 * To see the demo layout versions and instructions on how to edit them or create a
		 *  new one, see layout_switcher() and its comments.
		 *
		 * @var string
		 */
        if(isset($params['layout'])) {
            $this->layout = $params['layout'];
        } else {
            $this->layout = 'default';
        }

        /**
         * Set any page specific meta tags. These will be set in the view as a
         * key/value pairing and will override the defaults set in
         * /app/core/Settings.php->meta_tags()
         * @var [type]
         */
        if(isset($params['meta'])) {$this->meta =$params['meta'];}

        /**
         * Set any page specific css. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['css'])) {$this->css =$params['css'];}

        /**
         * Set any page specific js. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['js'])) {$this->js =$params['js'];}

        if(isset($params['alert'])) {
            $this->content = Php2Bs::bs_row ([
                'content' => Php2Bs::bs_container ([
                    'content' => Php2Bs::bs_column ([
                        'content' => $params['alert'],
                        'class' => 'col p-0'
                    ]),
                ])
            ]).$this->content;
        }




		// Call the template function
        self::Template();

    } // __construct


	/**
	 * Build the entire template
	 *
	 * We build this up gradually via functions contained eihter in this file or in
	 * the Base_Template file it extends
	 * @return 	HTML page
	 */
    private function Template () {
		// Build the start of the page up to the opening body tag, including the <head>
        self::bodyStart ();

        // Build banner
        self::banner ();

        // Build top navigation bar
        self::topNav ();

		// Show the actual content for the page
        self::content ();

		// Show the footer
        self::footer ();

		// Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()

    /**
     * Create the top banner
     *
     * @return string 					Banner
     */
    public function banner () {

        $title = Php2Html::h ([
            'size' => '1',
            'class' => 'title',
            'content' => 'Main Template',
        ]); // $title

        $inner_container = Php2Bs::bs_container ([
            'content' => $title
        ]); // $inner_container

        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'class' => 'bg-info text-light pb-2',
            'content' => $inner_container
        ]); // container

    } // banner()

	/**
	 * Show the actual page content
	 *
	 * We show the actual content of the page using a pre-defined
	 * layout that has either been set when calling the template
	 * from the view or as a default.
	 *
	 * This function returns the entire content, aside from the
	 * wrapper created with the base file this extends and the
	 * content is built before being passed into a 'bs_container'
	 * function from the Php2Bs (Bootstrap) class to create the
	 * entire content area.
	 *
	 * @return     string  	   Page content
	 */
    private function content () {

        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $params['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $params['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title)
        {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);

            /*
                If a subtitle has been set, add it to $title as a paragraph
                using the p() function in the Php2Html class with a class of 'lead-description'.
             */
            if($this->page_subtitle)
            {
                $title .=  Php2Html::p([
                    'class' => 'lead description',
                    'content' => $this->page_subtitle
                ]);
            }

            /*
                Now $title will contain everything required in the page_title
                div so we add it to $content using the div() function in the
                Php2Html class.
             */

             $this->content = Php2Bs::bs_column ([

                     'content' => Php2Html::h([
                         'class' => 'col-12',
                         'size' => '4',
                         'content' => $title
                     ]).$this->content
             ]);
            /*
                Show title above both columns instead

            $content .= Php2Html::div([
                'class' => 'page_title',
                'content' => $title
            ]);

             */
        }



        /*
            Call the correct layout of the page

            The main content could be called into one of several different
            layouts. The reason for this is you may want a slightly
            different layout for certain content such as some pages having
            a content specific sidebar.

            This is fully controlled by the layout_switcher () function in
            this file (a separate function has been created as there is an
            infinite number of combinations that you can use) controls all of it so we simply add that to the $content variable.

            See the comments for that function for a list of available ones and how to create a new one.
         */
        $content .= $this->layout_switcher ();


        /*
            We now have the entire content of the page, in the required layout
            version, contained within $content.

            In this template, the entire content area is wrapped in the Bootstrap container within a Bootstrap fluid-container.

            Tp make this, we echo out a bs_container() function from the Php2Bs
            class, with 'container_type' set to fluid.

            Inside this, we set it's 'content' as another bs_container(), but this time without the 'fluid' request. It is in the 'content' for
            this that we actually pass the completed $content.
         */
        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => Php2Bs::bs_container ([
                'content' => $content
            ]) // container
        ]); // container-fluid

    } // content()


    /**
     * Set the correct layout
     *
     * Each of the different available layouts are created using the 'bs_row'
     * and 'bs_column' functions from the Php2Bs (Bootstrap) class.
     *
     * The required layout is set to $this->layout in the __construct of
     * this file. If it has been passed in from the view as $params['layout']
     * that is what it will be set to, otherwise it will be set to 'default'.
     *
     * We run a switch on $this->layout and return a row (bs_row). As well
     * as setting any attributes, such as id's and classes, we pass in a
     * parameter called 'content'. This will be be any number of functions
     * that create columns using specific functions.
     *
     * The columns themselves could have multiple functions included and
     * these are explained at the start of the columns functions below. Note
     * that any classes applied to the rows will be inherited by the
     * columns unless they have overriding classes.
     *
     * To add a new layout, create a new case in the switch statement,
     * matching the format of the existing ones and create any new columns
     * that are required.
     *
     * @return  string  Page Layout
     */
    protected function layout_switcher () {

        switch ($this->layout) {
            /*
                Full Width

                This is a single column layout using the main_column_full()
                function, with an id of main_content and a class of bg-light
             */
            case 'full-width':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_full (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Left column

                This is a two column layout using the left_Column () and
                main_column() functions concatenated, with an id of main_content and a class of bg-dark text-info
             */
            case 'left-col':
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                    'class' => 'bg-dark text-info',
                ]);
            break;

            /*
                Right column

                This is a two column layout using the main_column() and
                right_Column () functions concatenated, with an id of main_content and a class of text-danger
            */
            case 'right-col':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_medium ()
								.self::right_Column (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Three column

                This is a three column layout using the left_Column (),
                main_column() and right_Column () functions concatenated,
                with an id of multi_column.
            */
            case 'three-col':
                return Php2Bs::bs_row ([
                	'content' => self::left_Column ()
								.self::main_column_small ()
								.self::right_Column (),
                	'id' => 'multi_column',
                ]);
            break;

            /*
                Test layout

                This is here as a simple way of testing new things or
                playing around with layouts and contains a few more attributes.
            */
            case 'test':
                return Php2Bs::bs_row ([
					'content' => self::main_column_full (),
                    'class' => 'bg-info',
                    'id' => 'main_content',
                    'data_attr' => [
                        'ref' => 'refdata',
                        'cat' => 'news'
                    ]
                ]);
            break;

            /*
                Default layout

                If no layout has been specified in the view, we default to
                the left column one.
            */
            default:
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                ]);
            break;
        } // Layout switch
    }


    /**
     * Layout column functions
     *
     * These are the functions that are called in to the rows created in
     * layout_switcher() and are all created using the 'bs_column' function
     * from the Php2Bs (Bootstrap) class.
     *
     * As when creating the rows we can set any attributes, such as id's and
     * classes, with the actual required output being passed as 'content'.
     *
     */

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {
        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9'
        ]);
    } // main_column_medium ()

    /*
        Full Main Column

        Used in the 'full-width' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with at all breakpoints.
     */
    private function main_column_full () {
        return $this->content;
    } // main_column_full ()

    /*
        Small Main Column

        Used in the 'three-col' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        However, this time we also concatenate the function demo_extra_box() to give extra content to the column.

        Using the Bootstrap grid sizes it is full with, changing to 6/12
        width at the medium breakpoint.
     */
	private function main_column_small () {
        return Php2Bs::bs_column ([
			'content' => $this->content
						.$this->demo_extra_box (),
			'id' => 'main_small_column',
			'class' => 'col-md-6'
        ]);

    } // main_column_small ()

	/*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
    private function left_Column () {
        return Php2Bs::bs_column ([
			'content' => self::user_box ()
						.self::side_menu (),
			'id' => 'left',
			'class' => 'col-12 col-md-3 left-col bg-warning pt-2'
        ]);
    } // left_Column ()

    /*
        Left Column

        Used in the 'default', 'right-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        side_menu () and user_box () functions (the same as we did in left_column () but in a different order. Also, in this one we concatenate them into a variable first, rather than straight into the bs_column function.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
	private function right_Column () {

        //$userbox_content .= $latestuser->username;
        //$userbox_content .= $latest_user_date->format('d/m/Y g:ia');

        $content = Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Ideas Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Idea',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/Ideas/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/Ideas/'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card


		return Php2Bs::bs_column ([
			'content' => $content,
			'id' => 'right',
			'class' => 'col-12 col-md-3 right-col bg-info pt-2 mt-4 mt-md-0'
        ]);
    } // right_Column ()



}





=================================================================================




<?php

/**
 *  Categories Model
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';


class M_Products
{
    private
        $_data,
        $_db_table = 'products',
        $_default_var = 'product',
        $_key_column = 'product_name',
        $_field,
        $_record,
        $_qry;

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db()
    {
        return  DB::dbConnect();
    } // db()

    public function create ($_params=[]) {

        if (!self::db()->insert($this->_db_table, $_params)){
            // The insert was unsuccesful
            throw new Exception('There was a problem creating an account!');

            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;

    } // create()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data ()
    {
        return $this->_data;
    } // data ()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {
        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = $this->_key_column;
                $_record = slugify ($_record, $direction = 'reverse');
            }


            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find ()


    public function messages () {
        return [

            'not_found' => [
                'title' => 'System not found',
                'content' => 'The System could not be found. '. Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Systems']),
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'validation_failed' => [

            ],
            'no_change' => [
                'title' => 'System Not Updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.',
            ],
            'delete_success' => [
                'title' => 'System Deleted',
                'alert_color' => 'success',
                'content' => 'The system has been deleted.',
                'dismissible' => false,
            ],
            'create_success' => [
                'title' => 'System Added',
                'alert_color' => 'success',
                'content' => 'The system has been created.',
                'dismissible' => false,
            ],
            'update_success' => [
                'title' => 'System Updated',
                'alert_color' => 'success',
                'content' => 'The system has been updated.',
            ],
            'update_failed' => [
                'title' => 'System Not Updated',
                'alert_color' => 'danger',
                'content' => 'The system has been updated.',
            ],
        ];
    }


    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing ()
    {
        // Select all records from the database
        $list = self::db ()->query('SELECT
        *
        FROM `' . $this->_db_table . '`'
        );

        // Return the results as an array
        return $list->results();
    } // listing ()

    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }


    public function validation_rules() {
        return[
            'system_name' => [
                'required' => true,
                'min' => 2,
                'unique' => $this->_db_table,
            ],

        ];
    }

}





=====================================================================================




<?php

/**
 *  Users Model
 *
 *  Contains the standard functions for data
 *  manipulation, as well as the CRUD forms and displays.
 *
 *  Note that Users have a lot more functionality than mosts sections so there is a lot more to this one than most
 *  models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';

class M_Calls
{
    private
        $_data,
        $_db_table = 'call_log',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the database connection
     *
     *	Opens up a connection to the database and assigns it to
     *	$this->_pdo to make it re-usable.
     *
     * The connection parameters are called using Globals on values held
     * in /app/core/config_files/db.php
     *
     * @return 	Database connection
     */
    public function __construct()
    {
        $this->_logs = new Logs();

    } //__construct ()

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db() {
        return  DB::dbConnect();
    } // db()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
	 * Create a new record
	 *
	 * Collects post data, validates it and inserts it into the database
	 *
	 */
	public function create ($_params=[]) {
        $_params['created_by'] = Session::get('uid');
        $_params['created_date'] = date('Y-m-d H:i:s');
        nicePrint_r($_SESSION);
        if (!self::db()->insert($this->_db_table, $_params)){
            # maybe Redirect::to('404');
			// The insert was unsuccesful
			if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Faults->create()';
            }

			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;

	} // create()


    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
         * Delete a record
         *
         *  Deletes the specified record from $this->crud_table()->name
         *
         * @param  int  $record  Record ID
         */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
			if(!self::db()->delete($this->_db_table, array('id', '=', $record)))
			{
				// The update was unsuccesful
				throw new Exception('There was a problem updating the account!');
				// Flash a generic error message
				$this->crudFlash ('generic_error');

				return false;
			}

            return true;

	} // delete()


    /**
     *  Check if a record exists
     *
     *	Checks to see if $this->data() exists following a find()
     *
     **/
    public function exists() {
      return ($this->data()) ? true : false;
    } // exists()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'title';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    public function form ($_params) {
        $_field_data = [];

        $_form_fields = [
            'otuline' => [
                'help_text' => 'Clear and descriptive outline of the call reason.'
            ],
            'status' => [
                'help_text' => 'Add status help text........'
            ],
            'rag' => [
                'help_text' => 'Add rag help text........'
            ],
            'priority' => [
                'help_text' => 'Add priority help text........'
            ],
            'product' => [
                'help_text' => 'Add product help text........'
            ],
            'system' => [
                'help_text' => 'Add system help text........'
            ],
            'ref' => [
                'help_text' => 'Add ref help text........'
            ],
        ];

        if($_params['version'] == 'create') {
           $_button_text = 'Add';
           $_button_name = 'add_call';
       } else {
           $_button_text = 'Update';
           $_button_name = 'update_call';
       }

       foreach ($_form_fields as $key => $value) {
            // Check for errors
            if (isset($_params['errors'][$key])) {
                // Errors found for the field so add invalid class
                $_field_data[$key]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$key]['class'] = (Input::exists()) ? 'is-valid' : '';
            }
            // Check for posted data if an account update has been attempted
            if (Input::exists($key) && trim(Input::get($key)) !== false) {
                // There is posted data so set that as the value
                $_field_data[$key]['val'] = Input::get($key);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$key]['val'] = $_params['data'][$key];
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$key]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        $content = '';

        // Outline
        $default_var = 'outline';
        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => $_field_data[$default_var]['class'],
            'id' => ucfirst($default_var).'_input',
            'content' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'rows' => 6,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }
        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Outline



        // Status and Product
        # Status
        $default_var = 'status';
        $system_options = '';

          foreach (['o'=>'Open', 'c'=>'Closed'] as $key => $value) {
              $system_options .= Php2Html::option ([
                  'content' => ucwords(str_replace("_", " ", $value)),
                  'value' => $key,
                   'is_selected' => (isset($_field_data[$default_var]['val']) && $key == $_field_data[$default_var]['val']) ? true: false,
              ]);
          }

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_select ([
               'class' => $_field_data[$default_var]['class'],
               'content' =>$system_options,
               'id' => ucfirst($default_var).'_input',
               'name' => $default_var,
               'aria' => [
                   'label' => ucfirst(str_replace("_", " ", $default_var)),
               ],
           ]);
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }
        $rag_input = Php2Bs::bs_form_group ([
            'class' => 'col-6',
            'content' => $input
        ]);

        # Product
       $products = new M_Products();

       $default_var = 'product';
       $product_options = '';
       if($_params['version'] == 'create') {
             $product_options .= Php2Html::option ([
                 'content' => 'N/A',
                 'value' => '',
                 'is_selected' => false
             ]);
         }
         foreach ($products->listing() as $key => $value) {
             $product_options .= Php2Html::option ([
                 'content' => ucwords(str_replace("_", " ", $value->product_name)),
                 'value' => $value->id,
                    'is_selected' => (isset($_field_data[$default_var]['val']) && $value->id == $_field_data[$default_var]['val']) ? true: false,
             ]);
         }

       $input = Php2Html::label ([
           'for' => ucfirst($default_var).'_input',
           'content' => ucfirst(str_replace("_", " ", $default_var)),
           'class' => 'mb-0',
           'aria' => [
               'described-by' => $default_var.'_help'
           ],
       ]);
       $input .= Php2Bs::bs_select ([
              'class' => $_field_data[$default_var]['class'],
              'content' =>$product_options,
              'id' => ucfirst($default_var).'_input',
              'name' => $default_var,
              'aria' => [
                  'label' => ucfirst(str_replace("_", " ", $default_var)),
              ],
          ]);
       if(isset($_form_fields[$default_var]['help_text'])) {
           $input .= Php2Bs::bs_form_text ([
               'id' => $default_var.'_help',
               'class' => 'text-muted',
               'content' => $_form_fields[$default_var]['help_text']
           ]);
       }
       $priority_input = Php2Bs::bs_form_group ([
           'class' => 'col-6',
           'content' => $input
       ]);

        $content .= Php2Bs::bs_form_row ([
            'content' => $rag_input.$priority_input
        ]);// Status and Product



        // Numbers
        $default_var = 'customer_number';
        $input_cus_num = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);

        $input_cus_num .= Php2Bs::bs_input_text ([
            'id' => ucfirst($default_var).'_input',
            'value' => $_field_data[$default_var]['val'],
            'class' => $_field_data[$default_var]['class'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)) . ' name',
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input_cus_num .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $input_cus_num = Php2Bs::bs_form_group ([
            'class' => 'col-6',
            'content' => $input_cus_num
        ]);


        $default_var = 'policy_number';
        $input_pol_num = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);

        $input_pol_num .= Php2Bs::bs_input_text ([
            'id' => ucfirst($default_var).'_input',
            'value' => $_field_data[$default_var]['val'],
            'class' => $_field_data[$default_var]['class'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)) . ' name',
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input_pol_num .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $input_pol_num = Php2Bs::bs_form_group ([
            'class' => 'col-6',
            'content' => $input_pol_num
        ]);


        $content .= Php2Bs::bs_form_row ([
            'content' => $input_cus_num.$input_pol_num
        ]); // Numbers



        // Agent Name
        $default_var = 'agent';
        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)) . ' Name',
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);

        $input .= Php2Bs::bs_input_text ([
            'id' => ucfirst($default_var).'_input',
            'value' => $_field_data[$default_var]['val'],
            'class' => $_field_data[$default_var]['class'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)) . ' name',
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $input_title = Php2Bs::bs_form_group ([
            'class' => 'col-12',
            'content' => $input
        ]);


        $content .= Php2Bs::bs_form_row ([
            'content' => $input_ref.$input_title
        ]); // Ref and Title


        // Outcome
        $default_var = 'outcome';
        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => $_field_data[$default_var]['class'],
            'id' => ucfirst($default_var).'_input',
            'content' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'rows' => 6,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }
        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Outcome




       // Add the button form group
       $content .= Php2Bs::bs_form_row ([
           'content' =>
           Php2Bs::bs_form_group ([
               'class' => 'col-12',
               'content' => Php2Bs::bs_button ([
                   'button_type' => 'submit',
                   'class' => 'float-right',
                   'color' => 'primary',
                   //'size' => 'sm',
                   'content' =>  $_button_text,
                   'name' => $_button_name
               ]) // Php2Bs::bs_button
           ]) // Php2Bs::bs_form_group
       ]); // Button row

       // Return the form
       return Php2Html::form([
           'id' => '',
           'action' => '',
           'method' => 'post',
           'class' => '',
           'content' => $content
       ]); //  Php2Html::form
   }

   /**
    * Get the total most recent record
    *
    * @return int 	    Count of rows
    */
   public function mostRecent() {
       // Select all records from the database
       $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table .' ORDER BY `created_date` DESC LIMIT 1');

       // Return a count of the records returned
       return $_qry->first();
   } // mostRecent()


   public function ragStatusList () {
       return [
           'g' => 'green',
           'a' => 'amber',
           'r' => 'red',

       ];
   }

   public function priorityList () {
       return [
           'l' => 'low',
           'm' => 'medium',
           'h' => 'high',
           'u' => 'urgent',
       ];
   }




    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '`'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->results();
    } // listing()


    public function listingcount($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '`'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->count();
    } // listing()



    public function messages () {
        return [
            'admin_not_found' => [
                'title' => 'Call not found',
                'content' => 'The Call could not be found. '
                . Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Fault/Listing']),
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'not_found' => [
                'title' => 'Call not found',
                'content' => 'The Call could not be found. ',
                'alert_color' => 'info',
                'dismissible' => false,
            ],

            'create_success' => [
                'title' => 'Call Created',
                'alert_color' => 'success',
                'content' => 'The Call has been created.',
            ],

            'create_fail' => [
                'title' => 'Call Not Created',
                'alert_color' => 'danger',
                'content' => 'The Call was not created due to an unspecified error.',
            ],

            'not_logged_in' => [
                'title' => 'Not logged in',
                'alert_color' => 'danger',
                'content' => 'You must be logged in to view this page.',
                'dismissible' => false,
            ],
            'validation_failed' => [

            ],

        ];
    }


    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }



    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being
     * processed.
     *
     * See the core/Validate.php class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'outline' => [
                'required' => true,
            ],
        ];
    }



}





================================================================================




<?php

/**
 *  Users Model
 *
 *  Contains the standard functions for data
 *  manipulation, as well as the CRUD forms and displays.
 *
 *  Note that Users have a lot more functionality than mosts sections so there is a lot more to this one than most
 *  models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';

class M_Faults
{
    private
        $_data,
        $_db_table = 'p_faults',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the database connection
     *
     *	Opens up a connection to the database and assigns it to
     *	$this->_pdo to make it re-usable.
     *
     * The connection parameters are called using Globals on values held
     * in /app/core/config_files/db.php
     *
     * @return 	Database connection
     */
    public function __construct()
    {
        $this->_logs = new Logs();

    } //__construct ()

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db() {
        return  DB::dbConnect();
    } // db()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
	 * Create a new record
	 *
	 * Collects post data, validates it and inserts it into the database
	 *
	 */
	public function create ($_params=[]) {
        $_params['created_by'] = Session::get('uid');
        $_params['created_date'] = date('Y-m-d H:i:s');
        nicePrint_r($_SESSION);
        if (!self::db()->insert($this->_db_table, $_params)){
            # maybe Redirect::to('404');
			// The insert was unsuccesful
			if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Faults->create()';
            }

			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;

	} // create()


    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
         * Delete a record
         *
         *  Deletes the specified record from $this->crud_table()->name
         *
         * @param  int  $record  Record ID
         */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
			if(!self::db()->delete($this->_db_table, array('id', '=', $record)))
			{
				// The update was unsuccesful
				throw new Exception('There was a problem updating the account!');
				// Flash a generic error message
				$this->crudFlash ('generic_error');

				return false;
			}

            return true;

	} // delete()


    /**
     *  Check if a record exists
     *
     *	Checks to see if $this->data() exists following a find()
     *
     **/
    public function exists() {
      return ($this->data()) ? true : false;
    } // exists()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'ref';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'title';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    public function form ($_params) {
        $_field_data = [];

        $_form_fields = [
            'title' => [
                'help_text' => 'Clear and descriptive title of the fault.'
            ],
            'description' => [
                'help_text' => 'The full description of the fault.'
            ],
            'rag' => [
                'help_text' => 'Add rag help text........'
            ],
            'priority' => [
                'help_text' => 'Add priority help text........'
            ],
            'product' => [
                'help_text' => 'Add product help text........'
            ],
            'system' => [
                'help_text' => 'Add system help text........'
            ],
            'ref' => [
                'help_text' => 'Add ref help text........'
            ],
        ];

        if($_params['version'] == 'create') {
           $_button_text = 'Add';
           $_button_name = 'add_fault';
       } else {
           $_button_text = 'Update';
           $_button_name = 'update_fault';
       }

       foreach ($_form_fields as $key => $value) {
            // Check for errors
            if (isset($_params['errors'][$key])) {
                // Errors found for the field so add invalid class
                $_field_data[$key]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$key]['class'] = (Input::exists()) ? 'is-valid' : '';
            }
            // Check for posted data if an account update has been attempted
            if (Input::exists($key) && trim(Input::get($key)) !== false) {
                // There is posted data so set that as the value
                $_field_data[$key]['val'] = Input::get($key);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$key]['val'] = $_params['data'][$key];
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$key]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        $content = '';

        // Ref and Title
        # Ref
        $default_var = 'ref';
        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);

        $input .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-0'
            ],

            'prepend' => [
                'content' => 'CFM-',
                'id' => 'ref_field',
                'class' => '',

            ],

            'input' => [
                //'class' => 'bg-info',
                'class' => $_field_data[$default_var]['class'],
                'value' => $_field_data[$default_var]['val'],
                'type' => 'text',
                'id' => 'Ref',
                'name' => 'ref',
                'placeholder' => 'Fault Ref Number',
                'aria' => [
                    'label' => 'Ref Number',
                    'describedby' => 'ref_field',
                ]
            ],

        ]); // Php2Html::div.form-group

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }
        $input_ref = Php2Bs::bs_form_group ([
            'class' => 'col-md-4',
            'content' => $input
        ]);

        # Title
        $default_var = 'title';
        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_input_text ([
            'id' => ucfirst($default_var).'_input',
            'value' => $_field_data[$default_var]['val'],
            'class' => $_field_data[$default_var]['class'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $input_title = Php2Bs::bs_form_group ([
            'class' => 'col-md-8',
            'content' => $input
        ]);





        $content .= Php2Bs::bs_form_row ([
            'content' => $input_ref.$input_title
        ]); // Ref and Title







        // Description
       $default_var = 'description';
       $input = Php2Html::label ([
           'for' => ucfirst($default_var).'_input',
           'content' => ucfirst(str_replace("_", " ", $default_var)),
           'class' => 'mb-0',
           'aria' => [
               'described-by' => $default_var.'_help'
           ],
       ]);
       $input .= Php2Bs::bs_textarea ([
           'class' => $_field_data[$default_var]['class'] . ' ckeditor',
           'id' => ucfirst($default_var).'_input',
           'content' => $_field_data[$default_var]['val'],
           'name' => $default_var,
           'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
           'aria' => [
               'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
           ],
       ]); // Php2Bs::bs_input_text
       if(isset($_form_fields[$default_var]['help_text'])) {
           $input .= Php2Bs::bs_form_text ([
               'id' => $default_var.'_help',
               'class' => 'text-muted',
               'content' => $_form_fields[$default_var]['help_text']
           ]);
       }
       $content .= Php2Bs::bs_form_row ([
           'content' => Php2Bs::bs_form_group ([
               'class' => 'col-md-12',
               'content' => $input
           ])
       ]); // Description


       // Rag and priority
       # Rag
      $default_var = 'rag';
      $rag_options = '';
      if($_params['version'] == 'create') {
            $rag_options .= Php2Html::option ([
                'content' => 'Please Select...',
                'value' => '',
                'is_selected' => false
            ]);
        }

        foreach ($this->ragStatusList() as $key => $value) {
            $rag_options .= Php2Html::option ([
                'content' => ucwords(str_replace("_", " ", $value)),
                'value' => $key,
                'is_selected' => (isset($_field_data[$default_var]['val']) && $key == $_field_data[$default_var]['val']) ? true: false,
            ]);
        }

      $input = Php2Html::label ([
          'for' => ucfirst($default_var).'_input',
          'content' => ucfirst(str_replace("_", " ", $default_var)),
          'class' => 'mb-0',
          'aria' => [
              'described-by' => $default_var.'_help'
          ],
      ]);
      $input .= Php2Bs::bs_select ([
             'class' => $_field_data[$default_var]['class'],
             'content' =>$rag_options,
             'id' => ucfirst($default_var).'_input',
             'name' => $default_var,
             'aria' => [
                 'label' => ucfirst(str_replace("_", " ", $default_var)),
             ],
         ]);
      if(isset($_form_fields[$default_var]['help_text'])) {
          $input .= Php2Bs::bs_form_text ([
              'id' => $default_var.'_help',
              'class' => 'text-muted',
              'content' => $_form_fields[$default_var]['help_text']
          ]);
      }
      $rag_input = Php2Bs::bs_form_group ([
          'class' => 'col-6',
          'content' => $input
      ]);

      # Priority
     $default_var = 'priority';
     $priority_options = '';
     if($_params['version'] == 'create') {
           $priority_options .= Php2Html::option ([
               'content' => 'Please Select...',
               'value' => '',
               'is_selected' => false
           ]);
       }
       foreach ($this->priorityList() as $key => $value) {
           $priority_options .= Php2Html::option ([
               'content' => ucwords(str_replace("_", " ", $value)),
               'value' => $key,
                   'is_selected' => (isset($_field_data[$default_var]['val']) && $key == $_field_data[$default_var]['val']) ? true: false,
           ]);
       }

     $input = Php2Html::label ([
         'for' => ucfirst($default_var).'_input',
         'content' => ucfirst(str_replace("_", " ", $default_var)),
         'class' => 'mb-0',
         'aria' => [
             'described-by' => $default_var.'_help'
         ],
     ]);
     $input .= Php2Bs::bs_select ([
            'class' => $_field_data[$default_var]['class'],
            'content' =>$priority_options,
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'aria' => [
                'label' => ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]);
     if(isset($_form_fields[$default_var]['help_text'])) {
         $input .= Php2Bs::bs_form_text ([
             'id' => $default_var.'_help',
             'class' => 'text-muted',
             'content' => $_form_fields[$default_var]['help_text']
         ]);
     }
     $priority_input = Php2Bs::bs_form_group ([
         'class' => 'col-6',
         'content' => $input
     ]);

      $content .= Php2Bs::bs_form_row ([
          'content' => $rag_input.$priority_input
      ]); // Rag and priority



     // System and Product
     # System
     $systems = new M_Systems();
     $default_var = 'system';
     $system_options = '';
     if($_params['version'] == 'create') {
           $system_options .= Php2Html::option ([
               'content' => 'Please Select...',
               'value' => '',
               'is_selected' => false
           ]);
       }
       foreach ($systems->listing() as $key => $value) {
           $system_options .= Php2Html::option ([
               'content' => ucwords(str_replace("_", " ", $value->system_name)),
               'value' => $value->id,
                'is_selected' => (isset($_field_data[$default_var]['val']) && $value->id == $_field_data[$default_var]['val']) ? true: false,
           ]);
       }

     $input = Php2Html::label ([
         'for' => ucfirst($default_var).'_input',
         'content' => ucfirst(str_replace("_", " ", $default_var)),
         'class' => 'mb-0',
         'aria' => [
             'described-by' => $default_var.'_help'
         ],
     ]);
     $input .= Php2Bs::bs_select ([
            'class' => $_field_data[$default_var]['class'],
            'content' =>$system_options,
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'aria' => [
                'label' => ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]);
     if(isset($_form_fields[$default_var]['help_text'])) {
         $input .= Php2Bs::bs_form_text ([
             'id' => $default_var.'_help',
             'class' => 'text-muted',
             'content' => $_form_fields[$default_var]['help_text']
         ]);
     }
     $rag_input = Php2Bs::bs_form_group ([
         'class' => 'col-6',
         'content' => $input
     ]);

     # Product
    $products = new M_Products();

    $default_var = 'product';
    $product_options = '';
    if($_params['version'] == 'create') {
          $product_options .= Php2Html::option ([
              'content' => 'N/A',
              'value' => '',
              'is_selected' => false
          ]);
      }
      foreach ($products->listing() as $key => $value) {
          $product_options .= Php2Html::option ([
              'content' => ucwords(str_replace("_", " ", $value->product_name)),
              'value' => $value->id,
                 'is_selected' => (isset($_field_data[$default_var]['val']) && $value->id == $_field_data[$default_var]['val']) ? true: false,
          ]);
      }

    $input = Php2Html::label ([
        'for' => ucfirst($default_var).'_input',
        'content' => ucfirst(str_replace("_", " ", $default_var)),
        'class' => 'mb-0',
        'aria' => [
            'described-by' => $default_var.'_help'
        ],
    ]);
    $input .= Php2Bs::bs_select ([
           'class' => $_field_data[$default_var]['class'],
           'content' =>$product_options,
           'id' => ucfirst($default_var).'_input',
           'name' => $default_var,
           'aria' => [
               'label' => ucfirst(str_replace("_", " ", $default_var)),
           ],
       ]);
    if(isset($_form_fields[$default_var]['help_text'])) {
        $input .= Php2Bs::bs_form_text ([
            'id' => $default_var.'_help',
            'class' => 'text-muted',
            'content' => $_form_fields[$default_var]['help_text']
        ]);
    }
    $priority_input = Php2Bs::bs_form_group ([
        'class' => 'col-6',
        'content' => $input
    ]);

     $content .= Php2Bs::bs_form_row ([
         'content' => $rag_input.$priority_input
     ]); // System and priority



       // Add the button form group
       $content .= Php2Bs::bs_form_row ([
           'content' =>
           Php2Bs::bs_form_group ([
               'class' => 'col-12',
               'content' => Php2Bs::bs_button ([
                   'button_type' => 'submit',
                   'class' => 'float-right',
                   'color' => 'primary',
                   //'size' => 'sm',
                   'content' =>  $_button_text,
                   'name' => $_button_name
               ]) // Php2Bs::bs_button
           ]) // Php2Bs::bs_form_group
       ]); // Button row

       // Return the form
       return Php2Html::form([
           'id' => '',
           'action' => '',
           'method' => 'post',
           'class' => '',
           'content' => $content
       ]); //  Php2Html::form
   }

   /**
    * Get the total most recent record
    *
    * @return int 	    Count of rows
    */
   public function mostRecent() {
       // Select all records from the database
       $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table .' ORDER BY `created_date` DESC LIMIT 1');

       // Return a count of the records returned
       return $_qry->first();
   } // mostRecent()


   public function ragStatusList () {
       return [
           'g' => 'green',
           'a' => 'amber',
           'r' => 'red',

       ];
   }

   public function priorityList () {
       return [
           'l' => 'low',
           'm' => 'medium',
           'h' => 'high',
           'u' => 'urgent',
       ];
   }




    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '`'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->results();
    } // listing()


    public function listingcount($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '`'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->count();
    } // listing()



    public function messages () {
        return [
            'admin_not_found' => [
                'title' => 'Fault not found',
                'content' => 'The Fault could not be found. '
                . Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Fault/Listing']),
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'not_logged_in' => [
                'title' => 'Not logged in',
                'alert_color' => 'danger',
                'content' => 'You must be logged in to view this page.',
                'dismissible' => false,
            ],
            'not_found' => [
                'title' => 'Fault not found',
                'content' => 'The Fault could not be found. ',
                'alert_color' => 'info',
                'dismissible' => false,
            ],

            'create_success' => [
                'title' => 'Fault Created',
                'alert_color' => 'success',
                'content' => 'The Fault has been created.',
            ],

            'create_fail' => [
                'title' => 'Fault Not Created',
                'alert_color' => 'danger',
                'content' => 'The Fault was not created due to an unspecified error.',
            ],
            'validation_failed' => [

            ],

        ];
    }


    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }



    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being
     * processed.
     *
     * See the core/Validate.php class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'ref' => [
                'required' => true,
                'unique' => 'p_faults'
            ],
            'title' => [
                'required' => true,
                'min' => 4,
                'error_text' => 'You must add a title at least 4 characters long.'
            ],
            'description' => [
                'required' => true,
            ],
            'rag' => [
                'required' => true,
            ],
            'priority' => [
                'required' => true,
            ],
            'system' => [
                'required' => true,
            ],

        ];
    }



}





=================================================================================




<?php

/**
 *  Users Model
 *
 *  Contains the standard functions for data
 *  manipulation, as well as the CRUD forms and displays.
 *
 *  Note that Users have a lot more functionality than mosts sections so there is a lot more to this one than most
 *  models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';

class M_OneThing
{
    private
        $_data,
        $_db_table = 'one_thing',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the database connection
     *
     *	Opens up a connection to the database and assigns it to
     *	$this->_pdo to make it re-usable.
     *
     * The connection parameters are called using Globals on values held
     * in /app/core/config_files/db.php
     *
     * @return 	Database connection
     */
    public function __construct()
    {
        $this->_logs = new Logs();

    } //__construct ()

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db() {
        return  DB::dbConnect();
    } // db()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
	 * Create a new record
	 *
	 * Collects post data, validates it and inserts it into the database
	 *
	 */
	public function create ($_params=[]) {
        $_params['created_date'] = date('Y-m-d H:i:s');
        if (!self::db()->insert($this->_db_table, $_params)){
            # maybe Redirect::to('404');
			// The insert was unsuccesful
			if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Faults->create()';
            }

			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;

	} // create()


    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
         * Delete a record
         *
         *  Deletes the specified record from $this->crud_table()->name
         *
         * @param  int  $record  Record ID
         */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
			if(!self::db()->delete($this->_db_table, array('id', '=', $record)))
			{
				// The update was unsuccesful
				throw new Exception('There was a problem updating the account!');
				// Flash a generic error message
				$this->crudFlash ('generic_error');

				return false;
			}

            return true;

	} // delete()


    /**
     *  Check if a record exists
     *
     *	Checks to see if $this->data() exists following a find()
     *
     **/
    public function exists() {
      return ($this->data()) ? true : false;
    } // exists()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'title';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    public function form () {
        $_field_data = [];

        $_form_fields = [
            'details' => [
                'help_text' => 'Clear and descriptive outline of the thing.'
            ],

        ];


       foreach ($_form_fields as $key => $value) {
            // Check for errors
            if (isset($_params['errors'][$key])) {
                // Errors found for the field so add invalid class
                $_field_data[$key]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$key]['class'] = (Input::exists()) ? 'is-valid' : '';
            }
            // Check for posted data if an account update has been attempted
            if (Input::exists($key) && trim(Input::get($key)) !== false) {
                // There is posted data so set that as the value
                $_field_data[$key]['val'] = Input::get($key);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$key]['val'] = $_params['data'][$key];
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$key]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        $content = '';

        // Outline
        $default_var = 'details';
        $input = Php2Bs::bs_textarea ([
            'class' => 'ckeditor',
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'rows' => 6,
            'placeholder' => 'Add details of your \'One Thing\'',

        ]); // Php2Bs::bs_input_text

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Outline


       // Add the button form group
       $content .= Php2Bs::bs_form_row ([
           'content' =>
           Php2Bs::bs_form_group ([
               'class' => 'col-12',
               'content' => Php2Bs::bs_button ([
                   'button_type' => 'submit',
                   'class' => 'float-right',
                   'color' => 'primary',
                   //'size' => 'sm',
                   'content' =>  'Submit',
                   'name' => 'add_one_thing'
               ]) // Php2Bs::bs_button
           ]) // Php2Bs::bs_form_group
       ]); // Button row

       // Return the form
       return Php2Html::form([
           'id' => '',
           'action' => '',
           'method' => 'post',
           'class' => '',
           'content' => $content
       ]); //  Php2Html::form
   }

   /**
    * Get the total most recent record
    *
    * @return int 	    Count of rows
    */
   public function mostRecent() {
       // Select all records from the database
       $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table .' ORDER BY `created_date` DESC LIMIT 1');

       // Return a count of the records returned
       return $_qry->first();
   } // mostRecent()


   public function ragStatusList () {
       return [
           'g' => 'green',
           'a' => 'amber',
           'r' => 'red',

       ];
   }

   public function priorityList () {
       return [
           'l' => 'low',
           'm' => 'medium',
           'h' => 'high',
           'u' => 'urgent',
       ];
   }




    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '` ORDER BY `created_date` DESC'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->results();
    } // listing()


    public function listingcount($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '`'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->count();
    } // listing()



    public function messages () {
        return [
            'empty' => [
                'title' => 'Nothing posted',
                'content' => 'You have to enter something in the box! ',
                'alert_color' => 'danger',
            ],
            'unauthorised' => [
                'title' => 'Unauthorised',
                'content' => 'You do not have permission to view this page ',
                'alert_color' => 'danger',
                'dismissible' => false
            ],
            'success' => [
                'title' => 'Your One Thing has been added',
                'content' => 'Thank you for submitting your \'One Thing\'. ',
                'alert_color' => 'success',
            ],

            'marked' => [
                'title' => 'The One Thing has been marked as viewed',
                'content' => '',
                'alert_color' => 'success',
            ],

        ];
    }


    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }



    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being
     * processed.
     *
     * See the core/Validate.php class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'outline' => [
                'required' => true,
            ],
        ];
    }



}





=================================================================================




<?php

/**
 *  Users Model
 *
 *  Contains the standard functions for data
 *  manipulation, as well as the CRUD forms and displays.
 *
 *  Note that Users have a lot more functionality than mosts sections so there is a lot more to this one than most
 *  models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';

class M_Ideas
{
    private
        $_data,
        $_db_table = 'ideas',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the database connection
     *
     *	Opens up a connection to the database and assigns it to
     *	$this->_pdo to make it re-usable.
     *
     * The connection parameters are called using Globals on values held
     * in /app/core/config_files/db.php
     *
     * @return 	Database connection
     */
    public function __construct()
    {
        $this->_logs = new Logs();

    } //__construct ()

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db() {
        return  DB::dbConnect();
    } // db()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()
    public function countCats() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM `idea_categories`');

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
	 * Create a new record
	 *
	 * Collects post data, validates it and inserts it into the database
	 *
	 */
	public function create ($_params=[]) {
        $_params['created_by'] = Session::get('uid');
        $_params['created_date'] = date('Y-m-d H:i:s');
        if (!self::db()->insert($this->_db_table, $_params)){
            # maybe Redirect::to('404');
			// The insert was unsuccesful
			if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Faults->create()';
            }

			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;

	} // create()

    /**
	 * Create a new record
	 *
	 * Collects post data, validates it and inserts it into the database
	 *
	 */
	public function create_comment ($record, $_params=[]) {
        $_params['idea'] = $record;
        $_params['created_by'] = Session::get('uid');
        $_params['created_date'] = date('Y-m-d H:i:s');
        if (!self::db()->insert('idea_comments', $_params)){
            # maybe Redirect::to('404');
			// The insert was unsuccesful
			if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Faults->create()';
            }

			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;

	} // create()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
         * Delete a record
         *
         *  Deletes the specified record from $this->crud_table()->name
         *
         * @param  int  $record  Record ID
         */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
			if(!self::db()->delete($this->_db_table, array('id', '=', $record)))
			{
				// The update was unsuccesful
				throw new Exception('There was a problem updating the account!');
				// Flash a generic error message
				$this->crudFlash ('generic_error');

				return false;
			}

            return true;

	} // delete()


    /**
     *  Check if a record exists
     *
     *	Checks to see if $this->data() exists following a find()
     *
     **/
    public function exists() {
      return ($this->data()) ? true : false;
    } // exists()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'title';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    public function comment_form () {
        // Outline
        $default_var = 'details';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => 'Add a comment',
            'class' => 'mb-0 font-weight-bold',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => 'ckeditor',
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'rows' => 6,
            'placeholder' => 'Add details of your \'One Thing\'',

        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content = Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Outline


        // Add the button form group
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-12',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => 'float-right',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' =>  'Submit',
                    'name' => 'add_comment'
                ]) // Php2Bs::bs_button
            ]) // Php2Bs::bs_form_group
        ]); // Button row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]); //  Php2Html::form


    }


    public function form () {
        $_field_data = [];

        $_form_fields = [
            'title' => [
                'help_text' => 'Clear and descriptive title of the idea.'
            ],
            'details' => [
                'help_text' => 'The full idea.'
            ],
            'category' => [
                'help_text' => 'Choose the most suitable category. If none fit, select \'Other\'.'
            ],

        ];


       foreach ($_form_fields as $key => $value) {
            // Check for errors
            if (isset($_params['errors'][$key])) {
                // Errors found for the field so add invalid class
                $_field_data[$key]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$key]['class'] = (Input::exists()) ? 'is-valid' : '';
            }
            // Check for posted data if an account update has been attempted
            if (Input::exists($key) && trim(Input::get($key)) !== false) {
                // There is posted data so set that as the value
                $_field_data[$key]['val'] = Input::get($key);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$key]['val'] = $_params['data'][$key];
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$key]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        $content = '';


        $default_var = 'title';
        $input_cus_num = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);

        $input_cus_num .= Php2Bs::bs_input_text ([
            'id' => ucfirst($default_var).'_input',
            'value' => $_field_data[$default_var]['val'],
            'class' => $_field_data[$default_var]['class'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)) . '',
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input_cus_num .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $input_cus_num
        ]);



        // Outline
        $default_var = 'details';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => 'ckeditor',
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'rows' => 6,
            'placeholder' => 'Add details of your \'One Thing\'',

        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Outline


        $default_var = 'category';
        $category_options = '';

          foreach ($this->listingCats() as $key => $value) {
              $category_options .= Php2Html::option ([
                  'content' => ucwords(str_replace("_", " ", $value->category_name)),
                  'value' => $value->id,
                     'is_selected' => (isset($_field_data[$default_var]['val']) && $value->id == $_field_data[$default_var]['val']) ? true: false,
              ]);
          }

          $category_options .= Php2Html::option ([
              'content' => 'Other',
              'value' => '-1',
                 'is_selected' => (isset($_field_data[$default_var]['val']) && $value->id == $_field_data[$default_var]['val']) ? true: false,
          ]);

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_select ([
               'class' => $_field_data[$default_var]['class'],
               'content' =>$category_options,
               'id' => ucfirst($default_var).'_input',
               'name' => $default_var,
               'aria' => [
                   'label' => ucfirst(str_replace("_", " ", $default_var)),
               ],
           ]);
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }
        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $input
        ]);


       // Add the button form group
       $content .= Php2Bs::bs_form_row ([
           'content' =>
           Php2Bs::bs_form_group ([
               'class' => 'col-12',
               'content' => Php2Bs::bs_button ([
                   'button_type' => 'submit',
                   'class' => 'float-right',
                   'color' => 'primary',
                   //'size' => 'sm',
                   'content' =>  'Submit',
                   'name' => 'add_idea'
               ]) // Php2Bs::bs_button
           ]) // Php2Bs::bs_form_group
       ]); // Button row

       // Return the form
       return Php2Html::form([
           'id' => '',
           'action' => '',
           'method' => 'post',
           'class' => '',
           'content' => $content
       ]); //  Php2Html::form
   }

   /**
    * Get the total most recent record
    *
    * @return int 	    Count of rows
    */
   public function mostRecent() {
       // Select all records from the database
       $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table .' ORDER BY `created_date` DESC LIMIT 1');

       // Return a count of the records returned
       return $_qry->first();
   } // mostRecent()


   public function ragStatusList () {
       return [
           'g' => 'green',
           'a' => 'amber',
           'r' => 'red',

       ];
   }

   public function priorityList () {
       return [
           'l' => 'low',
           'm' => 'medium',
           'h' => 'high',
           'u' => 'urgent',
       ];
   }




    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '` ORDER BY `created_date` DESC'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->results();
    } // listing()
    public function findCats($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'title';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = $this->db()->get('idea_categories', array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()


    public function listingComments($_record) {


            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `idea_comments` WHERE `idea` = ?', [$_record]
            );


        // Return the results as an array
        return $list->results();
    } // listing()



    public function listingCats() {


            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `idea_categories`'
            );


        // Return the results as an array
        return $list->results();
    } // listing()

    public function listingcount($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '`'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->count();
    } // listing()



    public function messages () {
        return [
            'empty' => [
                'title' => 'Nothing posted',
                'content' => 'You have to enter something in the box! ',
                'alert_color' => 'danger',
            ],

            'idea_empty' => [
                'title' => 'Idea not submitted',
                'content' => 'All fields must be filled in! ',
                'alert_color' => 'danger',
            ],

            'comment_empty' => [
                'title' => 'Comment not submitted',
                'content' => 'The comment box must be filled in! ',
                'alert_color' => 'danger',
            ],
            'not_logged_in' => [
                'title' => 'Unauthorised',
                'content' => 'You must be logged in to view this page ',
                'alert_color' => 'danger',
                'dismissible' => false
            ],
            'comment_success' => [
                'title' => 'Your comment has been added',
                'content' => '',
                'alert_color' => 'success',
            ],
            'success' => [
                'title' => 'Your Idea has been added',
                'content' => 'Thank you for submitting your \'Idea\'. ',
                'alert_color' => 'success',
            ],

            'marked' => [
                'title' => 'The One Thing has been marked as viewed',
                'content' => '',
                'alert_color' => 'success',
            ],

        ];
    }


    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }



    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being
     * processed.
     *
     * See the core/Validate.php class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'outline' => [
                'required' => true,
            ],
        ];
    }



}





===============================================================================




ideas 



<?php

/**
 * Faults View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/home/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Faults/
 *
 */

$data = (object)$data;
$model = new M_Ideas();
$params['layout'] = 'right-col';
//Set the parameters for the page
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['meta'] = ['description' => 'Description set in page'];
$params['js'] = [
    'remote/ckeditor',
    #'path/to/js2',
    #'path/to/js3'
];
$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

# Show the required data based on passed in page type



# TODO Better overview page

if($data->page_type == 'add') {

    if(isset($data->form)) {
        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-secondary mb-1',
            'body' => [
                'class' => 'bg-light',
                'content' => $data->form,
            ],
        ]);// bs_card
    }


}

if($data->page_type == 'view') {
    $title = $data->record->title;
    $user = new M_Users();
    $user->find($data->record->created_by);
    $date = new DateTime($data->record->created_date);

    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1 ',
        'header' => array (
            'content' => $title,
            'class' => 'font-weight-bold'
        ),
        'body' => array (
            'content' => $data->record->details,
            'class' => 'p-2',
        ),
        'footer' => array (
            'content' => 'Posted by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
            'class' => 'font-italic font-weight-bold bg-secondary text-light p-2'
        ),
    ]);// bs_card


    if(isset($data->comments)) {
        $content .= Php2Html::h([
            'size'=> '4',
            'content' => 'Comments'
        ]);
        foreach ($data->comments as $key => $value) {

            $user = new M_Users();
            $user->find($value->created_by);
            $date = new DateTime($value->created_date);
            $content .= Php2Bs::bs_card ([
                'class' => 'border-primary bg-light mb-1 ',
                'body' => array (
                    'content' => $value->details.'<hr>'.$user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
                    'class' => 'p-2',
                ),

            ]);// bs_card
        }
    }

    $content .= $data->comment_form;

}

if($data->page_type == 'overview') {

    $list = '';

    foreach ($data->list as $key => $value) {

        $date = new DateTime($value->created_date);
        $user = new M_Users();
        $user->find($value->created_by);
        if($value->category == '-1') {
            $cat_name = 'Other';
        } else {
            $model->findCats($value->category);

            $cat_name = $model->data()->category_name;
        }

        switch ($value->status) {
            case 'o':
                $status = 'Open';
                break;
            case 'c':
                $status = 'Closed';
                break;
            case 'i':
                $status = 'In Progress';
                break;
            default:
                # code...
                break;
        }


        $show_category = Php2Html::i(['content' => '', 'class' => 'far fa-folder-open mr-2']).
        Php2Html::span(['content' => $cat_name, 'class' => 'border-secondary border-right mr-2 pr-2']);

        $show_status = Php2Html::i(['content' => '', 'class' => 'fas fa-battery-half mx-2']).
        Php2Html::span(['content' => $status, 'class' => 'border-secondary border-right mr-2 pr-2']);

        $show_comments = Php2Html::i(['content' => '', 'class' => 'fas fa-comments mx-2']).
        Php2Html::span(['content' => count($model->listingComments($value->id))]);

        $details_row = Php2Bs::bs_column ([
            'content' => $value->details,
            'class' => 'text-truncate',
            'style' => 'height:20px;'
        ]).
        '<hr>'.
        $show_category.
        $show_status.
        $show_comments.
        Php2Html::a(['class'=>'float-right','content' => 'View', 'href'=>'/Ideas/Details/'.$value->id]);


        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => Php2Html::a(['content' => $value->title, 'href'=>'/Ideas/Details/'.$value->id]),
                'class' => 'font-weight-bold'
            ),
            'body' => array (
                'content' => $details_row,
                'class' => 'p-2',
            ),
            'footer' => array (
                'content' => 'Posted by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
                'class' => 'font-italic font-weight-bold bg-secondary text-light p-2'
            ),
        ]);// bs_card
    }


} // $data->page_type == 'overview'


// Pass the details to the template
$template = new T_Ideas ($content,$params);
?>





=================================================================================




faults 

<?php

/**
 * Faults View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/home/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Faults/
 *
 */

$data = (object)$data;
$model = new M_Faults();

//Set the parameters for the page
$params['layout'] = 'right-col';
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;


$params['js'] = [
    'remote/ckeditor',
    #'path/to/js2',
    #'path/to/js3'
];
$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

# Show the required data based on passed in page type

if($data->page_type == 'view') {

    $date = new DateTime($data->data->created_date);

    $content .= Php2Html::h([
        'content' => $data->data->title,
        'size' => '2'
    ]);

    $content .= Php2Html::p([
        'content' => $data->data->description,
    ]);

    $user = new M_Users();

    $user->find($data->data->created_by);

    $content .= Php2Html::p([
            'content' => 'Raised by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
            'class' => 'font-italic text-muted font-weight-bold'
    ]);

    if($data->data->product) {
        $product = new M_Products();

        $product->find($data->data->product);

        $content .= Php2Html::p([
            'content' => '<b>Product</b>:  '.$product->data()->product_name,
            'class' => 'py-3 border-bottom border-secondary'
        ]);

    } else {
        $content .= Php2Html::p([
            'content' => '<b>Product</b>:  Not Specific',
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    }

    $content .= Php2Html::p([
        'content' => '<b>Priority</b>: '.ucfirst($model->priorityList()[$data->data->priority]),
        'class' => 'py-3 border-bottom border-secondary'
    ]);

    switch ($data->data->rag) {
        case 'g':
            $text_colour = ' text-success';
            break;
        case 'a':
            $text_colour = ' text-warning';
            break;
        case 'r':
            $text_colour = ' text-danger';
            break;
        default:
            $text_colour = '';
            break;
    }

    $content .= Php2Html::p([
        'content' => '<b>Rag</b>: '.Php2Html::span([
            'content' => ucfirst($model->ragStatusList()[$data->data->rag]),
            'class' => $text_colour
        ]),
        'class' => 'py-3 border-bottom border-secondary'
    ]);


    $system = new M_Systems();
    $system->find($data->data->system);

    $content .= Php2Html::p([
        'content' => '<b>System</b>: '.ucfirst($system->data()->system_name),
        'class' => 'py-3 border-bottom border-secondary'
    ]);


}

if($data->page_type == 'add') {

    $content .= $data->form;
}

if($data->page_type == 'listing') {
    $records = '';
    $content .=  Php2Html::h([
        'content' => $data->count . ' faults to show.',
        'size' => '3'
    ]);
    foreach ($data->data as $key => $value) {
        $date = new DateTime($value->created_date);

        $details = Php2Html::a([
                'content' => Php2Html::h([
                    'content' => $value->title,
                    'size' => '4'
                ]),
                'href' => '/Faults/Details/'.$value->ref
        ]);

        $user = new M_Users();

        $user->find($value->created_by);

        $details .= Php2Html::p([
                'content' => 'Raised by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia')
        ]);


        if($value->product) {
            $product = new M_Products();

            $product->find($value->product);

            $details .= Php2Html::span([
                'content' => '<i class="fab fa-product-hunt"></i> '.$product->data()->product_name,
                'class' => 'px-3 border-right border-secondary'
            ]);

        }

        $details .= Php2Html::span([
            'content' => '<i class="fas fa-hourglass-half"></i> '.ucfirst($model->priorityList()[$value->priority]),
            'class' => 'px-3 border-right border-secondary'
        ]);


        switch ($value->rag) {
            case 'g':
                $text_colour = ' text-success';
                break;
            case 'a':
                $text_colour = ' text-warning';
                break;
            case 'r':
                $text_colour = ' text-danger';
                break;
            default:
                $text_colour = '';
                break;
        }
        $details .= Php2Html::span([
            'content' => '<i class="fas fa-registered"></i> '.ucfirst($model->ragStatusList()[$value->rag]),
            'class' => 'px-3 border-right border-secondary'.$text_colour
        ]);


        $system = new M_Systems();
        $system->find($value->system);

        $details .= Php2Html::span([
            'content' => '<i class="fas fa-laptop"></i> '.$system->data()->system_name,
            'class' => 'px-3 border-right border-secondary'
        ]);

        $records .= Php2Bs::bs_column([
            'content' => $details,
            'class' => 'border-secondary border-bottom pb-1 mb-2'
        ]);
    }
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-secondary mb-1',
        'body' => [
            'class' => 'bg-light',
            'content' => $records
        ],
    ]);// bs_card
}

# TODO Better overview page
if($data->page_type == 'overview') {


    $latest_date = new DateTime($data->latest->created_date);

    $latest_details = Php2Html::a([
            'content' => Php2Html::h([
                'content' => $data->latest->title,
                'size' => '4'
            ]),
            'href' => '/Faults/Details/'.$data->latest->ref
    ]);

    $user = new M_Users();

    $user->find($data->latest->created_by);

    $latest_details .= Php2Html::p([
            'content' => 'Raised by '. $user->data()->username . ' on ' .$latest_date->format('l, jS F, Y \a\t g:ia')
    ]);


    if($data->latest->product) {
        $product = new M_Products();

        $product->find($data->latest->product);

        $latest_details .= Php2Html::span([
            'content' => '<i class="fab fa-product-hunt"></i> '.$product->data()->product_name,
            'class' => 'px-3 border-right border-secondary'
        ]);

    }

    $latest_details .= Php2Html::span([
        'content' => '<i class="fas fa-hourglass-half"></i> '.ucfirst($model->priorityList()[$data->latest->priority]),
        'class' => 'px-3 border-right border-secondary'
    ]);


    switch ($data->latest->rag) {
        case 'g':
            $text_colour = ' text-success';
            break;
        case 'a':
            $text_colour = ' text-warning';
            break;
        case 'r':
            $text_colour = ' text-danger';
            break;
        default:
            $text_colour = '';
            break;
    }
    $latest_details .= Php2Html::span([
        'content' => '<i class="fas fa-registered"></i> '.ucfirst($model->ragStatusList()[$data->latest->rag]),
        'class' => 'px-3 border-right border-secondary'.$text_colour
    ]);


    $system = new M_Systems();
    $system->find($data->latest->system);

    $latest_details .= Php2Html::span([
        'content' => '<i class="fas fa-laptop"></i> '.$system->data()->system_name,
        'class' => 'px-3 border-right border-secondary'
    ]);

    $content .=  Php2Html::h([
        'content' => 'There are currently ' . $data->count . ' faults stored.',
        'size' => '3'
    ]);

    $content .=  Php2Html::p([
        'content' => 'Today: ' . $data->today . ' / Yesterday: ' . $data->yesterday
    ]);

    $content .=  Php2Html::p([
        'content' => 'This week: ' . $data->this_week . ' / Last week: ' . $data->last_week
    ]);

    $content .=  Php2Html::p([
        'content' => 'This month: ' . $data->this_month . ' / Last month: ' . $data->last_month
    ]);

    $content .=  Php2Html::p([
        'content' => 'This year: ' . $data->this_year . ' / Last year: ' . $data->last_year
    ]);

    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-secondary mb-1',
        'header' => [
            'content' => 'Most Recent',
            'class' => 'font-weight-bold text-light'
        ],
        'body' => [
            'class' => 'bg-light',
            'content' => $latest_details,
        ],
    ]);// bs_card

} // $data->page_type == 'overview'


// Pass the details to the template
$template = new T_Faults ($content,$params);





================================================================================




calls 



<?php

/**
 * Faults View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/home/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Faults/
 *
 */

$data = (object)$data;
$model = new M_Calls();

//Set the parameters for the page
$params['layout'] = 'right-col';
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['meta'] = ['description' => 'Description set in page'];
$params['js'] = [
    'remote/ckeditor',
    #'path/to/js2',
    #'path/to/js3'
];
$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

# Show the required data based on passed in page type

if($data->page_type == 'view') {

    $date = new DateTime($data->data->created_date);
    $user = new M_Users();
    $user->find($data->data->created_by);
    $content .= Php2Html::p([
            'content' => 'Taken by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
            'class' => 'font-italic text-muted font-weight-bold'
    ]);

    $content .= Php2Html::p([
        'content' => $data->data->outline,
    ]);

    $status = ($data->data->status == 'o') ? 'Open' : 'Closed' ;
    $content .= Php2Html::p([
        'content' => '<b>Status</b>:  '.$status,
        'class' => 'py-3 border-bottom border-secondary'
    ]);

    if($data->data->product) {
        $product = new M_Products();

        $product->find($data->data->product);

        $content .= Php2Html::p([
            'content' => '<b>Product</b>:  '.$product->data()->product_name,
            'class' => 'py-3 border-bottom border-secondary'
        ]);

    } else {
        $content .= Php2Html::p([
            'content' => '<b>Product</b>:  Not Specific',
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    }

    if($data->data->customer_number) {
        $content .= Php2Html::p([
            'content' => '<b>Customer Number</b>: '.$data->data->customer_number,
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    } else {
        $content .= Php2Html::p([
            'content' => '<b>Customer Number</b>: N/A',
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    }

    if($data->data->policy_number) {
        $content .= Php2Html::p([
            'content' => '<b>Policy Number</b>: '.$data->data->policy_number,
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    } else {
        $content .= Php2Html::p([
            'content' => '<b>Policy Number</b>: N/A',
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    }

    if($data->data->agent) {
        $content .= Php2Html::p([
            'content' => '<b>Agent</b>: '.$data->data->agent,
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    } else {
        $content .= Php2Html::p([
            'content' => '<b>Agent</b>: N/A',
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    }

    if($data->data->outcome) {
        $content .= Php2Html::p([
            'content' => '<b>Outcome</b>: '.$data->data->outcome,
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    } else {
        $content .= Php2Html::p([
            'content' => '<b>Outcome</b>: N/A',
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    }


    if($data->data->follow_up) {
        $content .= Php2Html::p([
            'content' => '<b>Follow Up</b>: '.$data->data->follow_up,
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    } else {
        $content .= Php2Html::p([
            'content' => '<b>Follow Up</b>: N/A',
            'class' => 'py-3 border-bottom border-secondary'
        ]);
    }

}

if($data->page_type == 'add') {

    $content .= $data->form;
}

if($data->page_type == 'listing') {
    $records = '';
    $content .=  Php2Html::h([
        'content' => $data->count . ' calls to show.',
        'size' => '3'
    ]);
    foreach ($data->data as $key => $value) {
        $date = new DateTime($value->created_date);

        $details = Php2Html::p([
            'class' => 'text-truncate',
                'content' => $value->outline ,

        ]);

        $user = new M_Users();

        $user->find($value->created_by);

        $details .= Php2Html::p([
                'content' => 'Logged by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia')
        ]);


        if($value->product) {
            $product = new M_Products();

            $product->find($value->product);

            $details .= Php2Html::span([
                'content' => '<i class="fab fa-product-hunt"></i> '.$product->data()->product_name,
                'class' => 'px-3 border-right border-secondary'
            ]);

        }

        if($value->status == 'o') {
            $text = 'Open';
        } else {
            $text = 'Closed';
        }
            $details .= Php2Html::span([
                'content' => '<i class="fas fa-hourglass-half"></i> '.$text,
                'class' => 'px-3 border-right border-secondary'
            ]);


        $details .= Php2Html::a([
            'content' => ' View Now',
            'href' => '/CallLog/Details/'.$value->id
        ]);

        $records .= Php2Bs::bs_column([
            'content' => $details,
            'class' => 'border-secondary border-bottom pb-1 mb-2'
        ]);


    }
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-secondary mb-1',
        'body' => [
            'class' => 'bg-light',
            'content' => $records
        ],
    ]);// bs_card
}

# TODO Better overview page
if($data->page_type == 'overview') {


    $latest_date = new DateTime($data->latest->created_date);

    $latest_details = Php2Html::p([
            'content' => $data->latest->outline .
            Php2Html::a([
                'content' => ' View Now',
                'href' => '/Calls/Details/'.$data->latest->id
            ]),

    ]);

    $user = new M_Users();

    $user->find($data->latest->created_by);

    $latest_details .= Php2Html::p([
            'content' => 'Logged by '. $user->data()->username . ' on ' .$latest_date->format('l, jS F, Y \a\t g:ia')
    ]);



    $content .=  Php2Html::h([
        'content' => 'There are currently ' . $data->count . ' calls stored.',
        'size' => '3'
    ]);

    $content .=  Php2Html::p([
        'content' => 'Today: ' . $data->today . ' / Yesterday: ' . $data->yesterday
    ]);

    $content .=  Php2Html::p([
        'content' => 'This week: ' . $data->this_week . ' / Last week: ' . $data->last_week
    ]);

    $content .=  Php2Html::p([
        'content' => 'This month: ' . $data->this_month . ' / Last month: ' . $data->last_month
    ]);

    $content .=  Php2Html::p([
        'content' => 'This year: ' . $data->this_year . ' / Last year: ' . $data->last_year
    ]);

    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-secondary mb-1',
        'header' => [
            'content' => 'Most Recent',
            'class' => 'font-weight-bold text-light'
        ],
        'body' => [
            'class' => 'bg-light',
            'content' => $latest_details,
        ],
    ]);// bs_card

} // $data->page_type == 'overview'


// Pass the details to the template
$template = new T_Calls ($content,$params);
?>
<script>
    CKEDITOR.replace( 'outline',{toolbar:'Basic', uiColor : '#f3f3f3'} );
    CKEDITOR.replace( 'outcome',{toolbar:'Basic', uiColor : '#f3f3f3'} );
</script>



================================================================================




-- phpMyAdmin SQL Dump
-- version 4.4.0-dev
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Feb 20, 2018 at 04:35 PM
-- Server version: 5.5.42
-- PHP Version: 5.6.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";

--
-- Database: `hub`
--

-- --------------------------------------------------------

--
-- Table structure for table `call_log`
--

CREATE TABLE IF NOT EXISTS `call_log` (
  `id` int(11) NOT NULL,
  `outline` text NOT NULL,
  `customer_number` varchar(20) DEFAULT NULL,
  `policy_number` varchar(20) DEFAULT NULL,
  `product` int(11) NOT NULL DEFAULT '0',
  `outcome` text,
  `status` varchar(1) NOT NULL DEFAULT 'o',
  `follow_up` text,
  `agent` varchar(244) DEFAULT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `call_log`
--

INSERT INTO `call_log` (`id`, `outline`, `customer_number`, `policy_number`, `product`, `outcome`, `status`, `follow_up`, `agent`, `created_by`, `created_date`) VALUES
(1, 'dsfsdsdfs', '', '', 0, NULL, 'o', NULL, '', 1, '2018-02-19 16:45:36'),
(2, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer vel augue vel nisl dapibus vestibulum in et tortor. Curabitur sollicitudin arcu nibh, eget malesuada eros placerat sed. Aliquam id massa eu ante interdum laoreet quis sed leo. Nulla vitae leo lectus. Suspendisse potenti. Donec libero nisl, cursus at odio eget, placerat viverra purus. Mauris quis mi efficitur, laoreet sem sit amet, tincidunt dui. Integer ultricies massa neque, sed vehicula tortor finibus a. Etiam a orci tempor, tristique est vel, suscipit lorem. Nam varius lectus quam, consequat viverra urna molestie in. Suspendisse nec sollicitudin purus.\r\n\r\nNam auctor ex massa, ut imperdiet odio efficitur quis. Nulla elit urna, feugiat sit amet turpis vel, sollicitudin vehicula dui. Suspendisse quis enim dolor. Sed nec massa hendrerit, tincidunt leo non, fermentum sapien. Phasellus hendrerit ipsum vitae tempor blandit. Nullam sagittis felis at tincidunt ornare. Proin elementum libero ac erat condimentum tristique non eu magna. Etiam euismod massa in volutpat dictum. Donec a orci tempus, tincidunt nibh sed, scelerisque urna. Cras id tristique nulla, quis iaculis ex. Morbi tempus nulla a sapien tincidunt blandit. Curabitur gravida, augue vel blandit imperdiet, orci enim elementum odio, eu lobortis orci lectus a erat. Suspendisse elementum ligula tellus, vel congue lacus mattis nec. Nunc eu consectetur leo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla facilisi.', '12345678', '966666666', 3, NULL, 'o', NULL, 'An Agent', 1, '2018-02-19 16:47:38'),
(3, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer vel augue vel nisl dapibus vestibulum in et tortor. Curabitur sollicitudin arcu nibh, eget malesuada eros placerat sed. Aliquam id massa eu ante interdum laoreet quis sed leo. Nulla vitae leo lectus. Suspendisse potenti. Donec libero nisl, cursus at odio eget, placerat viverra purus. Mauris quis mi efficitur, laoreet sem sit amet, tincidunt dui. Integer ultricies massa neque, sed vehicula tortor finibus a. Etiam a orci tempor, tristique est vel, suscipit lorem. Nam varius lectus quam, consequat viverra urna molestie in. Suspendisse nec sollicitudin purus.\r\n\r\nNam auctor ex massa, ut imperdiet odio efficitur quis. Nulla elit urna, feugiat sit amet turpis vel, sollicitudin vehicula dui. Suspendisse quis enim dolor. Sed nec massa hendrerit, tincidunt leo non, fermentum sapien. Phasellus hendrerit ipsum vitae tempor blandit. Nullam sagittis felis at tincidunt ornare. Proin elementum libero ac erat condimentum tristique non eu magna. Etiam euismod massa in volutpat dictum. Donec a orci tempus, tincidunt nibh sed, scelerisque urna. Cras id tristique nulla, quis iaculis ex. Morbi tempus nulla a sapien tincidunt blandit. Curabitur gravida, augue vel blandit imperdiet, orci enim elementum odio, eu lobortis orci lectus a erat. Suspendisse elementum ligula tellus, vel congue lacus mattis nec. Nunc eu consectetur leo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla facilisi.', '12345678', '966666666', 3, NULL, 'c', NULL, 'An Agent', 1, '2018-02-19 16:47:51'),
(4, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer vel augue vel nisl dapibus vestibulum in et tortor. Curabitur sollicitudin arcu nibh, eget malesuada eros placerat sed. Aliquam id massa eu ante interdum laoreet quis sed leo. Nulla vitae leo lectus. Suspendisse potenti. Donec libero nisl, cursus at odio eget, placerat viverra purus. Mauris quis mi efficitur, laoreet sem sit amet, tincidunt dui. Integer ultricies massa neque, sed vehicula tortor finibus a. Etiam a orci tempor, tristique est vel, suscipit lorem. Nam varius lectus quam, consequat viverra urna molestie in. Suspendisse nec sollicitudin purus.\r\n\r\nNam auctor ex massa, ut imperdiet odio efficitur quis. Nulla elit urna, feugiat sit amet turpis vel, sollicitudin vehicula dui. Suspendisse quis enim dolor. Sed nec massa hendrerit, tincidunt leo non, fermentum sapien. Phasellus hendrerit ipsum vitae tempor blandit. Nullam sagittis felis at tincidunt ornare. Proin elementum libero ac erat condimentum tristique non eu magna. Etiam euismod massa in volutpat dictum. Donec a orci tempus, tincidunt nibh sed, scelerisque urna. Cras id tristique nulla, quis iaculis ex. Morbi tempus nulla a sapien tincidunt blandit. Curabitur gravida, augue vel blandit imperdiet, orci enim elementum odio, eu lobortis orci lectus a erat. Suspendisse elementum ligula tellus, vel congue lacus mattis nec. Nunc eu consectetur leo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla facilisi.', '12345678', '966666666', 3, NULL, 'o', NULL, 'An Agent', 1, '2018-02-19 16:48:37'),
(5, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ut porta augue. Proin sed feugiat elit, non molestie nunc. Nulla placerat vel enim nec hendrerit. Duis pharetra eleifend metus vitae efficitur. Maecenas maximus molestie massa eget vestibulum. Quisque eu imperdiet arcu. Ut tincidunt sodales mauris ac vestibulum. In a ante eget dolor mollis imperdiet. Morbi et ullamcorper magna. Ut aliquet pulvinar mi. Aliquam rutrum, tellus a convallis tincidunt, augue felis volutpat lacus, ac pharetra nulla velit quis odio.\r\n\r\nProin interdum ornare purus ac facilisis. Ut vitae lectus diam. Proin scelerisque ipsum in vestibulum suscipit. In ut egestas sem. Nunc orci purus, fringilla ac vulputate vel, tincidunt eu turpis. Phasellus a rutrum velit, ac posuere lacus. Aliquam porttitor, tellus quis semper scelerisque, turpis odio suscipit arcu, a dictum libero lacus ac magna. Nullam congue odio at mi vestibulum, id sollicitudin nunc efficitur. In consequat viverra magna et accumsan. Aenean ultrices euismod vulputate. Curabitur vel lectus a neque tempor fringilla sed ultrices est. Sed ullamcorper feugiat semper. Donec maximus faucibus nunc eu aliquet. Cras sed nulla ut magna egestas convallis. Nullam lacinia porta tortor, at egestas mi gravida vel.', '123456', '147258369', 2, NULL, 'o', NULL, 'aaa bbb', 1, '2018-02-19 16:49:56'),
(6, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ut porta augue. Proin sed feugiat elit, non molestie nunc. \n\nNulla placerat vel enim nec hendrerit. Duis pharetra eleifend metus vitae efficitur. Maecenas maximus molestie massa eget vestibulum. Quisque eu imperdiet arcu. Ut tincidunt sodales mauris ac vestibulum. In a ante eget dolor mollis imperdiet. Morbi et ullamcorper magna. Ut aliquet pulvinar mi. Aliquam rutrum, tellus a convallis tincidunt, augue felis volutpat lacus, ac pharetra nulla velit quis odio.\n\nProin interdum ornare purus ac facilisis. Ut vitae lectus diam. Proin scelerisque ipsum in vestibulum suscipit. In ut egestas sem. Nunc orci purus, fringilla ac vulputate vel, tincidunt eu turpis. Phasellus a rutrum velit, ac posuere lacus. Aliquam porttitor, tellus quis semper scelerisque, turpis odio suscipit arcu, a dictum libero lacus ac magna. Nullam congue odio at mi vestibulum, id sollicitudin nunc efficitur. In consequat viverra magna et accumsan. Aenean ultrices euismod vulputate. Curabitur vel lectus a neque tempor fringilla sed ultrices est. Sed ullamcorper feugiat semper. Donec maximus faucibus nunc eu aliquet. Cras sed nulla ut magna egestas convallis. Nullam lacinia porta tortor, at egestas mi gravida vel.', '123456', '147258369', 2, NULL, 'o', NULL, 'aaa bbb', 1, '2018-02-14 00:00:00'),
(7, 'erterterterterterter', '123456', '0123456', 0, 'sdfsdafsdfsfsdf', 'o', NULL, 'And agent', 1, '2018-02-20 09:40:32'),
(8, '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Proin non ligula nec nisi pharetra pellentesque. Maecenas vitae nibh quis massa malesuada rutrum. Mauris sodales malesuada urna, nec condimentum nibh laoreet efficitur. Vivamus sollicitudin odio dapibus, hendrerit libero euismod, bibendum nulla. Donec aliquet luctus mauris, nec consectetur metus imperdiet a.</p>\r\n\r\n<p>Suspendisse sapien libero, viverra vel neque in, consequat semper metus. Phasellus tincidunt, quam et iaculis laoreet, justo augue commodo est, nec luctus arcu quam ac sem. <strong><em>Maecenas ac hendrerit lectus. Duis justo ante</em></strong>, aliquet vitae massa ut, efficitur tristique nisl. Praesent pharetra arcu lacus, ac consequat sapien dignissim eget.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Mauris et mattis justo, non vestibulum lacus. Quisque tincidunt erat magna, eget sagittis ex placerat elementum. Vestibulum a efficitur tortor, non condimentum diam. Donec in purus at ante congue egestas et vel velit. Fusce at tristique lorem.</p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', '', '', 1, '<p>sadasdasdsa</p>\r\n\r\n<p>sa</p>\r\n\r\n<p><strong>das</strong></p>\r\n\r\n<p>ds</p>\r\n\r\n<p>sda</p>\r\n\r\n<p>sda</p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', 'o', NULL, '', 1, '2018-02-20 10:22:41');

-- --------------------------------------------------------

--
-- Table structure for table `ideas`
--

CREATE TABLE IF NOT EXISTS `ideas` (
  `id` int(11) NOT NULL,
  `title` varchar(244) NOT NULL,
  `details` text NOT NULL,
  `category` int(11) NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL,
  `status` varchar(1) NOT NULL DEFAULT 'o'
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `ideas`
--

INSERT INTO `ideas` (`id`, `title`, `details`, `category`, `created_by`, `created_date`, `status`) VALUES
(1, 'This is a better idea', '<p>wqeqweqeq</p>\r\n', 2, 1, '2018-02-20 13:56:38', 'o'),
(2, 'This is an idea', '<p>sadsad tertr ter ert ert ertertesadas</p><p>sadsadsadas</p>\n<p>sadsadsadas</p>\n<p>sadsads ertert ert ert ertadas</p>\n\n', -1, 1, '2018-02-20 13:56:57', 'o'),
(3, 'Herro', '<p>grgreg</p>\r\n', 2, 2, '2018-02-20 15:56:46', 'o');

-- --------------------------------------------------------

--
-- Table structure for table `idea_categories`
--

CREATE TABLE IF NOT EXISTS `idea_categories` (
  `id` int(11) NOT NULL,
  `category_name` varchar(60) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `idea_categories`
--

INSERT INTO `idea_categories` (`id`, `category_name`) VALUES
(1, 'Process'),
(2, 'Systems'),
(3, 'Team Building');

-- --------------------------------------------------------

--
-- Table structure for table `idea_comments`
--

CREATE TABLE IF NOT EXISTS `idea_comments` (
  `id` int(11) NOT NULL,
  `idea` int(11) NOT NULL,
  `details` text NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `idea_comments`
--

INSERT INTO `idea_comments` (`id`, `idea`, `details`, `created_by`, `created_date`) VALUES
(1, 2, '<p>This is a comment</p>\r\n', 1, '2018-02-20 15:32:12'),
(2, 2, '<p>This is a comment</p>\r\n', 1, '2018-02-20 15:35:03'),
(3, 2, '<p>This is a comment</p>\r\n', 1, '2018-02-20 15:35:18'),
(4, 1, '<p>Another comment.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Just because I can.</p>\r\n', 1, '2018-02-20 15:35:51'),
(5, 1, '<p>More commenty womenty&#39;s.</p>\r\n', 1, '2018-02-20 15:36:39'),
(6, 2, '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vehicula sollicitudin nisl congue consectetur. Nam imperdiet, turpis vitae consequat gravida, turpis sapien pharetra dolor, vitae scelerisque nunc ex sit amet felis. Cras at magna malesuada, efficitur dui vitae, rutrum lacus. Mauris vel e<strong>st ac diam dictum blandit. Nunc varius nunc vitae porta lobortis. Duis luctus congue augue nec tincidunt. Nam auctor erat id elit molestie dapibus. Duis id felis vel risus dignissim commodo id et arcu. Duis pretium purus odio, malesuada mattis purus hendrerit sed. Curabitur scelerisque, leo a blandit vestibulum, urna augue tempor orci, rhoncus ultricies velit odio a leo. Proin ultricies turpis justo, a ven</strong>enatis mi cursus eget. Nulla vitae urna massa. Phasellus mattis metus dolor, quis facilisis mi sollicitudin non. Pellentesque in urna mollis, feugiat libero in, dictum purus. Praesent sit amet bibendum erat. Curabitur venenatis porta lacinia.</p>\r\n\r\n<p>Suspendisse auctor a magna ac laoreet. Nullam turpis tellus, mattis a aliquet eget, feugiat eget sapien. Sed ac venenatis justo, ut elementum dolor. Nulla ultrices, dolor non vestibulum ultrices, felis ligula fermentum nisi, ac tempor nisi tortor in sapien. Sed iaculis ultrices lacus, a luctus ex mattis vitae. Ut ornare rhoncus mauris vitae faucibus. Maecenas mollis ac arcu sit amet molestie. Etiam laoreet justo non odio convallis, vitae venenatis felis commodo. Sed faucibus malesuada pharetra. Cras pulvinar feugiat nibh.</p>\r\n\r\n<p>Aenean vestibulum libero turpis, finibus elementum augue tristique ac. Suspendisse potenti. Morbi eget neque sit amet ipsum lacinia accumsan a a turpis. Fusce nunc libero, semper id ipsum vel, fringilla ultrices augue. Duis suscipit vitae augue in malesuada. Nunc tempor malesuada diam eget molestie. Pellentesque venenatis rutrum tellus sit amet facilisis. Maecenas eget lacus quam. Sed vitae magna rutrum, ultricies urna sit amet, imperdiet sem. Nunc eleifend rutrum dolor a blandit. Sed ac ante a nibh pellentesque volutpat.</p>\r\n\r\n<p>Donec ornare posuere malesuada. Pellentesque commodo pellentesque tristique. Nam vehicula lobortis lectus, vel vulputate arcu semper ut. Curabitur varius auctor mollis. Duis sit amet rhoncus mi. Curabitur tincidunt nisi imperdiet libero feugiat, vel elementum justo porta. Aliquam porttitor leo et est consequat, et elementum erat malesuada. Sed consectetur velit a lacinia sollicitudin. Sed faucibus sapien diam, vel facilisis arcu eleifend non. Morbi ac quam mattis, sollicitudin orci ut, tempor risus. Suspendisse nec convallis felis. In ultricies quam vitae scelerisque pretium. In blandit, lacus ac ullamcorper tincidunt, tortor nisi dictum mauris, eu tempor quam augue consequat nisi.</p>\r\n\r\n<p>Sed at bibendum augue. Integer ligula ante, consectetur vel lacus at, ultrices vulputate augue. Duis in sem ut nulla venenatis mollis a dignissim dui. Sed libero urna, auctor dictum scelerisque at, consectetur id augue. Phasellus vitae tempor dolor. Quisque aliquet euismod ante eget pretium. Nulla consectetur nibh id felis convallis tempor. Pellentesque cursus augue sed sagittis maximus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n', 1, '2018-02-20 15:44:34'),
(7, 2, '<p><span class="marker">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam imperdiet molestie leo, et pulvinar mi lobortis sed. Duis ac nunc magna. Phasellus feugiat ut nulla vitae iaculis. In hac habitasse platea dictumst. Vestibulum orci massa, congue eget lectus sit amet, consequat ornare nisl. Praesent posuere sapien ligula, non mollis eros vestibulum vitae. Proin ut magna vitae eros congue rutrum eu ut enim. Nullam vehicula cursus gravida.</span></p>\r\n\r\n<p>Proin cursus erat urna, eget hendrerit enim tincidunt a. In feugiat libero quis turpis maximus imperdiet. Vestibulum eu ornare odio. Pellentesque malesuada consequat felis, quis finibus leo accumsan in. Sed sit amet enim ut eros vehicula porttitor id sed odio. Sed mattis nunc vitae mattis eleifend. Nulla eu tortor tortor. Praesent non scelerisque neque. Praesent tincidunt, orci pretium tempus aliquet, lacus dolor ultrices purus, nec elementum orci mauris et diam. Ut et ante mattis, hendrerit justo at, dignissim nunc. Nunc nec congue erat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec a enim vel velit gravida ornare.</p>\r\n', 1, '2018-02-20 15:47:05'),
(8, 2, '<p><span class="marker">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam imperdiet molestie leo, et pulvinar mi lobortis sed. Duis ac nunc magna. Phasellus feugiat ut nulla vitae iaculis. In hac habitasse platea dictumst. Vestibulum orci massa, congue eget lectus sit amet, consequat ornare nisl. Praesent posuere sapien ligula, non mollis eros vestibulum vitae. Proin ut magna vitae eros congue rutrum eu ut enim. Nullam vehicula cursus gravida.</span></p>\r\n\r\n<p>Proin cursus erat urna, eget hendrerit enim tincidunt a. In feugiat libero quis turpis maximus imperdiet. Vestibulum eu ornare odio. Pellentesque malesuada consequat felis, quis finibus leo accumsan in. Sed sit amet enim ut eros vehicula porttitor id sed odio. Sed mattis nunc vitae mattis eleifend. Nulla eu tortor tortor. Praesent non scelerisque neque. Praesent tincidunt, orci pretium tempus aliquet, lacus dolor ultrices purus, nec elementum orci mauris et diam. Ut et ante mattis, hendrerit justo at, dignissim nunc. Nunc nec congue erat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec a enim vel velit gravida ornare.</p>\r\n', 1, '2018-02-20 15:47:22'),
(9, 2, '<p><span class="marker">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam imperdiet molestie leo, et pulvinar mi lobortis sed. Duis ac nunc magna. Phasellus feugiat ut nulla vitae iaculis. In hac habitasse platea dictumst. Vestibulum orci massa, congue eget lectus sit amet, consequat ornare nisl. Praesent posuere sapien ligula, non mollis eros vestibulum vitae. Proin ut magna vitae eros congue rutrum eu ut enim. Nullam vehicula cursus gravida.</span></p>\r\n\r\n<p>Proin cursus erat urna, eget hendrerit enim tincidunt a. In feugiat libero quis turpis maximus imperdiet. Vestibulum eu ornare odio. Pellentesque malesuada consequat felis, quis finibus leo accumsan in. Sed sit amet enim ut eros vehicula porttitor id sed odio. Sed mattis nunc vitae mattis eleifend. Nulla eu tortor tortor. Praesent non scelerisque neque. Praesent tincidunt, orci pretium tempus aliquet, lacus dolor ultrices purus, nec elementum orci mauris et diam. Ut et ante mattis, hendrerit justo at, dignissim nunc. Nunc nec congue erat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec a enim vel velit gravida ornare.</p>\r\n', 1, '2018-02-20 15:47:37'),
(10, 1, '<p>hello world</p>\r\n', 2, '2018-02-20 15:56:21');

-- --------------------------------------------------------

--
-- Table structure for table `one_thing`
--

CREATE TABLE IF NOT EXISTS `one_thing` (
  `id` int(11) NOT NULL,
  `details` text NOT NULL,
  `created_date` datetime NOT NULL,
  `viewed` int(11) NOT NULL DEFAULT '0'
) ENGINE=MyISAM AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `one_thing`
--

INSERT INTO `one_thing` (`id`, `details`, `created_date`, `viewed`) VALUES
(1, 'werwer', '2018-02-20 11:15:24', 0),
(2, 'werwer', '2018-02-20 11:15:33', 1),
(3, 'werwer', '2018-02-20 11:15:44', 0),
(4, '<p>\nPhasellus sed sem et risus tincidunt tempor eu et diam. Interdum et malesuada fames ac ante ipsum primis in faucibus. Integer non pulvinar nulla. Praesent dolor sapien, egestas vel maximus vitae, pharetra nec dolor. Donec non mauris fringilla, commodo odio in, viverra quam. Donec bibendum, augue id luctus placerat, lorem nunc scelerisque felis, at sagittis velit mauris ut turpis. Curabitur at ligula massa. Fusce faucibus imperdiet tincidunt. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;\n</p>\n<p>\nNunc tempus semper metus, in pharetra est aliquet eget. Donec volutpat diam non ullamcorper gravida. Suspendisse efficitur, erat eu molestie bibendum, quam lacus tincidunt urna, et feugiat dolor elit eget odio. Aliquam sodales, nunc nec euismod fringilla, massa orci convallis elit, eget lobortis felis orci nec elit. Etiam at malesuada quam, eu rhoncus ipsum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nullam lobortis arcu eget tortor malesuada tristique. Maecenas fringilla lacinia urna, non dignissim nunc placerat vitae. Integer ac augue sed nisl gravida rhoncus. Vivamus cursus eros ut mattis pretium. Aliquam lacinia euismod ipsum, sit amet volutpat nibh imperdiet a. Fusce cursus accumsan purus, vel accumsan arcu laoreet vitae. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum condimentum sollicitudin pharetra.\n</p>', '2018-02-20 11:19:07', 1),
(5, '<p>\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed erat dui, molestie in venenatis id, accumsan in purus. Integer maximus faucibus metus vitae scelerisque. Vivamus vestibulum posuere egestas. Aenean magna arcu, hendrerit eget molestie vel, luctus a nulla. Nullam ac neque enim. Ut imperdiet sapien vitae leo aliquam sodales. Integer enim elit, gravida ut massa in, aliquam imperdiet massa. Aliquam ullamcorper erat ut felis aliquet condimentum. Suspendisse scelerisque tortor vel augue lobortis, ut luctus nisl facilisis. Mauris elementum lectus in dolor dictum, vitae pretium tortor faucibus. Cras maximus, lorem non aliquam sodales, dolor elit commodo dui, vitae laoreet arcu lorem et velit. Aenean magna nisl, sodales fringilla rhoncus vel, condimentum vitae sem. Donec vulputate scelerisque ante ut ultrices. Sed vitae bibendum magna. Donec finibus, tellus quis luctus posuere, mi lorem congue odio, et tincidunt nisi nisl sit amet ante. Nunc quam metus, dapibus non egestas eget, euismod ac sapien.\n</p>\n<p>\nAenean fringilla erat eu libero rhoncus, egestas aliquam eros ornare. Quisque nisi ipsum, commodo nec lobortis sed, tincidunt sed turpis. Nam eu semper ex. Nunc tincidunt non mauris eu varius. Fusce sagittis risus magna. Quisque et nisl sodales, auctor ex a, convallis dolor. Nulla diam dui, elementum aliquet erat non, lacinia consequat ligula. Morbi vulputate eu ante id rutrum. Cras vel leo viverra enim aliquam dictum. Ut gravida risus enim, eget ultrices orci vulputate nec. Sed in elit eget felis volutpat vestibulum. Duis bibendum nulla urna, eget semper enim varius sit amet. Ut mi odio, tempor quis elit a, laoreet fermentum lectus.\n</p>', '2018-02-20 11:19:38', 1),
(6, '<p>sasadsa&nbsp;<strong>sadasdsa</strong>&nbsp;sadfasdad&nbsp;<em>sadsadsad</em>&nbsp;asdsad&nbsp;<ins>sadsadasdsa</ins></p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', '2018-02-20 11:20:10', 0),
(7, '<p>I would like everything to be better as it is all <em><strong>rubbish</strong></em>.</p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', '2018-02-20 12:48:08', 1),
(8, '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis iaculis tristique quam eget luctus. Morbi vel diam quis risus accumsan sagittis sed eu sapien. Donec leo velit, tincidunt ac molestie sed, interdum vel urna. Nulla ornare scelerisque sem nec rhoncus. Aliquam a ullamcorper ligula. Nullam dignissim dolor velit, vitae elementum tortor fermentum tincidunt. Fusce id nisl eu dolor viverra feugiat. Donec ac dolor elit. <strong><em>Etiam faucibus tellus vitae lacus aliquet faucibus. Curabitur tincidunt posuere sapien, eu pellentesque quam luctus id. In sollicitudin in mi et maximus. Integer ornare volutpat nisl non rhoncus. Sed bibendum vulputate urna, a blandit ex bibendum et. Nam dapibus sapien quis convallis sodales. Nunc vel nisi porta, tempus neque ac, auctor nisi. Praesent id ipsum eu tortor egestas placerat.</em></strong></p>\r\n\r\n<p>Phasellus sed sem et risus tincidunt tempor eu et diam. Interdum et malesuada fames ac ante ipsum primis in faucibus. Integer non pulvinar nulla. Praesent dolor sapien, egestas vel maximus vitae, pharetra nec dolor. Donec non mauris fringilla, commodo odio in, viverra quam. Donec bibendum, augue id luctus placerat, lorem nunc scelerisque felis, at sagittis velit mauris ut turpis. Curabitur at ligula massa. Fusce faucibus imperdiet tincidunt. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;</p>\r\n\r\n<p>Nunc tempus semper metus, in pharetra est aliquet eget. Donec volutpat diam non ullamcorper gravida. Suspendisse efficitur, erat eu molestie bibendum, quam lacus tincidunt urna, et feugiat dolor elit eget odio. Aliquam sodales, <strong>nunc nec euismod fringilla</strong>, massa orci convallis elit, eget lobortis felis orci nec elit. Etiam at malesuada quam, eu rhoncus ipsum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nullam lobortis arcu eget tortor malesuada tristique. Maecenas fringilla lacinia urna, non dignissim nunc placerat vitae. Integer ac augue sed nisl gravida rhoncus. Vivamus cursus eros ut mattis pretium. Aliquam lacinia euismod ipsum, sit amet volutpat nibh imperdiet a. Fusce cursus accumsan purus, vel accumsan arcu laoreet vitae. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum condimentum sollicitudin pharetra.</p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', '2018-02-20 12:50:49', 1),
(9, '<p>This should be a big feather in Steve&#39;s cap</p>\r\n', '2018-02-20 12:54:00', 0),
(10, '<p>&copy;</p>\r\n', '2018-02-20 12:56:15', 0);

-- --------------------------------------------------------

--
-- Table structure for table `p_faults`
--

CREATE TABLE IF NOT EXISTS `p_faults` (
  `id` int(11) NOT NULL,
  `ref` int(11) NOT NULL,
  `title` varchar(244) NOT NULL,
  `description` text NOT NULL,
  `product` int(11) DEFAULT NULL,
  `system` int(11) NOT NULL,
  `rag` varchar(1) NOT NULL,
  `priority` varchar(1) NOT NULL,
  `assignee` int(11) DEFAULT NULL,
  `status` varchar(1) NOT NULL DEFAULT 'o',
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `p_faults`
--

INSERT INTO `p_faults` (`id`, `ref`, `title`, `description`, `product`, `system`, `rag`, `priority`, `assignee`, `status`, `created_by`, `created_date`) VALUES
(1, 332, 'There is a fault and this is it', 'Quisque hendrerit quam at mollis porta. Donec egestas lorem nisi, et rutrum quam tincidunt quis. Aliquam cursus felis et vulputate consectetur. Nam sollicitudin lorem sit amet sapien porta, vitae viverra tellus elementum. Morbi tellus libero, pharetra eget ante in, efficitur porta dolor. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nunc tempor luctus velit. Aliquam hendrerit vulputate lorem, non vestibulum nulla hendrerit vitae. Sed sodales leo et accumsan ullamcorper. Curabitur dignissim leo et dignissim volutpat.', 1, 2, 'a', 'u', NULL, 'o', 1, '2018-02-19 12:48:24'),
(2, 333, 'This would be a title', 'Vivamus sit amet lectus mi. Duis eget ultricies nisi. Duis dapibus orci in urna mattis ornare. Phasellus feugiat finibus semper. Pellentesque eget quam et magna tempor mollis a ac urna. Integer at purus scelerisque, lobortis tellus sed, tincidunt tellus. Fusce molestie augue non orci faucibus luctus.', 2, 3, 'g', 'h', NULL, 'o', 1, '2018-02-19 12:49:38'),
(3, 334, 'This would be a title', 'Vivamus sit amet lectus mi. Duis eget ultricies nisi. Duis dapibus orci in urna mattis ornare. Phasellus feugiat finibus semper. Pellentesque eget quam et magna tempor mollis a ac urna. Integer at purus scelerisque, lobortis tellus sed, tincidunt tellus. Fusce molestie augue non orci faucibus luctus.', 2, 5, 'a', 'l', NULL, 'o', 1, '2018-02-18 12:49:38'),
(4, 335, 'This would be a title', 'Vivamus sit amet lectus mi. Duis eget ultricies nisi. Duis dapibus orci in urna mattis ornare. Phasellus feugiat finibus semper. Pellentesque eget quam et magna tempor mollis a ac urna. Integer at purus scelerisque, lobortis tellus sed, tincidunt tellus. Fusce molestie augue non orci faucibus luctus.', 4, 1, 'r', 'l', NULL, 'o', 1, '2018-02-10 08:19:29'),
(5, 337, 'Lorem ipsum dolor sit amet', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean leo augue, iaculis a placerat eu, malesuada a nisi. Cras accumsan augue at risus mollis ullamcorper ac vitae dui. Vivamus luctus ultricies nunc, non efficitur diam porta id. Curabitur finibus egestas libero, pharetra pellentesque quam consequat feugiat. Integer convallis vitae neque id facilisis. Praesent bibendum tellus ligula, sed semper est consequat id. Pellentesque mollis mi sit amet maximus sagittis. Etiam id fringilla risus, et semper risus.', 8, 5, 'g', 'm', NULL, 'o', 1, '2018-01-19 04:09:48'),
(6, 338, 'Proin ultrices urna dapibus metus porta', 'Proin ultrices urna dapibus metus porta, sed volutpat orci gravida. Quisque augue augue, iaculis ut gravida eget, convallis eget quam. Ut ultrices sit amet ligula non sollicitudin. Integer in neque ut sapien rutrum imperdiet sit amet eget eros. Morbi a metus sed augue tincidunt ultrices. Phasellus pulvinar tellus lacus, eu egestas nibh porttitor eget. Curabitur sit amet malesuada elit, et porttitor lorem. Cras efficitur dignissim volutpat. Praesent ac scelerisque nulla. Mauris non lacus vel ante tristique pharetra.', 1, 4, 'a', 'l', NULL, 'o', 1, '2018-01-18 15:14:30'),
(7, 339, 'Integer sem dui, sagittis vel nunc ultricies', 'Integer sem dui, sagittis vel nunc ultricies, aliquet condimentum arcu. Donec facilisis sodales odio at ultrices. Etiam rhoncus nunc vel mi pulvinar fringilla. Sed interdum dui vel magna porttitor, a facilisis leo semper. Praesent ut quam id leo tincidunt bibendum. Sed auctor id ipsum a consectetur. Etiam quis semper velit. Duis non ex aliquet, pellentesque nibh dictum, vulputate tellus. Fusce congue id nisl ut sodales. Etiam sit amet nisi eu lacus tincidunt ullamcorper. Nullam sit amet mollis purus, vitae tempor nisi. In nec facilisis mauris, a auctor est.', 3, 2, 'r', 'u', NULL, 'o', 1, '2017-12-08 15:15:03'),
(8, 345, 'Travel is buggered', 'We told them it was a bad idea but they would not listen.', 9, 5, 'a', 'h', NULL, 'o', 1, '2018-02-19 15:55:08');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `call_log`
--
ALTER TABLE `call_log`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `ideas`
--
ALTER TABLE `ideas`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `idea_categories`
--
ALTER TABLE `idea_categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `idea_comments`
--
ALTER TABLE `idea_comments`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `one_thing`
--
ALTER TABLE `one_thing`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `p_faults`
--
ALTER TABLE `p_faults`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `call_log`
--
ALTER TABLE `call_log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=9;
--
-- AUTO_INCREMENT for table `ideas`
--
ALTER TABLE `ideas`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `idea_categories`
--
ALTER TABLE `idea_categories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `idea_comments`
--
ALTER TABLE `idea_comments`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=11;
--
-- AUTO_INCREMENT for table `one_thing`
--
ALTER TABLE `one_thing`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=11;
--
-- AUTO_INCREMENT for table `p_faults`
--
ALTER TABLE `p_faults`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=9;
