Changed.....

* Remember the Users/Members difference 


/app/core/DB.php
/app/core/Templates/T_Admin.php
/app/core/Templates/T_Base.php
/app/views/admin/users.php
/app/views/home/users.php
/app/views/home/index.php
/app/views/admin/index.php
/app/Controllers/Users.php
/app/core/models/M_Users.php
/app/views/admin/usergroups.php
/app/core/models/M_Usergroups.php
/app/Controllers/Admin/Usergroups.php
















<?php

/**
 * Front End Home Controller
 *
 * Controller for any functions/views called from the site root as well
 * as the home page itself. These are the site home page, the login page
 * and the registration page.
 *
 * This file cannot contain any functions with the same name as a any files
 * or level 1 directories in /app/controllers/
 *
 * This files also acts as a reference to how all controllers (both front-end
 * and admin) collate the information and pass this to the relevant view.
 *
 * This controller will be activated when the first parameter in the url does
 * not match any files or folders within the controllers folder.
 *
 * The examples at the end of this opening comment show the urls that call
 * this controller and each of them cause a function within this file to
 * be executed.
 *
 * For a full explanation of how the controllers work and get from receiving
 * the request to showing the content, check out the 'Amend and Extend'
 * section at https://github.com/MargateSteve/Framework/.
 *
 * Any messages that are required in the view, such as post succss or failure
 * and errors are passed in as $params['status'] with a reference to look up
 * in the models messages () function.
 *
 * @package     Core
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	    http://yoursite/
 * @link    	http://yoursite/Login
 * @link 	    http://yoursite/Register
 */
class Home extends Controller
{
    private $_args,
            $_default_model,
            $_logs,
            $_postdata,
            $_rules,
            $_user,
            $_view_data;

    /*
        As soon as this class is called, there are two things that we set for quick access whenever required.

        The first is to open the most commonly accessed model from within this file and assign that to $this->_default_model.

        The other opens the Logs core class ('/app/core/Logs.php') that controls the saving of user activity, which we assign to $this->_logs.
     */
	public function __construct () {
		$this->_default_model = $this->model('M_Users');
        $this->_logs = new Logs();
	} // __construct ()

	/**
	 * Site Home Page
	 *
	 * This is the page that will be seen when viewing the site root.
	 *
	 * This will generally show latest updates as the primary focus but for now,
     * we just show some temporary content.
     *
     * $_args is not used for anything other than to cause a 404 error if there
     * are incorrect url parameters. The index() method is purely for showing
     * the home page so if the controller has parsed the url and not found any
     * other matches, meaning we have ended up here, if there is anything left
     * in the url, we force the 404.
     *
     * At this point assuming we have passed the 404 check, We need to choose
     * the correct view to use and pass in the required details. We do this but
     * using the view() function in the '/app/core/Controller.php' class that
     * this one extends.
     *
     * view() takes two arguments. The first is a delimated path through the
     * 'app/views' folder to the required view file. For this method that is set
     * as 'home/index' which means we are sending to the view at
     * 'app/views/home/index.php'.
     *
     * The second argument is an array of page specific detail such as the page
     * title and any content to display. With thte temporary content on the home
     * page that we are using, we actually set that in the view, so all we pass
     * in this method is the page title and subtitle.  For methods that have more
     * variables and working out to do, we build the content up gradually.
	 *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	         /app/views/home/index.php
	 * @link 	         http://yoursite/
	 */
	public function index($_args=null) {
        /*
            As we are viewing the home page, we are assuming that the url will be http://yoursite/. However, if there has been a malformed url that does not match any of the controller directories or files, we will also end up at this method in this file.

            As an example, http://yoursite/GetMembers/New/ has no controller matches so by the time we get to this method, we still have 'GetMembers' and 'New' to deal with. The fact that these will be seen as an argument means that $_args no contains something and is no longer null.

            If this is the case, we redirect the user to the 404 page BUT the url in the browser will still be as entered, which we can use for loggin purposes.
         */
        if($_args){Redirect::to('404');}

        /**
         * Pass the data to the view
         *
         * We only send a page title and subtitle through. All of the content
         * for this page is hard-coded in the view file for now.
         *
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
	    $this->view(
	        'home/index',
	        [
	            /*
                    Pass the page title - will be shown at the top of the content and has the meta title in the <head> section, so will show on the browser tab.
                */
                'page_name' => 'UAT HUB',
                /*
                    Pass the page subtitle - this will be shown just below the page title. This is optional and can be ommited completely.
                */
                'page_subtitle' => 'Intranet for the UAT area',
	        ]
	    );

  	} // index()

    /**
     * Login page
     *
     * Contains the full login form along with information and help with
     * login problems. This can be accessed via the 'Login Help' link the the
     * menus but the user will also end up here upon a failed login attempt.
     *
     * Unlike the home page above, as well as passing the page title and subtitle
     * to the view, we also pass in the login form as 'form'. It is easier to set
     * this in here as we already have an open connection to model that holds it.
     * Any processing of login attempts are done via the init.php file to allow
     * logging in from any page.
     *
     * Again, we should not have any extra url parts when viewing the login page
     * so if any exist, we throw a 404 error.
     *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	         /app/views/home/login.php
	 * @link 	         http://yoursite/Login
     */
    public function login($_args=null) {
        // If we have parameters send to the 404 page
        if($_args){Redirect::to('404');}

        /*
            Pass the required data through to the view

            For now we are just passing a few counts of various sections
        */
        $this->view(
            'home/login',
            [
                'page_name' => 'Login',
                'page_subtitle' => 'Login to the site or get help if you are having trouble',
                'form' => $this->_default_model->loginform($form_params=['hide_help'=>true])
            ]
        );

    } // login()

    /**
     * Registration page
     *
     * Contains the registration form and checks for any registration attempts.
     *
     * This is far more complex than either of the other methods in this file as
     * not only does it show the required data to the user but also handles any
     * registration attempts, showing a message and adding validation classes to
     * the form as well as redirecting a user away from the page if they are
     * already logged in.
     *
     * Because this method powers several different versions of the page - initial,
     * succesful post, unsuccesful post - each with their own page titles, we
     * build up the second part of the view() function as we go along, as $_view_data
     * and then pass that into the function at the end.
     *
     * Also, as we are passing it to a view that also powers other pages, we set
     * a 'page_type' so the view knows which version we are on.
     *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	         /app/views/home/users.php
	 * @link 	         http://yoursite/register
     */
    public function register($_args=null) {
        // If we have parameters send to the 404 page
        if($_args){Redirect::to('404');}

        /*
            As we may have different versions of the page, we set any parameters
            that we know will not or are unlikely to change to $_view_data. We
            build upon or amend this as we go along.
            'page_name' is the same as we have used before, but we also send
            'page_type' as 'register'.
            The view handles multiple pages so we use 'page_type' so it knows
            which version we are on and, therefore, which output to show.
         */
        $_view_data = [
            'page_name' => 'Register new account',
            'page_type' => 'register',
			'errors' => null,

        ];

        /*
            If the user is already logged in, we redirect them to the home page.

            The isLoggedIn () function in $this->_default_model ('M_Users.php') checks to see if a user $_SESSION exists and returns true or false. If true, we do not
            need to show the registration page so we redirect them to the home page.

            Again, we use Redirect::to() ('/app/core/Redirect.php') for this but use it in a slightly different way. Instead of a numbered reference, we actually use a physical path, in this case '/' to denote the home page. When using Redirect::to() like this, the redirect physically happens so the url will show 'http://yoursite/'.
         */
        if($this->_default_model->isLoggedIn()){Redirect::to('/');}

        /*
            At this point, there will have been no redirects so we do actually show the registration page. As we also handle registration attempts within the method, we first check to see if a registration attempt has been made.

            If there has been, we attempt to process it, otherwise we just show the registration form.
         */
        if (Input::exists(['name'=>'register'])) {
            /*
                A registration attempt has been made so we need to take the $_POST data and attempt to validate it before we insert it.

                We do not need to run validation against the name of the forms submit button so the first thing we do is unset that.
             */
            unset($_POST['register']);

            /*
                Now, all we have left is the actual data from the form fields, almost ready to validate. As there may be a future requiredment to preserve the original $_POST data, we create a variable called $_postdata and set $_POST to it.
             */
            $_postdata = $_POST;

            /*
                In the registration form, the 'Accept Terms' field is a checkbox. As a result, if it IS NOT checked, it will not show up in the posted data and therefore not validate correctly.

                To prevent this, we overwrite $_postdata['terms'] with the value if it has been posted, else we create it with a value of '0' if it has not.
             */
            $_postdata['terms'] = (isset($_postdata['terms'])) ? $_postdata['terms'] : 0;


            /*
                We now run another function to unset unrequired validation rules to avoid them firing on unset fields. This is done via the stripValidateRules() function in '/src/functions/global.php', passing in the $_postdata along with a list of the validation rules, stored in the validation_rules() function in the default class.
             */
            $_rules = stripValidateRules (
                $_postdata,
                $this->_default_model->validation_rules()
            );

            /*
                At this point, we have two variables that we are working with.

                $_postdata containing only the form fields we want to validate
                $_rules containing a list of validation rules only for the fields in $_postdata

                We now check these against each other in the check() function of '/app/core/Validate.php'. We initially open a new instance of the validation class and set it to $validate to be able to access the function.

                We then call the function, passing in the $_postdata and $_rules assigning anything that is returned to $validation. There are two functions now available to us
                $validation->passed() will return a true or false as to whether the validation attempt has been successful
                $validation->errors() will contain a list of errors if validation failed.

             */
            $validate = new Validate();
            $validation = $validate->check(
                $_postdata,
                $_rules
            );

            /*
                If validation has passed, we unset the 'confirm_password' and
                'terms' from the $_postdata as they were only for validation
                purposes and do not get inserted into the database.
                We then have to add the users status depending on which registration
                validation method is has ben set in the settings. If we are set
                to automatically verify, we set the 'status' to 1 and add it to
                $_postdata. For any other verification method (email or manual)
                we do not set anything as the users table in the database defaults
                'status' to '0' if it does not exist.

                We then attempt to register the user and create any messages that
                 we need to show.

                If validation has failed, we simply show a message showing what
                went wrong as well as the form with validation classes.
             */
             if ($validation->passed()) {
                 // Validation passed so unset unrequired fields
                 unset($_postdata['confirm_password']);
                 unset($_postdata['terms']);

                 // If we are on automatic verification, set the 'status' to 1
                 if(Settings::members()['verification'] == 'auto' || isset($_args['auto_verify'])) {
                     $_postdata['status'] = 1;
                 }

                 /*
                    We now have everything that we need to insert the new user into the database. Again, this is done via a function in the default model - create(). This function returns a true or false depending on whether or not the insert is successful.

                    If it is successful, we set a message based on the verification method, as well as changing the page title and passing the id of the new user.

                    If it is not succesful, at this point it can only be an unspecified error so all we can do is show a message.
                  */
                 if($this->_default_model->create($_postdata)) {

                     /*
                        The insert has been succesful so we run a switch statement based on the verification method that has been set.


                      */
                     switch (Settings::members()['verification']) {
                         case 'auto':
                             $_view_data['message'] = $this->_default_model->messages('register_success_auto');
                             break;
                         case 'email':
                             $_view_data['message'] = $this->_default_model->messages('register_success_email');
                             break;
                         case 'manual':
                             $_view_data['message'] = $this->_default_model->messages('register_success_manual');
                             break;
                     }
                     $_view_data['page_name'] = 'Registration Succesful';
                     $_view_data['verification'] = Settings::members()['verification'];
                     $_view_data['insert_id'] = $this->_default_model->_insertId;
                     $this->_logs->register_success(
                         $_view_data['insert_id']
                     );

                 } else {
                     // The create was unsuccessful
                     $_view_data['status'] = 'create_failed_unspecified';
                 }
             } else {
                 // The validation failed so set the status and errors
                 $_view_data['message'] = $this->_default_model->messages('register_validation');
                 $_view_data['errors'] = $validation->errors();
                 $this->_logs->register_fail(
                     $_view_data['errors'],
                     $_postdata
                 );


                 $_view_data['form'] = $this->_default_model->userForm([
                     'errors' => $_view_data['errors'],
                     'version' => 'create',
                     'area' => 'user',
                 ]);
             }

        } else {
            // There has been no registration attempt so simply show the form
            $_view_data['form'] = $this->_default_model->userForm([
                'errors' => null,
                'version' => 'create',
                'area' => 'user',
            ]);
        } // If registration attempt

        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'home/users',
            $_view_data
        );

    } // register()


#############################################################
## Work Related
#############################################################


    public function links($_args=null) {
        /*
            As we are viewing the home page, we are assuming that the url will be http://yoursite/. However, if there has been a malformed url that does not match any of the controller directories or files, we will also end up at this method in this file.

            As an example, http://yoursite/GetMembers/New/ has no controller matches so by the time we get to this method, we still have 'GetMembers' and 'New' to deal with. The fact that these will be seen as an argument means that $_args no contains something and is no longer null.

            If this is the case, we redirect the user to the 404 page BUT the url in the browser will still be as entered, which we can use for loggin purposes.
         */
        if($_args){Redirect::to('404');}

        /**
         * Pass the data to the view
         *
         * We only send a page title and subtitle through. All of the content
         * for this page is hard-coded in the view file for now.
         *
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'home/links',
            [
                /*
                    Pass the page title - will be shown at the top of the content and has the meta title in the <head> section, so will show on the browser tab.
                */
                'page_name' => 'Useful Links',
            ]
        );

    } // index()

}




















<?php

/**
 * Front End Members Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Users.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Users
 * @link 	http://yoursite/Users/{User}
 * @link 	http://yoursite/Users/Edit
 * @link 	http://yoursite/Users/Listing
 * @link 	http://yoursite/Users/Profile
 * @link 	http://yoursite/Users/ResetPassword
 * @link 	http://yoursite/Users/Verify

 */
class Users extends Controller
{
    private $_args,
            $_default_model,
            $_email,
            $_groups,
            $_logs,
            $_param,
            $_postdata,
            $_rules,
            $_salt,
            $_user,
            $_validation,
            $_verify,
            $_view_data;

    /*
        As soon as this class is called, there are two things that we set for quick access whenever required.

        The first is to open the most commonly accessed model from within this file and assign that to $this->_default_model.

        The other opens the Logs core class ('/app/core/Logs.php') that controls the saving of user activity, which we assign to $this->_logs.
     */
	public function __construct () {
		$this->_default_model = $this->model('M_Users');
        $this->_logs = new Logs();
	} // __construct ()

    /**
     * Member Edit page
     *
     * Shows the edit form and change password form for the currently logged in
     * user and proccesses them on submission.
     *
     * If a user tries to view this page when they are not logged in, they will
     * only be shown a message.
     *
     * TODO: User form blanks out after pasword post. Errors causing it?
     *
     * @param  mixed    $_args     If not null, forces a 404
     * @return 	/app/views/home/users.php
     * @link 	http://site.com/Members/Edit
     *
     */
    public function edit($_args=null) {
        /*
            If we have parameters there has been a url error so send to
            the 404 page
         */
        if($_args){Redirect::to('404');}

        /*
            As we may have different versions of the page, we set any parameters that we know will not or are unlikely to change. We build upon or amend this as we go along. 'page_name' is the same as we have used before, but we also send 'page_type' as 'register'.
            The view handles multiple pages so we use 'page_type' so it knows which version we are on and, therefore, which output to show.
         */
        $_view_data = [
            'page_name' => 'Edit Profile',
            'page_type' => 'edit',
        ];

        /*
            If the user is not logged in, we simply show a message stating that.

            If they are logged in, we show the forms and check for any update attempts.
         */
        if(!$this->_default_model->isLoggedIn()) {
            // User not logged in
            $_view_data['message'] = $this->_default_model->messages('not_logged_in');
        } else {
            /*
                The user is logged in so we start by retrieving their details
                using the find() function in $this->_default_model.

                We pass the users login $_SESSION variable, defined by
                'session_user_id' in the `settings` table in the database.
             */
            if($this->_default_model->find(Session::get(SiteSettings::get('session_user_id')))) {

                /*
                    At this point, we check to see if a either of the forms have
                    been posted. If they have, we attempt to process them.

                    As only one of these forms can be posted at any one time, we
                    check them individually, starting with the details update form.
                 */
                if (Input::exists(['name'=>'update_user'])) {
                    /*
                        A update attempt has been made so we need to take the
                        $_POST data and attempt to validate it before we insert it.

                        We do not need to run validation against the name of the
                        forms submit button so the first thing we do is unset that.
                     */
                    unset($_POST['update_user']);

                    /*
                        Now, all we have left is the actual data from the form
                        fields, almost ready to validate. As there may be a future
                        requirement to preserve the original $_POST data, we create
                        a variable called $_postdata and set $_POST to it.

                        At the same time, we check it against the existing data
                        for the record and unset any fields that are not different
                        from the existing data.

                        The function we use for this is saved as
                        '/src/functions/strip_post_data.php'.
                     */
                    $_postdata = stripPostData ($_POST, $this->_default_model->data());

                    /*
                        If $_postdata still contains anything, it means that fields
                        have been changed, so we attempt to validate and process it.

                        If $_postdata is empty, we show a message to state that no
                        fields have changed.
                     */
                    if($_postdata) {
                        /*
                            We now run another function to unset unrequired validation
                            rules to avoid them firing on unset fields. This is done
                            via the stripValidateRules() function in
                            '/src/functions/global.php', passing in the $_postdata
                            along with a list of the validation rules, stored in the
                            validation_rules() function in the default class.
                         */
                        $_rules = stripValidateRules (
                            $_postdata,
                            $this->_default_model->validation_rules()
                        );

                        /*
                            At this point, we have two variables that we are working
                            with.

                            $_postdata containing only the form fields we want to
                            validate

                            $_rules containing a list of validation rules only for
                            the fields in $_postdata

                            We now check these against each other in the check()
                            function of '/app/core/Validate.php'. We initially open
                            a new instance of the validation class and set it to
                            $validate to be able to access the function.

                            We then call the function, passing in the $_postdata
                            and $_rules assigning anything that is returned to
                            $validation. There are two functions now available to
                            us

                            $validation->passed() will return a true or false as
                            to whether the validation attempt has been successful

                            $validation->errors() will contain a list of errors
                            if validation failed.

                         */
                        $validate = new Validate();
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );

                        /*
                            If validation has passed, update the users record and
                            set the appropriate message.

                            If validation has failed, we simply show a message showing
                            what went wrong as well as the form with validation classes.
                         */
                        if ($validation->passed()) {
                            // Validation passed so attempt the update
                            if($this->_default_model->update($this->_default_model->data()->id, $_postdata)) {
                                $_view_data['message'] = $this->_default_model->messages('account_update_success');
                            } else {
                                $_view_data['message'] = $this->_default_model->messages('update_failed_unspecified');
                            }
                        } else {
                            // Validation failed so send the message and errors
                            $_view_data['message'] = $this->_default_model->messages('update_validation_failed');
                            $_view_data['errors'] = $validation->errors();
                        }
                    } else {
                        /*
                            The posted fields are no different from the existing record so we simply show a message stating that.
                         */
                        $_view_data['message'] = $this->_default_model->messages('account_update_no_change');
                    }
                } // End profile form post

                /*
                    Next we do exactly the same with the rest password form. We will not comment everything again here, only that which is different from the details form.
                 */
                if (Input::exists(['name'=>'reset_password'])) {
                    unset($_POST['reset_password']);
                    $_postdata = stripPostData ($_POST, $this->_default_model->data());

                    if($_postdata) {
                        $_rules = stripValidateRules (
                            $_postdata,
                            $this->_default_model->validation_rules()
                        );

                        $validate = new Validate();
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );

                        /*
                            If validation has passed, we unset the 'confirm_password'
                            from the $_postdata as it was only for validation purposes
                            and does not get inserted into the database.

                            We then have to create a secure password from the one
                            posted and we do this by created a 32 character hash and
                            then rewriting entered password with that as a salt. We
                            do this using two functions in '/app/core/Hash.php'
                            .
                            We then attempt to update the password and create any
                            messages that we need to show.

                            If validation has failed, we simply show a message
                            showing what went wrong as well as the form with validation
                            classes.
                         */
                        if ($validation->passed()) {
                            unset($_postdata['confirm_password']);
                            $_postdata['salt'] = Hash::salt(32);
                            $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

                            if($this->_default_model->update($this->_default_model->data()->id, $_postdata)) {
                                $_view_data['message'] = $this->_default_model->messages('pw_update_success');
                            } else {
                                $_view_data['message'] = $this->_default_model->messages('pw_update_failed_unspecified');
                            }
                        } else {
                            $_view_data['message'] = $this->_default_model->messages('update_validation_failed');
                            $_view_data['errors'] = $validation->errors();
                        }
                    } else {
                        $_view_data['message'] = $this->_default_model->messages('no_change');
                    }
                }

                /*
                    We send both the forms to the view with the any errors included
                    to show validation on the fields. We also pass the users data
                    into the main edit form.

                    As there may have been updates, we find the user again before
                    calling the forms.
                 */
                $this->_default_model->find(Session::get(SiteSettings::get('session_user_id')));

                $_view_data['edit_form'] = $this->_default_model->userForm([
                    'errors' => (isset($_view_data['errors'])) ? $_view_data['errors'] : '',
                    'version' => 'edit',
                    'area' => 'user',
                    'data' => $this->_default_model->data()
                ]);

                $_view_data['password_form'] = $this->_default_model->resetPasswordForm([
                    'errors' => (isset($_view_data['errors'])) ? $_view_data['errors'] : '',
                ]);
            }
        }

        /**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view('home/users', $_view_data);

    }

    /**
	 * Member Overview and User Profile Page
	 *
	 * We actually power two different pages from this method. If no  arguments
	 * are passed in, we are on the members overview page. If  an argument has
	 * been passed in, it is assumed to be a username so we will attempt to show
	 * a user profile.
	 *
	 * @param  string  $_args  User reference if in profile mode
	 * @return 	/app/views/home/users.php
	 * @link 	http://site.com/Members/
	 * @link 	http://site.com/Members/{Username}
	 *
	 */
  	public function index($_args=null) {

        /*
            If there is anything in $_args, we are assuming that we are looking at a users profile page, otherwise, we are on the members overview page.
         */
        if ($_args) {
            /*
                As we are attempting to show a users profile, we need to first make sure that the user exists. If they do not, we simply pass the page name and page type, along with a message.

                If they do exist, then we replaced the usergroup id that has been stored with the actual group name.
             */
            if (!$this->_default_model->find($_args)) {
                // User does not exist
                $_view_data = [
                    'page_name' => 'User not found',
                    'page_type' => 'profile',
                    'message' => $this->_default_model->messages('not_found'),
                ];
            } else {
                /*
                    The user exists so store their data against a variable called $user_data.
                 */
                $user_data = $this->_default_model->data();

                /*
                    As we want to replace the user group id with the actual name, we set the M_Usergroups model to $_groups and then run the find() function to get the details from the users group id.

                    We then overwrite the group in $user_data with the name of the group.
                 */
                $_groups = $this->model('M_Usergroups');
                $user_group = $_groups->find($this->_default_model->data()->group);
                $user_data->group = $_groups->data()->group_name;

                /*
                    Set the page name as a freindly one including the users username, as well as passing in the data as 'userdata'. This is what will be checked in the view to decide whether or not there is a record to show.
                 */
                $_view_data = [
                    'page_name' => $user_data->username.'\'s Profile',
                    'page_type' => 'profile',
                    'userdata' => $user_data,
                ];
            } // Find User

        } else {
            /*
                No arguments have been passed in so we are on the overview page.

                As well as the page name, we pass in the count of users, the details of the latest user and a listing of all users via various functions in $this->_default_model.
             */
            $_view_data = [
                'page_name' => 'Members',
                'page_type' => 'overview',
                'usercount' => $this->_default_model->count(),
				'latestuser' => $this->_default_model->mostRecent(),
                'list' => $this->_default_model->listing(),
            ];
        }

		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view('home/users',$_view_data);
  	} // index()

    /**
	 * Show a listing of all users
	 *
	 * Shows retreives a list of all users from the 'users' table, using the
	 * listing() function in the M_Users model (set to $this->_default_model
	 * in __construct(), and passes it to the view along with a page type of 'listing'.
	 * The view itself does any manipulation required (in this case turning the username
	 * into a link to that users profile and formatting the joined date) before passing
	 * it into the Php2Html::make_table () function.
	 *
	 * The manipulation could be done in this file before passing to the view, and
	 * that is the way we do it elsewhere, but this one passsed the listing through
	 * raw as an example.
	 *
	 * @param  	null           $_param 	   404 page trigger for bad url
     * @return 	view
     * @link 	http://yoursite/Members/Listing
	**/
	public function listing($_param=null) {
        /*
            If we have parameters set there has been a url error so send to the 404 page
         */
        if($_param) {Redirect::to('404');}

        /*
            Default view data

            If there are any parameters that we will pass to the view that will either not change, or will be the most prominent version of that parameter, we set them at the start as $_view_data.

            As we go through, we may add to these or amened them before we pass $_view_data into the call for the vew at the end.
         */
        $_view_data = [
            'page_name' => 'Members List',
            'page_type' => 'listing',
            'list' => $this->_default_model->listing()
        ];

        /**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
		$this->view('home/users', $_view_data);
	} // listing ()

    /**
	 * Verify a users account
	 *
	 * This is the most complicated controller function to give an example
	 * of using many calls to models and dealing with multiple page types,
	 * checking for posted form data and dealing with a number of different
	 * page names and status messages. It would be advisible to break some of
	 * the repetitive bits into smaller functions but as it is, it is a good
	 * example of one function working with several differently formatted urls.
	 *
	 * This covers two different versions of the verification page - one
	 * that activates the account via a url sent in the registration email
	 * and one to resend the registration email if the user requests it.
	 *
	 * The second parameter ($_param) can work as either the hash stored in
	 * the database against the users email in the 'user_hash' table in
	 * verification mode or a static value of 'Resend' when the resend
	 * form has been sent.
	 *
	 * In verification mode doth email and hash must exist in the url
	 * otherwise nothing will be  processed. Also, if the email and hash
	 * do not match a row in the 'user_hash' table, nothing will be
	 * processed and an error message show with the option to resend.
	 *
	 * If there is an email and hash in the url and they do match a
	 * row in the 'user_hash' table, the user is activated by setting
	 * their status to 1.
	 *
	 * In resend mode, we simply check the email passed in the url and if
	 * there is already a record in the 'user_hash' table we resend with the
	 * original hash. If there is no record in the table we create a new
	 * hash, insert it into the table and send a new email.
	 *
	 * Nothing is passed to the view other than the page name, the page_type
	 * (although that currently does nothing) and the status of the process.
	 * The 'status' is all that determines what is shown on the page as we
	 * are only ever have that to show.
	 *
	 * @param  	email          $email 		Users Email address
	 * @param  	sha256/string  $param  	   Stored hash or Resend Variable
	 * @return 	view
	 * @link 	http://yoursite/Members/Verify/{Email}/{Hash}
	 * @link 	http://yoursite/Members/Verify/{Email}/Resend
	 */
  	public function verify($_email=null, $_param=null) {

        // TODO: Remove email and hash from Breadcrumb

        // If the user is already logged in, redirect them to the home page
        if ($this->_default_model->isLoggedIn()) {Redirect::to('/');}

        /*
            Default view data

            If there are any parameters that we will pass to the view that  will either not change, or will be the most prominent version of that parameter, we set them at the start as $_view_data.

            As we go through, we may add to these or amened them before we pass $_view_data into the call for the vew at the end.
         */
        $_view_data = [
            'page_name' => 'Verify Account',
            'page_type' => 'verify',
        ];


		// Check that the email and $param variables exist
		if(isset($_email) && isset($_param)) {
            /*
                The first thing we do is check the 'users' table to see if
                the email matches an existing user as if not, there are no further checks that we need to do.
             */
             if ($this->_default_model->find($_email)) {
                /*
                    There is an account with that email address so we check to see if it has already been verified.
                 */
                if ($this->_default_model->data()->status !== '0') {
                    /*
                        The account with that email address has already been verified, we set a message but also use the opportunity to delete any current records in the 'user_hash' table for that email just for housekeeping purposes.
                     */
                    $_view_data['message'] =$this->_default_model->messages('already_verified');
                    $this->_default_model->deleteUserHash($_email);
                } else {
                    /*
                        So now we know that we have the correct email address of an unverified member but the has was incorrect. At that point, the user will have been given a link to resend the email. If they have clicked it, the url will now have 'Resend' as the second parameter. If that is they case, we simply delete any current records in the 'user_hash' table for that email and send another.

                        Otherwise, we will attempt to verify the user.
                     */
                    if($_param == 'Resend') {
                        $this->_default_model->deleteUserHash($_email);

                        // Create a new salt to use
                        $_salt = Hash::unique();

                        /*
                            Insert the users email and the created salt into the 'user_hash' table via the createUserHash() function in the model.
                         */
                        $this->_default_model->createUserHash(['email'=>$_email, 'hash'=>$_salt]);

                        /*
                            Send the validation email via the registration () function in app/core/Sendmail.php, passing in the email and the created salt.
                         */
                        SendMail::registration($_email,$_salt);

                        $_view_data['message'] =$this->_default_model->messages('resend_email');

                    } else {
                        /*
                            The account has not been verified, so next up, we check to se if there is an existing record in the 'user_hash' table.
                         */
                        if ($this->_default_model->checkUserHash($_email, $_param)) {
                            /*
                                The record exists in 'user_hash' so set their status to 1 and delete the record from the 'user_hash' table, using the deleteUserHash() function from the model.
                             */
                            $this->_default_model->update($this->_default_model->data()->id, array('status' => '1'));

                            $this->_default_model->deleteUserHash($_email);
                            $_view_data['message'] =$this->_default_model->messages('account_verified');

             		 	} else {
                            /*
                                The url does not match any in the 'user_hash' table but as we know that the email is correct, we simply offer a link to resend it.
                              */
                            $_view_data['message'] =$this->_default_model->messages('incorrect_hash');
                            $_view_data['alert_link'] = Php2Html::a([
                                'content' => 'Resend now',
                                'href' => '/Members/Verify/'.$_email.'/Resend'
                            ]);
             	  	    } // check hash exists
                    } // Resend mode
                } // Not verified

            } else {
                /*
                    There are no accounts with that email address we need to check if the reset form has been posted. If it has, we attempt to process it, otherwise we just  set a fail status and show the form to resend the email.
                 */

                if (Input::exists('send_reset_email')) {
                    $_email = Input::get('username');
                    /*
                        The form has been posted so first thing we do is check the 'users' table to see if the email matches an existing user as if not, there are no further checks that we need to do.
                     */
                    if ($this->_default_model->find($_email)) {
                        /*
                            There is an account with that email address so we check to see if it has already been verified.
                         */
                        if ($this->_default_model->data()->status !== '0') {
                            /*
                                The account with that email address has already been verified, we set a status but also use the opportunity to delete any current records in the 'user_hash' table for that email just for housekeeping purposes.
                             */
                            $_view_data['message'] =$this->_default_model->messages('already_verified');
                            $this->_default_model->deleteUserHash($_email);
                        } else {
                            /*
                                The account with that email address has not been verified so we resend the email and enter the record in 'user_hash'.
                                We also delete any current records in the 'user_hash' table for that email and send another.
                             */
                            $this->_default_model->deleteUserHash($_email);

                            // Create a new salt to use
                            $_salt = Hash::unique();

                            /*
                                Insert the users email and the created salt into the 'user_hash' table via the createUserHash() function in the model.
                             */
                            $this->_default_model->createUserHash(['email'=>$_email, 'hash'=>$_salt]);

                            /*
                                Send the validation email via the registration () function in app/core/Sendmail.php, passing in the email and the created salt. Also set the status to show the email has been sent.
                             */
                            SendMail::registration($_email,$_salt);
                            $_view_data['message'] =$this->_default_model->messages('resend_email');
                        } // Not verified
                    } else {
                        /*
                            The user was not found so show the reset form as well as a sutiable status message.
                         */
                        $_view_data['form'] = $this->_default_model->resetPasswordLinkForm();
                        $_view_data['message'] =$this->_default_model->messages('verify_not_found');

                    } // User found
                } else {
                    $_view_data['form'] = $this->_default_model->resetPasswordLinkForm();
                    $_view_data['message'] =$this->_default_model->messages('incorrect_verify_link');

                } // Send reset email
            } // User exists
        } else {
            /*
                The url does not have enough parameters so we simply set the message to show that the link was incorrect.
             */
            $_view_data['message'] =$this->_default_model->messages('incorrect_verify_link');
	  	} // isset email and hash

        /**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
		$this->view('home/users', $_view_data );
  	} // verify ()







###################################################################
###################################################################





    public function resetpassword ($email=null, $hash=null) {
        $this->_default_model = $this->model('M_Users');

        if ($this->_default_model->isLoggedIn()) {
            Redirect::to('/');
        }


        $params = [
            'page_name' => 'Reset Password',
            'page_type' => 'reset_password',
        ];



        if($email) {
            if($this->_default_model->find($email)) {
                if ($this->_default_model->checkUserHash($email, $hash)) {

                    if(Input::exists(['name'=>'reset_password'])) {
                        unset($_POST['reset_password']);

                        $_postdata = stripPostData ($_POST, $this->_default_model->data());

                        if($_postdata) {
                            $_rules = $this->_default_model->validation_rules();
                            $_rules = stripValidateRules ($_postdata, $_rules);

                            $validate = new Validate();

                            // Check the posted data against the validation rules
                            $validation = $validate->check(
                                $_postdata,
                                $_rules
                            );


                            if ($validation->passed()) {
                                unset($_postdata['confirm_password']);
                                $_postdata['salt'] = Hash::salt(32);
                                $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

                                if($this->_default_model->update($this->_default_model->data()->id, $_postdata)) {
                                    $params['status'] = 'pw_update_success';
                                    $params['form'] = null;
                                } else {
                                    $params['status'] = 'pw_update_failed_unspecified';
                                }
                            } else {
                                $params['status'] = 'validation_failed';
                                $params['errors'] = $validation->errors();
                                $params['form'] = $this->_default_model->resetPasswordForm(['errors'=>$validation->errors()]);
                            }
                        } else {
                            $params['status'] = 'no_change';
                        }



                    } else {
                        $params['form'] =$this->_default_model->resetPasswordForm(['errors'=>null]);
                    }
                } else {
                    $params['status'] = 'hash_fail';
                    $params['form'] = $this->_default_model->resetPasswordLinkForm();
                }
            } else {
                $params['status'] = 'not_found';
                $params['form'] = $this->_default_model->resetPasswordLinkForm();
            }

        } else {

            if(Input::exists('send_reset_email')) {
                $params['form'] = $this->_default_model->resetPasswordLinkForm();
                if(!Input::get('username')) {
                    $params['errors'] = ['username'=> 'You must enter something to search for.'];
                    $params['status'] = 'send_link_fail';
                } else {

                    if($this->_default_model->find(Input::get('username'))) {
                        $_postdata['salt'] = Hash::unique();
                        $this->_default_model->createUserHash(['email'=>$this->_default_model->data()->email, 'hash'=>$_postdata['salt']]);
                        $this->_default_model->sendPasswordLinkMail ($this->_default_model->data()->email,$_postdata['salt']);
                        $params['status'] = 'pw_email_sent';
                        $params['form'] = null;
                    } else {
                        $params['status'] = 'not_found';
                    }
                }

            } else {
                $params['form'] = $this->_default_model->resetPasswordLinkForm();
            }


        }

        $this->view(
            'home/users',
            $params
        );
    }

}




















<?php

/**
 * Admin Users Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Admin/Users.
 *
 * An explanation of how we pass the information to the view can be
 * found in app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Users
 * @example 	http://yoursite/Admin/Users/{User}
 * @example 	http://yoursite/Admin/Users/Add
 * @example 	http://yoursite/Admin/Users/Listing
 * @example 	http://yoursite/Admin/Users/Edit/{User}
 * @example 	http://yoursite/Admin/Users/Delete/{User}
 * @example 	http://yoursite/Admin/Users/ResetPassword/{Email}/{Hash}
 * @example 	http://yoursite/Admin/Users/Verify/{Email}/{Hash}
 *
 *
 */
class Users extends Controller
{
    private $_args,
            $_default_model,
            $_logs,
            $_postdata,
            $_rules,
            $_user;

    /*
        As soon as this class is called, there are two things that we set for quick access whenever required.

        The first is to open the most commonly accessed model from within this file and assign that to $this->_default_model.

        The other opens the Logs core class ('/app/core/Logs.php') that controls the saving of user activity, which we assign to $this->_logs.
     */
	public function __construct () {
		$this->_default_model = $this->model('M_Users');
        $this->_logs = new Logs();
	} // __construct ()

    /**
     * Add User page
     *
     * Contains the add user form and checks for any registration attempts.
     *
     * This is far more complex than either of the other methods in this file as
     * not only does it show the required data to the user but also handles any
     * registration attempts, showing a message and adding validation classes to
     * the form as well as redirecting a user away from the page if they are
     * already logged in.
     *
     * Because this method powers several different versions of the page - initial,
     * succesful post, unsuccesful post - each with their own page titles, we
     * build up the second part of the view() function as we go along, as $_view_data
     * and then pass that into the function at the end.
     *
     * Also, as we are passing it to a view that also powers other pages, we set
     * a 'page_type' so the view knows which version we are on.
     *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	         /app/views/admin/users.php
     * @link 	         http://yoursite/Admin/Users/Add
     */
    public function add($_args=null) {
        // If we have parameters send to the 404 page
        if($_args){Redirect::to('404');}

        /*
            Set any data that will either not change, or will be the most
            prominent version of that parameter, to $_params.
         */
        $_view_data = [
            'page_name' => 'Create new account',
            'page_type' => 'register',
            'errors' => null,
        ];


        /*
            At this point, there will have been no redirects so we do actually show the registration page. As we also handle registration attempts within the method, we first check to see if a registration attempt has been made.

            If there has been, we attempt to process it, otherwise we just show the registration form.
         */
        if (Input::exists(['name'=>'register'])) {
            // Form posted so unset the submit button from $_POST
            unset($_POST['register']);

            /*
                Now, all we have left is the actual data from the form fields, almost ready to validate. As there may be a future requirement to preserve the original $_POST data, we create a variable called $_postdata and set $_POST to it.
             */
            $_postdata = $_POST;

            /*
                We now run another function to unset unrequired validation rules to avoid them firing on unset fields. This is done via the stripValidateRules() function in '/src/functions/global.php', passing in the $_postdata along with a list of the validation rules, stored in the validation_rules() function in the default class.
             */
            $_rules = stripValidateRules (
                $_postdata,
                $this->_default_model->validation_rules()
            );

            /*
                At this point, we have two variables that we are working with.

                $_postdata containing only the form fields we want to validate
                $_rules containing a list of validation rules only for the fields in $_postdata

                We now check these against each other in the check() function of '/app/core/Validate.php'. We initially open a new instance of the validation class and set it to $validate to be able to access the function.

                We then call the function, passing in the $_postdata and $_rules assigning anything that is returned to $validation. There are two functions now available to us
                $validation->passed() will return a true or false as to whether the validation attempt has been successful
                $validation->errors() will contain a list of errors if validation failed.

             */
            $validate = new Validate();
            $validation = $validate->check(
                $_postdata,
                $_rules
            );

            /*
                If validation has passed, we unset the 'confirm_password' from
                the $_postdata as it was only for validation purposes and does
                not get inserted into the database.
                We then have to add the users status as '1' as with backend user
                creation, we assume that we want them automatically verified.

                We then attempt to register the user and create any messages that
                 we need to show.

                If validation has failed, we simply show a message showing what
                went wrong as well as the form with validation classes.
             */
            if ($validation->passed()) {
                // Validation passed so unset unrequired fields
                unset($_postdata['confirm_password']);

                // Automatically verify the user
                $_postdata['status'] = 1;

                /*
                   We now have everything that we need to insert the new user into the database. Again, this is done via a function in the default model - create(). This function returns a true or false depending on whether or not the insert is successful.

                   If it is successful, we set a message based on the verification method, as well as changing the page title and passing the id of the new user.

                   If it is not succesful, at this point it can only be an unspecified error so all we can do is show a message.
                 */
                if($this->_default_model->create($_postdata)) {
                    $_view_data['message'] = $this->_default_model->messages('admin_create_success');
                    $_view_data['page_name'] = 'Registration Succesful';
                    $_view_data['insert_id'] = $this->_default_model->_insertId;

                } else {
                    // The create was unsuccessful
                    $_view_data['message'] = $this->_default_model->messages('create_failed_unspecified');
                }
            } else {
                // The validation failed so set the status and errors
                $_view_data['message'] = $this->_default_model->messages('validation_failed');
                $_view_data['errors'] = $validation->errors();
            }

        } // Form Posted

        /*
            All we need to do now is pass in the form with any errors from a previous post.
         */
        $_view_data['form'] = $this->_default_model->userForm([
            'errors' => $_view_data['errors'],
            'version' => 'create',
            'area' => 'admin',
        ]);

        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view('admin/users',$_view_data);

    } // add()

    /**
     * Edit a user
     *
     * Shows both the update and change password form for the specified
     * user, including any validation formatting, as well as attempting
     * to process any submissions of these.
     *
     * The user is passed in as the last part of the url and this can
     * either be their username, id or email address.
     *
     * @param  int/string/email    $_user   User reference
     * @return 	    /app/views/admin/users.php
     * @example 	http://yoursite/Admin/Users/Edit/{User}
     *
     **/
    public function edit($_user=null) {
        /*
            When we pass the information to the view at the end of the function,
            it requires two parameters, the path to the view and all of the data
            that we need to display.

            We pass this second part as an array called $_view_data so we create it
            and set any data that will either not change, or will be the most
            prmonient version of that parameter.
         */
        $_view_data = [
            'page_name' => 'Edit User',
            'page_type' => 'edit',
        ];

        /*
            Check if the user has been passed in

            If a user has been passed in, we have two options. If the user actually
            exists, we need to show the edit form, otherwise we need to show a
            message that the user does not exist.

            If a user has not been passed in, we redirect to the 404 page.
         */
        if(!$_user) {
            Redirect::to('404');
        } else {
            /*
                Next we check if the passed in user actually exists.

                If it does, we show the form, otherwise we simply show a message
                stating that.
            */
            if($this->_default_model->find($_user)) {
                /*
                    The user exists so we check to see if a either of the forms
                    have been posted. If they have, we attempt to process them.

                    As only one of these forms can be posted at any one time, we
                    check them individually, starting with the details update form.
                 */
                if (Input::exists(['name'=>'update_user'])) {
                    /*
                        A update attempt has been made so we need to take the
                        $_POST data and attempt to validate it before we insert it.

                        We do not need to run validation against the name of the
                        forms submit button so the first thing we do is unset that.
                     */
                    unset($_POST['update_user']);

                    /*
                        Now, all we have left is the actual data from the form
                        fields, almost ready to validate. As there may be a future
                        requirement to preserve the original $_POST data, we create
                        a variable called $_postdata and set $_POST to it.

                        At the same time, we check it against the existing data
                        for the record and unset any fields that are not different
                        from the existing data.

                        The function we use for this is saved as
                        '/src/functions/strip_post_data.php'.
                     */
                    $_postdata = stripPostData ($_POST, $this->_default_model->data());

                    /*
                        If $_postdata still contains anything, it means that fields
                        have been changed, so we attempt to validate and process it.

                        If $_postdata is empty, we show a message to state that no
                        fields have changed.
                     */
                    if($_postdata) {
                        /*
                            We now run another function to unset unrequired validation
                            rules to avoid them firing on unset fields. This is done
                            via the stripValidateRules() function in
                            '/src/functions/global.php', passing in the $_postdata
                            along with a list of the validation rules, stored in the
                            validation_rules() function in the default class.
                         */
                        $_rules = stripValidateRules (
                            $_postdata,
                            $this->_default_model->validation_rules()
                        );

                        /*
                            At this point, we have two variables that we are working
                            with.

                            $_postdata containing only the form fields we want to
                            validate

                            $_rules containing a list of validation rules only for
                            the fields in $_postdata

                            We now check these against each other in the check()
                            function of '/app/core/Validate.php'. We initially open
                            a new instance of the validation class and set it to
                            $validate to be able to access the function.

                            We then call the function, passing in the $_postdata
                            and $_rules assigning anything that is returned to
                            $validation. There are two functions now available to
                            us

                            $validation->passed() will return a true or false as
                            to whether the validation attempt has been successful

                            $validation->errors() will contain a list of errors
                            if validation failed.

                         */
                        $validate = new Validate();
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );

                        /*
                            If validation has passed, update the users record and
                            set the appropriate message.

                            If validation has failed, we simply show a message showing
                            what went wrong as well as the form with validation classes.
                         */
                        if ($validation->passed()) {
                            // Validation passed so attempt the update
                            if($this->_default_model->update(
                                $this->_default_model->data()->id, $_postdata)
                            ) {
                                // The update was successful, so see if 'username' has changed
                                if(isset($_postdata['username']) && $this->_default_model->data()->username !== $_postdata['username']) {
                                    /*
                                        'username' has changed so set the status
                                        message to a $_SESSION and redirect to
                                        the new name.
                                     */
                                    Session::put('status', $this->_default_model->messages('admin_account_update_success'));
                                    Redirect::to('/Admin/Users/Edit/'.$_postdata['username']);
                                } else {
                                    /*
                                        'username' has not changed so set the status message to $_params.
                                     */
                                    $_view_data['message'] = $this->_default_model->messages('admin_account_update_success');
                                }
                                // Re-find the user to pass updated details to the view
                                $this->_default_model->find($this->_default_model->data()->id);

                            } else {
                                /*
                                    The update failed for an unspecified reson so
                                    simply set the status
                                 */
                                $_view_data['message'] = $this->_default_model->messages('update_failed_unspecified');
                            }
                        } else {
                            // Validation failed so send the message and errors
                            $_view_data['message'] = $this->_default_model->messages('validation_failed');
                            $_view_data['errors'] = $validation->errors();
                        }
                    } else {
                        // No data had changed so just set the status
                        $_view_data['message'] = $this->_default_model->messages('account_update_no_change');
                    }
                } // End profile form post


                /*
                    Next we do exactly the same with the rest password form. We will not comment everything again here, only that which is different from the details form.
                 */
                if (Input::exists(['name'=>'reset_password'])) {
                    unset($_POST['reset_password']);
                    $_postdata = stripPostData ($_POST, $this->_default_model->data());

                    if($_postdata) {
                        $_rules = $this->_default_model->validation_rules();
                        $_rules = stripValidateRules ($_postdata, $_rules);

                        $validate = new Validate();
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );

                        /*
                            If validation has passed, we unset the 'confirm_password'
                            from the $_postdata as it was only for validation purposes
                            and does not get inserted into the database.

                            We then have to create a secure password from the one
                            posted and we do this by created a 32 character hash and
                            then rewriting entered password with that as a salt. We
                            do this using two functions in '/app/core/Hash.php'
                            .
                            We then attempt to update the password and create any
                            messages that we need to show.

                            If validation has failed, we simply show a message
                            showing what went wrong as well as the form with validation
                            classes.
                         */
                        if ($validation->passed()) {
                            unset($_postdata['confirm_password']);
                            $_postdata['salt'] = Hash::salt(32);
                            $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

                            if($this->_default_model->update($this->_default_model->data()->id, $_postdata)) {
                                $_view_data['status'] = $this->_default_model->messages('admin_pw_update_success');

                            } else {
                                $_view_data['status'] = $this->_default_model->messages('pw_update_failed_unspecified');
                            }
                        } else {
                            $_view_data['status'] = $this->_default_model->messages('validation_failed');
                            $_view_data['errors'] = $validation->errors();
                        }
                    } else {
                        $_view_data['status'] = $this->_default_model->messages('no_change');
                    }
                }

                /*
                    We send both the forms to the view with the any errors included
                    to show validation on the fields. We also pass the users data
                    into the main edit form.

                    As there may have been updates, we find the user again before
                    calling the forms.
                 */
                $this->_default_model->find(Session::get(SiteSettings::get('session_user_id')));

                $_view_data['edit_form'] = $this->_default_model->userForm([
                    'errors' => (isset($_view_data['errors'])) ? $_view_data['errors'] : '',
                    'version' => 'edit',
                    'area' => 'admin',
                    'data' => $this->_default_model->data()
                ]);

                $_view_data['password_form'] = $this->_default_model->resetPasswordForm([
                    'errors' => (isset($_params['errors'])) ? $_view_data['errors'] : '',
                ]);
            } else {
                // The user was not found so set the message
                $_view_data['message'] = $this->_default_model->messages('admin_not_found');
            }
        }

        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view('admin/users',$_view_data);
    } // edit ()

    /**
     * Users Overview and User Profile Page
     *
     * We actually power two different pages from this method. If no arguments
     * are passed in, we are on the members overview page. If  an argument has
     * been passed in, it is assumed to be a username so we will attempt to show
     * a user profile.
     *
     * @param  string  $_args  User reference if in profile mode
     * @return 	/app/views/home/admin/users.php
     * @link 	http://site.com/Admin/Users/
     * @link 	http://site.com/Admin/Users/{Username}
     *
     */
    public function index($_args=null) {
        /*
            If there is anything in $_args, we are assuming that we are looking at a users profile page, otherwise, we are on the members overview page.
         */
        if ($_args) {
            /*
                As we are attempting to show a users profile, we need to first make sure that the user exists. If they do not, we simply pass the page name and page type, along with a message.

                If they do exist, then we replaced the usergroup id that has been stored with the actual group name.
             */
            if (!$this->_default_model->find($_args)) {
                // User does not exist
                $_view_data = [
                    'page_name' => 'User not found',
                    'page_type' => 'profile',
                    'message' => $this->_default_model->messages('admin_not_found'),

                ];
            } else {
                /*
                    The user exists so store their data against a variable called $user_data.
                 */
                $user_data = $this->_default_model->data();

                /*
                    As we want to replace the user group id with the actual name, we set the M_Usergroups model to $_groups and then run the find() function to get the details from the users group id.

                    We then overwrite the group in $user_data with the name of the group.
                 */
                $_groups = $this->model('M_Usergroups');
                $user_group = $_groups->find($this->_default_model->data()->group);
                $user_data->group = $_groups->data()->group_name;

                /*
                    Set the page name as a freindly one including the users username, as well as passing in the data as 'userdata'. This is what will be checked in the view to decide whether or not there is a record to show.
                 */
                $_view_data = [
                    'page_name' => $user_data->username.'\'s Profile',
                    'page_type' => 'profile',
                    'user' => $user_data,
                ];
            }  // Find User

        } else {
            /*
                No arguments have been passed in so we are on the overview page.

                As well as the page name, we pass in the count of users and a listing of all users via various functions in $this->_default_model.
             */
            $_view_data = [
                'page_name' => 'Members Overview',
                'page_type' => 'overview',
                'usercount' => $user->count(),
                'latestuser' => $user->mostRecent(),
            ];
        }

        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view('admin/users',$_view_data);
    } // index()

    /**
     * Show a listing of all Users
     *
     * Collects a list of users from the listing() function within
     * the default model and passes it to the view at
     * /app/views/users.php.
     *
     * $_args is not used for anything other than to cause a 404
     * error if there is anything after /Listing in the url.
     *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	/app/views/home/admin/users.php
     * @example 	http://yoursite/Admin/Users/Listing
     *
     **/
    public function listing($_args=null) {
        /*
            If we have any arguments there has been a url error so send to the 404 page.
         */
        if($_args) {Redirect::to('404');}

        // Pass the details to the page via showview()
        $this->view(
            // Select the View to use
            'admin/users',
            // Pass the data to the view. These will be available as $data.
            [
                'page_name' => 'Users List',
                'page_type' => 'listing',
                'list' => $this->_default_model->listing()
            ]

        ) ;
    } // listing ()
































    /**
     * Delete a user from the database
     * @param  int      $data   User id
     * @return boolean          Delete status
     */
    public function delete($user=null) {
        // Set the model
        $this->_default_model = $this->model('M_Users');

        // Set the basic parameters for the page
        $_params = [
            'page_name' => 'Delete User',
            'page_type' => 'delete',
        ];

        /**
         * 	Check if the user has been passed in
         *
         *	If a user has been passed in, we have two options. If the user
         *	actually exists, process the delete form if submitted, otherwise simply
         *	show the form.
         *
         *	If a user has not been passed in, we simply redirect to the 404 page.
         *
         * 	@var int/string/email 	$user 	Username, User ID or User Email
         */
        if(!$user) {
            if($_params) {Redirect::to('404');}
        } else {
            /*
                A user has been passed in so we need to check if it exists.

                If it does, we process any delete requests that exist, otherwise
                we show the delete form.
            */
            if($this->_default_model->find($user)) {
                // Check if the delete form has been posted
                if (Input::exists(['name'=>'delete_user'])) {

                    // The delete form has been posted so unset the form button
                    unset($_POST['delete_user']);

                    // Attempt to delete the user
                    if($this->_default_model->delete($this->_default_model->data()->id)) {
                        $_params['status'] = 'admin_account_delete_success';
                    }
                } else {
                    // The delete form has not been posted so show it
                    $_params['delete_form'] = $this->_default_model->deleteForm([
                        'version' => 'delete',
                        'area' => 'admin',
                    ]);
                }
            } else {
                // No user found so show a message
                $_params['status'] = 'admin_not_found';
            }

        } // if $user


        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'admin/users',
            $_params
        );
    } // delete()









    /**
     * Reset a users password page
     *
     * This page should only be accessed via a link in an email sent.
     *
     * @param  email    $email  Email address
     * @param  sha256   $hash   Matching hash from the database row
     * @link 	http://site.com/Members/ResetPassword/{email}/{Hash}
     */
    public function resetpassword ($email=null, $hash=null)
    {
        $errors = null;
        /**
         * Set the model
         *
         * All functions used here are held in the user model.
         *
         * @return Class
         */
        $this->_default_model = $this->model('M_Users');

        if ($this->_default_model->isLoggedIn()) {
            Redirect::to('/');
        }

        /*
            We need both parameters for this to work so first of we check for the
            email.

            If there is nothing there we know then we know that we are still at the
            inital stage of the process and the reset email has not yet been requested..
         */
        if($email)
        {
            /*
                Next up we use the checkUserHash() function to see it there is a row in
                the table with a matching username and hash.

                If there is, we will send the email, show the form when the link is clicked
                and also try to process it when posted.
             */
            if ($this->_default_model->checkUserHash($email, $hash))
            {


                if (Input::get('reset_password_submit'))
                {
                    $errors =$this->_default_model->changePassword($this->_default_model->getData($email)->id);

                    if(!$errors)
                    {
                        $this->_default_model->deleteUserHash($email, $hash);
                        $status = 'updated';
                    } else {
                        $status = 'errors';
                    }

                } else
                {
                    $status = 'reset_form';
                }

            }  else
            {

                $status = 'hash_fail';


            }
        }
        else
        {
            /*
                As there is no parameters, we are at the initial stage so we need to see if an email
                has been posted to request a rest password email.
             */
            if (Input::get('reset_password_user'))
            {
                if(!Token::check(Input::get('token')))
                {
                    $status = 'token_fail';
                } else
                {


                    /*
                        The form has been posted so get the users details via the username input.

                        Although the input is called 'username' it can be a username, password or id.
                     */
                    $_user = $this->_default_model->find (Input::get('username'));

                    /*
                        If the user has been found, create a new hash and pass it into the createUserHash()
                        function in User_Functions to insert it into the table.

                        Once this is done, we send the email using SendMail::sendPasswordUpdateMail()
                     */
                    if($_user)
                    {
                        // The user exists so collect the data and create the hash
                        $_user = $this->_default_model->data();
                        $display = 'Send the email';
                        $hash = Hash::unique();

                        // Insert into the user_hash table
                        try {
                            $this->_default_model->createUserHash(array(
                                'email' => $this->_default_model->data ()->email,
                                'hash' => $hash,
                                'stamp' => date('Y-m-d H:i:s')
                            ));
                            // Send the registration email

                        } catch(Exception $e) {
                            die();
                        }

                        // Send the email
                        SendMail::sendPasswordUpdateMail($this->_default_model->data ()->email, $hash);

                        $status = 'email_sent';

                    } else
                    {
                        // The user was not found so flash an alert stating this and show the form again
                        $status = 'no_user';
                    }
                }

            } else
            {
                // The form has not been posted so just show it!
                $status = 'initial';
            }
        }

        /**
         * Pass the data to the view
         *
         * We only send the page name and what type of display we need to show.
         *
         * Everything else is handled by the view and flash alerts.
         *
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'users/index',
            [
                'page_name' => 'Reset Password',
                'type' => 'reset_password',
                'class' => 'Users',
                'status' => $status,
                'errors' => $errors
            ]

        );
    } // resetpassword ()

	/**
	 * Verify a users account
	 *
	 * This is generally accessed via a url sent in the registration email.
	 *
	 * Both email and hash must exist in the url otherwise nothing
	 * will be processed.
	 * Also, if the email and hash do not match a row in the 'user_hash'
	 * table, nothing will be processed.
	 *
	 * If there is an email and hash in the url and they do match a
	 * row in the 'user_hash' table, the user is activated by setting
	 * their status to 1.
	 *
	 * Nothing is passed to the view other than the page name. everything
	 * else is handled with Session::flash messages.
	 *
	 * @param  	email 		$email 		Users Email address
	 * @param  	sha256 		$hash  		Stored hash
	 * @return 	view
	 * @link 	http://site.com/Members/Verify/{$email}/{$hash}
	 */
  	public function verify($email=null, $hash=null)
  	{
        $errors = null;

        $this->_default_model = $this->model('M_Users');

        if ($this->_default_model->isLoggedIn()) {
            Redirect::to('/');
        }

		// Check that the email and hash variables exist
		if(isset($email) && isset($hash))
		{
			// They both exist so continue with the verification attempt



			// Check the email and hash match a row. checkUserHash() returns true or false
		  	if ($this->_default_model->checkUserHash($email, $hash))
			{
				// checkUserHash() was succesful so activate the account
			  	$this->_default_model->quickUpdate($this->_default_model->getData($email)->id, array('status' => '1'));

                $hash_model = $this->model('Userhash_Model');
                $hash_model->delete($hash);

                $status = 'verified';

		 	} else
			{
                $status = 'no_record';
	  	    }
        }
        else
        {
            $status = 'incorrect_link';
	  	}

		/**
		 * Pass the data to the view
		 * we only need the page name as everything else is
		 * in a flashAlert()
		 *
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
		$this->view(
            'users/index',
			[
				'page_name' => 'Verify Account',
				'type' => 'verify',
                'class' => 'Users',
				'status' => $status,
				'errors' => $errors
			]
		);
  	} // verify ()

}




















<?php

/**
 * Admin Usergroups Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Admin/Usergroups.
 *
 * Only contains one function, index(), which powers two different pages.
 *
 * If a parameter has been passed in the URL, we assume to be on the edit
 * page for a group, with that parameter presumed to be a slugified version
 * of the group name. This page will contain both edit and delete forms.
 *
 * If no parameter has been passed, we default to the Usergroup overview page
 * containing the form to add a new group and a list of existing groups.
 *
 * An explanation of how controllers work and how we pass the information to
 * the view can be found in app/controllers/Admin/home.
 *
 * @package     Core
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Admin/Usergroups
 * @link 	http://yoursite/Admin/Usergroups/{Groupname}
 */
class Usergroups extends Controller
{
    // Set the access rights for the variables, including any defaults
    private $_default_model,
            $_group,
            $_params,
            $_postdata,
            $_rules;

    /*
        As soon as this class is called, there are two things that we set for quick access whenever required.

        The first is to open the most commonly accessed model from within this file and assign that to $this->_default_model.

        The other opens the Logs core class ('/app/core/Logs.php') that controls the saving of user activity, which we assign to $this->_logs.
     */
	public function __construct () {
		$this->_default_model = $this->model('M_Usergroups');
        $this->_logs = new Logs();
	} // __construct ()


    /**
	 * Admin Usergroups View
	 *
	 * This is the only view on the page so if a parameter has been passed
	 * in the URL, we assume to be on the edit page, otherwise we are on
	 * the overview page.
	 *
	 * @param  id/string   $_group  Group ID or sluified name
	 * @return 	   /app/views/home/admin/groups.php
     * @example 	http://yoursite/Admin/Usergroups
     * @example 	http://yoursite/Admin/Usergroups/{Group}
	 *
	 */
  	public function index($_group=null) {
        /*
            Set any data that will either not change, or will be the most
            prominent version of that parameter, to $_params.
         */
        $_view_data = [
            'page_name' => 'Usergroups',
            'page_type' => 'overview',
            'form' => $this->_default_model->form(['version' => 'create']),
        ];

        /**
         * 	Check if the group has been passed in
         *
         *	If a group has been passed in, we have two options. If the
         *	group actually exists, we need to show the edit form,
         *	otherwise we need to show a message that the group does
         *	not exist.
         *
         *	If a group has not been passed in, we assume that we are
         *	on the user group overview page so show the add for and
         *	a listing of existing groups.
         *
         * 	@var int/string 	$user 	Group name or Id
         */
        if($_group) {
            /*
                There is a group parameter so we set relevant default
                paramaters to send to the view.
             */
			$_view_data = [
				'page_name' => 'Edit Usergroup',
				'page_type' => 'edit',
                'form' => null,
                'data'=> null,
				'delete_form' => $this->_default_model->deleteForm(),
			];

            /*
                Next we check if the passed in group actually exists.

                If it does, we show the form, otherwise we set a 'status'
                parameter to give a group not found message in the view.
            */
            if($this->_default_model->find($_group)) {
                /*
                    The group exists so add both the edit and delete forms
                    to the $_params, passing the data from the specified group
                    to the edit one.
                 */
                $_view_data['form'] =  $this->_default_model->form([
                    'version'=>'edit',
                    'data'=> objectToArray($this->_default_model->data())
                ]);

                $_view_data['delete_form'] =  $this->_default_model->deleteForm();

                /*
                    We now need to check if either the update or delete forms
                    have been posted.

                    If they have, we run any required validation and attempt
                    to process them.
                 */
                if (Input::exists(['name'=>'update_usergroup'])) {
                    // Update form posted so unset the submit button from $_POST
                    unset($_POST['update_usergroup']);

                    /*
                        Check any posted data against the existing data to
                        strip it down to only fields that have changed.
                     */
                    $_postdata = stripPostData (
                        $_POST,
                        $this->_default_model->data()
                    );

                    /*
                        $_postdata now contains any remaining $_POST data so,
                        if it is not empty, we start to process it.
                     */
                    if($_postdata) {
                        /*
                            There is some remaining $_POST data so we now need
                            to attempt to validate it.

                            As we will probably have unset some of the $_POST
                            data, we run another function, this time unsetting
                            any unrequired validation rules to avoid them firing
                            on unset fields.
                         */
						$_rules = stripValidateRules (
                            $_postdata,
                            $this->_default_model->validation_rules()
                        );

                        // Open a new instance of the validation class
						$validate = new Validate();

						/*
                            Check the posted data against the validation
                            rules using the check () function from the
                            Validate () class.
                            If successful, the $validation->passed()
                            function will return true.
                         */
						$validation = $validate->check(
							$_postdata,
							$_rules
						);

                        /*
                            If validation has passed, we attempt to update the table using the update () function in the
                            model.

                            As we use the group name as the reference in
                            the url, if that is updated, the current link will be incorrect. In this case, we redirect to the edit page of the new name.

                            If it has not passed, we set a 'status' of
                            'update_fail' to $_params, and also 'errors' containing
                            the validation errors.
                         */
                        if ($validation->passed()) {
                            // Validation passed so attempt the update
                            if($this->_default_model->update(
                                $this->_default_model->data()->id, $_postdata)
                            ) {
                                // The update was successful, so see if 'group_name' has changed
                                if(isset($_postdata['group_name']) && $this->_default_model->data()->group_name !== $_postdata['group_name']) {
                                    /*
                                        'group_name' has changed so set the status
                                        message to a $_SESSION and redirect to
                                        the new name.
                                     */
                                    Session::put('status', 'update_success');
									Redirect::to('/Admin/Usergroups/'.slugify($_postdata['group_name']));
								} else {
                                    /*
                                        'username' has not changed so simply set the
                                        status message to $_params.
                                     */
									$_view_data['message'] = $this->_default_model->messages('update_success');
								} // Redirect

                                // Re-find the group to pass updated details to the view
                                $this->_default_model->find($this->_default_model->data()->id);

                            } else {
                                /*
                                    The update failed for an unspecified reson so
                                    simply set the status
                                 */
                                 $_view_data['message'] = $this->_default_model->messages('update_fail');
                            } // update ()
                        } else {
                            /*
                                The validation failed so set the status and errors
                             */
                             $_view_data['message'] = $this->_default_model->messages('update_fail');
                            $_view_data['errors'] = $validation->errors();
                        } // $validation->
                    } else {
                         // No data had changed so just set the status
                         $_view_data['message'] = $this->_default_model->messages('no_change');
                    }
                } // Update form Posted

                /*
                    Now we move onto a delete request.

                    This is far simpler than the update one as we do not perform
                    any checks or validation. We already have the info we need to
                    delete the record so we simply attempt it and set a 'status'.
                 */
                if (Input::exists(['name'=>'delete_usergroup'])) {
                    if($this->_default_model->delete($this->_default_model->data()->id)) {
                        $_view_data['form'] = null;
                        $_view_data['delete_form'] = null;
                        $_view_data['message'] = $this->_default_model->messages('delete_success');
                    }
                } // Delete form Posted

            } else {
                /*
                    The group was not found so we assume it is an incorrect
                    parameter. We set 'form' to null as we have nothing to edit
                    and set the 'status'.
                 */
                $_view_data['form'] = null;
                $_view_data['message'] = $this->_default_model->messages('admin_not_found');
            }
        } else {
            /*
                There is no group parameter so we default to the overview version of the page showing the add form and the listing.

                First we check to see if the add form has been
                posted.
             */
            if (Input::exists(['name'=>'add_usergroup'])) {
                // Update form posted so unset the submit button from $_POST
                unset($_POST['add_usergroup']);

                    /*
                        We now create a variable called $_postdata and set $_POST to it to preserve the original data in case we need it again.

                        We also run another function to unset unrequired validation rules to avoid them firing on unset fields.
                     */
                    $_postdata = $_POST;

                    $_rules = stripValidateRules (
                        $_postdata,
                        $this->_default_model->validation_rules()
                    );

                    // Open a new instance of the validation class
                    $validate = new Validate();

                    /*
                        Check the posted data against the validation
                        rules using the check () function from the
                        Validate () class.
                        If successful, the $validation->passed()
                        function will return true.
                     */
                    $validation = $validate->check(
                        $_postdata,
                        $_rules
                    );

                    /*
                        If validation has passed, we attempt to create a new record
                        using the create () function in the model.
                     */
                    if ($validation->passed()) {
                        // Validation passed so attempt the update
                        if($this->_default_model->create($_postdata)) {
                            // The create was successful
                            $_view_data['message'] = $this->_default_model->messages('create_success');
                            $_view_data['insert_id'] = $this->_default_model->_insertId;

                            $this->_logs->insert_table_success([
                                'record' => $_params['insert_id'],
                                'area' => 'f',
                                'target' => 'user_groups'
                            ]);
                        } else {
                            $_view_data['message'] = $this->_default_model->messages('create_fail');
                        }
                    } else {
                        // The validation failed so set the status and errors
                        $_view_data['message'] = $this->_default_model->messages('create_fail');
                        $_view_data['errors'] = $validation->errors();
                        $this->_logs->insert_table_fail(
                            ['target' => 'user_groups', 'area' => 'a'],
                            $_view_data['errors'],
                            $_postdata
                        );
                    }

            }
            // Include the listing of records using listing() in the model.
            $_view_data['listing'] = $this->_default_model->listing ();
        }  // Category exists?

		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view('admin/usergroups', $_view_data);
  	} // index()
}





















<?php
/**
 * Admin Settings Controller
 *
 * Controller for the site settings page at http://yoursite/Admin/Settings.
 *
 * This file cannot contain any functions with the same name as any
 * any files or level 1 directories in /app/controllers/Admin.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Admin/Settings
 *
 */
class Settings extends Controller
{

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Settings');

	} // __construct ()

    public function add($params=null)
	{
        if($params){Redirect::to('404');}

        if (Input::exists('add_setting')) {
            unset ($_POST['add_setting']);
            if($this->_default_model->create($_POST)) {
                // The create was successful
                $params['status'] = 'create_success';
                $params['insert_id'] = $this->_default_model->_insertId;

            } else {
                $params['status'] = 'create_fail';
            }
        }
        $params['page_name'] = 'Add Setting';
        $params['page_type'] = 'add';


        $params['content'] = $this->_default_model->single_form([
            'version' => 'create'
        ]);
        $this->view(
	        'admin/settings',
	        $params
	    );
    }
	/**
	 * Site Home Page
	 *
	 * This is the page that will be seen when viewing the site root.
	 *
	 * This will generally show latest updates as the primary focus
	 * but for now, we will just return some basic details from the
	 * various sections.
	 *
	 * @return 	view
	 * @link 	http://site.com/
	 */
	public function index($setting=null)
	{
        $params['content'] = null;
        /*
            If we have parameters at a controller root there has
            been a url error so send to the 404 page
         */
        if($setting){
            $params['page_name'] = 'Edit Setting';
            $params['page_type'] = 'edit';


            if($this->_default_model->find($setting)) {
                if (Input::exists('update_setting')) {
                    unset ($_POST['update_setting']);
                    $_postdata = stripPostData (
                        $_POST,
                        $this->_default_model->data()
                    );

                    if(!empty($_postdata)) {
                        if($this->_default_model->update_single(
                            $this->_default_model->data()->id, $_postdata)
                        ) {
                            if(isset($_postdata['setting_name']) && $this->_default_model->data()->setting_name !== $_postdata['setting_name']) {

                                Session::put('message', 'update_success');
                                Redirect::to('/Admin/Settings/'.slugify($_postdata['setting_name']));
                            } else {
                                /*
                                    'username' has not changed so simply set the
                                    status message to $_params.
                                 */
                                $params['status'] = 'update_success';
                            }

                        }
                    } else {
                        $params['status'] = 'no_change';
                    }
                }

                $this->_default_model->find($setting);
                $params['content'] = $this->_default_model->single_form([
                    'version' => 'edit',
                    'data' => objectToArray($this->_default_model->data())
                ]);
            } else {
                $params['status'] = 'not_found';
            }
        } else {
            if (Input::exists('update_settings')) {
                unset ($_POST['update_settings']);

                $existing = SiteSettings::get();

                foreach ($existing as $settings => $setting) {
                    if($setting->value == $_POST[$setting->setting_name]) {
                        unset ($_POST[$setting->setting_name]);
                    }
                }

                if($_POST) {
                    $errors = $this->_default_model->update($_POST);

                    if($errors) {
                        $params['status'] = 'update_fail';
                        $params['errors'] = $errors;
                    }

                    $params['status'] = 'update_success';
                } else {
                    $params['status'] = 'no_change';
                }
            }

            // Set the params herre to pick up changes.
            $params['page_name'] = 'Settings';
            $params['page_type'] = 'overview';
            $params['content'] = $this->_default_model->form();

        }



		/*
			Pass the required data through to the view

            For now we are just passing a few counts of various sections
		*/
	    $this->view(
	        'admin/settings',
	        $params
	    );

  	} // index()

}




















<?php

/**
 * Database class
 *
 * Controls all database CRUD functions as well as opening up an instance
 * of this class.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the inititisation file
require_once 'src/init.php';

class DB
{
	// Set any private variables
    private static $_instance = null;
    private $_pdo,
            $_query,
            $_error = false,
            $_results,
            $_count = 0;

	/**
	 * Construct the database connection
	 *
	 *	Opens up a connection to the database and assigns it to
	 *	$this->_pdo to make it re-usable.
	 *
	 * The connection parameters are called using the values set in
     * '/app/core/SiteSettings.php->db()'
	 *
	 * @return 	Database connection
	 */
    private function __construct() {
        $db = SiteSettings::db();

        try {
            $this->_pdo = new PDO('mysql:host=' . $db['host'] . ';dbname=' . $db['dbname'],  $db['username'], $db['password']);

        } catch(PDOException $e) {
            die($e->getMessage());
        }
    } //__construct ()

	/**
	 * Create a new Database instance
	 *
	 * Creates a new instance of the database class that can be assigned to a
	 * variable and re-used.
	 *
	 * @return Database connection
	 * @example $this->db = DB::dbConnect();
	 */
    public static function dbConnect() {
		// If an instance has not already been set, set it
        if(!isset(self::$_instance)) {
            self::$_instance = new DB();
        }
		// Return the instance
        return self::$_instance;
    } // dbConnect()

	/**
	 * Perform a query on an SQL statement
	 *
	 * All of the variables created are private so cannot be called
	 * externally, but each has it's own public function.
	 *
	 * If you are using parameters, you need to replace the position where
	 * their values would be with ?
	 *
	 * self::db()->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash));
	 *
	 * @param  string 	$sql    SQL statement
	 * @param  array  	$params Paremeters to add to the string
	 * @return array         	Query results, errors and count
	 */
    public function query ($sql, $params = array()) {
		// Set error to false by default
        $this->error = false;
		/*
			We attempt to prepare the query and if it is succesful,
			we bind the parameters and execute it.
		 */
        if ($this->_query = $this->_pdo->prepare($sql)) {
			/*
				The query is prepared so we have to check to see if
				there are any parameters.

				If there are we loop through them annd then bind them
				to the query
			 */

			// Set the counter to one
            $x = 1;

			// Check to see if there are any parameters
            if(count($params)) {
				/*
					There are parameters so we loop through them and
					bind each
				 */
                foreach($params as $param) {
					// Bind the parameter with it's counter position
                    $this->_query->bindValue($x, $param);

					// Increment the counter
                    $x++;
                }
            }


			/*
				Now that the parameters have been bound, we try to execute
				the query.
				If succesful we set the results and row count, otherwise we
				set the error.
			 */
            if($this->_query->execute()) {
				// The query executed succesfully so set the results and count
                $this->_results = $this->_query->fetchAll(PDO::FETCH_OBJ);
                $this->_count = $this->_query->rowCount();
            } else {
				// The query failed so set error to true
                $this->_error = true;
            }
        } // prepare

		// Return anything that has been set as a result of the wquery attempt
        return $this;

    } // query ()


	/**
	 * Perfom a simple action on a table
	 *
	 * Allows you to perform a quick SELECT or DELETE on a table when
	 * only one parameter needs to be set.
	 *
	 * @param  string $action SELECT/DELETE
	 * @param  string $table  The name of the table
	 * @param  array  $where  An array of parameters - field, operator, value
	 * @return array          The output from the query() function in this class
	 */
    public function action ($action, $table, $where = array()) {
		/*
			A $where array MUST contain exactly three paramenters for this to
			work so the first thing to do is check that.

		 */
        if (count($where) === 3) {
			// There are three parameters so set the available operators
            $operators = array('=', '>', '<', '>=', '<=');

			/*
				As the $where array is set as field, operator, value we can easily set them to named variables
			 */
            $field = $where[0];
            $operator = $where[1];
            $value = $where[2];

			/*
				The next check is to make sure that the supplied operator is
				one of the ones set in $operators
			 */
            if (in_array($operator, $operators)) {
				// The operator matches so create the SQL statement
                $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";

				// Try to execute the query using the query() function.
                if(!$this->query($sql, array($value))->error()) {

					// Return anything returned from the query
                    return $this;
                }
            } // Operator check
        }// count check

        return false;
    } // action ()

	/**
	 * Perform a quick select on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example get('users', array('joined', '>', '2017-01-01'))
	 */
    public function get ($table, $where) {
        return $this->action('SELECT *', $table, $where);
    } // get ()

	/**
	 * Perform a quick delete on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example delete('users', array('joined', '>', '2017-01-01'))
	 */
    public function delete ($table, $where) {
        return $this->action('DELETE', $table, $where);
    } // delete ()


	/**
	 * Insert a row into a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example insert('users', array('username' => 'SteveB', 'active' => '1'))
	 */
    public function insert ($table, $fields = array()) {
		/*
			The $fields array will have a $key => $value pairing for
			each field having data inserted. The $key will matche the
			table field name and the $value will be the value to insert.

			We use array_keys extract the keys from the $fields array
			and assigned them to $keys.
		 */
        $keys = array_keys($fields);

		// Create a default $values variable
        $values = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create a ? to
			place in the fields section of the insert statement
		 */
        foreach($fields as $field) {
			// Add a placeholder to $values
            $values .= '?';

			// If we are not on the last pairing, add a comma to $values
            if ($x < count($fields)) {
                $values .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach

		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the fields and values.

			Using the example at the top of this function, the statement would be
			INSERT INTO `users` (`username`, `active`) VALUES (?, ?)

			We then pass the statement into the query() function
		 */
        $sql = "INSERT INTO `{$table}` (`" . implode('`,`', $keys) . "`) VALUES ({$values})";

		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error()) {
			// Return anything returned from the query
			return true;
        }

        return false;

    } // insert()


	/**
	 * Update a row in a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param   int 	$id     The id of the row to update
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example update('users', 1, array('username' => 'SteveBNew', 'active' => '0'))
	 */
    public function update ($table, $id, $fields = array()) {
		// Create a default $set variable to hold the values and fields
        $set = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create an x=? to
			place in the values section of the update statement
		 */
        foreach ($fields as $name => $value) {
			// Add a field = ?
            $set .= "`{$name}` = ?";

			// If we are not on the last pairing, add a comma to $set
            if ($x < count($fields)) {
                $set .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach


		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the values in $set.

			Using the example at the top of this function, the statement would be
			UPDATE `users` SET `username`='SteveBNew',`active`='0' WHERE id=1

			We then pass the statement into the query() function
		 */
        $sql = "UPDATE `{$table}` SET {$set} WHERE id = {$id}";

		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error()) {
			// Return anything returned from the query
			return true;
        }

        return false;

    } // update ()

	//////////////////////////////////////////////////
	// Public functions to call private variables  //
	//////////////////////////////////////////////////

	// Allow a single row of results data to be called publically
    public function first () {
        return $this->results()[0];
    }

	// Allow a results set data to be called publically
    public function results () {
        return $this->_results;
    }

	// Return a row count
    public function count () {
        return $this->_count;
    }

	// Return an error
    public function error () {
        return $this->_error;
    }

     //  Get the id of the last inserted row
    public function insertId () {
       return $this->_pdo->lastInsertId();
    } // insertId ()

}




















<?php

/**
 * Bootstrap class
 *
 * Turns various Bootstrap 4 components into re-usable functions.
 *
 * Extends Php2Html to incorporate the quick tag building functions
 *
 * Asume that all can have a parameter of content, id, class etc unless stated
 *
 * most take parameters that are passed in and pass them straight on but there ares some exceptions.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 *
 *
 * TODO: Block Button - logout form
 */
class Php2Bs extends Php2Html {

    /**
     * Button
     *
     * Creates a default Bootstrap button and allows all of the parameters that
     * can be set for Php2Html::button ().
     *
     * There are two other parameters that can be set
     * 'size' will add the specified btn-{size} class.
     * 'color' will add the specified btn-{color} class.
     *
     * For example
     *
     * Php2Bs::bs_button ([
     *     'color' => 'primary',
     *     'size' => 'sm',
     *     'content' => 'Login',
     * ]);
     * would create
     * <button class="btn btn-primary btn-sm">
     *
     * @param  array    $params     Settings
     * @return string   <button class="btn">
     */
    public static function bs_button($params) {
        $class = 'btn';

        if(isset($params['color'])) {
            $class .= ' btn-'.$params['color'];
        }

        if(isset($params['size'])) {
            $class .= ' btn-'.$params['size'];
        }

        $class .= (isset($params['class'])) ? ' '.$params['class']:'';

        $params['class'] = $class;

        return Php2Html::button (
           $params
        );
    } // bs_button ()

    /**
     * Collapse link
     *
     * A link that has a linked element which it will show and hide when clicked
     *
     * @param  array    $params     Settings
     * @return string   <a data-toggle="collapse" data-target="xxx">
     */
    public static function bs_collapse_link ($params) {

        $params['data_attr'] = [
            'toggle' => 'collapse',
            'target' => '#'.$params['target'],
        ];

        $params['aria'] = [
            'controls' => $params['target'],
            'expanded' => 'false',
            'label' => $params['label'],
        ];

        $params['content'] = Php2Html::span ([
                'content' => '',
                'class' => 'navbar-toggler-icon'
        ]);

        unset($params['target']);
        unset($params['label']);

        return Php2Html::a (
           $params
        );
    } // bs_collapse_link ()

    /**
     * Container
     * Creates a container div as part of the Bootstrap grid system.
     *
     * Available parameters
     * 'container_type'
     * An optional parameter that can only be set to 'fluid'. The will create a
     * fluid container as opposed to a fixed width one.
     *
     * @param  array    $params     Settings
     * @return string   <div class="container">
     * @return string   <div class="container-fluid">
     */
    public static function bs_container($params) {
        $params['container_type'] = isset($params['container_type']) ? 'container-'.$params['container_type'] : 'container' ;
        $params['class'] = (isset($params['class'])) ? $params['container_type'] . ' ' . $params['class'] : $params['container_type'];
        return Php2Html::div (
            $params
        );
    } // bs_container ()

    /**
     * Navbar dropdown menu Link
     *
     * A link to be shown in a dropdown menu on the navbar. These will be passed
     * into the dropdown (bs_nav_dropdown) as 'menu'
     *
     * Available parameters
     * 'href'
     * The link to go to, generally as a relative path from the site root (/Admin/Users).
     *
     * @param  array    $params     Settings
     * @return string   <a class="dropdown-item">
     */
    public static function bs_dropdown_item($params) {

        $params['class'] = (isset($params['class'])) ? 'dropdown-item ' . $params['class'] : 'dropdown-item';

        return Php2Html::a (
            $params
        );
    } // bs_dropdown_item

    /**
     * Checkbox with label
     *
     * Shows a Bootstrap checkbox and label combination. We build it all in
     * one go so pass the settings in as an array of three different arrays.
     *
     * 'label' refers the label of the checkbox. By default, this will already have 'input-group' as a class.
     *
     * 'prepend' sets the element prepended to the start of the input. This is
     * controlled by the bs_input_group_prepend () function.
     *
     * 'input' relates to anything to do with the input itself and is controlled
     * by the various bs_input_xxx() functions.
     *
     * Available parameters
     * 'href'
     * The link to go to, generally as a relative path from the site root (/Admin/Users).
     *
     * @param  array    $params     Settings
     * @return string   <div class="bs_form_check">
     */
    public static function bs_form_check($params) {

        $params['class'] = (isset($params['outer']['class'])) ? 'form-check ' . $params['outer']['class'] : 'form-check';

        $params['content'] = self::bs_form_check_input ($params['checkbox'])
        .self::bs_form_check_label ($params['label']);

        return Php2Html::div (
            $params
        );
    }

    /**
     * Checkbox
     *
     * Shows a Bootstrap checkbox.
     *
     * Accepts all standard parameters but also sets a default class of
     * 'form-check-input' by default.
     *
     * @param  array    $params     Settings
     * @return string   <input type="checkbox" class="form-check-input">
     */
    public static function bs_form_check_input($params) {
        $params['class'] = (isset($params['class'])) ? 'form-check-input ' . $params['class'] : 'form-check-input';

        return Php2Html::checkbox (
            $params
        );
    } // bs_form_check_input ()

    /**
     * Checkbox label
     *
     * Shows a Bootstrap checkbox label.
     *
     * Accepts all standard parameters but also sets a default class of
     * 'form-check-label' by default.
     *
     * @param  array    $params     Settings
     * @return string   <div class="form-check-label">
     */
    public static function bs_form_check_label($params) {
        $params['class'] = (isset($params['class'])) ? 'form-check-label ' . $params['class'] : 'form-check-label';

        return Php2Html::div (
            $params
        );
    } // bs_form_check_label ()

    /**
     * Input group
     *
     * Single function to create an input with an element prepended to the start
     * of it.
     *
     * As this creates the everything in one go, we pass the settings in as an
     * array of three different arrays.
     *
     * 'group' refers the entire object so would generally only have classes
     * passed in. By default, this will already have 'input-group' as a class.
     *
     * 'prepend' sets the element prepended to the start of the input. This is
     * controlled by the bs_input_group_prepend () function.
     *
     * 'input' relates to anything to do with the input itself and is controlled
     * by the various bs_input_xxx() functions.
     *
     * @param  array    $params     Settings
     * @return string   <div class="input-group"><div class="input-group-prepend"><span class="input-group-text">
     */
    public static function bs_input_group($params) {
        $params['group']['class'] = (isset($params['group']['class'])) ? 'input-group ' . $params['group']['class'] : 'input-group';

        $params['group']['content'] = self::bs_input_group_prepend (
            $params['prepend']
        );

        $input_type = 'bs_input_'.$params['input']['type'];
        unset($params['input']['type']);

        $params['group']['content'] .= self::$input_type (
            $params['input']
        );

        return Php2Html::div (
            $params['group']
        );
    } // bs_input_group

    /**
     * Input group prepend
     *
     * Creates an element to prepended to the start of an input.
     *
     * A prepend consists of two different parts. Externally it is a div, but,
     * whatever it needs to display is placed inside a span. With that in mind,
     * we pass the settings in as an array of three different arrays.
     *
     * 'class' refers to classes that effect the entire object.
     *
     * 'outer' relates to the div that wraps it all. This will already have a
     * default class of 'input-group-prepend'.
     *
     * 'inner' relates to the span that will actually contain the text or symbol
     * to display. This will already have a default class of 'input-group-text'.
     *
     * @param  array    $params     Settings
     * @return string   <div class="input-group-prepend"><span class="input-group-text">
     */
    public static function bs_input_group_prepend($params) {
        $params['outer']['class'] = (isset($params['class'])) ? 'input-group-prepend ' . $params['class'] : 'input-group-prepend';

        $params['inner']['class'] = 'input-group-text';
        $params['inner']['content'] = $params['content'];

        if(isset($params['id'])) {
            $params['inner']['id'] = $params['id'];
        }

        $params['outer']['content'] = Php2Html::span (
            $params['inner']
        );


        return Php2Html::div (
            $params['outer']
        );
    } // bs_input_group_prepend

    /**
     * Collapsing navbar section
     *
     * Accepts all standard parameters but also sets a default class of 'collapse navbar-collapse'.
     *
     * @param  array    $params     Settings
     * @return string   <div class="collapse navbar-collapse">
     */
    public static function bs_navbar_collapse ($params) {
        $params['class'] = (isset($params['class'])) ? 'collapse navbar-collapse ' . $params['class'] : 'collapse navbar-collapse ';
        return Php2Html::div (
            $params
        );
    } // bs_navbar_collapse

    /**
     * List Group
     *
     * Creates a list group from an array of links.
     *
     * Accepts all standard parameters but also sets a default class of 'list-group'
     * to the parent <ul> and creates the list items using bs_list_group_item (). If
     * the array has a 'href' parameter, the items will become <a>'s, otherwise
     * they will be <li>'s.
     *
     * The array of items should be passed in as content.
     *
     * @param  array    $params     Settings
     * @return string   <ul class="list-group"><li class="list-group-item">
     * @return string   <ul class="list-group"><a class="list-group-item">
     */
    public static function bs_list_group ($params) {

        $params['class'] = (isset($params['class'])) ? 'list-group ' . $params['class'] : 'list-group';

        $list_items = '';

        foreach ($params['content'] as $items => $item) {

            if(isset($item['href'])) {
                $item['tag'] = 'a';
                $item['class'] = (isset($item['link_class'])) ? $item['link_class'] : '';
                $item['content'] = $items;
            } else {
                $item['content'] = $items;
            }

            $list_items .= self::bs_list_group_item (
                $item
            );
        }

        $params['content'] = $list_items;

        return Php2Html::ul (
            $params
        );
    } // bs_list_group ()

    /**
     * List Group Item
     *
     * Creates a list group item as either an <a> or a <li>. To set an <a> pass
     * in a 'tag' parameter of 'a'.
     *
     * Accepts all standard parameters but also sets a default class of
     * 'list-group-item' by default.
     *
     *
     * @param  array    $params     Settings
     * @return string   <li class="list-group-item">
     * @return string   <a class="list-group-item">
     */
    public static function bs_list_group_item ($params) {
        $params['class'] = (isset($params['class'])) ? 'list-group-item ' . $params['class'] : 'list-group-item';

        if(isset($params['tag'])) {

            if($params['tag'] == 'a') {
                $params['class'] .= ' list-group-item-action';
            }

            return Php2Html::$params['tag'] (
                $params
            );
        } else {
            return Php2Html::li (
                $params
            );
        }
    } // bs_list_group_item ()

    /**
     * Navbar
     *
     * Creates the outer most parts of a navbar ready to place the navigation in.
     *
     * Accepts all standard parameters but also sets a default class of 'navbar'.
     *
     * @param  array    $params     Settings
     * @return string   <nav class="navbar">
     */
    public static function bs_navbar($params) {
        $params['class'] = (isset($params['class'])) ? 'navbar ' . $params['class'] : 'navbar ';
        return Php2Html::nav (
            $params
        );
    } // bs_navbar

    /**
     * Navbar section
     *
     * Accepts all standard parameters but also sets a default class of 'navbar-nav'.
     *
     * @param  array    $params     Settings
     * @return string   <ul class="navbar-nav">
     */
    public static function bs_navbar_nav ($params) {
        $params['class'] = (isset($params['class'])) ? 'navbar-nav ' . $params['class'] : 'navbar-nav ';
        return Php2Html::ul (
            $params
        );
    } // bs_navbar_nav

    /**
     * Navbar toggle button
     *
     * Available parameters
     * 'button_class'
     * Adds additional classes to the button itself.
     * 'navbar-toggler' will already be added by default.
     *
     * 'target'
     * This will be the id of the element that the toggle button is showing and
     * hiding so populates the 'data-target' parameter. This will also populate
     * the 'aria-controls' parameter.
     *
     * 'label'
     * Sets the content of the 'aria-label' parameter.
     *
     * @param  array    $params     Settings
     * @return string   <button type="button" class="navbar-toggler">
     */
    public static function bs_navbar_toggler ($params) {

        $params['class'] = (isset($params['button_class'])) ? 'navbar-toggler '.$params['button_class']:'navbar-toggler';

        $params['data_attr'] = [
            'toggle' => 'collapse',
            'target' => '#'.$params['target'],
        ];

        $params['aria'] = [
            'controls' => $params['target'],
            'expanded' => 'false',
            'label' => $params['label'],
        ];

        $params['content'] = Php2Html::span ([
                'content' => '',
                'class' => 'navbar-toggler-icon'
        ]);

        unset($params['target']);
        unset($params['label']);

        return Php2Html::button (
           $params
        );
    } // bs_navbar_toggler ()

    /**
     * Full navbar dropdown menu
     *
     * As this creates the button, dropdown and all links in one go, we pass the
     * settings in as an array of three different arrays.
     *
     * 'li' refers to the trigger button shown on the menu and should only have
     * non-displaying parameters. The content itself will be the 'a' set in the
     * next part.
     *
     * 'a' controls the visible menu link itself and can take most standard
     * parameters. It also needs a 'id' parameter that will link the button and
     * menu.
     *
     * 'menu' simply contains the links to go into the sub menu as 'content'. You
     * can also add the usual parameters.
     *
     * @param  array    $params     Settings
     * @return string   <li class="nav-item dropdown"><a><div class="dropdown-menu>{links}
     */
    public static function bs_nav_dropdown($params) {

        $params['li']['class'] = (isset($params['li']['class'])) ? 'nav-item dropdown ' . $params['li']['class'] : 'nav-item dropdown';

        $params['a']['class'] = (isset($params['a']['class'])) ? 'nav-link dropdown-toggle ' . $params['a']['class'] : 'nav-link dropdown-toggle';

        $params['a']['link'] = '#';

        $params['a']['aria']['expanded'] = 'false';
        $params['a']['aria']['haspopup'] = 'true';
        $params['a']['data_attr']['toggle'] = 'dropdown';
        $params['menu']['aria']['labelledby'] = $params['a']['id'];

        $params['li']['content'] = Php2Html::a (
                $params['a']
                ).
                self::bs_dropdown_menu (
                    $params['menu']
            );
        return Php2Html::li (
            $params['li']
        );
    } // bs_nav_dropdown ()

    /**
     * Navbar Item
     *
     * A <li> to sit within a nav bar, generally containing a link.
     *
     * @param  array    $params     Settings
     * @return string   <li class="nav-item">
     */
    public static function bs_nav_item ($params) {
        $params['class'] = (isset($params['class'])) ? 'nav-item ' . $params['class'] : 'nav-item';
        return Php2Html::li (
            $params
        );
    } // bs_nav_item()

    /**
     * Navbar Link
     *
     * A link to be shown on the navbar, generally inside a nav item (bs_nav_item).
     *
     * Available parameters
     * 'href'
     * The link to go to, generally as a relative path from the site root (/Admin/Users).
     *
     * @param  array    $params     Settings
     * @return string   <a class="nav-link">
     */
    public static function bs_nav_link ($params) {
        $params['class'] = (isset($params['class'])) ? 'nav-link ' . $params['class'] : 'nav-link';
        return Php2Html::a (
            $params
        );
    } // bs_nav_link ()


    /**
     * Nav Tabs
     *
     * Creates a set of navs with separate content showing each time one is clicked.
     *
     * Accepts all standard parameters but also sets a default class of 'list-group'
     * to the parent <ul> and creates the list items using bs_list_group_item (). If
     * the array has a 'href' parameter, the items will become <a>'s, otherwise
     * they will be <li>'s.
     *
     * The array of items should be passed in as content.
     *
     * @param  array    $params     Settings
     * @return string   xxx
     * @return string   xxx
     * @link https://getbootstrap.com/docs/4.0/components/navs/#javascript-behavior
     */

    public static function bs_nav_tabs ($params) {

        // Details of the tab row wrapper
        if(isset($params['tab_row']['id'])) {
            $tab_row['id'] = $params['tab_row']['id'];
        }

        $tab_row['class'] = (isset($params['tab_row']['class'])) ? 'nav-tabs ' . $params['tab_row']['class'] : 'nav-tabs ';

        $tab_row['role'] = 'tablist';

        $tab_row['content'] ='';


        // Details of the content row wrapper
        if(isset($params['content_row']['id'])) {
            $content_row['id'] = $params['content_row']['id'];
        }

        $content_row['class'] = (isset($params['content_row']['class'])) ? $params['content_row']['class'] : ' ';

        $content_row['content'] ='';


        $i=0;
        foreach ($params['tabs'] as $key => $value) {

            // Tab row content
            $tab_params ['content'] = $key;
            $tab_params ['id'] = str_replace(" ", "-", (strtolower($key))).'-tab';
            $tab_params ['href'] = '#'.str_replace(" ", "-", (strtolower($key))).'-content';
            $tab_params ['role'] = 'tab';
            $tab_params ['data_attr']['toggle'] = 'tab';
            $tab_params ['aria']['controls'] = str_replace(" ", "-", (strtolower($key))).'_content';
            $tab_params ['aria']['selected'] = ($i) ? 'false': 'true';
            $tab_params ['class'] = (!$i) ? 'active': '';
            $tab_params ['class'] .= ($value['tab_class']) ? ' ' . $value['tab_class']: '';

            // Content row content
            $content_params ['id'] = str_replace(" ", "-", (strtolower($key))).'-content';
            $content_params ['content'] = $value['content'];
            $content_params ['role'] = 'tabpanel';
            $content_params ['aria']['labelledby'] = slugify(strtolower($key)).'_tab';

            $content_params['class'] = (isset($params['content_row']['class'])) ? 'fade ' . $params['content_row']['class'] : 'fade';
            $content_params ['class'] .= ($value['content_class']) ? ' ' . $value['content_class']: '';

            $tab_row['content'] .= Php2Bs::bs_nav_item ([
                'content' => Php2Bs::bs_nav_link (
                    $tab_params
                )
            ]);


            $content_params ['class'] .= (!$i) ? ' show active': '';

            $content_row['content'] .= Php2Bs::bs_tab_pane ($content_params);

            $i++;
        }
        $out = self::bs_nav ($tab_row);

        if(isset($params['content_row']['id'])) {
            $content_row['id'] = $params['content_row']['id'];
        }

        $out .= Php2Bs::bs_tab_content ($content_row);

        return $out;
    }

    public static function bs_tab_content ($params) {
        $params['class'] = (isset($params['class'])) ? 'tab-content ' . $params['class'] : 'tab-content ';
        return Php2Html::div (
            $params
        );
    }

    public static function bs_tab_pane ($params) {
        $params['class'] = (isset($params['class'])) ? 'tab-pane ' . $params['class'] : 'tab-pane ';
        return Php2Html::div (
            $params
        );
    }


















    public static function bs_col_form_label ($params)
    {
        $default_class = (isset($params['size'])) ? 'col-form-label-'.$params['size'].' ' : 'col-form-label ';
        $params['class'] = (isset($params['class'])) ? $default_class . $params['class'] : $default_class;
        return Php2Html::label (
            $params
        );
    }


    public static function bs_footer ($params) {
        $params['class'] = (isset($params['class'])) ? 'footer ' . $params['class'] : 'footer ';
        return Php2Html::footer (
            $params
        );
    }



    public static function bs_form_row($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-row ' . $params['class'] : 'form-row';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_group($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-group ' . $params['class'] : 'form-group';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_text($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-text ' . $params['class'] : 'form-text';

        return Php2Html::small (
            $params
        );
    }




    public static function bs_outline_btn($params)
    {

        $params['class'] = 'btn btn-outline-' . $params['class'];


        return Php2Html::button (
           $content,
           $params
        );

    }





    public static function bs_custom_radio_wrapper($params)
    {
        $params['class'] = (isset($params['class'])) ? 'custom-control custom-radio ' . $params['class'] : 'custom-control custom-radio';

        return Php2Html::div (
            $params
        );
    }
    public static function custom_control_label($params)
    {
        $params['class'] = (isset($params['class'])) ? 'custom-control-label ' . $params['class'] : 'custom-control-label';

        return Php2Html::label (
            $params
        );
    }

    public static function bs_custom_radio($params)
    {
        $params['class'] = (isset($params['class'])) ? 'custom-control-input ' . $params['class'] : 'custom-control-input';

        return Php2Html::radio (
            $params
        );
    }


    public static function bs_input_text($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        if(isset($params['size'])) {
            $params['class'] .= ' form-control-'.$params['size'];
        }
        return Php2Html::input_text (
            $params
        );
    }

    public static function bs_textarea($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::textarea (
            $params
        );
    }
    public static function bs_input_password($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::input_password (
            $params
        );
    }

    public static function bs_input_email($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::input_email (
            $params
        );
    }



    public static function bs_dropdown_menu ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'dropdown-menu ' . $params['class'] : 'dropdown-menu ';
        return Php2Html::div (
            $params
        );
    }




    public static function bs_nav ($params) {
        $params['class'] = (isset($params['class'])) ? 'nav ' . $params['class'] : 'nav ';
        return Php2Html::ul (
            $params
        );
    }



    public static function bs_select($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::select (
            $params
        );
    }

    public static function bs_card($array)
    {
        $header = '';
        $body = '';
        $footer = '';


        if(isset($array['header']))
        {
            $array['header']['class'] = (isset($array['header']['class'])) ? 'card-header ' . $array['header']['class'] : 'card-header';

            $header = Php2Html::div (
                $array['header']
            );
        }

        if(isset($array['body']))
        {
            $array['body']['class'] = (isset($array['body']['class'])) ? 'card-body ' . $array['body']['class'] : 'card-body';

            $body = Php2Html::div (
                $array['body']
            );
        }

        if(isset($array['footer']))
        {
            $array['footer']['class'] = (isset($array['footer']['class'])) ? 'card-footer ' . $array['footer']['class'] : 'card-footer';

            $footer = Php2Html::div (
                $array['footer']
            );
        }

        $array['class'] = (isset($array['class'])) ? 'card ' . $array['class'] : 'card';

        $array['content'] = $header.$body.$footer;

        return  Php2Html::div (
            $array
        );


    }


    public static function bs_alert($array)
    {   nicePrint_r($array);
        $core_class = 'alert alert-';
        $core_class .=(isset($array['color'])) ? $array['color'].' ': 'info ';

        $array['class'] = (!isset($array['class'])) ? $core_class : $core_class.$array['class'];

        $content = $array['content'];
        $array['content'] ='';

        if($array['heading'])
		{
		    $array['content'] .= Php2Html::h([
                'size' => '4',
                'class' => 'alert-heading',
                'content' => $array['heading']
            ]);
		}
        $array['content'] .= $content;
        if($array['dismissible'])
		{
            $array['class'] .= ' alert-dismissible';
		    $array['content'] .= '	<button type="button" class="close" data-dismiss="alert" aria-label="Close">';
        	$array['content'] .= '		<span aria-hidden="true">&times;</span>';
    		$array['content'] .= '	</button>';
		}

        $array['role'] = 'alert';

        return  Php2Html::div (
            $array
        );
    }


	/**
	 * Alert
	 *
	 * @param  string 			$color       danger/info/warning/alert
	 * @param  string/null 		$heading     Optional text to display in 'alert-heading'
	 * @param  string 			$body        The body text for the alert
	 * @param  boolean 			$dismissible Whether to make the alert dismissible
	 * @example 	https://v4-alpha.getbootstrap.com/components/alerts/
	 *
	 * @return string           Bootstrap Alert
	 */




    public static function makeAlert($color = 'info', $heading=null, $body, $dismissible=false)
	{
		// Create the opening alert tage with the correct colour
        $out = '<div class="alert alert-'.$color.'">';

		// If $dismissible=true add the dismiss button
		if($dismissible)
		{
		    $out .= '	<button type="button" class="close" data-dismiss="alert" aria-label="Close">';
        	$out .= '		<span aria-hidden="true">&times;</span>';
    		$out .= '	</button>';
		}
		// If $heading is not empty, add it
        if($heading)
		{
            $out .= '<h4 class="alert-heading">'.$heading.'</h4>';
        }

		// Add the body text
        $out .= $body;

		// Close the alert tag
        $out .= '</div><!-- alert-'.$color. '-->';

        return $out;
    } // makeAlert



	/**
	 * Make a Bootstrap 4 Grid
	 *
	 *	We have two functions to simplify make a Bootstrap grid layout.
	 *
	 *	row ()		Makes a <div class="row">
	 *	column 		Makes a <div class="col-xx-xx">
	 *
	 * These can be used in conjuction with each other in an unlimited amount
	 * of nesting. Each function has a parameter called $inc which will contain
	 * an array of anything to be displayed within.
	 *
	 * To make a row with an id of 'content' and within it a small column with a
	 * class of col-sm-4 and a larger column with a class of col-sm-8, you would use
	 *
	 *
	 * Php2Bs::row (
	 * 		$id = 'content',
	 * 		$class = null,
	 * 		$inc = array (
	 * 			Php2Bs::column (
	 *				$id = null,
	 * 				$class = 'col-sm-4',
	 * 				$inc = array (
	 * 					...
	 * 				)
	 * 			),
	 * 			Php2Bs::column (
	 *				$id = null,
	 * 				$class = 'col-sm-8',
	 * 				$inc = array (
	 * 					...
	 * 				)
	 * 			),
	 * 			Php2Bs::column (
	 *
	 * 			),
	 *
	 * 		)
	 * )
	 *
	 * The $inc within the column sections can be an array of any elements that
	 * you want and can be a mixture of several types including more row() and
	 * column() functions.
	 * Although you can use plain text as an array element, it is recommended to put
	 * anything you need into indivudal functions and call them.
	 *
	 */

	/**
	 * Make a Bootstrap 4 Grid Row
	 *
	 * Creates a <div class="row"></div> with any attributes and content as well as
	 * a formatted end html comment
	 *
	 * @param  string/null 		$id    The id attribute of the row if required
	 * @param  string/null 		$class The class attribute of the row if required
	 * @param  array  			$inc   An array of columns to show
	 * @return string        	Boostrap Row
	 */

     public static function bs_row($params)
 	{
        $params['class'] = (isset($params['class'])) ? 'row ' . $params['class'] : 'row';


        return Php2Html::div(
            $params
        );

    }


	/**
	 * Make a Bootstrap 4 Grid Column
	 *
	 * Creates a <div class="col-xx-xx"></div> with any attributes and content as well as
	 * a formatted end html comment
	 *
	 * @param  string/null 		$id    The id attribute of the column if required
	 * @param  string/null 		$class The class attribute of the column if required
	 * @param  array  			$inc   An array of content to show
	 * @return string        	Boostrap Column
	 */

     // public static function column (
     //     $id = null,
     //     $class = null,
     //     $inc = array ()
     // )

    public static function bs_column($params)
   {
        $params['class'] = (isset($params['class'])) ?  $params['class'] : 'col';


        $content = Php2Html::div(
            $params
        );

        return $content;
    }


    public static function quickCollapse ($params = array ())
	{
        $out = '';

        $out .= '<p';
        if (isset($params['wrap_class'])) {
            $out .= ' class="'.$params['wrap_class'].'"';
        }
        $out .= '>';

        $out .= '<a class="btn ';
        if (isset($params['button']['size'])) {
            $out .= 'btn-'.$params['button']['size'].' ';
        }

        if (isset($params['button']['type'])) {
            $out .= 'btn-'.$params['button']['type'].'-'.$params['button']['color'].'';
        }
        else
        {
            $out .= 'btn-'.$params['button']['color'].'';
        }
        if (isset($params['button']['class'])) {
            $out .= '  '.$params['button']['class'];
        }
        $out .= '"';
        $out .= ' data-toggle="collapse" href="#'.$params['key'].'" aria-expanded="false" aria-controls="'.$params['key'].'e">';
        $out .= $params['text'];
        $out .= '</a>';

        $out .= '</p>';

        $out .= '<div class="collapse" id="'.$params['key'].'">';

        $out .= $params['content'];

        $out .= '</div>';

        return $out;
    }

}




















<?php

/**
 * Settings Core Class
 *
 * This file either contains or provides access to all of the required
 * settings and variables throughout the site.
 *
 * There are two different methods of storing these settings.
 *
 * Any that are fairly static get stored in one of a number of specific
 * functions. With these if it is likely that you will need more than
 * one of the settings contained at one time (such as db() which
 * contains all of the database connection settings) you just call the
 * function cold and return all of the elements - $db = SiteSettings::db().
 * For those where you may only need one of the elements (such as the css()
 * or js() functions), you call the class with a path to the element -
 * $css = SiteSettings::css('remote/bootstrap/v4').
 *
 * Any settings that may frequently change are stored in the settings table
 * in the database and maintained via /Admin/Settings. There is a function
 * here to call any of these so to call the 'site_name' setting from the
 * database, you would use $name = SiteSettings::get('site_name').
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';

class SiteSettings
{
    /////////////////////////////
    // Locally stored settings //
    /////////////////////////////

    /**
     * Available CSS files
     *
     * Contains an array of all css files that can be used within the
     * site and allows you to pick a single one to return.
     *
     * To call a file, call the function and as the $path, drill down to
     * the required file using / as a seperator.
     *
     * SiteSettings::css('local/admin') will return
     * <link rel="stylesheet" href="/includes/css/admin.css">
     *
     * SiteSettings::css('remote/bootstrap/v4') will return
     * <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
     *
     * @param   string  $path   Array path to the required file
     * @return  string  The tag for the requested file
     */
    public static function css ($path) {
        $array = [
            // Locally Hosted
            'local' => [
                'site' => '<link rel="stylesheet" href="/includes/css/site.css">',
                'admin' => '<link rel="stylesheet" href="/includes/css/admin.css">',
            ],
            // Remotely Hosted
            'remote' => [
                // Font Awesome 4.7
                'font-awesome' => '<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">',

                // Simple Line Icons
                'simple-line-icons' => '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/simple-line-icons/2.4.1/css/simple-line-icons.css" />',

                //Bootstrap - We have both versions 3 and 4 just in case 3 is still needed
                'bootstrap' => [
                    // Version 3.3.7
                    'v3' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">',

                    // Version 4 beta 3
                    'v4_beta' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy" crossorigin="anonymous">',

                    // Version 4 final
                    'v4' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">',

                ]
            ]
        ];

        // Return the array element specified by $path using set_path() from this file
        return self::set_path($array, $path);

    } // css ()

    /**
     * Return the current date and time
     *
     * Returns the current date and time as a DateTime object that you can
     * format and manipulate.
     *
     * @return  object  Current date and time
     */
    public static function current_datetime () {
        return new DateTime();
    } // current_datetime

    /**
     * Database settings
     *
     * Returns an array of the database connection settings as a
     * $key=>$value pairing where the key is the 'name' and the
     * value is the 'content'.
     *
     * @return  array   Database host, password, username and dbname
     */
    public static function db () {
        return [
            // The database host. Usually 'localhost' or '127.0.0.1'
            'host' => 'localhost',
            // The Username for the database
            'username' => 'root',
            // The Password for the database
            'password' => 'notyou',
            // The Name of the database
            'dbname' => 'hub',
        ];
    } // db()

    /**
     * Available JS files
     *
     * Contains an array of all js files that can be used within the
     * site and allows you to pick a single one to return.
     *
     * To call a file, call the function and as the $path, drill down to
     * the required file using / as a seperator.
     *
     * SiteSettings::css('local/default') will return
     * <script src="default.js"></script>
     *
     * SiteSettings::css('remote/font-awesome-5') will return
     * <script defer src="https://use.fontawesome.com/releases/v5.0.4/js/all.js"></script>
     *
     * @param   string  $path   Array path to the required file
     * @return  string  The tag for the requested file
     */
    public static function js ($path) {
        $array = [
            // Locally Hosted
            'local' => [
                'default' => '<script src="default.js"></script>',
            ],
            // Remotely Hosted
            'remote' => [
                // JQuery
                'jquery' => '<script src="https://code.jquery.com/jquery-3.1.1.js" integrity="sha256-16cdPddA6VdVInumRGo6IbivbERE8p7CQR3HzTBuELA=" crossorigin="anonymous"></script>',
                'jquery_ui' => '<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js" integrity="sha256-T0Vest3yCU7pafRw9r+settMBX6JkKN06dqBnpQ8d30=" crossorigin="anonymous"></script>',

                // Font Awesome 5.0.4
                'font-awesome-5' => '<script defer src="https://use.fontawesome.com/releases/v5.0.4/js/all.js"></script>',

                //Bootstrap - We have both versions 3 and 4 just in case 3 is still needed
                'bootstrap' => [
                    // Version 3.3.7
                    'v3' => '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>',

                    // Version 4
                    'v4' => '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>',
                ],
                'popper' => '<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>',
                'ckeditor' => '<script src="https://cdn.ckeditor.com/4.8.0/standard/ckeditor.js"></script>'
            ]
        ];

        // Return the array element specified by $path using set_path() from this file
        return self::set_path($array, $path);

    } // js ()

    /**
     * Meta Tags
     *
     * Returns an array of meta tags as a $key=>$value pairing
     * where the key is the 'name' and the value is the 'content'.
     *
     * These get processed in a foreach loop in the head() function
     * in the base template (by default /app/core/Templates/Base.php).
     *
     * @return  array   Various meta tags
     */
    public static function meta_tags () {
        return [
            'description' => 'Enter a description',
            'author' => 'Your Name',
            'viewport' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
            'keyword' => 'Bootstrap,Admin,Template,PHP,MVC,Framework,jQuery,CSS,HTML,Dashboard'
        ];
    } // meta_tags ()


    /////////////////////////////////
    // Database settings functions //
    /////////////////////////////////

    /**
     * Retrieve settings stored in the database
     *
     * This function allows you to either retrieve all of the settings stored in
     * the settings table as an array or simply retrieve the value of a specified
     * one.
     *
     * To retrieve all simply call the function with no parameters. To retrieve
     * the value of a specific setting, pass the setting_name in the function.
     *
     * @param  string/null  $_key   The stored setting_name or null to return all
     * @return string/array          The value of the setting or an array of all settings
     */
    public static function get($_key=null){
        /*
            Check to see if a setting name has been specified
         */
        if ($_key) {
            // A setting name is specified so query the database for it
            $data = DB::dbConnect()->get('settings', array('setting_name', '=', $_key));
            // If there is a matching record, return just the 'value' column
            if ($data->count()) {
                return $data->first()->value;
            }
        } else {
            // No setting name is specified so query the database for all
            $data = DB::dbConnect()->query('SELECT * FROM `settings`');

            // As long as the table is not empty, return all of the results as an array
            if ($data->count()) {
                return $data->results();
            }
        }

        // If we have hit this point, there was nothing found in the query so return false
        return false;
    } // get ()


    ////////////////////
    // Misc functions //
    ////////////////////

    /**
     * Get a specified element from an array
     *
     * Looks through the specified array for the path that has been
     * set and returns the value if found.
     *
     * Paths are set using / as a separator for each element to
     * drill down through.
     *
     * @param   array     $array   The array to choose from
     * @param   string    $path    The path to the array element
     * @return  string    The value of the element
     */
    private static function set_path ($array, $path) {

        /*
            Explode the $path and re-set it to itself.

            Looks at the$ path and classes / as a separator. It explodes
            that data so we now have an array conatining an element
            for each part of the path.
         */
        $path = explode('/', $path);

        /*
            Set the first part of the $path array to a parameter called
            $result and then unset it.

            $reuslt now contains the first level key of the passed in
            array.
         */
        $result = $array[$path[0]];
        unset($path[0]);

        /*
            Loop through the remaining elements in path and for each,
            if they exist, build upon result.

            If the path was 'remote/bootstrap/v4', the process would be
            $result = $array['remote']
            $result = $array['remote']['bootstrap']
            $result = $array['remote']['bootstrap']['v4']
            with the final one being the one returned.
         */
        foreach ($path as $bit) {
            // Check to see if the key exists
            if(isset($result[$bit])) {
                // If the key does exist, replace $result with the new key
                $result = $result[$bit];
            }
        } // foreach $path

        // Return the value of the element
        return $result;
    } // set_path

}




















<?php

/**
 * Main Template Base
 *
 * This file contains the core structure and functions for building the main
 * template all bar the actual page content, which is called using new
 * T_Main_Template which extends this class.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */
class T_Admin {

    /**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$params        Additional parameters
	 */
    public function __construct($content, $params=array()) {

        /*
            Before we attempt to do anything, we need to ensure that the
            user logged in and authorised to view the admin area.

            If they are not logged in, the get directed to the admin login page
            otherwise they get sent to the unathorised page.
         */

        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            Redirect::to('/Admin/Login/');
        } else {
            if(!$user->hasPermission('admin')) {
                Redirect::to('/Admin/Unauthorised/');
            }
        }

		// Set the displayed content to $this->content
		$this->content = $content;

		/*
            If a 'page_title' has been passed set it to $this->page_title,
            otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle,
            if required .

            These variables get checked in the content() function and then
            added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT
            show, even if it has been set.
         */
		$this->page_title = (isset($params['page_title'])) ? $params['page_title'] : null;
        $this->page_subtitle = (isset($params['page_subtitle'])) ? $params['page_subtitle'] : null;

		/**
		 * Set the layout version
		 *
		 * If a layout has been passed from the view via $params['layout'] set $this->layout
		 * to it otherwise use 'default'.
		 *
		 * These variables get checked in the layout_switcher() function within this file
		 * and will return a layout based on that is set here.
		 *
		 * To see the demo layout versions and instructions on how to edit them or create a
		 *  new one, see layout_switcher() and its comments.
		 *
		 * @var string
		 */
        if(isset($params['layout'])) {
            $this->layout = $params['layout'];
        } else {
            $this->layout = 'default';
        }

        /**
         * Set any page specific meta tags. These will be set in the view as a
         * key/value pairing and will override the defaults set in
         * /app/core/Settings.php->meta_tags()
         * @var [type]
         */
        if(isset($params['meta'])) {$this->meta =$params['meta'];}

        /**
         * Set any page specific css. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['css'])) {$this->css =$params['css'];}

        /**
         * Set any page specific js. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['js'])) {$this->js =$params['js'];}

        if(isset($params['alert'])) {$this->content = $params['alert'].$this->content;}


        $this->menu_category = (isset($params['menu_category'])) ? $params['menu_category'] : null;
        $this->menu_item = (isset($params['menu_item'])) ? $params['menu_item'] : null;

		// Call the template function
        self::Template();

    } // __construct

    /**
     * Build the entire template
     *
     * We build this up gradually via functions contained eihter in this file or in
     * the Base_Template file it extends
     * @return 	HTML page
     */
    private function Template () {
        // Build the start of the page up to the opening body tag, including the <head>
        self::bodyStart ();

        // Build top navigation bar
        self::topNav ();

        self::dropMenus ();

        // Show the actual content for the page
        self::content ();

        self::footer ();

        // Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()





	/**
	 * Build the HTML down to the opening body tag and include extra css
	 *
	 * @return string 					Template to the opening <body> tag
	 */
    public function bodyStart ()
	{

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';


        /**
         * Include the <head> section
         *
         * If a page needs any extra css apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out .= self::head ();

        // Open the body tag
        $out .= '<body class="bdy">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

	/**
	 * Finish the HTML
	 *
	 * @return string 					Template for the end of the HTML
	 */
    public function bodyEnd ()
	{

		/**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

    private function content () {

        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $params['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $params['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title)
        {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);


        }



        /*
            Call the correct layout of the page

            The main content could be called into one of several different
            layouts. The reason for this is you may want a slightly
            different layout for certain content such as some pages having
            a content specific sidebar.

            This is fully controlled by the layout_switcher () function in
            this file (a separate function has been created as there is an
            infinite number of combinations that you can use) controls all of it so we simply add that to the $content variable.

            See the comments for that function for a list of available ones and how to create a new one.
         */
        $content .= Php2Bs::bs_row ([
            'content' => self::left_Column ()
                        .self::main_column_medium (),
            'class' => 'flex-xl-nowrap',
        ]);


        /*
            We now have the entire content of the page, in the required layout
            version, contained within $content.

            In this template, the entire content area is wrapped in the Bootstrap container within a Bootstrap fluid-container.

            Tp make this, we echo out a bs_container() function from the Php2Bs
            class, with 'container_type' set to fluid.

            Inside this, we set it's 'content' as another bs_container(), but this time without the 'fluid' request. It is in the 'content' for
            this that we actually pass the completed $content.
         */
        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => $content
        ]); // container-fluid

    } // content()

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {


        /*
            Now $title will contain everything required in the page_title
            div so we add it to $content using the div() function in the
            Php2Html class.
         */
        $title = Php2Html::h([
            'size' => '2',
            'class' => 'page_title',
            'content' => $this->page_title
        ]);

        /*
            If a subtitle has been set, add it to $title as a paragraph
            using the p() function in the Php2Html class with a class of 'lead-description'.
         */
        if($this->page_subtitle)
        {
            $title .=  Php2Html::p([
                'class' => 'lead description',
                'content' => $this->page_subtitle
            ]);
        }

        $this->content = $title.$this->content;

        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9 col-xl-10'
        ]);
    } // main_column_medium ()

    /*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        demo_user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
    private function left_Column () {

        $links = array (
            'Dashboard' => array (
                'type' => 'link',
                'href' => '/home',
            ),
            'Users' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Overview' => '/Users',
                    'List' => '/Users/Listing',
                    'Add' => '/Users/Add',
                    'Usergroups' => '/Usergroups',
                    'Activity Types' => '/ActivityType',
                )
            ),
            'Settings' => array (
                'type' => 'link',
                'href' => '/Settings',
            ),
            'Faults' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Overview' => '/Faults',
                    'List' => '/Faults/Listing',
                    'Add' => '/Faults/Add',
                    'Rag Status' => '/Faults/RagStatus',
                )
            ),
            'Systems' => array (
                'type' => 'link',
                'href' => '/Systems',
            ),
            'Categories' => array (
                'type' => 'link',
                'href' => '/Categories',
            ),
            'Utilities' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Blend' => 'Blend',
                    'Borders' => 'Borders',
                    'Colors' => 'Colors',
                    'Contrast' => 'Contrast',
                    'Complement' => 'Complement',
                    'Invert' => 'Invert',
                    'Sizing' => 'Sizing',
                )
            )

        );


        $content = '';

        foreach ($links as $key => $value) {

            $nav_button = '';
            $nav_content = '';


            $params = [
                'content' => $key,
                'class' => 'text-light border-bottom border-light',
            ];

            if($key == $this->menu_category) {
                $params['class'] = 'bg-dark ' . $params['class'];
            }
            if($value['type']=='link') {
                $params['href'] = '/Admin'.$value['href'];
                $content .= Php2Bs::bs_nav_item ([
                    'content' => Php2Bs::bs_nav_link (
                        $params
                    )
                ]);

            }

            if($value['type']=='menu') {
                $params['href'] = '#';
                $params['data_attr'] = [
                    'toggle' => 'collapse',
                    'target' => '#nav-'.$key
                ];
                $params['aria'] = [
                    'controls' => 'nav-'.$key,
                    'expanded' => 'false',
                    'label' => 'Toggle '.$key.' navigation'
                ];


                $children = '';
                foreach ($value['children'] as $menu => $link) {
                    // Remove Link from active
                    $menu_class = ($key == $this->menu_category && $menu == $this->menu_item) ? 'list-group-item-info' : 'list-group-item-action list-group-item-light';
                    $children .= Php2Bs::bs_nav_item ([
                        'content' => Php2Bs::bs_nav_link ([
                            'href' => '/Admin'.$link,
                            'content' => $menu,
                            'class' => $menu_class. ' border-bottom border-dark pl-4'

                        ])
                    ]);
                }

                $menu_class = ($key == $this->menu_category) ? 'show' : '';
                $nav_content .= Php2Html::div ([
                    'id' => 'nav-'.$key,
                    'content' => Php2Bs::bs_nav ([
                        'content' => $children,
                        'class' => 'flex-column'
                    ]),
                    'class' => 'collapse ' . $menu_class

                ]);

                $nav_button = Php2Bs::bs_nav_item ([
                    'content' => Php2Bs::bs_nav_link (
                        $params
                    ).$nav_content
                ]);
                $content .= $nav_button;
            }




        }




        return Php2Bs::bs_column ([
			'content' => Php2Html::div ([
                'id' => 'left-nav',
                'class' => 'collapse docs-menu',
                'content' => Php2Bs::bs_nav ([
                    'content' => $content,
                    'class' => 'flex-column',


                ]),
            ]),
			'id' => 'left',
            'class' => 'col-12 col-md-3 col-xl-2 left-menu bg-secondary',

        ]);
    } // left_Column ()

	/**
	 * Build the <head> section
	 *
	 * Builds the entire <head> tag and includes any global or
	 * page specific css and meta tags.
	 *
	 * @return     string      <head> section
	 */
    private function head ()
	{
		/*
            We build the contents of the <head> gradually so we create a $out
            variable containing the opening tag and concatenate to it as we go along.
         */
		$out = '<head>';

		/*
            Include the <meta> tags

            Each of the meta tags should initially be stored in the meta_tags()
            function in /app/core/Settings.php with a default content to be used
            if an alternative is not set.

            For page specific meta tags, set a key/pairing array in the view as
            $params['meta'] with the name and content of each once you want to
            overwrite.

            You can also set global meta tags manually and this is required for any
            that do not use a name and content combination.
         */
        $out .=  ' <meta charset="utf-8">';

        /*
            As there may be overrides for some of the meta tags set in the page/view, we initially store the default meta tags in a $tags variable so it can be easily manipulated.
         */
        $tags = SiteSettings::meta_tags();

        /*
            If any page-specific meta tags have been passed in, they would have
            been set to $this->meta in the called template file (by default
            /app/core/Templates/Main.php).
            We loop though these and for each one, overwrite the matching tag
            name in $tags.
         */
        if(isset($this->meta))
        {
            foreach ($this->meta as $name => $content) {

                $tags[$name] = $content;
            }
        }

        /*
            Finally, we loop through the tags array and create a meta tag for each one, adding it to the $out variable.
         */
        foreach ($tags as $name => $content) {
            $out .= Php2Html::meta([
                    'name' => $name,
                    'content' => $content
            ])."\n";
        }

		/*
            Set the Page Title

            If the page title has been passed in from the view, show the site name as set in Settings.php followed by a colon and then the page title.
            Otherwise, it just shows the site name.

            You can change this to suit your needs.
         */
		$title = isset($this->page_title) ? SiteSettings::get('site_name') .': '.$this->page_title: SiteSettings::get('site_name');
		$out .=  '<title>' . $title. '</title>';

		// Link the Favicon
		$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

		/*
            Call in the stylesheets

            Again, you can have global style sheets as well as page, specific ones. Wherever they are set, they are called from the css() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full stylesheet link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['css'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/site' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
		$out .= SiteSettings::css('remote/bootstrap/v4');


        // Loop through the page specific styles
        if(isset($this->css))
        {
            foreach ($this->css as $stylesheet) {
                $out .= SiteSettings::css($stylesheet);
            }
        }


        $out .= SiteSettings::css('local/admin');

        // Close the head tag
        $out .=  '</head>';

        // Echo the $out variable
		echo $out;

    } // head()

	/**
	 * Build the required scripts
	 *
	 * Builds the js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts ()
	{
        $out = '';

        /*
            Call in the any scripts

            Again, you can have global scripts as well as page, specific ones. Wherever they are set, they are called from the js() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full script link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['js'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/default' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
         $out .= SiteSettings::js('remote/jquery');
         $out .= SiteSettings::js('remote/popper');
         $out .= SiteSettings::js('remote/bootstrap/v4');
         $out .= SiteSettings::js('remote/font-awesome-5');

        // Loop through the page specific styles
        if(isset($this->js))
        {
            foreach ($this->js as $script) {
                $out .= SiteSettings::js($script);
            }
        }

        $out .= SiteSettings::js('local/default');

        // Echo the $out variable
        echo $out;

    } // scripts()


    public function dropMenus()
 	{
        $out = '';

        $out .= Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => 'Search',
            'class' => 'collapse py-2 bg-secondary text-light border-bottom border-dark',
            'id' => 'nav-search'
       ]);

       $out .= Php2Bs::bs_container ([
           'container_type' => 'fluid',
           'content' => 'User',
           'class' => 'collapse py-2 bg-secondary text-light border-bottom border-dark',
           'id' => 'nav-user'
      ]);

       echo $out;
    }

	/**
	 * Build the top navigation menu
	 *
	 * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
	 * in the required links and dropdowns
	 *
	 * @return string 	nav
	 */
    public function topNav ()
 	{

        $brand = Php2Html::a ([
            'class' => 'navbar-brand',
            'href' => '#',
            'content' => 'UATHUB ADMIN'
        ]);

        $home_button = Php2Html::a ([
            'content' => '<i class="fas fa-home"></i>',
            'id' => 'left',
            'href' => '/',
            'class' => 'text-light p-0 pr-2',
        ]);

        $toggle_button = Php2Html::a ([
            'content' => '<i class="fas fa-search mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#nav-search'
            ],
            'aria' => [
                'controls' => 'nav-search',
                'expanded' => 'false',
                'label' => 'Toggle search navigation'
            ]
        ]);


        $search_button = Php2Html::a ([
            'content' => '<i class="fas fa-bars mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  d-md-none p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#left-nav'
            ],
            'aria' => [
                 'controls' => 'left-nav',
                 'expanded' => 'false',
                 'label' => 'Toggle left navigation'
            ]
        ]);

        $user_button = Php2Html::a ([
            'content' => '<i class="fas fa-user mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#nav-user'
            ],
            'aria' => [
                 'controls' => 'nav-user',
                 'expanded' => 'false',
                 'label' => 'Toggle user navigation'
            ]
        ]);


        $left_buttons = Php2Html::span([
            'content' => $home_button.$search_button.$toggle_button,
            'class' => 'fa-lg mr-auto',
        ]);

        $right_buttons = Php2Html::span([
            'content' => $user_button,
            'class' => 'fa-lg',
        ]);




         $out = Php2Bs::bs_navbar ([
             // Navbar content
                'content' => $brand . $left_buttons . $right_buttons,
                'class' => 'navbar-expand-lg navbar-dark bg-dark text-light invert sticky-top justify-content-start'


         ]);



 		echo $out;
     } // topNav()

	/**
	 * Build footer
	 *
	 * Sets the page footer
	 *
	 * @return string 	footer
	 */
    public function footer ()
	{
        echo Php2Bs::bs_footer ([
            'content' => Php2Bs::bs_container ([
                'container_type' => 'fluid',
                'content' =>  'Place sticky footer content here.',
                'class' => 'text-white',
            ]),
            'class' => 'bg-dark',
        ]);

    } // footer()


}




















<?php

/**
 * Base Template
 *
 * This file contains the core structure and functions for building the template
 * and allows several different versions to built around it. No output is actually
 * made from this file as it only contains functions to help with the template
 * construction.
 *
 * This file should never be called directly, but should be extended from another
 * class that processes the data to display, only using these functions for the
 * core global elements such as the <head> and separate opening and closing <body>
 * tags, along with the global navbar and footer.
 *
 * This means that the class file that extends this only has to deal with the
 * page-specific content and how to lay it out. An example file that extends this
 * one is T_Main.php in this folder.
 *
 * There will be refences to functions core classes within this file so will
 * explain those now.
 *
 * SiteSettings::xxx(yyy)
 * These will be settings for the site that are either stored in the database or
 * in a function in '/app/core/SiteSettings.php'.
 * If it is called as SiteSettings::get(yyy), the 'yyy' will refer to the data in
 * the `setting_name` column of the settings table.
 * Any other calls will be specifiying a function in SiteSettings.php.
 *
 * Php2Html::xxx()
 * This will be used to create a html element and all the functions are contained
 * in '/app/core/Php2Html.php'
 *
 * Php2Bs::xxx()
 * This will be used to create a Bootstrapcomponent and all the functions are
 * contained in '/app/core/Php2Bs.php'
 *
 * For an example of a completely self-enclosed template file look at T_Admin.php
 * in this folder.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */
class T_Base {

	/**
	 * Build the HTML down to the opening body tag and include extra css
     *
     * Creates the opening <doctype> and <html> tags, inserts the <head>
     * tag before finally creating the opening <body> tag. The closing <body>
     * and <html> tags are created in the bodyEnd() function.
     *
     * The <head> is created via the head() function and contains the global
     * css and meta tags as well as and page-specific ones requested when the
     * template was called.
	 *
	 * @return string 					Template to the opening <body> tag
	 */
    public function bodyStart () {

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';

        /*
            Include the <head> section, including any page-specific css, js or meta tags.

            It uses the head() function from within this file, which access various $this variables set in the __construct() in T_Main, passed in via the view, so we do not need to pass any arguments in when calling it.
         */
        $out .= self::head ();

        // Open the body tag

        $out .= '<body class="'.$this->body_class.'">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

	/**
	 * Finish the HTML
	 *
	 * @return string 					Template for the end of the HTML
	 */
    public function bodyEnd () {

		/**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

	/**
	 * Build the <head> section
	 *
	 * Builds the entire <head> tag and includes any global or
	 * page specific css and meta tags.
	 *
	 * @return     string      <head> section
	 */
    private function head () {
		/*
            We build the contents of the <head> gradually so we create a $out
            variable containing the opening tag and concatenate to it as we go along.
         */
		$out = '<head>';

		/*
            Include the <meta> tags

            Each of the meta tags should initially be stored in the meta_tags()
            function in '/app/core/SiteSettings.php' with a default content to be used
            if an alternative is not set.

            For page specific meta tags, set a key/pairing array in the view as
            $params['meta'] with the name and content of each once you want to
            overwrite.

            You can also set global meta tags manually and this is required for any
            that do not use a name and content combination.
         */
        $out .=  ' <meta charset="utf-8">';

        /*
            As there may be overrides for some of the meta tags set in the page/view, we initially store the default meta tags in a $tags variable so it can be easily manipulated.
         */
        $tags = SiteSettings::meta_tags();

        /*
            If any page-specific meta tags have been passed in from the view, they would have
            been set to $this->meta in the called template file (by default
            '/app/core/Templates/Main.php').
            We loop though these and for each one, overwrite the matching tag name in $tags.
         */
        if(isset($this->meta))
        {
            foreach ($this->meta as $name => $content) {

                $tags[$name] = $content;
            }
        }

        /*
            Finally, we loop through the tags array and create a meta tag for each one, adding it to the $out variable.
         */
        foreach ($tags as $name => $content) {
            $out .= Php2Html::meta([
                    'name' => $name,
                    'content' => $content
            ])."\n";
        }

		/*
            Set the Page Title

            If the page title has been passed in from the view, show the site name, set as 'site_name' in the database settings table followed by a colon and then the page title.
            Otherwise, it just shows the site name.

            You can change this to suit your needs.
         */
		$title = isset($this->page_title) ? SiteSettings::get('site_name') .': '.$this->page_title: SiteSettings::get('site_name');
		$out .=  '<title>' . $title. '</title>';

		// Link the Favicon
		$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

		/*
            Call in the stylesheets

            Again, you can have global style sheets as well as page-specific ones. Wherever they are set, they are called from the css() function in '/app/core/SiteSettings.php'.

            These are set in a multidimensional array and return the full stylesheet link as a string. When setting, simply set the path to the stylesheet separated by slashes so 'remote/bootstrap/v4' would return the string at 'remote' => 'bootstrap' => 'v4'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via the view as a $params['css'] array, simply using the path string as outlined above.

            Note that you will need to be careful with the order of these to ensure there are no class name conflicts. As you can see, here we have set 'local/site' after everything else to ensure it is the last one called and therefore takes priority.

            Before anything else, we set any required global third party ones.
         */
		$out .= SiteSettings::css('remote/bootstrap/v4');

        // Loop through the page specific styles

        /*
            If any css requests have been passed in via the view, the __construct() in the file that extends this would have stored it as array in $this->css. If it exists, we loop through it and for each one, retriece the sheet via the css() function in SiteSettings.php.
         */
        if(isset($this->css)) {
            foreach ($this->css as $stylesheet) {
                $out .= SiteSettings::css($stylesheet);
            }
        }

        /*
            Add the main stylesheet last, again using the the css() function in SiteSettings.php.
         */
        $out .= SiteSettings::css('local/site');

        // Close the head tag
        $out .=  '</head>';

        // Echo the $out variable
		echo $out;

    } // head()

	/**
	 * Build the required scripts
	 *
	 * Builds any required js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts () {
        $out = '';

        /*
            Call in the any scripts

            Again, you can have global scripts as well as page-specific ones. Wherever they are set, they are called from the js() function in '/app/core/SiteSettings.php'.

            These are set in a multidimensional array and return the full script link
            as a string. When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4' would return the string at
            'remote' => 'bootstrap' => 'v4'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via the view as a $params['js'] array, simply using the path string as outlined aboveg.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/default' after
            everything else to ensure it is the last one called and therefore takes priority.

            Before anything else, we set any required global third party ones.
         */
         $out .= SiteSettings::js('remote/jquery');
         $out .= SiteSettings::js('remote/popper');
         $out .= SiteSettings::js('remote/bootstrap/v4');
         $out .= SiteSettings::js('remote/font-awesome-5');

         /*
             If any js requests have been passed in via the view, the __construct() in the file that extends this would have stored it as array in $this->js. If it exists, we loop through it and for each one, retriece the sheet via the js() function in SiteSettings.php.
          */
        if(isset($this->js)) {
            foreach ($this->js as $script) {
                $out .= SiteSettings::js($script);
            }
        }

        /*
            Add the default js file last, again using the the js() function in SiteSettings.php.
         */
        $out .= SiteSettings::js('local/default');

        // Echo the $out variable
        echo $out;

    } // scripts()

    /**
	 * Build the top navigation menu
	 *
	 * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
	 * in the required links and dropdowns
	 *
	 * @return string 	nav
	 */
    public function topNav () {
        // Main Site Top Navigation Menu
        $nav_items = [
            'Home' => ['link', '/'],
            'Users' => ['link', '/Users/'],
            'Faults' => ['link', '/Faults/'],
            'Call Log' => ['link', '/CallLog/'],
            '\'One Thing\'' => ['link', '/OneThing/'],
            'Ideas' => ['link', '/Ideas/'],
            'Useful Links' => ['link', '/Links/'],
            'Info' => [
                'dropdown',
                [
                    'Browser Stats' => [
                        'link', '/BrowserStats'
                    ],
                    'Site Root method (Home/Method)' => [
                        'link', '/method'
                    ],

                ],

            ]
        ]; // Info

        $out = '';

        $toggle_button = Php2Html::button ([
            'content' => Php2Html::span ([
                    'content' => '',
                    'class' => 'navbar-toggler-icon'
            ]),
            'class' => 'navbar-toggler navbar-toggler-right',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#main-nav',
            ],
            'aria' => [
                'controls' => 'main-nav',
                'expanded' => 'false',
                'label' => 'Toggle navigation',

            ],
        ]);

         $menu = '';
         foreach ($nav_items as $key => $value)
 		{
 			// 'type' is set as 'link'
            if($value[0] == 'link') {
 				/*
 					Build a <li> with the class of .nav-item
 					Inside this put an <a> with a value of $value[1] (the link)
 					and a display of $key (the link name)
 				 */
                 $params['href'] = $value[1];
                 $params['class'] = 'text-light';
                 $params['content'] = $key;
                 $menu .= Php2Bs::bs_nav_item ([
                     'content' => Php2Bs::bs_nav_link (
                         $params
                     )
                 ]);
            }

 			// 'type' is set as 'dropdown'
             if($value[0] == 'dropdown') {
 				/*
 					Build a <li> with the class of .nav-item dropdown .

 					Inside this, build an <a> with a class of dropdown-toggle. This
 					will then use the Bootstap toggle class.
 					Set the id to the $key (the link name) appended with '_menu'. This
 					will be to target the correct dropdown menu. Also set the display to $key.

 					Build a <div> with the class of .dropdown-menu. Give it an
 					aria-labelledby of $key appended with '_menu' so it matches
 					the <a> that triggers it.

 					Finally, inside the div, loop through the links (stored in $value[1]) and creat an <a> for each one.
 				 */
                  $links = '';
                  foreach ($value[1] as $items => $item)
                  {


                      $links .= Php2Bs::bs_dropdown_item([
							'content' => $items,
                            'href' => $item[1]
                      ]);

                       //$out .= '  <a class="dropdown-item" href="'.$item[1].'">'.$menu.'</a>';
                  }

                 $menu .= Php2Bs::bs_nav_dropdown([

                         'li' => [
                             'class' => 'text-light',
                         ],
                         'a' => [
                             'content' => $key,
                             'id' => $key.'_menu',
                             'class' => 'text-light',
                             'data_attr' => [
                                 'toggle' => 'dropdown',

                             ],
                             'aria' => [
                                 'haspopup' => 'main-nav',
                                 'expanded' => 'true',
                                 'expanded' => 'false',

                             ],
                         ],
                         'menu' => [
                             'content' => $links,
                         ]

                 ]);
             }
         }

         $user = new M_Users();

         if(!$user->isLoggedIn()) {
             $user_button_text = 'Login';
         } else {
             $user_button_text = 'Logout / Profile';
         }
        $nav_params['content'] = Php2Bs::bs_navbar_nav ([
			'content' => $menu.Php2Html::li ([
                'content' => Php2Html::a ([
                    'content' => $user_button_text,
                    'href' => '#',
                    'id' => 'user_dropdown',
                    'class' => 'nav-link text-light dropdown-toggle ',
                    'data_attr' => [
                         'toggle' => 'collapse',
                         'target' => '#user_menu'
                    ],
                    'aria' => [
                         'controls' => 'dropdown-menu',
                         'expanded' => 'false',
                         'label' => 'Toggle user navigation'
                    ]
                ]).'<div id="user_menu" class="dropdown-menu" aria-labelledby="user_dropdown" style="min-width:250px;"><div class="container-fluid">
            '.$this->user_box ().'
          </div></div>',
                'class' => 'nav-item dropdown',
            ])
        ]);
        $nav_params['class'] = '';
        $nav_params['id'] = 'main-nav';


        $navbar_collapse = Php2Bs::bs_navbar_collapse (
            $nav_params
        );




         $out = Php2Bs::bs_navbar ([
            // Navbar content
            'content' => Php2Bs::bs_container ([
                'content' =>  $toggle_button.$navbar_collapse,
                'class' => 'text-white',
                //'type' => 'fluid'
            ]),
            'class' => 'navbar-expand-lg navbar-dark bg-dark invert sticky-top h-1 pl-2 p-md-0'


        ]);

 		echo $out;
     } // topNav()

     /**
      * Basic outputs for test
      *
      * These are just temporary functions to show something in the
      * left and right columns.
      *
      * All will be replaced with something more useful.
      */
     protected function user_box () {
         $model = new M_Users();

         if($model->isLoggedIn()) {

             $model->find(Session::get(SiteSettings::get('session_user_id')));

             $link_array = [
                 'Profile' => [
                     'href' => '/Users/'.$model->data()->username,
                 ],
                 'Edit Details' => [
                     'href' => '/Users/Edit',
                 ]
             ];

             if($model->hasPermission('admin')) {
                 $link_array['Admin Area'] = ['href' => '/Admin'];
             }


             $content = '';
             $content .= Php2Bs::bs_list_group ([
                 'content' => $link_array,
                 'group_type' => 'a',
                 'class' => ' mb-2'
             ]);

             $content .= $model->logoutForm();
         } else {
             $content = $model->loginForm();
         }

         return $content;

     }


	/**
	 * Build footer
	 *
	 * Sets the page footer
	 *
	 * @return string 	footer
	 *
	 * TODO: Finish this off
	 */
    public function footer () {
        $out = Php2Bs::bs_footer ([
            'content' => Php2Bs::bs_container ([
                'content' =>  'Footer content.',
                'class' => 'text-white',
            ]),
            'class' => 'bg-dark',
        ]);
		echo $out;
    } // footer()
}




















<?php

/**
 *  Categories Model
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';


class M_Settings
{
    private
        $_data,
        $_db_table = 'settings',
        $_field,
        $_key,
        $_record,
        $_qry;

    public $_insertID;

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected static function db()
    {
        return  DB::dbConnect();
    } // db()



    public function create ($_params=[]) {

        if (!$this->db()->insert($this->_db_table, $_params)){
            // The insert was unsuccesful
            throw new Exception('There was a problem creating an account!');

            // Flash a generic error message
            $this->crudFlash ('generic_error');
            return false;
        }
        $this->_insertId = $this->db()->insertId();
        return true;

    } // create()


    public function single_form ($_params) {
        /*
            After a failed post, we want to repopulate the form with
            the posted data so the user does not have to fill it all in
            again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'setting_name' => [
                'help_text' => 'The setting name should be logical and describe the setting. To ensure it will be picked up by any functions that call it, it is best to make it all lowercase and seperate words with underscores. The underscores will be replaced with spaces when showing it as a label.'
            ],
            'value' => [
                'help_text' => 'The storted value of the setting. This could be a string, int or short text value for <b>text</b> field types, a long text value or string for <b>text_area</b> and a single character for <b>options</b>.'
            ],
            'field_type' => [
                'help_text' => 'Sets the type of field used when updating. Options are <b>text</b> for simple string or int values, <b>text_area</b> for longer values such as multiple lines/paragaphs and <b>options</b> for selecting one of multiple choices. When choosing the <b>options</b> value, you need to set the Options field below.'
            ],
            'options' => [
                'help_text' => 'When field type is <b>options</b> we show a series of radio buttons so this field contains a jSon string to populate those. {"email": e, "auto": a, "manual": m} would give three radio buttons where the label is the the first part (email/auto/manual) and the value is the second (e/a/m).'
            ],
            'help_text' => [
                'help_text' => 'An explanation of what the setting does. This will be show under the setting on the main update page.'
            ]


        ];

        // Set the details for the submit button based on the version
        if($_params['version'] == 'create') {
            $_button_text = 'Add';
            $_button_name = 'add_setting';

        } else {
            $_button_text = 'Update';
            $_button_name = 'update_setting';
        }
        /*
            We now loop through the form fields array to check for
            validation and data.

            For a fuller explanation on how forms are built, look at
            the userForms() function in app/models/M_Users.

        */
        foreach ($_form_fields as $key => $value) {
            // Check for errors
            if (isset($_params['errors'][$key])) {
                // Errors found for the field so add invalid class
                $_field_data[$key]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$key]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data if an account update has been attempted
            if (Input::exists(['name'=>'update_setting']) && Input::exists($key) && trim(Input::get($key)) !== false) {

                // There is posted data so set that as the value
                $_field_data[$key]['val'] = Input::get($key);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$key]['val'] = $_params['data'][$key];
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$key]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)


        /*
            We now have everything we need so can start building the form.

            We create the content first and then pass it into the form once we have
            all of the fields created.

            To start, we create an empty variable to hold the content and then add
            to it as we go along.
         */
        $content = '';

        // Setting Name
        $default_var = 'setting_name';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_input_text ([
            'required' => '',
            'id' => ucfirst($default_var).'_input',
            'value' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Setting Name


        // Field Type
        $default_var = 'field_type';
        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);

        $options = '';

        if($_params['version'] == 'create') {
            $options .= Php2Html::option ([
                'content' => 'Please Select...',
                'value' => '',
                'is_selected' => false
            ]);
        }

        foreach (['text', 'text_area', 'options', ] as $value) {
            $options .= Php2Html::option ([
                'content' => ucwords(str_replace("_", " ", $value)),
                'value' => $value,
                'is_selected' => (isset($_params['data']['field_type']) && $value == $_params['data']['field_type']) ? true: false,
            ]);
        }

        $input .= Php2Bs::bs_select ([
            'required' => '',
            'content' =>$options,
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'aria' => [
                'label' => ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]);

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }
        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]);  // Field Type


        // Value
        $default_var = 'value';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => '',
            'id' => ucfirst($default_var).'_input',
            'content' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Value


        // Options
        $default_var = 'options';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => '',
            'id' => ucfirst($default_var).'_input',
            'content' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Options

        // Help Text
        $default_var = 'help_text';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => '',
            'id' => ucfirst($default_var).'_input',
            'content' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Help Text

        // Add the button form group
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-12',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => 'float-right',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' =>  $_button_text,
                    'name' => $_button_name
                ]) // Php2Bs::bs_button
            ]) // Php2Bs::bs_form_group
        ]); // Button row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]); //  Php2Html::form
    }

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data () {
        return $this->_data;
    } // data ()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$_record  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record) {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record) {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'setting_name';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));
            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find ()

    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function form($_params=null){

        $data = SiteSettings::get();

        $content = '';
        foreach($data as $key => $value) {

            if ($value->field_type == 'text') {
                $input = Php2Bs::bs_input_text ([
                    'size' => 'sm',
                    'id' => $value->setting_name,
                    'name' => $value->setting_name,
                    'value' => $value->value,
                    'required' => '',
                ]);
            }

            if ($value->field_type == 'text_area') {
                $input = Php2Bs::bs_textarea ([
                    'size' => 'sm',
                    'id' => $value->setting_name,
                    'name' => $value->setting_name,
                    'content' => $value->value,
                    'required' => '',
                ]);
            }

            if ($value->field_type == 'options') {
                $input = '';
                foreach (json_decode($value->options) as $options => $option) {


                    $label_params = [
                        'for' => $value->setting_name.'_'. $option,
                        'content' => ucfirst($options),
                        'class' => 'mt-1'
                    ];

                    $radio_params = [
                        'name' => $value->setting_name,
                        'id' => $value->setting_name.'_'. $option,
                        'value' => $option,
                        'class' => 'mt-3',
                        'required' => '',
                    ];

                    if($option == $value->value) {
                        $radio_params['checked'] = '';
                    }

                    $input .= Php2Bs::bs_custom_radio_wrapper ([
                        'class' => 'd-inline mr-3',
                        'content' =>  Php2Bs::bs_custom_radio (
                            $radio_params
                        ).
                        Php2Bs::custom_control_label (
                            $label_params
                        )
                    ]);
                }
            }

            $help_text = (isset($value->help_text)) ?
            Php2Bs::bs_form_text ([
                'id' => $value->setting_name.'_help',
                'class' => 'col text-muted',
                'content' => $value->help_text
            ]) :
            '';

            $content .= Php2Bs::bs_form_row ([
                'class' => 'border-bottom pb-2 pb-sm-0 mb-1',
                'content' => Php2Bs::bs_col_form_label([
                    'aria' => [
                        'described-by' => $value->setting_name.'_help'
                    ],
                    'size' => 'sm',
                    'for' => $value->setting_name,
                    'class' => 'mb-0 col-sm-3 font-weight-bold ',
                    'content' => Php2Html::a([
                            'content' => ucwords(str_replace("_", " ",$value->setting_name)),
                            'href' => '/Admin/Settings/'.$value->setting_name,
                            'class' => 'text-dark'
                    ])
                ]).
                Php2Html::div([
                    'class' => 'col-sm-9',
                    'content' => $input,
                ]).
                $help_text
            ]);
        }


        $content .= Php2Bs::bs_button ([
            'color' => 'primary',
            'size' => 'sm',
            'button_type' => 'submit',
            'class' => 'float-right',
            'content' => 'Update',
            'name' => 'update_settings'
        ]);

        $text = Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()

    public function messages () {

        // Use 'title' => false, for an alert with no title
        return [
            'create_fail' => [
                'title' => 'Category not created',
                'alert_color' => 'danger'
            ],
            'create_success' => [
                'title' => 'Setting created',
                'alert_color' => 'success',
                'content' => 'The setting has been created.'
            ],
            'update_fail' => [
                'title' => 'Settings not updated',
                'alert_color' => 'danger'
            ],
            'update_success' => [
                'title' => 'Settings updated',
                'alert_color' => 'success',
                'content' => ''
            ],
            'no_change' => [
                'title' => 'Settings not updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.'
            ],
            'not_found' => [
                'title' => 'Settings not found',
                'alert_color' => 'warning',
                'content' => 'That setting does not exist.',
                'dismissible' => false
            ],
            'delete_success' => [
                'title' => 'Setting deleted',
                'alert_color' => 'success',
                'content' => 'The setting has been deleted.',
                'dismissible' => false,
            ]
        ];
    }

    public function update_single($record, $_postdata) {

        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Settings->update_single()';
            }

            return false;
        }

        return true;
    }

    public function update($_postdata) {

        $errors = null;

        foreach ($_postdata as $key => $value) {
            if(!self::db()->query("UPDATE `settings` SET `value` = ? WHERE `setting_name` = '$key'", [$value])) {
                $errors .= $key . ' not updated';
            }
        }

        return $errors;
    }

}





















<?php

/**
 * Users Model
 *
 * Contains the standard functions for data manipulation, as well as the CRUD
 * forms and displays.
 *
 * This model also contains functions relating to subsidiary user functions such
 * as usergroups and permission.
 *
 * Note that Users have a lot more functionality than moss sections so there is
 * a lot more to this one than most models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';

class M_Users
{
    private
        $_data,
        $_db_table = 'users',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the database as well as the Logs
     * core class (/app/core/Logs.php) used to record activity.
     */
    public function __construct() {
        $this->db = DB::dbConnect();
        $this->_logs = new Logs();
    } //__construct ()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
     * Check the user cookie
     *
     * Checks to see if there is a login cookie stored, based on the 'user_cookie'
     * record in the `settings` database table.
     *
     * If a cookie exists, it checks for a matching record in the `login_cookie`
     * table and if one is found, sets the $_SESSION to log the user in. If a
     * cookie exists but no match is found, the cookie is just deleted.
     *
     * @param string $hash The hash value stored in the login cookie table
     */
    public function checkCookie() {

        /*
            We only need to do anything if a cookie exists so we first check that using exists() in /'app/core/Cookie.php' passing the the 'user_cookie' value from the `settings` database table.
         */
        if (Cookie::exists(SiteSettings::get('user_cookie'))) {
            /*
                There is a cookie do we check the `login_cookie` table for any records where the 'hash' column matches the hash in the cookie.
             */
            $hashCheck = $this->db->get('login_cookie', array('hash', '=', Cookie::get(SiteSettings::get('user_cookie'))));

            /*
                If there is a matching record, we can now log the user in.

                We first use the find() function within this class, using the value of the user_id column in the `login_cookie` table as the user reference.
                This will store the users details in $this->data() and we then create two $_SESSION variables, based on names set in the `settings` table in the database, to store the users id as the login reference, and their user group.
                The reason we also store the user group as a $_SESSION is so we do not have to queery the database each time we need to access it.

                If there is no matching record, we simply delete the cookie.
             */
            if ($hashCheck->count()) {
                if ($this->find($hashCheck->first()->user_id)) {
                    Session::put(SiteSettings::get('session_user_id'), $this->data()->id);
                    Session::put(SiteSettings::get('session_user_group'), $this->data()->group);
                }
            } else {
                Cookie::delete(SiteSettings::get('user_cookie'));
            }
        }
    } // checkCookie()

    /**
     * Check the user hash
     *
     * Checks an email/hash combination for a matching value in the user_hash
     * table, returning the true or false depending on whether a match was found.
     *
     * @param  email 	$email 	Users Email address
     * @param  sha256 	$hash  	Stored hash
     * @return int        		Count of returned results
     *
     */
    public function checkUserHash ($email, $hash) {
        if($this->db->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash))->count()) {
            return true;
        }
        return false;
    } // checkUserHash()

    /**
     * Creates a record in the user_hash table
     *
     * Whenever a user has to verify by email, the link they are sent will
     * contain their email address and a hash string that matches a row in the
     * `user_hash` table.
     *
     * This is to ensure a valid request has been used.
     *
     * @param  array 	$_fields 	Email and Hash
     */
    public function createUserHash($_fields) {
        /*
            The fields passed in will be the email address and hash. We also want to enter the time the record was inserted in the 'stamp' column so we create that first.
         */
        $_fields['stamp'] = SiteSettings::current_datetime()->format('Y-m-d H:i:s');

        // Insert into the `user_hash` table
        if (!$this->db->insert('user_hash', $_fields)) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->createUserHash()';
            }
        }
    } // createUserHash()

    /**
     * Create a new user
     *
     * Attempts to create a new user in the 'users' table based on validated
     * $_POST data. Validation should be run before calling this function.

     * Before insertion, we create a new salt to add and then use this to
     * make the posted password more secure. We also add the current date
     * and time as 'joined'.
     *
     * It also sets the id of the inserted record to $this->_insertId a
     * public function that can be called to show the id after insertion.
     *
     * @param  array    $_postdata  $_POST data
     * @return bool                 Success status
     */
    public function create ($_postdata=[]) {
        $_postdata['salt'] = Hash::salt(32);
        $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);
        $_postdata['joined'] = date('Y-m-d H:i:s');

        if (!$this->db->insert($this->_db_table, $_postdata)){
            // The insert was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->create()';
            }
            return false;
        }
        $this->_insertId = $this->db->insertId();
        return true;

    } // create()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
     * Delete a record
     *
     *  Deletes the specified record from $this->_db_table
     *
     * @param  int  $record  Record ID
     */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
		if(!$this->db->delete($this->_db_table, array('id', '=', $record))) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->delete()';
            }

			return false;
		}

        return true;

	} // delete()

    /**
     * Delete record form
     *
     * Simply shows a button to delete the current record. We do not need to pass
     * in any parameters as the user is set in the url.
     *
     */
    public function deleteForm () {

        $content = '';

        $bottom_row = Php2Bs::bs_form_group ([
            'class' => '',
            'content' => Php2Bs::bs_button ([
                'button_type' => 'submit',
                'color' => 'danger',
                'size' => 'sm',
                'class' => 'float-right',
                'content' => 'Delete',
                'name' => 'delete_user'
            ])
        ]); // $bottom_row

        // Wrap whatever we have in $bottom_row in a form row
        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row,
        ]); // Php2Bs::bs_form_row


        // Compile the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

        return $content;
    } // deleteForm ()

    /**
     * Delete the user cookie
     *
     * Deletes the remember me cookie and also removes the record from the
     * `login_cookie` table. The cookie name is based on the name set in
     * 'user_cookie' in the `settings` database table
     *
     * @param  int 	$user 	User ID
     */
    public function deleteCookie() {
        /*
            Delete the record from the `login_cookie` table where the hash column matches the hash in the coookie.
         */
        $this->db->delete('login_cookie', array('hash', '=', Cookie::get(SiteSettings::get('user_cookie'))));

        /*
            Delete the cookie.
         */
        Cookie::delete(SiteSettings::get('user_cookie'));
    } // deleteCookie()

    /**
     * Delete user hash
     *
     * Deletes any records from the 'user_hash' table that match the passed in
     * email address.
     *
     * @param  email  $_email  Email address
     */
    public function deleteUserHash ($_email) {

        if(!self::db ()->delete('user_hash', array('email', '=', $_email))) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->deleteUserHash()';
            }

            return false;
        }
    } // deleteUserHash ()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     * @param  string/email/int 	$group  	User identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record) {
            /*
                A record has been passed in so we now need to check what parameter
                has been used to determine which field we are going to check it
                against in the table.

                For Users, the $_record will either be the id, username or email
                so we do not have to manipulate it at all. There will be some
                occasions where we have to tweak $_record to suit what is stored
                in the database compared to what we can use in a url. Ideally in
                these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as
                usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record) {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = (filter_var($_record, FILTER_VALIDATE_EMAIL)) ? 'email' :   'username';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = $this->db->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    /**
	 * Check if a remember me cookie exists
	 *
	 * Simply checks if a cookie, based on the 'user_cookie' record in the
	 * `settings` database table is stored on the users device, returning a true
	 * or false, using exists() in /'app/core/Cookie.php.
     *
	 * @return boolean Cookie existence
	 */
	public function hasCookie() {
        return (Cookie::exists(SiteSettings::get('user_cookie'))) ? true : false ;
    } // hasCookie()

    /**
     * Check a user has the required permission
     *
     * Each user group can have multiple permissions and these are stored as a
     * json string in the 'permissions' column of the usergroups table. If the
     * required permission is there, it returns true, otherwise it reurns false.
     *
     * For example, if a groups permissions were as follows
     * {"super_admin":0, "admin": 1,"mod":1}
     *
     * hasPermission('super_admin') would return false
     * hasPermission('admin') would return true
     * hasPermission('mod') would return true
     *
     * @param  string  $key The permission name
     * @return boolean      Permission status
     * @example hasPermission('admin')
     */
    public function hasPermission ($key) {
        // Get the user group details for the current user
        $usergroup = $this->db->get(
            'user_groups',
            ['id', '=', Session::get(SiteSettings::get('session_user_group'))]
        );

        // As long as the user group is set, check if that group has the requested permission
        if($usergroup->count()) {
            // Set the permissions of the users group to $permissions array
            $permissions = json_decode($usergroup->first()->permissions, true);

            // Check if the requested permission exists in the array
            if ($permissions[$key] == true) {
                // The permission exists so return true
                return true;
            }
        }
        return false;
    } // hasPermission()

    /**
     * Check if a user is logged in
     *
     * Simply checks for existance of the login $_SESSION variable deined by the
     * 'session_user_id' in the `settings` table in the database.
     * @return boolean Login Status
     */
    public function isLoggedIn() {
        return (Session::exists(SiteSettings::get('session_user_id'))) ? true : false ;
    } // isLoggedIn()

    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing() {
        // Select all records from the database
        $list = $this->db->query('SELECT
        *
        FROM `' . $this->_db_table . '`'
        );

        // Return the results as an array
        return $list->results();
    } // listing()

    /**
     * Show the login form
     *
     * Displays the login form that is both shown from the user box on every page
     * but also the login page at http://yoursite/Login and the admin login page
     * http://yoursite/Admin/Login.
     *
     * One of the things that can be shown on the form is a link to the full
     * login page for help. We do not need this if we are already on that page
     * or in the admin area so we can use the $_params to pass in
     * 'hide_help'=>true if we do not need it.
     *
     * @param  array    $_params    Settings
     * @return 	string 	Login Form
     */
    public function loginForm($_params){

        /*
            To start the form , we create an empty variable to hold the content and then add
            to it as we go along. As it is a small form, we simply build it in a linear fashion.

            For the username and password, we use the input groups from Bootstrap, with the contents set as FontAwesome icons.
         */

        $content = '';
        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],
            'prepend' => [
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],
            'input' => [
                //'class' => 'bg-info',
                'type' => 'text',
                'id' => 'Username',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],
        ]); // #Username


        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],
            'prepend' => [
                'content' => '<i class="fas fa-key fa-sm"></i>',
                'id' => 'password_field'
            ],
            'input' => [
                'type' => 'password',
                'id' => 'Password',
                'name' => 'password',
                'placeholder' => 'Password',
                'aria' => [
                    'label' => 'Password',
                    'describedby' => 'password_field',
                ]
            ],
        ]); // #Password

        /*
            Next we add a checkbox to allow the user to specify whether wants to remain logged in, even when the browser is closed.

            When this is selected, a cookie is stored on the users machine/device that allows the system to recognise them on future visits.
         */
        $content .= Php2Bs::bs_form_check ([
            'label' => [
                'for' => 'Remember',
                'content' => 'Remember Login?',
                'class' => 'mb-0',
            ],
            'checkbox' => [
                'id' => 'Remember',
                'name' => 'remember',
                'class' => 'form-check-input',
            ],
            'outer' => [

            ]
        ]); // #Remember

        /*
            If we are not in the admin area and have not specifed that we want the link to the full login/help page to be show, we add it to $content.
         */
        if(!isset($_form_data['admin']) && !isset($_form_data['hide_help'])) {
            $content .= Php2Html::a ([
                'content' => 'Login Help',
                'href' => '/Login/'
            ]);
        }

        /*
            The last thing that we add to content is the submit button.
         */
        $content .= Php2Bs::bs_button ([
            'button_type' => 'submit',
            'color' => 'primary',
            'size' => 'sm',
            'class' => 'float-right',
            'content' => 'Login',
            'name' => 'login'
        ]);

        /*
            Finally, we pass whatever is stored in $content, into a form, along with a method of post. There is no need to set action as we are posting back to the same page.

            We simply return the form.
         */
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

    } // loginForm()

    /**
     * Show the logout form
     *
     * Displays the logout form that is both shown from the user box on every page
     * when a user is logged in and is simply a single button, created in the
     * same way as the submit button for the login form.
     *
     * @return 	string 	Logout Form
     */
    public function logoutForm() {

        /*
            Create the button.
         */
        $content = Php2Bs::bs_button ([
            'button_type' => 'submit',
            'color' => 'primary',
            'size' => 'sm',
            'class' => 'btn-block',
            'content' => 'Logout',
            'name' => 'logout'
        ]);

        /*
            Return the form with the button passed in. There is no need to set action as we are posting back to the same page.
         */
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

    } // loginForm()

    /**
     * Set messages to be displayed
     *
     * An array of messages relating to the model that will be shown as a Bootstrap
     * alert following form posts or to show errors. This can either be retieved
     * as the entire array (by ommitting the $msg parameter), or individually by
     * passing in a key such as messages('already_verified').
     *
     * For an explanation on how the messages work, please refer to
     * '/src/functions/show_page_alerts.php'.
     *
     * @param  string $msg  Optional key to retreive a single message
     * @return array        Either a single element or all
     */
    public function messages ($msg=null) {
        $array = [
            'account_update_no_change' => [
                'title' => 'Account Not Updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.',
            ],
            'account_update_success' => [
                'title' => 'Account Updated',
                'alert_color' => 'success',
                'content' => 'Your account has been updated.',
            ],
            'already_verified' => [
                'title' => 'Account Already Verified',
                'alert_color' => 'info',
                'content' => 'The account associated with that email address has already bee verified.',
                'dismissible' => false,
            ],
            'incorrect_hash' => [
                'title' => 'Incorrect Link',
                'alert_color' => 'danger',
                'content' => 'The details provided did not match that account.<br>Please use the link provided in your registration email or click the link below to send another.<br>{{alert_link}}',
            ],
            'login_banned' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you are banned.',
                'alert_color' => 'info',
            ],
            'login_empty_fields' => [
                'title' => 'Login failed',
                'content' => 'Both fields must be filled in.',
                'alert_color' => 'danger',
            ],
            'login_not_found' => [
                'title' => 'Login failed',
                'content' => 'The user was not found.',
                'alert_color' => 'info',
            ],
            'login_not_pw' => [
                'title' => 'Login failed',
                'content' => 'The password was incorrect.',
                'alert_color' => 'danger',
            ],
            'login_unverified' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you have not verified your account. Please check your email for the verification link.',
                'alert_color' => 'info',
            ],
            'not_found' => [
                'title' => 'User not found',
                'content' => 'The User could not be found. ',
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'register_success_auto' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and you can now log in. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_success_email' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created. You will receive an email containing a link to complete the registration. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_success_manual' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and is awaiting authorisation. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_validation' => [
                'title' => 'Registration unsuccesful',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],
            'resend_email' => [
                'title' => 'Email sent',
                'content' => 'A new link to verify your account has been sent.',
                'dismissible' => false,
            ],
            'update_validation_failed' => [
                'title' => 'Update unsuccesful',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],








            'admin_not_found' => [
                'title' => 'User not found',
                'content' => 'The User could not be found. '
                . Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Users/Listing']),
                'alert_color' => 'info',
                'dismissible' => false,
            ],







            'send_link_fail' => [
                'title' => 'Link not sent',
                'alert_color' => 'danger',
                'content' => 'Please enter something to search for.'
            ],
            'pw_email_sent' => [
                'title' => 'Email sent',
                'alert_color' => 'success',
                'content' => [
                    'The email has been sent to the account matching the details. Please click on the link in it to reset your password.',
                    ' If you do do receive it, check your spam or junk folders. Otherwise, <a class="alert-link" href="/Members/ResetPassword">try again</a>..']
            ],
            'hash_fail' => [
                'title' => 'Incorrect Parameters',
                'alert_color' => 'warning',
                'content' => 'We could not recognise the details. Please use the link from the email you received or enter your username, email or user id below to send another.'
            ],

            'admin_create_success' => [
                'title' => 'Account Created',
                'alert_color' => 'success',
                'content' => 'The account has been created.',
            ],

            'pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'Your password has been updated.',
            ],
            'admin_pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'The password has been updated.',
            ],


            'admin_account_delete_success' => [
                'title' => 'Account Deleted',
                'alert_color' => 'success',
                'content' => 'The account has been deleted.',
                'dismissible' => false,
            ],
            'admin_account_update_success' => [
                'title' => 'Account Updated',
                'alert_color' => 'success',
                'content' => 'The account has been updated.',
            ],

            'incorrect_verify_link' => [
                'title' => 'Incorrect Link',
                'alert_color' => 'success',
                'content' => ['The details provided did not match any accounts.','Please use the link provided in your registration email.'],
            ],
            'account_verified' => [
                'title' => 'Account Verified',
                'alert_color' => 'success',
                'content' => ['content'=>'Your account has been verified.','You can now log in using the details you used to register.',Php2Html::a(['content'=>'Home', 'href'=>'/'])],
                'dismissible' => false,
            ],
            'admin_user_unverified' => [
                'title' => 'Account not verified',
                'alert_color' => 'warning',
                'content' => '',
                'dismissible' => false,
            ],
            'admin_user_banned' => [
                'title' => 'Account banned',
                'alert_color' => 'danger',
                'content' => '',
                'dismissible' => false,
            ]
        ];

        /*
            If a message key has been passed in, just return that element, otherwise return the whole array.
         */
        if($msg) {
            return $array[$msg];
        } else {
            return $array;
        }
    } // messages()

    /**
     * Get the total most recent record
     *
     * To get the latest record, we run a select query on $this->_db_table,
     * ordering by the most recent joined date and limiting to just the first
     * (most recent) record.
     *
     * @return int 	    Count of rows
     */
    public function mostRecent() {
        // Select the most recent record from the database
        $_qry  =  $this->db->query('SELECT * FROM '.$this->_db_table .' ORDER BY `joined` DESC LIMIT 1');

        // Return details of the record
        return $_qry->first();
    } // mostRecent()

    /**
     * Set the user cookie
     *
     * Sets a cookie when a user selects 'Remember me' on the login form.
     *
     * The cookie is stored with the name set in 'user_cookie' in the `settings`
     * database table and contains a unique hash with an expiry based on what is
     * set as 'cookie_expiry in the `settings` database table.
     *
     * A corresponding record is placed in the `login_cookie` database table with
     * the hash and the users id.
     *
     * @param string $hash The hash value stored in the login cookie table
     */
    public function setCookie() {
        /*
            Create a new hash to store in the cookie using the unique() function in '/app/core/Hash.php'.
         */
        $_hash = Hash::unique();

        /*
            Check to see if this user already has a login hash. If there is, something is wrong with logouts, but all we will do is just re-use those details.
         */
        $hashCheck = $this->db->get('login_cookie', array('user_id', '=', $this->data()->id));

        /*
            If there is no existing record, we add a new one to the `login_cookie` table, otherwise we simply use the hash already stored for that user in the `login_cookie` table.
         */
        if (!$hashCheck->count()) {
            $this->db->insert('login_cookie', array(
                'user_id' => $this->data()->id,
                'hash' => $_hash
            ));
        } else {
            $_hash = $hashCheck->first()->hash;
        }

        /*
            Set the cookie using the put() function in '/app/core/Cookie.php'.
         */
        Cookie::put(SiteSettings::get('user_cookie'), $_hash, SiteSettings::get('cookie_expiry'));
    } // setCookie()

    /**
     * Attempt a login
     *
     * Takes the $_POST data from the login form and checks the information
     * against the `users` table in the database.
     *
     * If a login attempt fails, it also stores the url the request was made
     * from before redirrecting to the full login page. On successful login from
     * there, the user is return to the page from which they made the original
     * request.
     *
     * If a login is succesful it enters a record into the activity table using
     * logout_success() function in the Logs core class.
     *
     * @return Session/Cookie Login status and attempt information
     */
    public function tryLogin() {

        /*
            If we have a failed attempt at a login, followed by a succesfule one
            from the full login page, we want to take the user back to the page
            that they made the original attempt.

            To do this, when a login is attempted, if $_SESSION['refer_page']
            does not already exist and we are NOT on the full login page, we
            we set it with the current URL to redirect back to.
         */
        if (!Session::exists('refer_page') && $_SERVER['REQUEST_URI'] !== '/Login/') {
            Session::put('refer_page', $_SERVER['REQUEST_URI']);
        }

        /*
            We check the login attempt in stages as there are certain things that will mean a failure so we check those before we attempt to process anything.

            As soon as anything fails, we set the failure details as a session and redirect to the full login page. We also set a login failed record to the activity table via login_fail() in the Logs core class, set in the __construct() of this file to $this->_logs.
         */

        // Check if both fields have been filled
        if (!Input::get('username')|| !Input::get('password')) {
            // At least one field is empty so fail
            $this->_logs->login_fail([
                'user' => (!empty(Input::get('username'))) ? Input::get('username') : 'unknown',
                'reason' => 'empty_field'
            ]);
            Session::put('message',$this->messages('login_empty_fields'));
            Redirect::to('/Login/');
        } else {
            // Both fields have been filled so check that the username exists
            if (!$this->find (Input::get('username'))) {
                // The username does not exist so fail
                $this->_logs->login_fail([
                    'user' => Input::get('username'),
                    'reason' => 'user_not_found'
                ]);
                Session::put('message',$this->messages('login_not_found'));
                Redirect::to('/Login/');
            } else {
                // The username does exist check they are allowed to login
                if($this->data()->status == '0') {
                    // The user has not verified so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_unverified'
                    ]);
                    Session::put('message',$this->messages('login_unverified'));
                    Redirect::to('/Login/');
                }

                if($this->data()->status == '-1') {
                    // The user is banned so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_banned'
                    ]);
                    Session::put('message',$this->messages('login_banned'));
                    Redirect::to('/Login/');
                }

                /*
                    If we have got this far, the user exists, is verified and is not banned, so are allowed to login.

                    We check the users password from the database against a string created using the posted password and the users salt from the database, via the make() function in core/Hash.php.
                 */
                if ($this->data()->password === Hash::make(Input::get('password'), $this->data()->salt)) {
                    /*
                        The password is correct for the user so log them in by
                        setting their id to the login session, as set in members()
                        in core/Settings.php
                     */
                    Session::put(SiteSettings::get('session_user_id'), $this->data()->id);
                    Session::put(SiteSettings::get('session_user_group'), $this->data()->group);

                    // Enter the login success record into the 'activity' table.
                    $this->_logs->login_success();

                    // If the user has ticked the 'Remember Me' box, store a login cookie.
                    if (Input::exists(['name'=>'remember'])) {
                        $this->setCookie();
                    }

                    /*
                        If we are on the full login page and the original request
                        came from any page another page, send them back there.

                        If they started on the full login page, send them to the
                        home page.
                     */
                    if($_SERVER['REQUEST_URI'] == '/Login/') {
                        if(Session::exists('refer_page')) {
                            Redirect::to(Session::get('refer_page'));
                        } else {
                            Redirect::to('/home');
                        }
                    }
                } else {
                    // The password is incorrect so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'incorrect_pw'
                    ]);
                    Session::put('message',$this->messages('login_not_pw'));
                    Redirect::to('/Login/');
                } // password check
            } // user exists
        } // username and password filled
    }// tryLogin()

    /**
     * Attempt a logout
     *
     * Simply deletes all existing $_SESSION variables and cookies relating to
     * the current user and and enters it into the activity table using
     * logout_success() function in the Logs core class. We call this first as
     * we need the $_SESSION data to create the record.
     *
     * @return Session/Cookie Login deletion
     */
    public function tryLogout() {

        // Enter a record in the activity table
        $this->_logs->logout_success();

        // Delete the users $_SESSION data
        Session::delete(SiteSettings::get('session_user_id'));
        Session::delete(SiteSettings::get('session_user_group'));

        // If a login cookie is set, delete that as well
        if($this->hasCookie()) {
            $this->deleteCookie();
        }
    } // tryLogout()

    /**
     * Update a user
     *
     * Updates a users details in the 'users' table based on validated
     * $_POST data. Validation should be run before calling this function.
     * @param  int      $record     User ID
     * @param  array    $_postdata  $_POST data
     * @return bool                 Success status
     */
    public function update($_record, $_postdata) {
        if (!$this->db->update($this->_db_table, $_record, $_postdata)) {
            // The update was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->update()';
            }
            return false;
        }
        return true;
    } // update

    /**
     * User form
     *
     * Single function to control both the registration and edit user forms in
     * the front end and admin area.
     *
     * Several parts of this form get hidden depending on parameters passed in.
     *
     * The parameters that can be used are
     * 'errors' an array errored field names and error messagesfollowing a failed
     * post attempt.
     * 'version' whether we are in create mode or edit mode.
     * 'area' shows which part of the site we are on where 'user' refers to front
     * end and 'admin' refers to backend.
     * 'data' will contain the user information in edit mode.
     *
     * @param  array    $_params    Version, area and error details
     * @return string               User create/edit form
     */
    public function userForm ($_params) {

        /*
            After a failed post, want to repopulate the form with
            the posted data so the user does not have to fill it all in again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'username', 'email', 'firstname', 'lastname'
        ];

        /*
            If we are in create mode we need the password fields so add those to $_form_fields. If we are in the front end, we also need the terms added.
         */
        if($_params['version'] == 'create') {
            $_form_fields[] = 'password';
            $_form_fields[] = 'confirm_password';

            if($_params['area'] == 'user') {
                $_form_fields[] = 'terms';
            }
        }

        /*
            We now loop through the form fields array to check for validation
            and data.

            First we check to see if there is a matching value in the 'errors'
            parameter passed in to the function. If there is we set the class
            for that field in $_field_data to 'is-invalid'. If there is no
            matching value, if there is any post data, we assume it must have
            been succesful so set the class to 'is-valid', otherwise we just
            leave it blank.

            Then we check for any posted data, from a failed form submit. If
            there is a match, we set it to the 'val' for that field in
            $_field_data. If there is no match, we check to see if a record has been passed in via the 'data' parameter passed in to the function (create mode).
            Again, if there is a match, we add that to 'val', otherwise we are left
            with nothing to use as 'val' so leave it blank.

            When creating the actual input for the field, we add anything in 'class'
            to the input class="" and the 'val' to the value="".
        */
        foreach ($_form_fields as $value) {
            // Check for errors
            if (isset($_params['errors'][$value])) {
                // Errors found for the field so add invalid class
                $_field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data if an account update has been attempted
            if (Input::exists($value) && trim(Input::get($value)) !== false) {

                // There is posted data so set that as the value
                $_field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$value]['val'] = $_params['data']->$value;
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$value]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        /*
            We now have everything we need so can start building the form.

            We create the content first and then pass it into the form once we have
            all of the fields created.

            To start, we create an empty variable to hold the content and then add
            to it as we go along.
         */
        $content = '';

        // Add the Username and Email form row
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            # Username
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Username',
                    'content' => 'Username',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Username',
                    'name' => 'username',
                    'placeholder' => 'Username',
                    'class' => $_field_data['username']['class'],
                    'value' => $_field_data['username']['val'],
                    'aria' => [
                        'describedby' => 'Username'
                    ],
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Email
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Email',
                    'content' => 'Email',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_email ([
                    'id' => 'Email',
                    'name' => 'email',
                    'placeholder' => 'Email',
                    'class' => $_field_data['email']['class'],
                    'value' => $_field_data['email']['val'],
                    'aria' => [
                        'describedby' => 'Email'
                    ],
                ]) // Php2Bs::bs_input_email
            ]) // Php2Bs::bs_form_group
        ]); // Username and password row

        // First and Last Names Row
        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Firstname
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Firstname',
                    'content' => 'Firstname',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Firstname',
                    'name' => 'firstname',
                    'placeholder' => 'Firstname',
                    'class' => $_field_data['firstname']['class'],
                    'value' => $_field_data['firstname']['val'],
                    'aria' => array (
                        'describedby' => 'Firstname'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Lastname
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Lastname',
                    'content' => 'Lastname',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Lastname',
                    'name' => 'lastname',
                    'placeholder' => 'Lastname',
                    'class' => $_field_data['lastname']['class'],
                    'value' => $_field_data['lastname']['val'],
                    'aria' => array (
                        'describedby' => 'Lastname'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
        ]); // First and last names row

        // Password Row - only if we are in create mode
        if($_params['version'] == 'create') {
            // Password Row
            $content .= Php2Bs::bs_form_row ([
                //'class' => '',
                'content' =>
                # Password
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Password',
                        'content' => 'Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .Php2Bs::bs_input_password ([
                        'id' => 'Passsword',
                        'name' => 'password',
                        'placeholder' => 'Passsword',
                        'class' => $_field_data['password']['class'],
                        'value' => $_field_data['password']['val'],
                        'aria' => [
                            'describedby' => 'Password'
                        ],
                    ]) // password
                ]) // Php2Html::div.form-group
                # Confirm_Password
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Confirm_Password',
                        'content' => 'Confirm Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                        'id' => 'Confirm_Password',
                        'name' => 'confirm_password',
                        'placeholder' => 'Confirm Password',
                        'class' => $_field_data['confirm_password']['class'],
                        'value' => $_field_data['confirm_password']['val'],
                        'aria' => [
                            'describedby' => 'Confirm_Password'
                        ],
                    ]) // Php2Bs::bs_input_password
                ]) // Php2Bs::bs_form_group
            ]); // Php2Bs::bs_form_row
        } // Password row

        /*
            If we are in edit mode in the admin area, we can also change the
            usergroup and the users status (active, banned, unverified) from
            the same form so we have to add them to $content.

            We create them individually as  $group_select and $status_select
            before passing them into the form.
         */
        if($_params['version'] == 'edit' && $_params['area'] == 'admin') {

            // Open up the Usergroups model
            $groups = new M_Usergroups ();

            /*
                Create an empty $options variable to hold the contents of the
                select menu that we will use to choose a group.
             */
            $options = '';

            /*
                Loop through the list of usergroups and for each one, create
                and <option> tag to go inside the select menu and add it
                to $content.
             */
            foreach ($groups->listing() as $key => $value) {
                $options .= Php2Html::option ([
                    'content' => $value->group_name,
                    'value' => $value->id,
                    'is_selected' => ($value->id == $_params['data']->group) ? true: false,
                ]);
            }

            /*
                Create the select menu, using the $options variable and
                assign it to $group_select.
             */
            $group_select = Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'GroupName',
                'name' => 'group'
            ]);

            /*
                We now do exactly the same for the $status_select, except
                that the listing is a hand built array that we create
                directly in the foreach
             */
            $options = '';
            foreach (['-1' =>'Banned', '0' => 'Unverified', '1' => 'Active'] as $key => $value) {

                $options .= Php2Html::option ([
                    'content' => $value,
                    'value' => $key,
                    'is_selected' => ($key == $_params['data']->status) ? true: false,
                ]);
            }

            $status_select =  Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'StatusName',
                'name' => 'status'
            ]);

            // Now add both dropdowns to the form
            $content .= Php2Bs::bs_form_row ([
                'content' =>
                # User Group
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'GroupName',
                        'content' => 'User Group',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .$group_select
                ]) // Php2Html::div.form-group

                # Status
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'StatusName',
                        'content' => 'Status',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .$status_select
                ]) // Php2Bs::bs_form_group
            ]); // Php2Bs::bs_form_row
        } // Password row

        /*
            If we are in front end create mode, we require both the Accept Terms
            checkbox as well as the submit button, otherwise we just need the
            submit button.

            As we do not know if we will need both, we create an empty $bottom_row
            variable and add what it requires, before passing it into a form row.
         */
        $bottom_row = '';

        /*
            If we are in front end create mode, we need to create a 'terms' checkbox an its parameters.
         */
        if(in_array("terms", $_form_fields)) {
            // Create the parameters for the checkbox
            $checkbox_array = [
                'id' => 'Terms',
                'name' => 'terms',
                'class' => $_field_data['terms']['class'],
                'aria' => [
                    'describedby' => 'Terms'
                ],
            ];

            // If it was checked on a previous post attempt, re-check it
            if($_field_data['terms']['val']) {
                $checkbox_array['checked'] = '';
            } // if($_field_data['terms']['val'])

            // Create the terms form group with the parameters set above
            $bottom_row .= Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' =>
                # Terms
                Php2Bs::bs_form_check ([
                    'label' => [
                        'for' => 'Terms',
                        'content' => 'Accept Terms Below',
                    ],
                    'checkbox' => $checkbox_array,
                    'outer' => [

                    ]
                ])
            ]); // Php2Bs::bs_form_group
        } // if(in_array("terms", $_form_fields))

        /*
            The submit button also comes in a form-group but as we always want it to
            appear on the right, we give it a class of 'col-md-6' when the terms
            form-group is also required (that also uses 'col-md-6'), and 'col-12'
            when we are showing just the button.

            We set this to $button_group_size, based on whether or not 'terms'
            has been added to the $_form_fields array.
         */
        $button_group_size = (in_array("terms", $_form_fields)) ? 'col-md-6': 'col-12';

        // Set the details for the submit button based on the version
        if($_params['version'] == 'create') {
            $button_name = 'register';
            $button_text = 'Register';

        } else {
            $button_name = 'update_user';
            $button_text = 'Update';
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row.Php2Bs::bs_form_group ([
                'class' => $button_group_size,
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'color' => 'primary',
                    'size' => 'sm',
                    'class' => 'float-right',
                    'content' => $button_text,
                    'name' => $button_name
                ]) // Php2Bs::bs_button
            ])// Php2Bs::bs_form_group
        ]); // Bottom row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

    } // userForm ()

    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being processed.
     *
     * See the '/app/core/Validate.php' class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'username' => [
                'required' => true,
                'min' => 6,
                'max' => 20,
                'preg_match' => '/^[a-zA-Z]\w*[a-zA-Z0-9_]$/',
                'unique' => 'users',
                'error_text' => 'Usernames must be between 6 and 20 characters, only using letters, numbers and underscores.'
            ],
            'email' => [
                'required' => true,
                'filter' => "email",
                'unique' => 'users',
                'error_text' => 'You must use a valid and accesible email address.'
            ],
            'firstname' => [
                'required' => true,
            ],
            'lastname' => [
                'required' => true,
            ],
            'password' => [
                'required' => true,
                'min' => 6
            ],
            'confirm_password' => [
                'required' => true,
                'matches' => 'password',
                'error_text' => 'Confirm must match'
            ],
            'terms' => [
                'required' => true,
                'error_text' => 'You must read and accept the terms and conditions'
            ]
        ];
    } // validation_rules()



####################################################



    /**
	 *	Change a users password
	 *
	 *	Creates a new salt and hashed password and updates a users
	 *	record with them.
	 *
	 *	@param 	int		$user		User ID
	 **/
	public function changePassword ($user) {
		// We always use validation as an object so we do this for constency
		$_validate = (object)array();

		// Place the $_POST data into a variable that will get manipulated.
		$_postdata = $_POST;

		/*
			The forms all have .req-token to prevent double-posting on page
			refresh. This generates a new $_SESSSION['token'] value and also
			adds a hidden form element containing the $_SESSSION['token'].

			We need to check that the posted token matches the current $_SESSSION['token']
			and only proceed if it does.
		 */
		if(!Token::check(Input::get('token'))) {
    		// The token check failed so set the errors to 'token'
    		$_validate->error = 'token';

    	} else {
			/*
				The token check is succesful, so we again unset that from the $_postdata array, along with the
				submit button, to ensure we only have insert data left.
			*/
			unset($_postdata->token);
			unset($_postdata->reset_password_submit);

			/*
				We now attempt to validate the contents of $_postdata.

				The validation for this form is passed directly into Form_Functions::postValidate(), along with the $_postdata and
				this checks each field in $_postdata against it's relevant validation if it exists.

				The function returns a boolean 'status' as to  whether validation was passed. If validation failed, it will also contain any
				validation errors that have been generated.
			 */
			$_validate = Form_Functions::postValidate($_postdata,
			array (
			    'password' => [
					'validation' => [
					    'required' => true,
					    'min' => 6
					],
				],
			    'confirm_password' => array(
				'type' => 'password',
				'error' => 'You must enter a confirmation password that matches the password',
				'validation' => array(
				    'required' => true,
				    'matches' => 'password'
				),
			    ))
			);

			if($_validate->status)
			{
				// Create a new salt
				$salt = Hash::salt(32);

				/*
					The original $_postdata -> password cannot be entered as it is a raw string of readable data.

					We replace this with a hashed password, generated using the salt we just created and also create
					a new element in $_postdata with the salt as when logging in, we will need the updated salt to match
					the stored, hashed, password.
				*/
				$_postdata = array(
				'password' => Hash::make(Input::get('password'), $salt),
				'salt' => $salt
				);

				// Now we have the correct $_postdata so use quickUpdate() to process it.
				$this->quickUpdate($user, $_postdata);
			}
		}

		// Return any errors
		return (isset($_validate->error)) ? $_validate->error : false ;
    } // changePassword()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordForm($_form_data=[]){

        /*
            After a failed post, want to repopulate the form with
            the posted data so the user does not have to fill it all in again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'password', 'confirm_password'
        ];

        foreach ($_form_fields as $value) {
            // Check for errors
            if (isset($_form_data['errors'][$value])) {
                // Errors found for the field so add invalid class
                $_field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data
            if (Input::exists($value)) {
                // There is posted data so set that as the value
                $_field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_form_data['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$value]['val'] = $_form_data['data']->$value;
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$value]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)


        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Password
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Password',
                    'content' => 'Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                    'id' => 'Passsword',
                    'name' => 'password',
                    'placeholder' => 'Passsword',
                    'class' => $_field_data['password']['class'],
                    'value' => $_field_data['password']['val'],
                    'aria' => [
                        'describedby' => 'Password'
                    ],
                ]) // password
            ]) // Php2Html::div.form-group
            # Confirm_Password
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Confirm_Password',
                    'content' => 'Confirm Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
            .Php2Bs::bs_input_password ([
                    'id' => 'Confirm_Password',
                    'name' => 'confirm_password',
                    'placeholder' => 'Confirm Password',
                    'class' => $_field_data['confirm_password']['class'],
                    'value' => $_field_data['confirm_password']['val'],
                    'aria' => [
                        'describedby' => 'Confirm_Password'
                    ],
                ]) // Php2Bs::bs_input_password
            ]) // Php2Bs::bs_form_group
        ]); // Php2Bs::bs_form_row

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Reset',
            'name' => 'reset_password'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordLinkForm($_form_data=[]){
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-2'
            ],

            'prepend' => [
                'class' => '',
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],

            'input' => [
                'class' => '',
                'type' => 'text',
                'id' => 'Username',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],

        ]); // Php2Html::div.form-group

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Send Email',
            'name' => 'send_reset_email'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()


    public function sendPasswordLinkMail ($email, $hash) {
        // Insert the email and has as a record in user_hash
        try {
            SendMail::sendPasswordLink($email, $hash);
        } catch(Exception $e) {
        die();
        }

    } // sendVerifyMail()



}




















<?php

/**
 *  Categories Model
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';


class M_Settings
{
    private
        $_data,
        $_db_table = 'settings',
        $_field,
        $_key,
        $_record,
        $_qry;

    public $_insertID;

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected static function db()
    {
        return  DB::dbConnect();
    } // db()



    public function create ($_params=[]) {

        if (!$this->db()->insert($this->_db_table, $_params)){
            // The insert was unsuccesful
            throw new Exception('There was a problem creating an account!');

            // Flash a generic error message
            $this->crudFlash ('generic_error');
            return false;
        }
        $this->_insertId = $this->db()->insertId();
        return true;

    } // create()


    public function single_form ($_params) {
        /*
            After a failed post, we want to repopulate the form with
            the posted data so the user does not have to fill it all in
            again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'setting_name' => [
                'help_text' => 'The setting name should be logical and describe the setting. To ensure it will be picked up by any functions that call it, it is best to make it all lowercase and seperate words with underscores. The underscores will be replaced with spaces when showing it as a label.'
            ],
            'value' => [
                'help_text' => 'The storted value of the setting. This could be a string, int or short text value for <b>text</b> field types, a long text value or string for <b>text_area</b> and a single character for <b>options</b>.'
            ],
            'field_type' => [
                'help_text' => 'Sets the type of field used when updating. Options are <b>text</b> for simple string or int values, <b>text_area</b> for longer values such as multiple lines/paragaphs and <b>options</b> for selecting one of multiple choices. When choosing the <b>options</b> value, you need to set the Options field below.'
            ],
            'options' => [
                'help_text' => 'When field type is <b>options</b> we show a series of radio buttons so this field contains a jSon string to populate those. {"email": e, "auto": a, "manual": m} would give three radio buttons where the label is the the first part (email/auto/manual) and the value is the second (e/a/m).'
            ],
            'help_text' => [
                'help_text' => 'An explanation of what the setting does. This will be show under the setting on the main update page.'
            ]


        ];

        // Set the details for the submit button based on the version
        if($_params['version'] == 'create') {
            $_button_text = 'Add';
            $_button_name = 'add_setting';

        } else {
            $_button_text = 'Update';
            $_button_name = 'update_setting';
        }
        /*
            We now loop through the form fields array to check for
            validation and data.

            For a fuller explanation on how forms are built, look at
            the userForms() function in app/models/M_Users.

        */
        foreach ($_form_fields as $key => $value) {
            // Check for errors
            if (isset($_params['errors'][$key])) {
                // Errors found for the field so add invalid class
                $_field_data[$key]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$key]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data if an account update has been attempted
            if (Input::exists(['name'=>'update_setting']) && Input::exists($key) && trim(Input::get($key)) !== false) {

                // There is posted data so set that as the value
                $_field_data[$key]['val'] = Input::get($key);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$key]['val'] = $_params['data'][$key];
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$key]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)


        /*
            We now have everything we need so can start building the form.

            We create the content first and then pass it into the form once we have
            all of the fields created.

            To start, we create an empty variable to hold the content and then add
            to it as we go along.
         */
        $content = '';

        // Setting Name
        $default_var = 'setting_name';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_input_text ([
            'required' => '',
            'id' => ucfirst($default_var).'_input',
            'value' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Setting Name


        // Field Type
        $default_var = 'field_type';
        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);

        $options = '';

        if($_params['version'] == 'create') {
            $options .= Php2Html::option ([
                'content' => 'Please Select...',
                'value' => '',
                'is_selected' => false
            ]);
        }

        foreach (['text', 'text_area', 'options', ] as $value) {
            $options .= Php2Html::option ([
                'content' => ucwords(str_replace("_", " ", $value)),
                'value' => $value,
                'is_selected' => (isset($_params['data']['field_type']) && $value == $_params['data']['field_type']) ? true: false,
            ]);
        }

        $input .= Php2Bs::bs_select ([
            'required' => '',
            'content' =>$options,
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'aria' => [
                'label' => ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]);

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }
        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]);  // Field Type


        // Value
        $default_var = 'value';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => '',
            'id' => ucfirst($default_var).'_input',
            'content' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Value


        // Options
        $default_var = 'options';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => '',
            'id' => ucfirst($default_var).'_input',
            'content' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Options

        // Help Text
        $default_var = 'help_text';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => '',
            'id' => ucfirst($default_var).'_input',
            'content' => $_field_data[$default_var]['val'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Help Text

        // Add the button form group
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-12',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => 'float-right',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' =>  $_button_text,
                    'name' => $_button_name
                ]) // Php2Bs::bs_button
            ]) // Php2Bs::bs_form_group
        ]); // Button row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]); //  Php2Html::form
    }

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data () {
        return $this->_data;
    } // data ()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$_record  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record) {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record) {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'setting_name';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));
            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find ()

    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function form($_params=null){

        $data = SiteSettings::get();

        $content = '';
        foreach($data as $key => $value) {

            if ($value->field_type == 'text') {
                $input = Php2Bs::bs_input_text ([
                    'size' => 'sm',
                    'id' => $value->setting_name,
                    'name' => $value->setting_name,
                    'value' => $value->value,
                    'required' => '',
                ]);
            }

            if ($value->field_type == 'text_area') {
                $input = Php2Bs::bs_textarea ([
                    'size' => 'sm',
                    'id' => $value->setting_name,
                    'name' => $value->setting_name,
                    'content' => $value->value,
                    'required' => '',
                ]);
            }

            if ($value->field_type == 'options') {
                $input = '';
                foreach (json_decode($value->options) as $options => $option) {


                    $label_params = [
                        'for' => $value->setting_name.'_'. $option,
                        'content' => ucfirst($options),
                        'class' => 'mt-1'
                    ];

                    $radio_params = [
                        'name' => $value->setting_name,
                        'id' => $value->setting_name.'_'. $option,
                        'value' => $option,
                        'class' => 'mt-3',
                        'required' => '',
                    ];

                    if($option == $value->value) {
                        $radio_params['checked'] = '';
                    }

                    $input .= Php2Bs::bs_custom_radio_wrapper ([
                        'class' => 'd-inline mr-3',
                        'content' =>  Php2Bs::bs_custom_radio (
                            $radio_params
                        ).
                        Php2Bs::custom_control_label (
                            $label_params
                        )
                    ]);
                }
            }

            $help_text = (isset($value->help_text)) ?
            Php2Bs::bs_form_text ([
                'id' => $value->setting_name.'_help',
                'class' => 'col text-muted',
                'content' => $value->help_text
            ]) :
            '';

            $content .= Php2Bs::bs_form_row ([
                'class' => 'border-bottom pb-2 pb-sm-0 mb-1',
                'content' => Php2Bs::bs_col_form_label([
                    'aria' => [
                        'described-by' => $value->setting_name.'_help'
                    ],
                    'size' => 'sm',
                    'for' => $value->setting_name,
                    'class' => 'mb-0 col-sm-3 font-weight-bold ',
                    'content' => Php2Html::a([
                            'content' => ucwords(str_replace("_", " ",$value->setting_name)),
                            'href' => '/Admin/Settings/'.$value->setting_name,
                            'class' => 'text-dark'
                    ])
                ]).
                Php2Html::div([
                    'class' => 'col-sm-9',
                    'content' => $input,
                ]).
                $help_text
            ]);
        }


        $content .= Php2Bs::bs_button ([
            'color' => 'primary',
            'size' => 'sm',
            'button_type' => 'submit',
            'class' => 'float-right',
            'content' => 'Update',
            'name' => 'update_settings'
        ]);

        $text = Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()

    public function messages () {

        // Use 'title' => false, for an alert with no title
        return [
            'create_fail' => [
                'title' => 'Category not created',
                'alert_color' => 'danger'
            ],
            'create_success' => [
                'title' => 'Setting created',
                'alert_color' => 'success',
                'content' => 'The setting has been created.'
            ],
            'update_fail' => [
                'title' => 'Settings not updated',
                'alert_color' => 'danger'
            ],
            'update_success' => [
                'title' => 'Settings updated',
                'alert_color' => 'success',
                'content' => ''
            ],
            'no_change' => [
                'title' => 'Settings not updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.'
            ],
            'not_found' => [
                'title' => 'Settings not found',
                'alert_color' => 'warning',
                'content' => 'That setting does not exist.',
                'dismissible' => false
            ],
            'delete_success' => [
                'title' => 'Setting deleted',
                'alert_color' => 'success',
                'content' => 'The setting has been deleted.',
                'dismissible' => false,
            ]
        ];
    }

    public function update_single($record, $_postdata) {

        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Settings->update_single()';
            }

            return false;
        }

        return true;
    }

    public function update($_postdata) {

        $errors = null;

        foreach ($_postdata as $key => $value) {
            if(!self::db()->query("UPDATE `settings` SET `value` = ? WHERE `setting_name` = '$key'", [$value])) {
                $errors .= $key . ' not updated';
            }
        }

        return $errors;
    }

}




















<?php

/**
 * Home Page View
 *
 * This only controls the view from the home page of the site.
 *
 * As very little is actually done in this file, we use it as the guidline for
 * all other views and as a result, there will be more commenting in this view
 * than any others, including things that might not get used here but might get
 * used elsewhere.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 		http://yoursite/
 *
 */

/*
    Any information passed to the view from the controller will be available as as a variable called $data. This will contain all of the required information but without any formatting (mainly) as this will be done in this file.

    You can uncomment the first line below to see any data passed in as a formatted array. There are also lines that can be uncommented to show any $_POST or $_SESSION data in the same way.

    The nicePrint_r() function that these use can be found in '/src/functions/globals.php'.
*/
// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');


/**
 * Set the parameters for the page
 *
 * As well as the content to display, there are some other parameters that
 * the call to the template also accepts. These are stored in an array called
 * $params and can either be set within this file, or passed in from the
 * controller.
 *
 * This example file contains all available parameters to give an explanation
 * of what can be used an how to use it, some of which are set within this file,
 * some of which are passed from the controller.
 */

/*
    Set the page version.

    The default template system provides several different layouts that can be
    used, within a standard wrapper.

    The layouts can be edited and new ones added in the layout_switcher() function
    in the called template file and the demos ones are
    'full-width' - single column layout
    'left-col'  - two column layout with left sidebar and content to the right
    'right-col' - two column layout with right sidebar and content to the left
    'three-col' - three column layout with both sidebars and content in the middle
    'test' - a playground for testing styles.

    This parameter can be ommitted and if so, the layout will default to the
    default case within the switch statement in layout_switcher().

    In this demo, the layout is set within this file, but can be passed in from
    the controller.
 */
$params['layout'] = 'full-width';

/*
    Set the page title and subtitle.

    To set the page title, which will be shown at the top of the page and also part of the <title> in <head> set it to $params['page_title'].

    In this demo, we are sending the title from the controller as
    'page_name' but have set it to only populate $params['page_title'] if
    it has been passed in. You can set it manually in this file.

    This parameter can be ommitted and if so, no title or subtitle will
    show and the <title> in <head> will not include anything and default
    to whatever is set as the $title variable in the head() function in
    the Base template.

    To set a subtitle for the page set a $params['page_subtitle']. This
    works in exactly the same way as the page title other than it does not
    affect the  <title> in <head> and will not show if a page title is not
    set. Again, for this demo, we are assuming it to be from the controller, this time as 'page_subtitle', and leave it empty if it does not exist.

 */
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;

/*
    Override meta tags

    You can override any of the default meta tags stored in the meta_tags()
    function in /app/core/Settings.php by including them in via $params['meta'].

    You can override as many as needed and simply created a key/value pair for
    each one that you want to override.

    It would be recommended to set this in the $data passed to this page from
    the controller, espcially if this view is being used for multiple page
    types and content.

    If you do not need to override any, you can omit the variable completely.
 */
$params['meta'] = ['description' => 'Description set in page'];

/*
    Add page specific css

    You can any page specific stylesheets stored called from the css() function in /app/core/Settings.php by including them in via $params['css'].

    These are set in a multidimensional array and return the full stylesheet link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4' would return the string at
    'remote' => 'bootstrap' => 'v4'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['css'] = [
    'remote/simple-line-icons',
    #'path/to/css2',
    #'path/to/css3'
];

/*
    Add page specific js

    You can any page specific stylesheets stored called from the js() function in /app/core/Settings.php by including them in via $params['js'].

    These are set in a multidimensional array and return the full script link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4' would return the string at
    'remote' => 'bootstrap' => 'v4'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['js'] = [
    'remote/jquery_ui',
    #'path/to/js2',
    #'path/to/js3'
];

/*
    With the index page, we use it like a landing page in that we want it to still keep the navigation menu and footer that other areas of the site use but not have the banner at the top of the page, as well as giving the whole page a dark background and light text.

    We do this by using two extra $params.
    'hide_banner' will not show the the header at the top of the page is set to true. If set to false or not set at all, the banner will show.
    'body_class' allows you to add classes to the opening body tag. In this case we just set the bg and text.
*/
$params['hide_banner'] = true;
$params['body_class'] = 'bg-dark text-light';

/*
    Everything that needs to be displayed on this page is currently created here against a variable called $content. This will change so this is only here as a temporary filler.
 */
 $content = '';

 /*
    Show any messages that have been sent ot the page as an alert.

    If there are any user messages that need to be shown, such as success or failure messages following a form post, we set the paramaters of it in the controller and pass it through as $data['messages']. This, itself, gets populated from details in a function called messages() in the current model being used.

    Each model has it's own messages() function to make the messages relevant to the area of the site being viewed and a full explanation of how they work can be found in '/app/models/M_Users.php'.

    When we require one of these messages, we set it to $data['messages'] and that will now contain an array of values that can be used as an alert. Rather than checking to see if $data['message'] exists on every view, we simply pass all of $data into the showPageAlerts () function in '/app/core/global.php' and that checks if there is message to show. There is a full commenting of showPageAlerts () to explain exactly how it works and how, as an alternative, we can use $_SESSIONS to pass the message.
 */
 $content .= showPageAlerts ($data);

 /*
    Finally, we add the actual content that needs to be displayed on the page. In this example we currently only show some hardcoded stuff so that will need improving.

    TODO: Replace the below with something more useful and amend the comments.
  */
 $content .= '<h4>Welcome to the UAT Hub!</h4>';
 $content .= '<p>Although still a work in process, this is the first working version of the long-promised UAT Hub - an area that will eventually become the go-to resource for any UAT and CMT things.</p>';
 $content .= '<p>As well as help files and automation tools, this will also contain a few new things and some replacements for existing methods.</p>';




  $content .= '<div class="col">';
  $content .= '<div class="row mb-3">';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-light bg-secondary">';

  $content .= '    <i class="fas fa-lightbulb fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>Ideas</h2>';
 $content .= '            <p>Got an idea that you think could improve life in the derpartment? Share it in the Ideas section, make comments on other ideas and vote for your favourites.</p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-secondary" href="/Ideas" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-left-0 border-light bg-dark">';

  $content .= '    <i class="fas fa-question fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>One Thing</h2>';
 $content .= '            <p>Feel uncomfortable placing something in the \'One Thing\' box? You can now do it via an online form, either anonymously or with your name. You can even set it so it can be viewed by others if you want! </p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-dark" href="/OneThing" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-left-0 border-light bg-secondary">';

  $content .= '    <i class="fas fa-phone-volume fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>Call Log</h2>';
 $content .= '            <p>Still in concept stage, this is a potential replacement for the Excel sheet currently used for UAT calls. Only to be used if told to for now.</p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-secondary" href="/CallLog" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '        </div>';

  $content .= '</div>';


 $content .= '<div class="card mb-3 border-secondary text-dark w-100">';
 $content .= '    <h4 class="card-header bg-secondary text-light">';
 $content .= '    Links';
 $content .= '    </h4>';
 $content .= '  <div class="card-body">';
 $content .= '  <b>Original Selenium Folders</b><br>';
 $content .= '    <a href="http://10.60.151.86/current/Selenium" target="_blank">Current</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/regression/Selenium" target="_blank">Regression</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting1/Selenium" target="_blank">Scripting 1</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting2/Selenium" target="_blank">Scripting 2</a>' ;

 $content .= '  <br><br><b>Interim site</b><br>';
 $content .= '    <a href="/dev/Selenium" target="_blank">Home Page</a>' ;

 $content .= '  <br><br><b>New Hub site</b><br>';
 $content .= '    <a href="/Selenium" target="_blank">Home Page</a>' ;
 $content .= '   | ';
 $content .= '    <a href="/Admin" target="_blank">Admin</a>' ;
 $content .= '  <br><br><b>Other Links</b><br>';
 $content .= '    <a href="http://10.60.151.86/phpmyadmin" target="_blank">Database</a>' ;

 $content .= '  <br><br><b>File Locations</b>';
 $content .= '    <br>WebOpts MVT list - \\\\ZEUS\\Ecommerce\\Webopt MVT folder\\Agendas\\' ;
 $content .= '    <br>Firefox 54.0.1 Installation - \\\\10.60.151.86\\files\\Firefox Installs\\' ;

 $content .= '  <br><br><b>Known Issues</b>';
 $content .= '  <br>Remember me function causes count() on boolean error in M_Users line 991(ish)' ;
 $content .= '  <br>Main template edit link goes to /Members/ instead of /Users/' ;
 $content .= '  <br>User box not visible when scrolled down the page.' ;


 $content .= '</div>';


/**
 * Pass the details to the template
 *
 * All that is left to do is pass the information that we have created above,
 * through to the template that we are using for this view.
 *
 * In this instance, we are using the Main template at /'app/core/Templates/T_Main.php'.
 *
 * @var string 	    $content    The actual page relevant content to be shown
 * @var array 	    $params     Any other required page settings.
 */
new T_Main ($content,$params);




















<?php

/**
 * Users View
 *
 * There is full commenting on how the views are structured and all of the
 * parameters that can be passed used in app/views/home/index.
 *
 * As a result, this file only comments or includes anything that is different
 * from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	    http://yoursite/Register
 * @link 	    http://yoursite/Admin/Members
 * @link     	http://yoursite/Admin/Members/Listing
 * @link    	http://yoursite/Admin/Members/{Username}
 *
 */

 // nicePrint_r($data, 'Data');
 // nicePrint_r($_POST, 'Post');
 // nicePrint_r($_SESSION, 'Session');

 // Redirect if site is offline
 if(SiteSettings::get('maintenance_mode')) {
     Redirect::to('offline');
 }

//Set the parameters for the page
$params['layout'] = 'right-col';
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;
$params['meta'] = ['description' => 'Description set in page'];

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data);

/////////////////////////////////////////////////////////////////////////
// Show the relevant content based on the $data['page_type'] passed in //
/////////////////////////////////////////////////////////////////////////

/**
 * Edit page
 *
 * Shows the edit form and change password form for the currently logged in
 * user, along with any validation from previous form post attempts. This is
 * all done in the controller and the passed in $data['edit_form'] and
 * $data['password_form'] are ready to display.
 *
 * @link 	    http://yoursite/Members/Edit
 */
if($data['page_type'] == 'edit') {
    /*
        We will only have passed $data['edit_form'] to the view if the page is
        being viewed by a logged in user, so we use that to check whether we need
        to show anything. If the user is not logged in, a messaage to that effect
        will have been passed trough and shown as an alert.

        If the user is logged in, we always need the forms, even after posting so
        just add them to the content inside cards.
     */
    if(isset($data['edit_form'])) {
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update Profile'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['edit_form'],
                'class' => '',
            ],
        ]);// bs_card edit form


        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Change Password'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['password_form'],
                'class' => '',
            ],
        ]);// bs_card change password
    }

} // $data['page_type'] == 'edit'

/**
 * Member overview page
 *
 * Three sets of data get passsed into this view, are count of all users,
 * details of the latest user and a list of all users.
 *
 * The list of users will have been passed in via $data['list'] but on this
 * occassion, it is still in the raw data stored in the database, when sent
 * through.
 *
 * We want to show it in a table, via the make_table() function in Php2Html, but
 * before that, we turn the username into a link to their profile, and replace
 * the joined date with a more readable format.
 *
 * @link 	    http://Members/
 */
if($data['page_type'] == 'overview') {
    /*
        With the count of all users and latest user, we currently just show them inside a Bootstrap card. But this needs improving. The only manipulation we do is to change the joined date of th latest user into a more readable format, using DateTime().
     */
    $latest_user_date = new DateTime($data['latestuser']->joined);
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1',
        'header' => [
            'content' => 'User Details'
        ],
        'body' => [
            'content' => Php2Html::li ([
                'content' => 'Total Users : ' . $data['usercount'],
                'class' => 'list-group-item border-warning'
            ])
            .Php2Html::li ([
                'content' => 'Latest User : ' . $data['latestuser']->username . ' (' . $latest_user_date->format('d/m/Y g:ia') . ')',
                'class' => 'list-group-item border-info'

            ]),
        ],
    ]);// bs_card

    /*
        Loop through the list passed to the view and for each one, replace the
        'username' element with a link to that elements edit page.

        We also replace the 'joined' element with a long date and time using the
        php DateTime function.

     */
    foreach ($data['list'] as $key => $value) {
        /*
            Take the username of the current record and overwrite it in the list
            as a link to that users profile.

            $data['list'][$key]->username = SteveB
            becomes
            $data['list'][$key]->username = <a href="/Admin/Users/SteveB">SteveB</a>
        */
        $data['list'][$key]->username = Php2Html::a ([
            'content' => $value->username,
            'href' => '/Users/'.$value->username
        ]);

        /*
            Creates a new key in the list called 'full_name' and sets the
            users firstname and lastname to it.

            This would create
            $data['list'][$key]->full_name = Steve Ball
        */
        $data['list'][$key]->full_name = $value->firstname.' '.$value->lastname;

        /*
            Create a new DateTime object from the 'joined' value and then
            overwrite it with a formatted version.

            $data['list'][$key]->joined = 2017-05-11 14:58:00
            becomes
            $data['list'][$key]->joined = 22/05/2017 2:58pm
        */
        $join_date = new DateTime($value->joined);
        $data['list'][$key]->joined = $join_date->format('d/m/Y g:ia');

    } // foreach $data->list

    /*
        Now that $data['list'] has been modified to how we need it, we need to pass it into the table via make_table(). We will explain what is being used here but there is far more commenting against that function in '/app/core/Php2Html.php'.

        When calling make_table() we pass in an array that has three keys

            'columns' - sets the name of the columns, an alias to show in the header and any classes either for the <th>, the <td> or both. Each of the keys must exist in each record of $data['list']

            'data' - the records to show so in this case $data['list'], but tweaked

            'settings' - anything specific to the table itself but not data related such as an overall table class

        You can see that we are specifying to show 3 columns 'username', 'full_name' and 'joined'.

        For 'username' and 'joined' we simply set the header to show a capitilised version of the column name and set it to have light text on a dark background.

        We do a lot more in 'full_name'. Firstly we set the header to show as 'Full Name'. Next we set the <th> to have light text and a dark background as we did with 'username' and 'joined'. This time though we also set a 'td_class' which means that the full_names will have a different colour to the rest. Finally, we set a 'global_class' which applies to both the <th> and <td>. We are using a Bootstrap class that simply hides the column on small screens and shows it on larger ones.

        The second key is 'data' and that is simply our amended $data['list']. However, the way that our database functions work, this list is currently an object not an array but the function requires an array. We have built a function in '/src/functions/object_to_array.php' called  objectToArray() that we used to turn it into the array we require.

        Finally we have the 'settings' key. We have two parameters here - 'show_header' is set to true to denote that we want the table header to show and 'class' has a couple of Bootstrap classes.

        TODO:: Create a make_bs_table in Php2Bs
    */
    $table = Php2Html::make_table ([
        'columns' => [
            'username' => [
                'alias' => 'Username',
                'th_class' => 'bg-dark text-light',
                'global_class' => 'text-danger'
            ],
            'full_name' => [
                'alias' => 'Full Name',
                'th_class' => 'bg-dark text-light',
                'td_class' => 'text-info',
                'global_class' => 'd-none d-md-table-cell'
            ],
            'joined' => [
                'alias' => 'Joined',
                'th_class' => 'bg-dark text-light',
            ],
        ],
        // The listing is an object so convert it to an array
		'data' => objectToArray($data['list']),
        'settings' => [
            'show_header' => true,
            //'border' =>'1',
            'class' =>'table mb-0'
        ]
    ]); // make table()

    /*
        Finally, now that we have a fully fledged html table set to $table,
        We wrap it in a Boostraps card and add it to $content.
    */
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1',
        'body' => [
            'content' => $table,
            'class' => 'p-0',
        ],
    ]);// bs_card table
} // $data['page_type'] == 'overview'

/**
 * Profile page
 *
 * We only show the profile if there has been user data passed through, stored
 * as $data['userdata']. If this has not been passed it, it would be safe to
 * assume that the user was not found, so anything required to be shown will be
 * passed as $data['message'] and show as an alert.
 *
 * @link 	    http://Members/{Username}
 */
if($data['page_type'] == 'profile') {

    /*
        We only show the profile if the user was found in the controller
        function so we only add to the content if the $data['user_data'] exists.

        If is does, we show some basic details about the user.
     */
    if(isset($data['userdata'])) {

        // The user was found so start building the output as a variable
        $profile = 'Full Name : ' . $data['userdata']->firstname.' '.$data['userdata']->lastname;
        $profile .= '<hr>';

        $join_date = new DateTime($data['userdata']->joined);
        $profile .= 'Joined : ' . $join_date->format('l, jS F, Y \a\t g:ia');

        $profile .= '<hr>';
        $profile .= 'User Group : ' . $data['userdata']->group;

        // Add to the content by passing $profile into a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1',
            'body' => [
                'content' => $profile,
            ],
        ]);// bs_card profile
    } // if user found
} // $data['page_type'] == 'profile'

/**
 * Registration page
 *
 * We only show the form if it has been passed in from the controller and add
 * the terms of registration from the 'site_terms' record in the `settings`
 * table in the database.
 *
 * If the form has already been posted, $data['form'] will not have been passed
 * in so all the page will display is any messages passed through.
 *
 * @link 	    http://yoursite/Register
 */
if($data['page_type'] == 'register') {
    if (isset($data['form'])) {
        $terms = SiteSettings::get('site_terms');

        $content .= Php2Bs::bs_card ([
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['form']
                            .$terms,
                'class' => '',
            ],
        ]);// bs_card registration form
    } // if $data['form']
} // $data['page_type'] == 'register'












if($data['page_type'] == 'reset_password') {
    /*
        If we need to show the form, it is passed in from the controller.

        Everything else is passed in as a status and added via the
        showPageAlerts () function aboce
     */
    if($data['form']) {
        $text = Php2Html::p([
            'content' => 'Please enter your username, the email you registered with or your user id to receive an email containing a link to reset your password.'
        ]);
        $content .= Php2Bs::bs_card ([
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $text.$data['form'],
                'class' => '',
            ],
        ]);// bs_card edit form
    }
} // $data['page_type'] == 'reset_password'


// Pass the details to the template
new T_Main ($content,$params);





















<?php

/**
 * Admin Home Page View
 *
 * This only controls the view from the admin home page.
 *
 * No formatting is carried out anywhere and all that is passed in is an
 * array. The entire layout is styled within this file.
 *
 * This file also acts as a reference for all the other views within the
 * admin area. As a result, the structure is heavily commented in this
 * and should be used as a reference for the other admin views, where the
 * commenting is restricted ot anything usique to that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/
 *
 */

 /**
  * Collect the passed in data and turn it into an object
  * @var array
  */
$data = (object)$data;

# Uncomment the below to see any data passed in or any $_POST or $_SESSION data
// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');
$model = $this->model('M_Settings');
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['menu_category'] = 'Settings';

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

if($data->page_type == 'overview') {
    $content .= Php2Html::p([
        'content' => 'This page is a bulk update for the settings and on submission, will update any fields that have changed. If you want to update the details of a specific setting, such as the help text, click on the name in the label.'
    ]).
    Php2Html::p([
        'content' => 'The label for each of the settings is a de-slugified version of the setting name so, the call for any of these would be the same as the label, but with all spaces replaced with underscores and set to lowercase. For example, the value of \'Site Name\' can be called using SiteSettings::get(\'site_name\').'
    ]).
    Php2Html::p([
        'content' => 'To add a new setting, '.Php2Html::a([
            'content' => 'Click Here',
            'href' => '/Admin/Settings/Add'
        ]).
        '.'
    ]);
}
/**
 * Start the output string that will be passed to the template
 * @var string
 */
$content .= $data->content;



/**
 * Pass the details to the template
 *
 * @var string 	Data to be shown
 * @var string 	Version on template to use
 * @var string 	Title of the page
 */
new T_Admin ($content,$params);




















<?php

/**
 * Admin Page View
 *
 * This only controls the view from the home page of the admin area.
 *
 * As very little is actually done in this file, we use it as the guidline for
* all other views and as a result, there will be more commenting in this view
* than any others, including things that might not get used here but might get
* used elsewhere.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 		http://yoursite/Admin
 *
 */

 /*
     Any information passed to the view from the controller will be available as as a variable called $data. This will contain all of the required information but without any formatting (mainly) as this will be done in this file.

     You can uncomment the first line below to see any data passed in as a formatted array. There are also lines that can be uncommented to show any $_POST or $_SESSION data in the same way.

     The nicePrint_r() function that these use can be found in '/src/functions/globals.php'.
 */
 // nicePrint_r($data, 'Data');
 // nicePrint_r($_POST, 'Post');
 // nicePrint_r($_SESSION, 'Session');

/**
 * Set the parameters for the page
 *
 * As well as the content to display, there are some other parameters that
 * the call to the template also accepts. These are stored in an array called
 * $params and can either be set within this file, or passed in from the
 * controller.
 *
 * This example file contains all available parameters to give an explanation
 * of what can be used an how to use it, some of which are set within this file,
 * some of which are passed from the controller.
 */

/*
    Set the page title and subtitle.

    To set the page title, which will be shown at the top of the page and also part of the <title> in <head> set it to $params['page_title'].

    In this demo, we are sending the title from the controller as
    'page_name' but have set it to only populate $params['page_title'] if
    it has been passed in. You can set it manually in this file.

    This parameter can be ommitted and if so, no title or subtitle will
    show and the <title> in <head> will not include anything and default
    to whatever is set as the $title variable in the head() function in
    the Base template.

    To set a subtitle for the page set a $params['page_subtitle']. This
    works in exactly the same way as the page title other than it does not
    affect the  <title> in <head> and will not show if a page title is not
    set. Again, for this demo, we are assuming it to be from the controller, this time as 'page_subtitle', and leave it empty if it does not exist.

 */
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;

/*
    Override meta tags

    You can override any of the default meta tags stored in the meta_tags()
    function in /app/core/Settings.php by including them in via $params['meta'].

    You can override as many as needed and simply created a key/value pair for
    each one that you want to override.

    It would be recommended to set this in the $data passed to this page from
    the controller, espcially if this view is being used for multiple page
    types and content.

    If you do not need to override any, you can omit the variable completely.
 */
$params['meta'] = ['description' => 'Description set in page'];

/*
    Add page specific css

    You can any page specific stylesheets stored called from the css() function in /app/core/Settings.php by including them in via $params['css'].

    These are set in a multidimensional array and return the full stylesheet link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4' would return the string at
    'remote' => 'bootstrap' => 'v4'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['css'] = [
    'remote/simple-line-icons',
    #'path/to/css2',
    #'path/to/css3'
];

/*
    Add page specific js

    You can any page specific stylesheets stored called from the js() function in /app/core/Settings.php by including them in via $params['js'].

    These are set in a multidimensional array and return the full script link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4' would return the string at
    'remote' => 'bootstrap' => 'v4'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['js'] = [
    'remote/jquery_ui',
    #'path/to/js2',
    #'path/to/js3'
];

/*
    Highlight the correct menu item

    By setting $params['menu_category'] to the text of a link in the side menu,
    that item will be given a different formatting to show which page we are on.
    At the moment it simply adds 'bg-dark' but, locically for more flexible
    formatting, it should add a class called 'active' and format that via css.

    If the menu item has any children, the sub-menu will also be opened as a
    result of this and the current item in that can be huighlighted in the same
    way but using $params['menu_item'].
*/
$params['menu_category'] = 'Dashboard';

/*
    Everything that needs to be displayed on this page is currently created here against a variable called $content. This will change so this is only here as a temporary filler.
 */
$content = '';

/*
   Show any messages that have been sent ot the page as an alert.

   If there are any user messages that need to be shown, such as success or failure messages following a form post, we set the paramaters of it in the controller and pass it through as $data['messages']. This, itself, gets populated from details in a function called messages() in the current model being used.

   Each model has it's own messages() function to make the messages relevant to the area of the site being viewed and a full explanation of how they work can be found in '/app/models/M_Users.php'.

   When we require one of these messages, we set it to $data['messages'] and that will now contain an array of values that can be used as an alert. Rather than checking to see if $data['message'] exists on every view, we simply pass all of $data into the showPageAlerts () function in '/app/core/global.php' and that checks if there is message to show. There is a full commenting of showPageAlerts () to explain exactly how it works and how, as an alternative, we can use $_SESSIONS to pass the message.
*/
$content .= showPageAlerts ($data);

/*
   Finally, we add the actual content that needs to be displayed on the page. In this example we currently only show some hardcoded stuff so that will need improving.

   TODO: Replace the below with something more useful and amend the comments.
 */
$content .= Php2Html::div ([
	'content' => 'Div Content'
]);
$content .= Php2Html::hr ([
    'class' => 'bg-primary'
]);

$content .= Php2Html::div ([
	'content' => Php2Html::input_text ([
        'value' => 'Default Input'
    ])
]);

$content .= Php2Html::hr ([
    'class' => 'bg-success'
]);


$optionArray = array (
	'1' => 'One',
	'2' => 'Two',
	'3' => 'Three',
);

$options = '';

$selected = '3';
foreach ($optionArray as $key => $value) {

	$is_selected = ($key == $selected) ? true : false ;

	$options .= Php2Html::option ([
		'content' => $value,
		'value' => $key,
		'is_selected' => $is_selected,
	]);
}

$content .= Php2Html::select ([
	'content' => $options,
]);

$content .= Php2Html::hr ([
    'class' => 'bg-danger'
]);

$content .= Php2Html::input_text ([
    'value' => 'Default Input',
    'placeholder' => 'input',
]);

$content .= Php2Html::hr ([
    'class' => 'bg-warning'
]);

$content .= Php2Html::progress ([
    'max' => '50',
    'value' => '10',
    'content' => '10/50',
]);

$content .= Php2Html::hr ([
    'class' => 'bg-light'
]);

$content .= Php2Html::div ([
    'content' => 'Div Content',
    'id' => 'main-div',
    'class' => 'bg-dark text-light p-2',
    'style' => 'height:50px;width:100px;',
    'data_attr' => [
        'ref' => '45',
        'category' => 'news'
    ],
    'comment' => 'My Example Div'
]);

$content .= Php2Html::hr ([
        'class' => 'bg-dark'
]);

$_qry = DB::dbConnect()->query('SELECT * FROM users');

	// Return a count of the records returned
$content .= $_qry->count();

foreach ($_qry->results() as $key => $value) {
    $content .= $value->username . ' - ' . $value->firstname . ' ' . $value->lastname . '<br>';
}



/**
 * Pass the details to the template
 *
 * All that is left to do is pass the information that we have created above,
 * through to the template that we are using for this view.
 *
 * In this instance, we are using the Main template at /'app/core/Templates/T_Main.php'.
 *
 * @var string 	    $content    The actual page relevant content to be shown
 * @var array 	    $params     Any other required page settings.
 */
new T_Admin ($content,$params);





















<?php

/**
 * Admin Usergroups View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/admin/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Usergroups
 * @example 	http://yoursite/Admin/Usergroups/{Usergroup Name Slug}
 *
 */

 nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');

//Set the parameters for the page
$params['layout'] = 'right-col';
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;

// Highlight the correct menu item
$params['menu_category'] = 'Users';

// As there is only one submenu item for Usergoups, we set that too
$params['menu_item'] = 'Usergroups';

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data);

/////////////////////////////////////////////////////////////////////////
// Show the relevant content based on the $data['page_type'] passed in //
/////////////////////////////////////////////////////////////////////////

/**
 * Edit page
 *
 * Shows the edit form for the specified usergroup, along with any validation
 * from previous form post attempts. This is all done in the controller and
 * the passed in $data['edit_form'] is ready to display.
 *
 * @link 	    http://yoursite/Admin/Usergroups/{Usergroup Name Slug}
 */
if($data['page_type'] == 'edit') {

    /*
        We will only have passed $data['form'] to the view if the page is
        being viewed by a logged in user, so we use that to check whether we need
        to show anything. If the user is not logged in, a messaage to that effect
        will have been passed trough and shown as an alert.

        If the user is logged in, we always need the forms, even after posting so
        just add them to the content inside cards.
     */
	if(isset($data['form'])) {

		// Add the form to the content in a card
		$content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update Usergroup'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['form'],
                'class' => '',
            ],
        ]);// bs_card edit form

		// Add the deleteform to the content in a card
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Delete Usergroup'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => Php2Html::p(['content'=>'This will delete the usergroup and cannot be undone.']).$data['delete_form'],
                'class' => '',
            ],
        ]);// bs_card delete form

    } // !isset($data->status) || $data->status !== 'admin_not_found'

} // $data->page_type == 'edit'

/**
 * Usergroup overview page
 *
 * Two sets of data get passsed into this view, a form to add a new
 * usergroup and a list of all usergroups.
 *
 * The list of usergroups will have been passed in via $data['listing']
 * but as it is still in the raw data stored in the database, we want to
 * change the group name to a link, before showing it in a table, via the
 * make_table() function in Php2Html.
 *
 * An explantion of this can be found in the '/app/views/admin/users.php'.
 *
 * @link 	    http://yoursite/Admin/Usergroups
 */
if($data['page_type'] == 'overview') {

	// Show the create form
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1',
        'body' => [
            'content' => $data['form'],
            'class' => '',

        ],
        'header' => [
            'content' => 'Add user group',
        ]
    ]);// bs_card create form

	// Show the listing
    if(isset($data['listing'])) {

		/*
		 	Loop through the list passed to the view and for each one,
			replacing the 'group_name' element with a link to that
			elements edit page.
		 */
        foreach ($data['listing'] as $key => $value) {

            $data['listing'][$key]->group_name = Php2Html::a ([
                'content' => $value->group_name,
                'href' => '/Admin/Usergroups/'.slugify($value->group_name)
            ]);

        }

        // Build the table
        $table = Php2Html::make_table ([
            'columns' => [
                'group_name' => [
                    'alias' => 'Name',
                    'th_class' => 'bg-dark text-light',
                    'global_class' => 'text-danger'
                ],
                'permissions' => [
                    'alias' => 'Permissions',
                    'th_class' => 'bg-dark text-light',
                ],
            ],
            // The listing is an object so convert it to an array
            'data' => objectToArray($data['listing']),
            'settings' => [
                'show_header' => true,
                //'border' =>'1',
                'class' =>'table mb-0'
            ]
        ]); // make table()


		// Add the table to the content inside a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1',
            'body' => [
                'content' => $table,
                'class' => 'p-0',
            ],
        ]);// bs_card table
    } // show listing

} // $data->page_type == 'overview'

// Pass the details to the template
new T_Admin ($content,$params);

























<?php

/**
 * Admin Users View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/admin/index.php.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Users
 * @example 	http://yoursite/Admin/Listing
 * @example 	http://yoursite/Admin/Users/{Username}
 * @example 	http://yoursite/Admin/Users/Edit/{Username}
 * @example 	http://yoursite/Admin/Users/Delete/{Username}
 *
 */

// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');

//Set the parameters for the page
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;

// Highlight the correct menu item
$params['menu_category'] = 'Users';

$content = '';

// Show any messages that have been sent to the page as an alert
$content .= showPageAlerts ($data);

/*
    There are two pages that use this view where details of an individual user
    will be shown - profile and edit.

    For each of these the users details will be passed through as $data['user']
    and we use the status from that to show an extra message at the top for any
    user that is either banned or unverified.
*/
if(isset($data['user']) && $data['user']->status !== '1') {
    switch ($data['user']->status) {
        case '-1':
            $message = 'This user is banned';
            $color = 'danger';
            break;

        case '0':
            $message = 'This user is not verified';
            $color = 'warning';
            break;
    }
    $content .= Php2Bs::bs_alert (['heading'=> $message, 'color'=> $color]);


} // user status alert

/////////////////////////////////////////////////////////////////////////
// Show the relevant content based on the $data['page_type'] passed in //
/////////////////////////////////////////////////////////////////////////

/**
 * Edit page
 *
 * Shows the edit form and change password form for the specified
 * user, along with any validation from previous form post attempts. This is
 * all done in the controller and the passed in $data['edit_form'] and
 * $data['password_form'] are ready to display.
 *
 * @link 	    http://yoursite/Admin/Members/Edit
 */
if($data['page_type'] == 'edit') {

    /*
        We will only have passed $data['edit_form'] to the view if the page is
        being viewed by a logged in user, so we use that to check whether we need
        to show anything. If the user is not logged in, a messaage to that effect
        will have been passed trough and shown as an alert.

        If the user is logged in, we always need the forms, even after posting so
        just add them to the content inside cards.
     */
	if(isset($data['edit_form'])) {

        /*
            If the user is banned or unverified, show an give the card
            header a suitable background colour, otherwise just let it
            be default.
         */
        switch ($data['user_status']) {
            case '-1':
                $header_style = 'bg-danger text-light';
                break;
            case '0':
                $header_style = 'bg-warning text-dark';
                break;
            default:
                $header_style = 'bg-light';
                break;
        } // card header style

        // Add the form to the content in a card
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update Profile',
                'class' => $header_style,
            ],
            'class' => 'border-dark mb-1 ',
            'body' => [
                'content' => $data['edit_form'],
                'class' => '',
            ],
        ]);// bs_card edit form

        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Change Password'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['password_form'],
                'class' => '',
            ],
        ]);// bs_card passwordform
    } // if $data->password_form
} // $data['page_type'] == 'edit'

/**
 * Show a list of users
 *
 * The list of users will have been passed in via $data['list'] but on this
 * occassion, it is still in the raw data stored in the database, when sent
 * through.
 *
 * We want to show it in a table, via the make_table() function in Php2Html, but
 * before that, we turn the username into a link to their profile, and replace
 * the joined date with a more readable format.
 *
 * @example 	http://yoursite/Admin/Listing
 **/
if($data['page_type'] == 'listing') {

    // Highlight the 'List' item in the 'Users' menu
    $params['menu_item'] = 'List';

    /*
        Loop through the list passed to the view and for each one,
        making any amendments required before passing it to the table.
     */
    foreach ($data['list'] as $key => $value) {

        /*
            Create a new key in the list called 'edit' and assigned it three buttons - view, edit and delete.
            The buttons are created using the a() and i() Php2Html. The i() 'class' has Bootstrap text color and margin styles, plus the name of the FontAwesome icon it uses.
        */
        $data['list'][$key]->edit = Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-search text-info mr-2'
            ]),
            'href' => '/Admin/Users/'.$value->username

        ])
        .Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-edit text-success mr-2'
            ]),
            'href' => '/Admin/Users/Edit/'.$value->username

        ])
        .Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-times-circle text-danger mr-2'
            ]),
            'href' => '/Admin/Users/Delete/'.$value->username

        ]);

        /*
            Take the username of the current record and overwrite it in the list
            as a link to that users profile.

            $data['list'][$key]->username = SteveB
            becomes
            $data['list'][$key]->username = <a href="/Admin/Users/SteveB">SteveB</a>
        */
        $data['list'][$key]->username = Php2Html::a ([
            'content' => $value->username,
            'href' => '/Users/'.$value->username
        ]);

        /*
            Creates a new key in the list called 'full_name' and sets the
            users firstname and lastname to it.

            This would create
            $data['list'][$key]->full_name = Steve Ball
        */
        $data['list'][$key]->full_name = $value->firstname.' '.$value->lastname;

        /*
            Create a new DateTime object from the 'joined' value and then
            overwrite it with a formatted version.

            $data['list'][$key]->joined = 2017-05-11 14:58:00
            becomes
            $data['list'][$key]->joined = 22/05/2017 2:58pm
        */
        $join_date = new DateTime($value->joined);
        $data['list'][$key]->joined = $join_date->format('d/m/Y g:ia');

        /*
            If the user status is '-1' (banned) or '0' unverified we
            add a background colour to the table row
         */
		switch ($value->status) {
			case -1:
				$data['list'][$key]->tr_class = 'table-danger';
				break;

			case 0:
				$data['list'][$key]->tr_class = 'table-warning';
				break;
		} // switch status

    } // foreach $data['list']

    /*
        Now that $data['list'] has been modified to how we need it, we need to pass it into the table via make_table(). We will explain what is being used here but there is far more commenting against that function in '/app/core/Php2Html.php'.

        When calling make_table() we pass in an array that has three keys

            'columns' - sets the name of the columns, an alias to show in the header and any classes either for the <th>, the <td> or both. Each of the keys must exist in each record of $data['list']

            'data' - the records to show so in this case $data['list'], but tweaked

            'settings' - anything specific to the table itself but not data related such as an overall table class

        You can see that we are specifying to show 4 columns 'username', 'full_name', 'joined' and 'edit'.

        For 'username' and 'joined' we simply set the header to show a capitilised version of the column name and set it to have light text on a dark background.

        For 'edit', we choose to have an empty header so there is no need to add a class and we just set 'alias' as empty.

        We do a lot more in 'full_name'. Firstly we set the header to show as 'Full Name'. Next we set the <th> to have light text and a dark background as we did with 'username' and 'joined'. This time though we also set a 'td_class' which means that the full_names will have a different colour to the rest. Finally, we set a 'global_class' which applies to both the <th> and <td>. We are using a Bootstrap class that simply hides the column on small screens and shows it on larger ones.

        The second key is 'data' and that is simply our amended $data['list']. However, the way that our database functions work, this list is currently an object not an array but the function requires an array. We have built a function in '/src/functions/object_to_array.php' called  objectToArray() that we used to turn it into the array we require.

        Finally we have the 'settings' key. We have two parameters here - 'show_header' is set to true to denote that we want the table header to show and 'class' has a couple of Bootstrap classes.

        TODO:: Create a make_bs_table in Php2Bs
    */
    $table = Php2Html::make_table ([
        'columns' => [
            'username' => [
                'alias' => 'Username',
                'th_class' => 'bg-dark text-light'
            ],
            'full_name' => [
                'alias' => 'Full Name',
                'th_class' => 'bg-dark text-light ',
                'td_class' => 'text-info',
                'global_class' => 'd-none d-md-table-cell'
            ],
            'joined' => [
                'alias' => 'Joined',
                'th_class' => 'bg-dark text-light',
            ],
            'edit' => [
                'alias' => '',
            ],
        ],
        // The listing is an object so convert it to an array
		'data' => objectToArray($data['list']),
        'settings' => [
            'show_header' => true,
            'class' =>'table mb-0'
        ]
	]); // make table()

    /*
        Finally, now that we have a fully fledged html table set to $table,
        We wrap it in a Boostraps card and add it to $content.
    */
    $content .= Php2Bs::bs_card ([
        'class' => 'border-secondary bg-light mb-1',
        'body' => [
            'content' => $table,
            'class' => 'p-0',
        ],
    ]);// bs_card
} // $data['page_type'] == 'listing'

/**
 * Member overview page
 *
 * Three sets of data get passsed into this view, are count of all users,
 * details of the latest user and a list of all users.
 *
 * The list of users will have been passed in via $data['list'] but on this
 * occassion, it is still in the raw data stored in the database, when sent
 * through.
 *
 * We want to show it in a table, via the make_table() function in Php2Html, but
 * before that, we turn the username into a link to their profile, and replace
 * the joined date with a more readable format.
 *
 * @link 	    http://Members/
 */
if($data['page_type'] == 'overview') {

    // Highlight the correct submenu item
    $params['menu_item'] = 'Overview';

    /*
        With the count of all users and latest user, we currently just show them inside a Bootstrap card. But this needs improving. The only manipulation we do is to change the joined date of th latest user into a more readable format, using DateTime().
     */
    $latest_user_date = new DateTime($data['latestuser']->joined);
    $content .= Php2Bs::bs_card ([
            'class' => 'border-secondary bg-light mb-1',
            'header' => [
                'content' => 'User Details'
            ],
            'body' => [
            'content' => Php2Html::li ([
                'content' => 'Total Users : ' . $data['usercount'],
                'class' => 'list-group-item border-warning'
            ])
            .Php2Html::li ([
                'content' => 'Latest User : ' . $data['latestuser']->username . ' (' . $latest_user_date->format('d/m/Y g:ia') . ')',
                'class' => 'list-group-item border-info'

            ]),
        ],
    ]);// bs_card
} // $data['page_type'] == 'overview'

/**
 * User Create page
 *
 * We always show the form as there may be occassions where several users are
 * being created, unlie the front end where a user would only register once so
 * we hide it once processed..
 *
 * The only thing we do here is set the menu item to highlight and show the form
 * in a card as everything else is controilled via messages passed through from
 * the controller.
 *
 * @link 	    http://yoursite/Register
 */
if($data['page_type'] == 'register') {
    // Highlight the correct item in the 'Users' menu
    $params['menu_item'] = 'Add';

    /*
        As we want the form to show again, even after we succesfully
        create a new account, we simply add that to the content.

        Any other messages following an attempte create is handled by
        the showPageAlerts()  function above.
     */
    $content .= Php2Bs::bs_card ([
        'class' => 'border-dark bg-light mb-1',
        'body' => [
            'content' => $data['form'],
            'class' => '',
        ],
    ]);// bs_card register
} // $data['page_type'] == 'register'

/**
 * Profile page
 *
 * We only show the profile if there has been user data passed through, stored
 * as $data['user']. If this has not been passed it, it would be safe to
 * assume that the user was not found, so anything required to be shown will be
 * passed as $data['message'] and show as an alert.
 *
 * @link 	    http://Members/{Username}
 */
if($data['page_type'] == 'profile') {
    /*
        We only show the profile if the user was found in the controller
        function so we only add to the content if the $data['user'] exists.

        If is does, we show some basic details about the user.
     */
    if(isset($data['user'])) {

        // The user was found so start building the output as a variable
        $profile = 'Full Name : ' . $data['user']->firstname.' '.$data['user']->lastname;
        $profile .= '<hr>';

        $join_date = new DateTime($data['user']->joined);
        $profile .= 'Joined : ' . $join_date->format('l, jS F, Y \a\t g:ia');

        $profile .= '<hr>';
        $profile .= 'User Group : ' . $data['user']->group;

        // Add to the content by passing $profile into a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-secondary bg-light mb-1',
            'body' => [
                'content' => $profile,
            ],
        ]);// bs_card profile
    } // $data->status not 'admin_not_found'
} // $data['page_type'] == 'profile'













# Show the required data based on passed in page type
if($data['page_type'] == 'delete') {
    $params['menu_item'] = 'Delete';
    /*
        We only need the forms if the user is found  and we do not
        already have a delete request so, in the controller, we only
        pass the 'delete_form' parameter with the form this criteria
        is met, otherwise it is null.

        We only need to add to the content if $data->delete_form contains
        anything. If no user was found or the delete had already been
        processed, any page content is handled by the showPageAlerts()
        function above.
     */
    if(isset($data['delete_form'])) {
        // Show the delete form
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Delete account'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => Php2Html::p(['content'=>'This will delete the account and cannot be undone.']).$data['delete_form'],
                'class' => '',
            ],
        ]);// bs_card delete form
    } // if $data->delete_form
} // $data['page_type'] == 'delete'





// Pass the details to the template
new T_Admin ($content,$params);























