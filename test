<?php

class Validate {
    private $_passed = false,
            $_errors = array(),
            $_db = null;

    public function __construct() {
        $this->_db = DB::dbConnect();
    }
    /**    check()
     *
     *    Checks the validation rules passed in
     *
     *    @params     source
     *    @params     items
     *
     *    Takes the data passed in the source (usually $_POST) and
     *    checks each one against it's list of criteria
     *
     *    The validation uses $GLOBALS set in /app/core/config_files/forms.php
     *
     *    Each field is passed to this function as '$items' where the input name
     *    is matched up with it's respective $GLOBALS array
     *    ----------------------------------------------------------
     *    Example validation for 'username' and 'email'
     *
     *    $validation = $validate->check(
     *         $_POST,
     *         array(
     *            'username' => Globals::get('forms/user/username'),
     *            'email' => Globals::get('forms/user/username', 'email'),
     *         )
     *    );
     *
     *    This is checking $_POST data against the validations rules
     *    --------------------------------------------------------------
     *
     *    Looking at 'username', once we have assigned Globals::get('forms/user/username')
     *    to it, we have
     *    'username' => array(
     *        'info' => 'Usernames must be between 6 and 20 characters long, using only letters and numbers,
     *        'error' => 'You must enter a valid username between 6 and 20 characters,
     *        'validation' => array(
     *            'field_name' => 'username',
     *            'required' => true,
     *            'min' => 6,
     *            'max' => 20,
     *            'preg_match' => 'username',
     *            'unique' => 'users',
     *        ),
     *    ),
     *
     *    We then loop through the 'validation' element and check them against what has been posted
    **/
    public function check ($source, $items = array()) {

        /**    Loop through the items
         *
         *    Using the 'username' example above, this would give us
         *
         *    $item = 'username'    $rule = 'info'
         *    $item = 'username'    $rule = 'help'
         *    $item = 'username'    $rule = 'error'
         *    $item = 'username'    $rule = 'validation'
         *
        **/
        foreach ($items as $item => $rules) {


            /**    Loop through validation rules
             *
             *    Using the 'username' example above, this would give us
             *
             *    $rule = 'field_name'     $rule_value = 'username'
             *    $rule = 'required'       $rule_value = 'true'
             *    $rule = 'min'            $rule_value = 6
             *    $rule = 'max'            $rule_value = 20
             *    $rule = 'max'            $rule_value = 20
             *    $rule = 'preg_match'     $rule_value = 'username'
             *    $rule = 'unique'         $rule_value = 'users'
             *
            **/
	    if(isset($rules)){
		    
		    foreach ($rules as $rule => $rule_value) {
			// Check if the field has been posted
			/*
			 *    Using the 'username' example
			 *    $source was set to $_POST when the function was called
			 *    $item has been set to 'username' in the first foreach
			 *
			 *    So $source[$item] = $_POST['username']
			 *
			 *    If it is set, we set it to $value, trimming any whitespace
			 *    so if the posted 'username' was 'Deadpool', we would now have
			 *    $value = 'Deadpool'
			 *
			 *    If there is no matching post data set, we set $value to null
			 *
			**/
			if(isset($source[$item])) {
				if(!is_array($source[$item])) 
				{
					$value = trim($source[$item]);
				}
			    
			} else {
			    $value = null;
			}
			// Convert $item to HTML entities
			$item = escape($item);
			
		
			$error_field_name = (isset($rules['field_name'])) ? $rules['field_name'] : $item;


			if ($rule === 'required' && (!is_array($value) && !isset($value) || !$value)) {
			    if(isset($rules['error_wording'])) {
				$this->addError($rules['error_wording'], $error_field_name);
			    } else {
				$this->addError(ucfirst($error_field_name) . " is required", $error_field_name);
			    }

			}  else if(!empty($value)) {
			    switch ($rule) {
				case 'min':
				    if (strlen($value) < $rule_value) {
					$this->addError("The {$item} must be a minimum of {$rule_value} characters", $error_field_name);
				    }
				break;

				case 'max':
				    if (strlen($value) > $rule_value) {
					$this->addError("The {$item} must be a maximum of {$rule_value} characters", $error_field_name);
				    }
				break;

				case 'matches':
				    if ($value != $source[$rule_value]) {
					if(isset($rules['error_wording'])) {
					    $this->addError($rules['error_wording'], $error_field_name);
					} else {
					    $this->addError("{$rule_value} must match {$item}", $error_field_name);
					}

				    }
				break;

				case 'unique':
				    $check = $this->db->get($rule_value, array($item, "=", $value));
				    if ($check->count()) {
					$this->addError(ucfirst($error_field_name) . " already exists", $error_field_name);
				    }
				break;

			
				case 'preg_match':
				if (!preg_match(Globals::get('validation_rules/'.$rule_value), $value)) {
				    if(isset($rules['error_wording'])) {
					$this->addError($rules['error_wording'], $error_field_name);
				    } else {
					$this->addError("{$rule_value} must preg match {$item}", $error_field_name);
				    }

				}
				break;

				case 'filter':
				    if($rule_value == 'email') {
					if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {
					    if(isset($rules['error'])) {
						$this->addError($rules['error'], $item);
					    } else {
						$this->addError("The {$rule_value} did not match the required filter.", $item);
					    }
					}
				    }
				break;

				default:
				    # code...
				break;
			    }

			}
		    }
	    }
        }
        if (empty($this->_errors)) {
           $this->_passed = true;
        }

        return $this;
    }

    private function addError($error, $field) {
        $this->_errors[$field] = $error;
    }

    public function errors() {
        return $this->_errors;
    }

    public function passed() {
        return $this->_passed;
    }
}









<?php

/**
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the initiation file
require_once '../config.php';

class Shared_Generate {
	
	protected function global_basics_validation () 
	{
		return array(
			'scenarios' => array(
				'required' => true,
				'min' => 1,
				'max' => 100,
			),
			'refNumber' => array(
				'required' => true,
				'min' => 2,
				'max' => 6,
				'error_wording' => 'Must have a reference number'
			),
		);
	}
	
	public function set_basics_array () 
	{
		$array = array();
		for($scenario=1; $scenario <= $_SESSION['post_data']['scenarios']; $scenario++) 
		{
			$array[$scenario] = array (
			);
			
			if($_SESSION['post_data']['trans_type'] == 'p') 
			{
				$key = array_rand($_SESSION['post_data']['pay_method']);
				$array[$scenario]['pay_method'] = $_SESSION['post_data']['pay_method'][$key];
			}
			
			if($_SESSION['post_data']['test_or_live'] == 'l') 
			{
				unset($_SESSION['post_data']['set_link']);
			}
		}
		
		return $array;
	}

}









<?php

/**
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the initiation file
require_once '../config.php';

class Pet_Form Extends Shared_Form {
	
	 public function __construct()
	{
		return '  form';
	} //__construct ()

	/**
	 * Create a new Database instance
	 *
	 * Creates a new instance of the database class that can be assigned to a
	 * variable and re-used.
	 *
	 * @return Database connection
	 * @example $this->db = DB::dbConnect();
	 */
	private function dbConnect()
	{
		// If an instance has not already been set, set it
		if(!isset(self::$_instance)) {
			self::$_instance = new DB();
		}
		// Return the instance
		return self::$_instance;
	} // dbConnect()
	
	public function basics($errors) 
	{
		return $this->basic_details($errors);
	}
	
	public function people($errors) 
	{
		return $this->people_details($errors);
	}

}









<?php

/**
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the initiation file
require_once '../config.php';

class Shared_Form {
	
	 public function __construct()
	{
		
	} //__construct ()

	/**
	 * Create a new Database instance
	 *
	 * Creates a new instance of the database class that can be assigned to a
	 * variable and re-used.
	 *
	 * @return Database connection
	 * @example $this->db = DB::dbConnect();
	 */
	private function dbConnect()
	{
		// If an instance has not already been set, set it
		if(!isset(self::$_instance)) {
			self::$_instance = new DB();
		}
		// Return the instance
		return self::$_instance;
	} // dbConnect()
	
	protected function basic_details($errors)
	{
		$output = '<div class="row">';
		
		$output .= '<div class="col-12 col-md-5">';
		$output .=  $this->scenarios ($errors);
		$output .= '</div><!-- scenarios -->';
		
		$output .= '<div class="col-12 col-md-7">';
		$output .= $this->ref ($errors);
		$output .= '</div><!-- ref -->';
		
		$output .= '<div class="col-12">';
		$output .= $this->title ($errors);
		$output .= '</div><!-- description -->';
		
		$output .= '<div class="col-12">';
		$output .= '<div class="row">';
		
		// Transtype
		$output .= '<div id="trans-type" class="col-12 col-md-4">';
		$output .= $this->trans_type ($errors);
		$output .= '</div><!-- #trans-type -->';
		
		// Payment method
		$payment_visibility = (isset($_POST['trans_type']) && $_POST['trans_type']=='p') ? 'visible' : 'invisible' ;
		$output .= '<div id="payment-method" class="col-12 col-md-8 ' . $payment_visibility . '">';
		$output .= $this->payment_method ($errors);
		$output .= '</div><!-- #payment-method -->';
		
		
		$output .= '</div><!-- row -->';
		$output .= '</div><!-- description -->';
		
		$output .= '</div><!-- row -->';
		
		$output .= '<hr>';
		
		$output .= '<div class="row">';
		$output .= '<div id="site-type" class="col-4">';		
		$output .= $this->site_type ($errors);
		$output .= '</div><!-- #site-type -->';
		
		$link_visibility = (!isset($_POST['test_or_live']) || $_POST['test_or_live']=='t') ? 'visible' : 'invisible' ;
		$output .= '<div id="set-link" class="col-8 ' . $link_visibility . '">';
		$output .= $this->set_link ($errors);
		$output .= '</div><!-- #payment-method -->';
		
		$output .= '</div><!-- row -->';
		
		
		return $output;
	} // basic_details ()
	
	
	private function scenarios ($errors) 
	{	
		// Set error_details to null to clear the last function
		$this->error_details = null;
		
		// Set a variable to be used throughout. This should match the name of the table column it is populating. 
		$variable = 'scenarios';
		
		// If the form has been posted (and therefore failed) set the value to re-populate with
		$value = (null !== Input::get($variable)) ? Input::get($variable) :  '50';
		
		/*
			If there are errors for this input, use the set_errors() function to set the field and label classes, as well as the 
			error text to show below the input.
		*/ 
		if(isset($errors[$variable])) 
		{
			$this->error_details =$this->error_details =$this->error_details = $this->set_errors($errors[$variable]); 
		}
		
		// Start the label
		$output = '<label for="' . $variable . ' " class="font-weight-bold ';
		
		// If there is a validation error, add the class to the label
		$output .= $this->set_label_error();
		
		// End the label
		$output .=  '">' . ucfirst($variable) . ' <span class="text-danger">*</span></label>';
		
		// Set the help stuff
		$output .= helpBox (
			array (
				'title' => 'Scenarios',
				'content' => 'The number of scenarios that you want included. It is recommended to do a maximum of 50 at a time.',
				'placement' => 'bottom'
				//'placement' => 'right'
			)
		); 
		
		// Start the input
		$output .= '<input type="number" class="form-control numScenarios mb-2 ';
		
		// If there is a validation error, add the class to the input
		$output .= $this->set_input_error();
		
		// End the input
		$output .=  '" name="' . $variable . '" min="1" max="100" value="'.$value.'">';
		
		// If there is a validation error, add the error text
		$output .= $this->set_error_text();
		
		return $output;

	} // scenarios ()
	
	private function ref ($errors) 
	{
		// Set error_details to null to clear the last function
		$this->error_details = null;
		
		// Set a variable to be used throughout. This should match the name of the table column it is populating. 
		$variable = 'refNumber';
		
		// If the form has been posted (and therefore failed) set the value to re-populate with
		$value = (null !== Input::get($variable)) ? Input::get($variable) :  '';
		
		/*
			If there are errors for this input, use the set_errors() function to set the field and label classes, as well as the 
			error text to show below the input.
		*/ 
		if(isset($errors[$variable])) 
		{
			$this->error_details = $this->set_errors($errors[$variable]); 
		}
		
		// Start the label
		$output = '<label for="' . $variable . ' " class="font-weight-bold ';
		
		// If there is a validation error, add the class to the label
		$output .= $this->set_label_error();
		
		// End the label
		$output .=  '">' . ucfirst($variable) . ' <span class="text-danger">*</span></label>';
		
		// Set the help stuff
		$output .= helpBox (
			array (
				'title' => 'Reference',
				'content' => 'Use the reference number for your test, including the letters (PR/HD/etc) so it is easier to find them again at a later date.<br>If you are just playing around, use something like TEST or something obvious. Do not use real references for test runs.',
				//'placement' => 'right'
			)
		); 
		
		// Start the input
		$output .= '<input type="text" class="form-control ' . $variable . ' mb-2 ';
		
		// If there is a validation error, add the class to the input
		$output .= $this->set_input_error();
		
		// End the input
		$output .=  '" name="' . $variable . '" placeholder="eg. PR6733" value="'.$value.'">';
		
		// If there is a validation error, add the error text
		$output .= $this->set_error_text();
		
		return $output;
		
	} // ref ()
	
	private function title ($errors) 
	{
		// Set error_details to null to clear the last function
		$this->error_details = null;
		
		// Set a variable to be used throughout. This should match the name of the table column it is populating. 
		$variable = 'title';
		
		// If the form has been posted (and therefore failed) set the value to re-populate with
		$value = (null !== Input::get($variable)) ? Input::get($variable) :  '';
		
		/*
			If there are errors for this input, use the set_errors() function to set the field and label classes, as well as the 
			error text to show below the input.
		*/ 
		if(isset($errors[$variable])) 
		{
			$this->error_details = $this->set_errors($errors[$variable]); 
		}
		
		// Start the label
		$output = '<label for="' . $variable . ' " class="font-weight-bold ';
		
		// If there is a validation error, add the class to the label
		$output .= $this->set_label_error();
		
		// End the label
		$output .=  '">' . ucfirst($variable) . ' <span class="text-danger">*</span></label>';
		
		// Set the help stuff
		$output .= helpBox (
			array (
				'title' => 'Title',
				'content' => 'Give title with a clear description of the run to make it easier to find and re-run at a later date.<br>
				If you are running several batches, number them (such as Preload Quotes 1, Preload Quotes 2) so it is easier to tell them apart.',
				//'placement' => 'right'
			)
		); 
		
		// Start the input
		$output .= '<input type="text" class="form-control ' . $variable . ' mb-2 ';
		
		// If there is a validation error, add the class to the input
		$output .= $this->set_input_error();
		
		// End the input
		$output .=  '" name="' . $variable . '" placeholder="eg. Preload Quotes 3" value="'.$value.'">';
		
		// If there is a validation error, add the error text
		$output .= $this->set_error_text();
		
		return $output;
	} // description ()
	
	private function trans_type ($errors) 
	{	
		$output = '<label for="description" class="font-weight-bold">TransType <span class="text-danger">*</span></label>';
		$output .= helpBox (
			array (
				'title' => 'TransType',
				'content' => 'Choose whether you want the scenarios to be quotes or policies.
				<br>
				There is currently no function to mix these so, if you need both, you will need to run separate batches.',
				//'placement' => 'right'
			)
		); 
		
		$trans_type_array = array (
			'Quotes' => array (
				'data' => 'q'
			), 
			'Policies' => array (
				'data' => 'p'
			)
		);

		$checked = (null !== Input::get('trans_type')) ? Input::get('trans_type') :  'q';
		foreach ($trans_type_array as $key => $value) 
		{
			$output .= '<div class="custom-control custom-radio">';
			
			$output .= '<input type="radio"  id="trans_type_'.$value['data'].'"  name="trans_type" class="custom-control-input" value="'.$value['data'].'"';
			if($checked == $value['data']) {$output .= ' checked';}
			$output .= '>';
			$output .= '<label class="custom-control-label" for="trans_type_'.$value['data'].'">'.$key.'</label>';
			
			$output .= '</div>';
		}


		
		
		return $output;
	} // scenarios ()
	
	private function site_type ($errors) 
	{	
		
			
		$output = '<label for="description" class="font-weight-bold">Test or Live <span class="text-danger">*</span></label>';
		$output .= helpBox (
			array (
				'title' => 'Test or Live',
				'content' => 'Choose whether you want the scenarios to be run in a specific test environment or in live.
				<br>
				If live is selected, all policyholder first names will be \'Citestuser\' and all scenarios will be quotes, even if policies had been selected.',
				//'placement' => 'right'
			)
		); 
		
		$output .= '<div class="custom-controls-stacked">';
		
		$trans_type_array = array (
			'Test' => array (
				'data' => 't'
			), 
			'Live' => array (
				'data' => 'l'
			)
		);
		
		$checked = (null !== Input::get('test_or_live')) ? Input::get('test_or_live') :  't';
		foreach ($trans_type_array as $key => $value) 
		{
			
			$output .= '<div class="custom-control custom-radio">';
			
			$output .= '<input type="radio"  id="test_or_live'.$value['data'].'"  name="test_or_live" class="custom-control-input" value="'.$value['data'].'"';
			if($checked == $value['data']) {$output .= ' checked';}
			$output .= '>';
			$output .= '<label class="custom-control-label" for="test_or_live'.$value['data'].'">'.$key.'</label>';
			
			$output .= '</div>';

		}

		$output .= '</div><!-- .custom-controls-stacked -->';
		
		
		return $output;
	} // scenarios ()
	
	
	public function payment_method ($errors) 
	{
		// Set error_details to null to clear the last function
		$this->error_details = null;
		
		// Set a variable to be used throughout. This should match the name of the table column it is populating. 
		$variable = 'pay_method';
		
		/*
			If there are errors for this input, use the set_errors() function to set the field and label classes, as well as the 
			error text to show below the input.
		*/ 
		if(isset($errors[$variable])) 
		{
			$this->error_details = $this->set_errors($errors[$variable]); 
		}

		// Start the label
		$output = '<label for="' . $variable . ' " class="font-weight-bold ';
		
		// If there is a validation error, add the class to the label
		$output .= $this->set_label_error();
		
		// End the label
		$output .=  '">' . ucwords(str_replace("_", " ", $variable)) . ' <span class="text-danger">*</span></label>';

		// Set the help stuff
		$output .= helpBox (
			array (
				'title' => 'Payment method',
				'content' => 'Select all payment methods that you want included.
				<br>
				Note that Monthly payments are not always available. If this is the case, it will default to annual.',
				//'placement' => 'right'
			)
		); 
		

		$pay_method_array = array (
			'Monthly' => array (
				'data' => 'm'
			), 
			'Annual' => array (
				'data' => 'a'
			)
		);
		
		// Exclude Monthly payments from products that do not allow them
		if($_GET['product'] == 'tl') 
		{
			unset($pay_method_array['Monthly']);
		}
		
		$checked = (null !== Input::get('pay_method')) ? Input::get('pay_method') :  array('a');

		foreach ($pay_method_array as $key => $value) 
		{
			
			$output .= '<div class="custom-control custom-checkbox">';
			
			$output .= '<input type="checkbox"  id="pay_method'.$value['data'].'"  name="pay_method[]" class="custom-control-input" value="'.$value['data'].'"';
			if($checked && in_array($value['data'], $checked) ){$output .= ' checked';}
			$output .= '>';
			$output .= '<label class="custom-control-label" for="pay_method'.$value['data'].'">'.$key.'</label>';
			
			$output .= '</div>';

		}

		
		// Show a message on any products that do not allow monthly payments 
		if($_GET['product'] == 'tl') 
		{
			$output .= '<p class="font-italic">This product only allows Annual payments.</p>';
			
		}

		
		return $output;
	}
	
	public function set_link ($errors) 
	{	
		// Set error_details to null to clear the last function
		$this->error_details = null;
		
		// Set a variable to be used throughout. This should match the name of the table column it is populating. 
		$variable = 'set_link';
		
		// If the form has been posted (and therefore failed) set the value to re-populate with
		$value = (null !== Input::get($variable)) ? Input::get($variable) :  '';
		
		/*
			If there are errors for this input, use the set_errors() function to set the field and label classes, as well as the 
			error text to show below the input.
		*/ 
		if(isset($errors[$variable])) 
		{
			$this->error_details = $this->set_errors($errors[$variable]); 
		}
		
		// Start the label
		$output = '<label for="' . $variable . ' " class="font-weight-bold ';
		
		// If there is a validation error, add the class to the label
		$output .= $this->set_label_error();
		
		// End the label
		$output .=  '">' . ucfirst($variable) . ' <span class="text-danger">*</span></label>';
		
		// Set the help stuff
		$output .= helpBox (
			array (
				'title' => 'Set the test link ',
				'content' => 'This is the test link that you want to run the batch against. Where appropriate, ensure you use /journey/new at the end',
				//'placement' => 'right'
			)
		); 
		
		// Start the input
		$output .= '<input type="text" class="form-control ' . $variable . ' mb-2 ';
		
		// If there is a validation error, add the class to the input
		$output .= $this->set_input_error();
		
		// End the input
		$output .=  '" name="' . $variable . '" placeholder="Enter the full link" value="'.$value.'">';
		
		// If there is a validation error, add the error text
		$output .= $this->set_error_text();
		
		return $output;
	}
	
	protected function people_details($errors)
	{
		$output = '<div class="row">';
		
		$output .= '<div class="col-12  col-md-5">';
		$output .=  $this->policyholder ($errors);
		$output .= '</div><!-- policyholder -->';
		
		
		
		$output .= '</div><!-- row -->';
		
		
		return $output;
	} // people_details ()
	
	private function ph_age ($errors) 
	{	
		// Set error_details to null to clear the last function
		$this->error_details = null;
		
		// Set a variable to be used throughout. This should match the name of the table column it is populating. 
		$variable = 'ph_age';
		
		// If the form has been posted (and therefore failed) set the value to re-populate with
		$ph_min_age = (null !== Input::get('ph_min_age')) ? Input::get('ph_min_age') :  '50';
		$ph_max_age = (null !== Input::get('ph_max_age')) ? Input::get('ph_max_age') :  '70';
		
		/*
			If there are errors for this input, use the set_errors() function to set the field and label classes, as well as the 
			error text to show below the input.
		*/ 
		if(isset($errors[$variable])) 
		{
			$this->error_details =$this->error_details =$this->error_details = $this->set_errors($errors[$variable]); 
		}
		
		// Start the label
		$output = '<label for="' . $variable . ' " class="font-weight-bold ';
		
		// If there is a validation error, add the class to the label
		$output .= $this->set_label_error();
		
		// End the label
		$output .=  '">' . ucfirst($variable) . ' <span class="text-danger">*</span></label>';
		

		// Set the help stuff
		$output .= helpBox (
			array (
				'title' => 'Scenarios',
				'content' => 'The number of scenarios that you want included. It is recommended to do a maximum of 50 at a time.',
				'placement' => 'bottom'
				//'placement' => 'right'
			)
		); 
		// Start the input
		$output .= '<div class="row">';
		$output .= '<div class="input-group mb-3 col-6 col-md-12">';
		$output .= '	<div class="input-group-prepend">';
		$output .= '		<span class="input-group-text" id="basic-addon1">Min</span>';
		$output .= '	</div><!-- input-group-prepend -->';
		$output .= '	<input type="number" class="form-control numScenarios ';
		
		// If there is a validation error, add the class to the input
		$output .= $this->set_input_error();
		
		// End the input
		$output .=  '" name="ph_min_age" min="40" max="100" value="'.$ph_min_age.'">';
		
		$output .= '</div><!-- input-group -->';
		
		$output .= '<div class="input-group mb-3 col-6 col-md-12">';
		$output .= '	<div class="input-group-prepend">';
		$output .= '		<span class="input-group-text" id="basic-addon1">Min</span>';
		$output .= '	</div><!-- input-group-prepend -->';
		$output .= '	<input type="number" class="form-control numScenarios ';
		
		// If there is a validation error, add the class to the input
		$output .= $this->set_input_error();
		
		// End the input
		$output .=  '" name="ph_max_age" min="40" max="100" value="'.$ph_max_age.'">';
		
		$output .= '</div><!-- input-group -->';
		$output .= '</div><!-- row -->';
		$output .= $this->set_error_text();
		return $output;
	}
	
	private function policyholder ($errors) 
	{	
		$output = $this->ph_age($errors);
		
		return $output;

	} // scenarios ()
	
	
	
	/* 
		Set the errors 
		
		By simply passing in the required text to display under the input for invalid fields, this function 
		will create an array including that and the required label and input classes. 
	*/
	private function set_errors($text) 
	{
		$data = array (
			'label' => 'text-danger',
			'input' => 'is-invalid',
			'message' => $text,
			
		);
		
		return $data;
	}
	
	/*
		Sets the invalid class to a label
	*/
	private function set_label_error () 
	{
		if(isset($this->error_details)) 
		{
			return $this->error_details['label'];
		}
		else 
		{
			return '';
		}
	}
	
	/*
		Sets the invalid class to a input
	*/
	private function set_input_error () 
	{
		if(isset($this->error_details)) 
		{
			return $this->error_details['input'];
		}
		else 
		{
			return '';
		}
	}
	
	/*
		Sets the text to show below an invalid input 
	*/
	private function  set_error_text () 
	{
		if(isset($this->error_details)) 
		{
			return '<div class="invalid-feedback mb-2">' . $this->error_details['message'] . '</div><!-- invalid-feedback" -->';
		}
		else 
		{
			return '';
		}
	}

}









<?php
/**
 *	New form 
 *
 *	To Do's
 *	JS to show session and post data
 **/
ini_set('display_errors','On');
//echo '<pre>start';
//print_r($_SESSION);
//echo 'end</pre>';

include('../config.php');

$db = DB::dbConnect();
$output = '';
	$errors = null;
 
if(!Input::exists('get'))
{
	Redirect::to('index.php');
}

if(!Input::get('product')) 
{
	Redirect::to('404');
}

if(!$db->get('products', array('short_name', '=', Input::get('product')))->count()) 
{
	Redirect::to('404');
}

$product = $db->get('products', array('short_name', '=', Input::get('product')));

	
if($_POST) {

	$validate = new Validate ();

	
	$generate_class = $product->first()->prod_name . '_Generate';
	$generate_class = new $generate_class();
	nicePrint_r($generate_class -> validation_stuff());
	$validation = $validate->check(
		$_POST, 
		$generate_class -> validation_stuff()
	);

	if($validation->passed()) {
		$_SESSION['post_data'] = $_POST;
		Redirect::to('generate.php?product=' . Input::get('product'));
	} else {
		$errors = $validation->errors();

		$output .=  '<div class="alert alert-danger" role="alert">';
		$output .=  '<h4 class="alert-heading">Batch not generated!</h4>';
		$output .=  '<p class="font-italic">Please correct the following errors...</p>';
		$output .=  '<ul>';
		foreach ($validation->errors() as $error) {
			$output .= '<li>' . $error . '</li>';
		}
		$output .=  '</ul>';
		$output .=  '</div><!-- validation alert -->';
	}
	
	
}

nicePrint_r($_POST);



$form_class = $product->first()->prod_name . '_Form';
$form_class = new $form_class();



$output .= '<span class="text-danger">*</span><small><i> Denotes a required field</i></small>';
 
 $output .= '<form action="" method="post">';
 
$output .= '<div class="card text-dark bg-light mt-2">';
$output .= '<div class="card-header"><h4 class="card-title mb-1">Basic Details</h4></div>';
$output .= '<div class="card-body">';
$output .= $form_class ->basics($errors);
$output .= '</div>';
$output .= '</div>';

$output .= '<div class="card text-dark bg-light mt-2">';
$output .= '<div class="card-header"><h4 class="card-title mb-1">People Details</h4></div>';
$output .= '<div class="card-body">';
$output .= $form_class ->people($errors);
$output .= '</div>';
$output .= '</div>';

$output .= '<div class="col clearfix" >';
$output .= '<button type="submit" name="submitButton" class="btn btn-sm btn-primary generate mt-2 float-right"> <strong> <span class="fa fa-download mr-1" aria-hidden="true"></span> Generate the script! </strong></button>';
$output .= '</div>';
$output .= '</form>';


 $output .= '<hr>';


include('../assets/classes/Core_Template.php');

$template = new Core_Template (
	array(
		'content' => $output,
		'version' => 'right-col',
		'page_title' => $product->first()->prod_name . ' Form',
		'page_subtitle' => 'Fill out all the required details for your ' . $product->first()->prod_name . ' scenarios....',
		'include' => null
	)

 );
 
?>
<script>
	$(function () {
		$('[data-toggle="popover"]').popover()
	})
	
	$(document).ready(function () {
		 $('input[name=trans_type]').on('click', function () {
			 var display = 'invisible';
			 var nodisplay = 'visible';
			 
			  if($(this).val() == 'p') 
			 {
				 display = 'visible';
				 nodisplay = 'invisible';
			 }
			 
			$(' #payment-method').removeClass(nodisplay).addClass(display) ;
				 
		});	 
		
		$('input[name=test_or_live]').on('click', function () {
			 var display = 'visible';
			 var nodisplay = 'invisible';
			 
			  if($(this).val() == 'l') 
			 {
				 display = 'invisible';
				 nodisplay = 'visible';
			 }
			 
			$(' #set-link').removeClass(nodisplay).addClass(display) ;
				 
		});	 
		
	});
	
	
</script>











<?php
include('Bootstrap.php');
/**
 * Main Template
 *
 * This file contains actual content of the page and buiilds the template
 * using the functions in Base_Template.
 *
 * @package     Core
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright     Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example     new Main_Template($params)
 * @return         Entire HTML page
 */
class Core_Template
{
        // To allow for multiple versions of the same template, we can pass in a version. Check content() in this Class to see how it is used
        
        /**
         * Construct the Page
         * @param string         $main       Page Content
         * @param string         $version    Which version of the template to show
         * @param string         $page_title The page title to send to the <head> and title
         * @param array/null     $include    Additional css and js for the page
         */
        public function __construct($params)
        {
                // Set the displayed content to $this->content
                $this->content = $params['content'];
                
                // Set any extra required css or js $this->include
                $this->include = $params['include'];
                
                // If a Page Title has been passed set $this->page_title to it
                // otherwise use 'Untitled'
                if (isset($params['page_title'])) {
                        $this->page_title = $params['page_title'];
                } else {
                        $this->page_title = 'Untitled';
                }
		
		if (isset($params['page_subtitle'])) {
                        $this->page_subtitle = $params['page_subtitle'];
                } 
                
                /**
                 * Set the layout version
                 *
                 * If a version has been passed set $this->version to it otherwise use 'default'
                 *
                 * There are currently five layout versions
                 *         default
                 *         full_width
                 *         left-col
                 *         right-col
                 *         two-col
                 *
                 * In content() we call a different function depending on which version
                 * has been requested.
                 *
                 * @var string
                 */
                if ($params['version']) {
                        $this->version = $params['version'];
                } else {
                        $this->version = 'default';
                }
                
                // Call the template function, including any extra required css or js
                self::Template($params['include']);
                
        } // __construct
        
        
        /**
         * Build the entire template
         *
         * We build this up gradually via functions contained eihter in this file or in
         * the Base_Template file it extends
         * @return     HTML page
         */
        private function Template()
        {
                // Build the start of the page up to the opening body tag, including the <head>
                $display = self::bodyStart();
                
                // Build banner
                $display .= self::banner();
                
                // Build top navigation bar
                $display .= self::topNav();
                
                // Build the container that holds the content and set the Page Title
                $display .= self::contentStart();
                
                // Show the actual content for the page
                $display .= self::content();
                
                // Close the container that holds the content
                $display .= self::contentEnd();
                
                // Show the footer
                $display .= self::footer();
                
                // Show any requested scripts and close of the <body> and <html> tags
                $display .= self::bodyEnd();
                
                echo $display;
        } // Template()
        
        /**
         * Create the top banner
         *
         * @return string                     Banner
         */
        public function banner()
        {
                
                $out = '<div class="container-fluid bg-info text-light pb-2">';
                $out .= '<div class="container">';
                $out .= '<h1>UAT Hub</h1>';
                $out .= '</div>';
                $out .= '</div>';
                
                // Echo out everything created in the function
                echo $out;
                
        } // banner()
        
        /**
         * Build the HTML down to the opening body tag and include extra css
         *
         * @return string                     Template to the opening <body> tag
         */
        public function bodyStart()
        {
                
                // Start off by specifying the doctype
                $out = ' <!doctype html>';
                
                // Open the html tag
                $out .= '<html lang="en">';
                
                
                /**
                 * Include the <head> section
                 *
                 * If a page needs any extra css apart from the default, this will
                 * have been specified using an $include array when calling new Main_Template.
                 *
                 * These will be set using their Globals::get() reference
                 *
                 * @var array/null
                 */
                $out .= self::head();
                
                // Open the body tag
                $out .= '<body class="bdy">';
                
                // Echo out everything created in the function
                echo $out;
        } // bodyStart()
        
        /**
         * Finish the HTML
         *
         * @return string                     Template for the end of the HTML
         */
        public function bodyEnd()
        {
                
                /**
                 * Include any extra js
                 *
                 * If a page needs any extra js apart from the default, this will
                 * have been specified using an $include array when calling new Main_Template.
                 *
                 * These will be set using their Globals::get() reference
                 *
                 * @var array/null
                 */
                $out = self::scripts();
                
                // Close the body tag
                $out .= '</body>';
                
                // Close the html tag
                $out .= '</html>';
                
                // Echo out everything created in the function
                echo $out;
                
        } // bodyEnd()
        
        /**
         * Start the content
         *
         * @return string     Start of the content section up to the masthead
         */
        private function contentStart()
        {
                echo '<div class="container">';
                echo '<div class="container masthead border border-1 border-top-0 border-left-0 border-right-0  border-secondary mb-2">';
                
                echo ' <h1 class="title">' . $this->page_title . '</h1>';
		if(isset($this->page_subtitle)) 
		{
			 echo ' <p class="lead description">'.$this->page_subtitle.'</p>';
		}
               
                echo ' </div>';
        } // contentStart()
        
        /**
         * End the content
         *
         * @return string     Closes the container
         */
        private function contentEnd()
        {
                echo '</div> <!-- container -->';
        } // contentEnd()
        
        /**
         * Show the actual page content
         *
         * We show the actual content of the page using a pre-defined layout version passed
         * in when calling the template.
         *
         * Each layout is created using makeRow() and makeColumn() functions in the
         * Bootstrap class.
         *
         * We start by making a row with an id of 'main_content'.
         * Inside that we place an array ($inc) of each seperate column builder
         * function we require.
         *
         * The available columns are
         *     mainColumn_full ()        col-sm-12
         *         Outputs $this->content
         *
         *     mainColumn ()            col-sm-9
         *         Outputs $this->content
         *
         *     mainColumn_small()         col-sm-6
         *         Outputs $this->content
         *
         *     left_Column()         col-sm-6
         *         Outputs specified data
         *
         *     right_Column()         col-sm-6
         *         Outputs specified data
         *
         * @return string      Page content
         */
        private function content()
        {
                
                
                // Check which version we are after
                if ($this->version == 'full-width') {
                        /*
                        'full-width'
                        
                        Just a full width content column
                        */
                        echo Bootstrap::makeRow($id = 'main_content', $class = '', $inc = array(
                                self::mainColumn_full()
                        ));
                        
                } else if ($this->version == 'left-col') {
                        /*
                        'left-col'
                        
                        The left column and a standard content column
                        */
                        echo Bootstrap::makeRow($id = 'main_content', $class = '', $inc = array(
                                self::left_Column(),
                                self::mainColumn()
                        ));
                        
                } else if ($this->version == 'right-col') {
                        /*
                        'right-col'
                        
                        The right column and a standard content column
                        */
                        echo Bootstrap::makeRow($id = 'main_content', $class = '', $inc = array(
                                self::mainColumn(),
                                self::right_Column()
                        ));
                        
                } else if ($this->version == 'two-col') {
                        /*
                        'two-col'
                        
                        The left and right columns and a small content column
                        */
                        echo Bootstrap::makeRow($id = 'main_content', $class = '', $inc = array(
                                self::left_Column(),
                                self::mainColumn_small(),
                                self::right_Column()
                        ));
                        
                } else {
                        echo Bootstrap::makeRow($id = 'main_content', $class = '', $inc = array(
                                self::left_Column(),
                                self::mainColumn()
                        ));
                }
                
        } // content()
        
        /**
         * Build the <head> section
         *
         * Builds the entire <head> tag and includes any specified
         * page specific css
         *
         * @return string                      <head> section
         */
        private function head()
        {
                $title = isset($this->page_title) ? $this->page_title : 'UAT Hub';
                // Open the <head> tag
                $out   = '<head>';
                // Include the <meta> tags
                $out .= ' <meta charset="utf-8">';
                
                // Include the <meta> tags
                $out .= '<meta name="description" content="Admin Login">';
                $out .= '<meta name="author" content="Steve Ball">';
                $out .= '<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">';
                $out .= '<meta name="description" content="Framework - Front End">';
                $out .= '<meta name="keyword" content="Bootstrap,Admin,Template,PHP,MVC,Framework,jQuery,CSS,HTML,Dashboard">';
                
                // Set the Page Title
                $out .= '<title>' . $title . '</title>';
                
                // Link the Favicon
                $out .= '<link rel="shortcut icon" href="/favicon.ico">';
                
                // Call in the stylesheets
                $out .= '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy" crossorigin="anonymous">';
                $out .= '<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">';
                $out .= '<link rel="stylesheet" href="/includes/css/site.css">';
                
                // Include any page-specific css files
                //$out .=  getIncludeFiles ($this->include, 'css');
                
                $out .= '<!--[if lt IE 9]>';
                $out .= '   <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js"></script>';
                $out .= '  <![endif]-->';
                $out .= '</head>';
                
                return $out;
                
        } // head()
        
        private function mainColumn()
        {
                return Bootstrap::makeColumn($id = 'main_content_inner', $class = 'col-sm-9', $inc = array(
                        $this->content
                ));
        } // mainColumn ()
        
        // Content Column for full-width layout
        private function mainColumn_full()
        {
                return Bootstrap::makeColumn($id = 'main3', $class = 'col-sm-12', $inc = array(
                        $this->content
                ));
        } // mainColumn_full ()
        
        // Content Column for two-col layout
        private function mainColumn_small()
        {
                return Bootstrap::makeColumn($id = 'main3', $class = 'col-sm-6', $inc = array(
                        $this->content,
                        $this->extra()
                ));
        } // mainColumn_small ()
        /**
         * Basic outputs for test
         *
         * These are just temporary functions to show something in the
         * left and right columns.
         *
         * Both will be replaced with something more useful.
         */
        private function left_user()
        {
                
                $out = '<div class="card menu">';
                $out .= '  <div class="card-block">';
                $out .= '   <h4 class="card-title">User Menu</h4>';
                $out .= '  </div>';
                
                $out .= '<li class="list-group-item">Coming soon..</li>';
		$out .= '  </div>';
               
                return $out;
        }
        
        private function left_menu()
        {
                
                $out = '        <div class="card menu">';
                $out .= '  <div class="card-block">';
                $out .= '   <h4 class="card-title">Batch Menu</h4>';
                $out .= '  </div>';
                $out .= '  <ul class="list-group list-group-flush">';
                $out .= '   <li class="list-group-item"><a href="/Selenium/batches" class="card-link">Home</a></li>';
                $out .= '    <li class="list-group-item">Dapibus ac facilisis in</li>';
                $out .= '    <li class="list-group-item">Vestibulum at eros</li>';
                $out .= ' </ul>';
                $out .= ' <div class="card-block">';
                $out .= '  <a href="#" class="card-link">Card link</a>';
                $out .= '   <a href="#" class="card-link">Another link</a>';
                $out .= ' </div>';
                $out .= '</div>';
                
                return $out;
        }
        
        
        // Left Column for default, left-col and two-col layouts
        private function left_Column()
        {
                return Bootstrap::makeColumn($id = 'left', $class = 'left-col col-sm-3', $inc = array(
                        // Show the left_user() and left_menu() functions
                        self::left_user(),
                        self::left_menu()
                ));
        } // left_Column ()
        
        // Right Column for right-col and two-col layouts
        private function right_Column()
        {
                return Bootstrap::makeColumn($id = 'left', $class = 'left-col col-sm-3', $inc = array(
                        // Show the left_user() and left_menu() functions
                        self::left_user(),
                        self::left_menu()
                ));
        } // right_Column ()
        
        
        /**
         * Build the required scripts
         *
         * Builds the js and third party scripts
         *
         * @return string                      <head> section
         */
        private function scripts()
        {
                // Include any common js files
                echo '<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>';
                echo '<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>';
                echo '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/js/bootstrap.min.js" integrity="sha384-a5N7Y/aK3qNeh15eJKGWxsqtnX/wWdSZSKp+81YjTmS15nvnvxKHuzaWwXHDli+4" crossorigin="anonymous"></script>';
               // echo '<script src="/includes/js/default.js"></script>';
                
                // Include any page-specific js files
                // getIncludeFiles ($this->include, 'js');
                
        } // scripts()
        
        /**
         * Build the top navigation menu
         *
         * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
         * in the required links and dropdowns
         *
         * @return string     nav
         */
        public function topNav()
        {
                // Main Site Top Navigation Menu
                $top_nav = array(
                        'Home' => array(
                                'link',
                                '/'
                        ),
                        'Users' => array(
                                'link',
                                '/Users/'
                        ),
                        'Selenium' => array(
                                'dropdown',
                                array(
                                        'Overview' => array(
                                                'link',
                                                '/Selenium/'
                                        ),
                                        'Batches' => array(
                                                'link',
                                                '/Selenium/Batches'
                                        )
                                )
                        ),
                        'Templates' => array(
                                'link',
                                '/Templates'
                        )
                );
                
                $out = '<nav class="navbar navbar-expand-lg navbar-dark bg-dark sticky-top">';
                $out .= '    <div class="container">';
                $out .= '        <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#main-nav" aria-controls="main-nav" aria-expanded="false" aria-label="Toggle navigation">';
                $out .= '            <span class="navbar-toggler-icon"></span>';
                $out .= '        </button>';
                $out .= '      <div class="collapse navbar-collapse" id="main-nav">';
                $out .= '          <ul class="navbar-nav mr-auto">';
                
                /**
                 * Loop through the menu array and build the menu
                 *
                 * If the 'type' is set as 'link' we will create a simple <li><a>.
                 * If the 'type' is set as 'dropdown' we will create a dropdown
                 * <li><a> with a div containing all the links.
                 * @var array
                 */
                foreach ($top_nav as $key => $value) {
                        // 'type' is set as 'link'
                        if ($value[0] == 'link') {
                                /*
                                Build a <li> with the class of .nav-item
                                Inside this put an <a> with a value of $value[1] (the link)
                                and a display of $key (the link name)
                                */
                                $out .= '<li class="nav-item">';
                                $out .= '  <a class="nav-link" href="' . $value[1] . '">' . $key . '</a>';
                                $out .= '</li>';
                        }
                        
                        // 'type' is set as 'dropdown'
                        if ($value[0] == 'dropdown') {
                                /*
                                Build a <li> with the class of .nav-item dropdown .
                                
                                Inside this, build an <a> with a class of dropdown-toggle. This
                                will then use the Bootstap toggle class.
                                Set the id to the $key (the link name) appended with '_menu'. This
                                will be to target the correct dropdown menu. Also set the display to $key.
                                
                                Build a <div> with the class of .dropdown-menu. Give it an
                                aria-labelledby of $key appended with '_menu' so it matches
                                the <a> that triggers it.
                                
                                Finally, inside the div, loop through the links (stored in $value[1]) and creat an <a> for each one.
                                */
                                $out .= '<li class="nav-item dropdown">';
                                $out .= '  <a class="nav-link dropdown-toggle" id="' . $key . '_menu" href="#" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">' . $key . '</a>';
                                $out .= '  <div class="dropdown-menu" aria-labelledby="' . $key . '_menu">';
                                
                                foreach ($value[1] as $menu => $item) {
                                        $out .= '  <a class="dropdown-item" href="' . $item[1] . '">' . $menu . '</a>';
                                }
                                
                                $out .= '</div>';
                                $out .= '</li>';
                        }
                }
                
                $out .= '          </ul><!-- #navbar-nav mr-auto -->';
                $out .= '          <ul class="navbar-nav right">';
                // Open a connection to the user function class
                
                
                // If the user is not logged in or is not an admin, redirect them
             /*   if ($_SESSION['userid'] > 5) {
                        $out .= '<li class="nav-item dropdown">';
                        $out .= '<a class="nav-link dropdown-toggle" id="Logged_in" href="#" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">Your settings</a>';
                        $out .= '<div class="dropdown-menu dropdown-menu-right" aria-labelledby="Logged_in">';
                        
                        $out .= '<a class="dropdown-item" href="/Users/Profile"> Edit Profile </a>';
                        
                        $out .= '<a class="dropdown-item" href="?logout=true"> Logout </a>';
                        $out .= '</div>';
                        $out .= '</li>';
                }
                */
                $out .= '          </ul><!-- #navbar-nav right -->';
                $out .= '      </div><!-- #main-nav -->';
                $out .= '    </div><!-- .container -->';
                $out .= '</nav><!-- nav -->';
                
                echo $out;
        } // topNav()
        
        /**
         * Build footer
         *
         * Sets the page footer
         *
         * @return string     footer
         */
        public function footer()
        {
                
                $out = '<footer class="footer  bg-dark">';
                $out .= '    <div class="container">';
                $out .= '        <span class="text-white">Place sticky footer content heres.</span>';
                $out .= '    </div>';
                $out .= '</footer> ';
                
                echo $out;
        } // footer()
        
}








<?php
/**
 *	New form 
 *
 *	To Do's
 *	JS to show session and post data
 **/
ini_set('display_errors','On');
//echo '<pre>start';
//print_r($_SESSION);
//echo 'end</pre>';

include('../config.php');

$db = new DB();
 
if(!Input::exists('get'))
{
	Redirect::to('index.php');
}

if(!Input::get('product')) 
{
	Redirect::to('404');
}

if(!$db->get('products', array('short_name', '=', Input::get('product')))->count()) 
{
	Redirect::to('404');
}

$product = $db->get('products', array('short_name', '=', Input::get('product')));
$generate_class = $product->first()->prod_name . '_Generate';
$generate_class = new $generate_class();

$output = '';


nicePrint_r($generate_class-> set_basics_array () );


nicePrint_r($_SESSION['post_data']);

include('../assets/classes/Core_Template.php');

$template = new Core_Template (
	array(
		'content' => $output,
		'version' => 'right-col',
		'page_title' => $product->first()->prod_name . ' Generate',
		'page_subtitle' => 'Fill out all the required details for your ' . $product->first()->prod_name . ' scenarios....',
		'include' => null
	)

 );
 
?>









<?php

/**
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the initiation file
require_once '../config.php';

class Pet_Generate Extends Shared_Generate {
	
	 public function __construct()
	{
	echo 'Generate';
	} //__construct ()
	
	public function validation_stuff () 
	{
		$global_array = $this-> global_basics_validation (); 
		
		// Move title to global once there is something local to put here
		$local_array = array (
			'title' => array(
				'required' => true,
				'min' => 6
			),
		);
		
		if(Input::get('trans_type') == 'p' ) 
		{
			$local_array ['pay_method'] = array(
				//'field_name' => 'Payment Method',
				'required' => true,
				'error_wording' => 'You must select a payment method for policies. This has been defaulted to Annual'
			);
		}
		
		if(Input::get('test_or_live') == 't' ) 
		{
			$local_array ['set_link'] = array(
				//'field_name' => 'Payment Method',
				'required' => true
			);
		}
		
		return array_merge($global_array,$local_array);

	}	

}





