https://bootstrapious.com/p/bootstrap-sidebar













<?php

/**
 * Front End Members Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Members.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Users
 * @link 	http://yoursite/Users/{User}
 * @link 	http://yoursite/Users/Edit
 * @link 	http://yoursite/Users/Listing
 * @link 	http://yoursite/Users/Profile
 * @link 	http://yoursite/Users/ResetPassword
 * @link 	http://yoursite/Users/Verify

 */
class Ideas extends Controller
{
    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Ideas');
        $this->admins = [2,1,5];

	} // __construct ()


    public function add ($params=null) {
        if($params){Redirect::to('404'); }
        $_view_data = [
            'page_name' => 'Add New Idea',
            'page_type' => 'add',
            'form' => $this->_default_model->form(['version'=>'create']),
        ];
        $user= new M_Users();
        if(!$user->isLoggedIn()) {
            $_view_data['message'] = $this->_default_model->messages('not_logged_in');

            $_view_data['form'] = null;
        } else {


            if(Input::exists('add_idea')) {
                unset($_POST['add_idea']);

                $error = false;
                foreach ($_POST as $key => $value) {
                    if(!strlen(trim($value))) {
                        $error = true;
                    }
                }

                if($error) {
                    $_view_data['message'] = $this->_default_model->messages('idea_empty');
                } else {
                    $_view_data['message'] = $this->_default_model->messages('success');
                    $this->_default_model->create($_POST);
                }

            }
        }




        /**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/ideas',
            $_view_data
        );

    }

    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($params=null) {

        $user = new M_Users();


        $_view_data = [
            'page_name' => 'Ideas',
            'page_type' => 'overview',
            'pending_ideas' => 	$this->_default_model->count_pending_ideas(),
            'pending_comments' => 	$this->_default_model->count_pending_comments(),
            'is_admin' => ($user->isLoggedIn()  && in_array(Session::get(Settings::members()['login_session']), $this->admins)) ? true : false,
        ];

        $_view_data['list'] = $this->_default_model->listing();

        foreach ($_view_data['list'] as $key => $value) {
            $_view_data['list'][$key]->votes = $this->_default_model->listingVotes($value->id);
            $_view_data['list'][$key]->user_vote = $this->_default_model->get_user_vote($value->id);
        }


		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/ideas',
            $_view_data
        );
  	} // index()

    public function pending($type=null) {
        $user = new M_Users();
        if(!$user->isLoggedIn()  || !in_array(Session::get(Settings::members()['login_session']), $this->admins)) {
            Redirect::to('404');
        }

        $_view_data = [
            'page_name' => 'Pending',
            'page_type' => 'pending_overview',
            'pending_ideas' => 	$this->_default_model->count_pending_ideas(),
            'pending_comments' => 	$this->_default_model->count_pending_comments(),
            'is_admin' => ($user->isLoggedIn()  && in_array(Session::get(Settings::members()['login_session']), $this->admins)) ? true : false,
        ];

        if(Input::exists(['name'=>'approve_idea'])) {

            if($this->_default_model->update(Input::get('approve_idea'), ['status' => 'o'])) {
                $_view_data['message'] = $this->_default_model->messages('idea_approved');
            }
        }

        if(Input::exists(['name'=>'approve_all_comments'])) {
            if($this->_default_model->approve_all_comments($record, ['status' => 'o'])) {
                $_view_data['message'] = $this->_default_model->messages('all_comments_approved');
            }
        }

        if(Input::exists(['name'=>'approve_single_comment'])) {
            if($this->_default_model->approve_single_comment(Input::get('approve_single_comment'), ['status' => 'o'])) {
                $_view_data['message'] = $this->_default_model->messages('single_comment_approved');
            }
        }





        if ($type) {
                $_view_data['page_name'] = $_view_data['page_name'].' '.$type.'\'s';

            if ($type == 'Idea') {
                $_view_data['page_type'] = 'pending_ideas';

                if($_view_data['pending_ideas']) {
                    $_view_data['list'] = $this->_default_model->list_pending_ideas();
                } else {
                    $_view_data['message'] = $this->_default_model->messages('nothing_pending');
                }

            }

            if ($type == 'Comment') {
                $_view_data['page_type'] = 'pending_comment';
                $_view_data['list'] = $this->_default_model->list_pending_comments();
            }
        }

        $this->view(
            'home/ideas',
            $_view_data
        );
    }



    public function details($record=null) {
        $user = new M_Users();
        if(!$record) {
            Redirect::to('/Ideas');
        }
        $_view_data = [
            'page_name' => 'Viewing Idea',
            'page_type' => 'view',
            'logged_in' => $user->isLoggedIn(),
            'user_vote' => $this->_default_model->get_user_vote($record),
            'is_admin' => ($user->isLoggedIn()  && in_array(Session::get(Settings::members()['login_session']), $this->admins)) ? true : false,
        ];


        if (Input::exists(['name'=>'downvote']) || Input::exists(['name'=>'upvote'])) {

            if($this->_default_model->get_user_vote($record)) {
                $_view_data['message'] = $this->_default_model->messages('already_voted');
            } else {
                if(Input::exists(['name'=>'downvote'])) {
                    $this->_default_model->submit_vote($record, 'down');
                    $_view_data['message'] = $this->_default_model->messages('vote_saved');
                }

                if(Input::exists(['name'=>'upvote'])) {
                    $this->_default_model->submit_vote($record, 'up');
                    $_view_data['message'] = $this->_default_model->messages('vote_saved');
                }

                $_view_data['user_vote'] = $this->_default_model->get_user_vote($record);
            }

        }


        if(Input::exists(['name'=>'approve_idea'])) {
            if($this->_default_model->update($record, ['status' => 'o'])) {
                $_view_data['message'] = $this->_default_model->messages('idea_approved');
            }
        }

        if(Input::exists(['name'=>'approve_all_comments'])) {
            if($this->_default_model->approve_all_comments($record, ['status' => 'o'])) {
                $_view_data['message'] = $this->_default_model->messages('all_comments_approved');
            }
        }

        if(Input::exists(['name'=>'approve_single_comment'])) {
            if($this->_default_model->approve_single_comment(Input::get('approve_single_comment'), ['status' => 'o'])) {
                $_view_data['message'] = $this->_default_model->messages('single_comment_approved');
            }
        }


        if(Input::exists(['name'=>'add_comment'])) {
            unset($_POST['add_comment']);
            if(!strlen(trim(Input::get('details')))) {
                $_view_data['message'] = $this->_default_model->messages('comment_empty');
            } else {
                if($this->_default_model->create_comment($record, $_POST)) {
                    $_view_data['message'] = $this->_default_model->messages('comment_success');
                }
            }
        }

        if($this->_default_model->find($record)) {
            $_view_data['record'] = $this->_default_model->data();

            if(count($this->_default_model->listingComments($record))) {
                $_view_data['comments'] = $this->_default_model->listingComments($record);

                $pending_comments = 0;

                foreach ($_view_data['comments'] as $key => $value) {
                    if($value->status=='p') {
                        $pending_comments++;
                    }
                }

                if($pending_comments) {
                    $_view_data['pending_comments'] = $pending_comments;
                    $_view_data['pending_comments_form'] =$this->_default_model-> pending_comments_form();
                }


            }

            if($user->isLoggedIn()) {
                $_view_data['comment_form'] = $this->_default_model->comment_form();
            } else {
                $_view_data['comment_form'] = Php2Html::p([
                    'content' => 'You must be logged in to add a comment',
                    'class' => 'p-2 bg-light border'
                ]);
            }


            $_view_data['record']->votes = $this->_default_model->listingVotes($record);

            if($this->_default_model->data()->status == 'p'){
                $_view_data['pending_idea_form'] =$this->_default_model-> pending_idea_form();
            }
            if(
                $this->_default_model->data()->status == 'p' &&
                (
                    !$user->isLoggedIn()  || !in_array(Session::get(Settings::members()['login_session']), $this->admins)
                )
            ) {
                $_view_data['message'] = $this->_default_model->messages('unathorised');
                $_view_data['record'] = null;

            }
        } else {
            $_view_data['message'] = $this->_default_model->messages('not_found');
        }




        $this->view(
            'home/ideas',
            $_view_data
        );
    }

    public function admin($record=null, $param=null) {

        $_view_data = [
            'page_name' => 'One Thing Admin',
            'page_type' => 'admin',
        ];
        $user = new M_Users();

        if(!$user->isLoggedIn() || !$user->hasPermission('admin')) {
            $_view_data['message'] = $this->_default_model->messages('unauthorised');
        } else {

            if($record) {
                // In view mode
                if($param == 'MarkViewed') {
                    $this->_default_model->update($record, ['viewed'=>1]);
                    $_view_data['message'] = $this->_default_model->messages('marked');
                }
                $this->_default_model->find($record);
                $_view_data['record'] = $this->_default_model->data();

            } else {
                // In list mode
                $_view_data['list'] = $this->_default_model->listing();
            }
        }



        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'home/ideas',
            $_view_data
        );
    }

}






























<?php

/**
 * Front End Home Controller
 *
 * Controller for any functions/views called from the site root as well
 * as the home page itself. These are the site home page, the login page
 * and the registration page.
 *
 * This file cannot contain any functions with the same name as a any files
 * or level 1 directories in /app/controllers/
 *
 * This files also acts as a reference to how all controllers (both front-end
 * and admin) collate the information and pass this to the relevant view.
 *
 * This controller will be activated when the first parameter in the url does
 * not match any files or folders within the controllers folder.
 *
 * The examples at the end of this opening comment show the urls that call
 * this controller and each of them cause a function within this file to
 * be executed.
 *
 * For a full explanation of how the controllers work and get from receiving
 * the request to showing the content, check out the 'Amend and Extend'
 * section at https://github.com/MargateSteve/Framework/.
 *
 * Any messages that are required in the view, such as post succss or failure
 * and errors are passed in as $params['status'] with a reference to look up
 * in the models messages () function.
 *
 * @package     Core
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	    http://yoursite/
 * @link    	http://yoursite/Login
 * @link 	    http://yoursite/Register
 */
class Home extends Controller
{
    private $_args,
            $_default_model,
            $_logs,
            $_postdata,
            $_rules,
            $_user,
            $_view_data;

    /*
        As soon as this class is called, there are two things that we set for quick access whenever required.

        The first is to open the most commonly accessed model from within this file and assign that to $this->_default_model.

        The other opens the Logs core class ('/app/core/Logs.php') that controls the saving of user activity, which we assign to $this->_logs.
     */
	public function __construct () {
		$this->_default_model = $this->model('M_Users');
        $this->_logs = new Logs();
	} // __construct ()

	/**
	 * Site Home Page
	 *
	 * This is the page that will be seen when viewing the site root.
	 *
	 * This will generally show latest updates as the primary focus but for now,
     * we just show some temporary content.
     *
     * $_args is not used for anything other than to cause a 404 error if there
     * are incorrect url parameters. The index() method is purely for showing
     * the home page so if the controller has parsed the url and not found any
     * other matches, meaning we have ended up here, if there is anything left
     * in the url, we force the 404.
     *
     * At this point assuming we have passed the 404 check, We need to choose
     * the correct view to use and pass in the required details. We do this but
     * using the view() function in the '/app/core/Controller.php' class that
     * this one extends.
     *
     * view() takes two arguments. The first is a delimated path through the
     * 'app/views' folder to the required view file. For this method that is set
     * as 'home/index' which means we are sending to the view at
     * 'app/views/home/index.php'.
     *
     * The second argument is an array of page specific detail such as the page
     * title and any content to display. With thte temporary content on the home
     * page that we are using, we actually set that in the view, so all we pass
     * in this method is the page title and subtitle.  For methods that have more
     * variables and working out to do, we build the content up gradually.
	 *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	         /app/views/home/index.php
	 * @link 	         http://yoursite/
	 */
	public function index($_args=null) {
        /*
            As we are viewing the home page, we are assuming that the url will be http://yoursite/. However, if there has been a malformed url that does not match any of the controller directories or files, we will also end up at this method in this file.

            As an example, http://yoursite/GetMembers/New/ has no controller matches so by the time we get to this method, we still have 'GetMembers' and 'New' to deal with. The fact that these will be seen as an argument means that $_args no contains something and is no longer null.

            If this is the case, we redirect the user to the 404 page BUT the url in the browser will still be as entered, which we can use for loggin purposes.
         */
        if($_args){Redirect::to('404');}

        /**
         * Pass the data to the view
         *
         * We only send a page title and subtitle through. All of the content
         * for this page is hard-coded in the view file for now.
         *
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
	    $this->view(
	        'home/index',
	        [
	            /*
                    Pass the page title - will be shown at the top of the content and has the meta title in the <head> section, so will show on the browser tab.
                */
                'page_name' => 'UAT HUB',
                /*
                    Pass the page subtitle - this will be shown just below the page title. This is optional and can be ommited completely.
                */
                'page_subtitle' => 'Intranet for the UAT area',
	        ]
	    );

  	} // index()

    /**
     * Login page
     *
     * Contains the full login form along with information and help with
     * login problems. This can be accessed via the 'Login Help' link the the
     * menus but the user will also end up here upon a failed login attempt.
     *
     * Unlike the home page above, as well as passing the page title and subtitle
     * to the view, we also pass in the login form as 'form'. It is easier to set
     * this in here as we already have an open connection to model that holds it.
     * Any processing of login attempts are done via the init.php file to allow
     * logging in from any page.
     *
     * Again, we should not have any extra url parts when viewing the login page
     * so if any exist, we throw a 404 error.
     *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	         /app/views/home/login.php
	 * @link 	         http://yoursite/Login
     */
    public function login($_args=null) {
        // If we have parameters send to the 404 page
        if($_args){Redirect::to('404');}

        /*
            Pass the required data through to the view

            For now we are just passing a few counts of various sections
        */
        $this->view(
            'home/login',
            [
                'page_name' => 'Login',
                'page_subtitle' => 'Login to the site or get help if you are having trouble',
                'form' => $this->_default_model->loginform($form_params=['hide_help'=>true])
            ]
        );

    } // login()

    /**
     * Registration page
     *
     * Contains the registration form and checks for any registration attempts.
     *
     * This is far more complex than either of the other methods in this file as
     * not only does it show the required data to the user but also handles any
     * registration attempts, showing a message and adding validation classes to
     * the form as well as redirecting a user away from the page if they are
     * already logged in.
     *
     * Because this method powers several different versions of the page - initial,
     * succesful post, unsuccesful post - each with their own page titles, we
     * build up the second part of the view() function as we go along, as $_view_data
     * and then pass that into the function at the end.
     *
     * Also, as we are passing it to a view that also powers other pages, we set
     * a 'page_type' so the view knows which version we are on.
     *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	         /app/views/home/users.php
	 * @link 	         http://yoursite/Login
     */
    public function register($_args=null) {
        // If we have parameters send to the 404 page
        if($_args){Redirect::to('404');}

        /*
            As we may have different versions of the page, we set any parameters
            that we know will not or are unlikely to change. We build upon or
            amend this as we go along. 'page_name' is the same as we have used
            before, but we also send 'page_type' as 'register'.
            The view handles multiple pages so we use 'page_type' so it knows
            which version we are on and, therefore, which output to show.
         */
        $_view_data = [
            'page_name' => 'Register new account',
            'page_type' => 'register',
			'errors' => null,

        ];

        /*
            If the user is already logged in, we redirect them to the home page.

            The isLoggedIn () function in $this->_default_model ('M_Users.php') checks to see if a user $_SESSION exists and returns true or false. If true, we do not
            need to show the registration page so we redirect them to the home page.

            Again, we use Redirect::to() ('/app/core/Redirect.php') for this but use it in a slightly different way. Instead of a numbered reference, we actually use a physical path, in this case '/' to denote the home page. When using Redirect::to() like this, the redirect physically happens so the url will show 'http://yoursite/'.
         */
        if($this->_default_model->isLoggedIn()){Redirect::to('/');}

        /*
            At this point, there will have been no redirects so we do actually show the registration page. As we also handle registration attempts within the method, we first check to see if a registration attempt has been made.

            If there has been, we attempt to process it, otherwise we just show the registration form.
         */
        if (Input::exists(['name'=>'register'])) {
            /*
                A registration attempt has been made so we need to take the $_POST data and attempt to validate it before we insert it.

                We do not need to run validation against the name of the forms submit button so the first thing we do is unset that.
             */
            unset($_POST['register']);

            /*
                Now, all we have left is the actual data from the form fields, almost ready to validate. As there may be a future requiredment to preserve the original $_POST data, we create a variable called $_postdata and set $_POST to it.
             */
            $_postdata = $_POST;

            /*
                In the registration form, the 'Accept Terms' field is a checkbox. As a result, if it IS NOT checked, it will not show up in the posted data and therefore not validate correctly.

                To prevent this, we overwrite $_postdata['terms'] with the value if it has been posted, else we create it with a value of '0' if it has not.
             */
            $_postdata['terms'] = (isset($_postdata['terms'])) ? $_postdata['terms'] : 0;


            /*
                We now run another function to unset unrequired validation rules to avoid them firing on unset fields. This is done via the stripValidateRules() function in '/src/functions/global.php', passing in the $_postdata along with a list of the validation rules, stored in the validation_rules() function in the default class.
             */
            $_rules = stripValidateRules (
                $_postdata,
                $this->_default_model->validation_rules()
            );

            /*
                At this point, we have two variables that we are working with.

                $_postdata containing only the form fields we want to validate
                $_rules containing a list of validation rules only for the fields in $_postdata

                We now check these against each other in the check() function of '/app/core/Validate.php'. We initially open a new instance of the validation class and set it to $validate to be able to access the function.

                We then call the function, passing in the $_postdata and $_rules assigning anything that is returned to $validation. There are two functions now available to us
                $validation->passed() will return a true or false as to whether the validation attempt has been successful
                $validation->errors() will contain a list of errors if validation failed.

             */
            $validate = new Validate();
            $validation = $validate->check(
                $_postdata,
                $_rules
            );

            /*
                If validation has passed, we unset the 'confirm_password' and 'terms' from the $_postdata as they were only for validation purposes and do not get inserted into the database.
                We then have to add the users status depending on which registration validation method is has ben set in the settings. If we are set to automatically verify, we set the 'status' to 1 and add it to $_postdata. For any other verification method (email or manual) we do not set anything as the users table in the database defaults 'status' to '0' if it does not exist.
                We then attempt to register the user and create any messages that we need to show.

                If validation has failed, we simply show a message showing what went wrong as well as the form with validation classes.
             */
             if ($validation->passed()) {
                 // Validation passed so unset unrequired fields
                 unset($_postdata['confirm_password']);
                 unset($_postdata['terms']);

                 // If we are on automatic verification, set the 'status' to 1
                 if(Settings::members()['verification'] == 'auto' || isset($_args['auto_verify'])) {
                     $_postdata['status'] = 1;
                 }

                 /*
                    We now have everything that we need to insert the new user into the database. Again, this is done via a function in the default model - create(). This function returns a true or false depending on whether or not the insert is successful.

                    If it is successful, we set a message based on the verification method, as well as changing the page title and passing the id of the new user.

                    If it is not succesful, at this point it can only be an unspecified error so all we can do is show a message.
                  */
                 if($this->_default_model->create($_postdata)) {

                     /*
                        The insert has been succesful so we run a switch statement based on the verification method that has been set.


                      */
                     switch (Settings::members()['verification']) {
                         case 'auto':
                             $_view_data['message'] = $this->_default_model->messages('register_success_auto');
                             break;
                         case 'email':
                             $_view_data['message'] = $this->_default_model->messages('register_success_email');
                             break;
                         case 'manual':
                             $_view_data['message'] = $this->_default_model->messages('register_success_manual');
                             break;
                     }
                     $_view_data['page_name'] = 'Registration Succesful';
                     $_view_data['verification'] = Settings::members()['verification'];
                     $_view_data['insert_id'] = $this->_default_model->_insertId;
                     $this->_logs->register_success(
                         $_view_data['insert_id']
                     );

                 } else {
                     // The create was unsuccessful
                     $_view_data['status'] = 'create_failed_unspecified';
                 }
             } else {
                 // The validation failed so set the status and errors
                 $_view_data['message'] = $this->_default_model->messages('register_validation');
                 $_view_data['errors'] = $validation->errors();
                 $this->_logs->register_fail(
                     $_view_data['errors'],
                     $_postdata
                 );


                 $_view_data['form'] = $this->_default_model->userForm([
                     'errors' => $_view_data['errors'],
                     'version' => 'create',
                     'area' => 'user',
                 ]);
             }

        } else {
            // There has been no registration attempt so simply show the form
            $_view_data['form'] = $this->_default_model->userForm([
                'errors' => null,
                'version' => 'create',
                'area' => 'user',
            ]);
        } // If registration attempt

        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'home/users',
            $_view_data
        );

    } // index()

}






























<?php

/**
 * Base Template
 *
 * This file contains the core structure and functions for building the template
 * and allows several different versions to built around it. No output is actually
 * made from this file as it only contains functions to help with the template
 * construction.
 *
 * This file should never be called directly, but should be extended from another
 * class that processes the data to display, only using these functions for the
 * core global elements such as the <head> and separate opening and closing <body>
 * tags, along with the global navbar and footer.
 *
 * This means that the class file that extends this only has to deal with the
 * page-specific content and how to lay it out. An example file that extends this
 * one is T_Main.php in this folder.
 *
 * For an example of a completely self-enclosed template file look at T_Admin.php
 * in this folder.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */
class T_Base {

	/**
	 * Build the HTML down to the opening body tag and include extra css
     *
     * Creates the opening <doctype> and <html> tags, inserts the <head>
     * tag before finally creating the opening <body> tag. The closing <body>
     * and <html> tags are created in the bodyEnd() function.
     *
     * The <head> is craetd via the head() function and contains the global
     * css and meta tags as well as and page-specific ones requested when the
     * template was called.
	 *
	 * @return string 					Template to the opening <body> tag
	 */
    public function bodyStart () {

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';

        /*
            Include the <head> section, including any page-specific css, js or meta tags.

            It uses the head() function from within this file, which access various $this variables set in the __construct() in T_Main, passed in via the view, so we do not need to pass any arguments in when calling it.
         */
        $out .= self::head ();

        // Open the body tag

        $out .= '<body class="'.$this->body_class.'">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

	/**
	 * Finish the HTML
	 *
	 * @return string 					Template for the end of the HTML
	 */
    public function bodyEnd () {

		/**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

	/**
	 * Build the <head> section
	 *
	 * Builds the entire <head> tag and includes any global or
	 * page specific css and meta tags.
	 *
	 * @return     string      <head> section
	 */
    private function head () {
		/*
            We build the contents of the <head> gradually so we create a $out
            variable containing the opening tag and concatenate to it as we go along.
         */
		$out = '<head>';

		/*
            Include the <meta> tags

            Each of the meta tags should initially be stored in the meta_tags()
            function in /app/core/Settings.php with a default content to be used
            if an alternative is not set.

            For page specific meta tags, set a key/pairing array in the view as
            $params['meta'] with the name and content of each once you want to
            overwrite.

            You can also set global meta tags manually and this is required for any
            that do not use a name and content combination.
         */
        $out .=  ' <meta charset="utf-8">';

        /*
            As there may be overrides for some of the meta tags set in the page/view, we initially store the default meta tags in a $tags variable so it can be easily manipulated.
         */
        $tags = Settings::meta_tags();

        /*
            If any page-specific meta tags have been passed in, they would have
            been set to $this->meta in the called template file (by default
            /app/core/Templates/Main.php).
            We loop though these and for each one, overwrite the matching tag
            name in $tags.
         */
        if(isset($this->meta))
        {
            foreach ($this->meta as $name => $content) {

                $tags[$name] = $content;
            }
        }

        /*
            Finally, we loop through the tags array and create a meta tag for each one, adding it to the $out variable.
         */
        foreach ($tags as $name => $content) {
            $out .= Php2Html::meta([
                    'name' => $name,
                    'content' => $content
            ])."\n";
        }

		/*
            Set the Page Title

            If the page title has been passed in from the view, show the site name as set in Settings.php followed by a colon and then the page title.
            Otherwise, it just shows the site name.

            You can change this to suit your needs.
         */
		$title = isset($this->page_title) ? Settings::site_details('site_name') .': '.$this->page_title: Settings::site_details('site_name');
		$out .=  '<title>' . $title. '</title>';

		// Link the Favicon
		$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

		/*
            Call in the stylesheets

            Again, you can have global style sheets as well as page, specific ones. Wherever they are set, they are called from the css() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full stylesheet link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['css'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/site' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
		$out .= Settings::css('remote/bootstrap/v4');

        // Loop through the page specific styles
        if(isset($this->css))
        {
            foreach ($this->css as $stylesheet) {
                $out .= Settings::css($stylesheet);
            }
        }


        $out .= Settings::css('local/site');

        // Close the head tag
        $out .=  '</head>';

        // Echo the $out variable
		echo $out;

    } // head()

	/**
	 * Build the required scripts
	 *
	 * Builds the js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts () {
        $out = '';

        /*
            Call in the any scripts

            Again, you can have global scripts as well as page, specific ones. Wherever they are set, they are called from the js() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full script link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4' would return the string at
            'remote' => 'bootstrap' => 'v4'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['js'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/default' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
         $out .= Settings::js('remote/jquery');
         $out .= Settings::js('remote/popper');
         $out .= Settings::js('remote/bootstrap/v4');
         $out .= Settings::js('remote/font-awesome-5');

        // Loop through the page specific styles
        if(isset($this->js)) {
            foreach ($this->js as $script) {
                $out .= Settings::js($script);
            }
        }

        $out .= Settings::js('local/default');

        // Echo the $out variable
        echo $out;

    } // scripts()

	/**
	 * Build the top navigation menu
	 *
	 * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
	 * in the required links and dropdowns
	 *
	 * @return string 	nav
	 */
    public function topNav () {
        // Main Site Top Navigation Menu
        $nav_items = [
            'Home' => ['link', '/'],
            'Users' => ['link', '/Users/'],
            'Faults' => ['link', '/Faults/'],
            'Call Log' => ['link', '/CallLog/'],
            '\'One Thing\'' => ['link', '/OneThing/'],
            'Ideas' => ['link', '/Ideas/'],
            'Controllers' => array (
			'dropdown', array (
				'Site Root (Home/Index)' => array (
					'link', '/'
				),
				'Site Root method (Home/Method)' => array (
					'link', '/method'
				),
				'Site Root no method (Home/Index)' => array (
					'link', '/nomethod'
				),
				'Root Controller (Control)' => array (
					'link', '/control'
				),
				'Root Controller Method (Control/method)' => array (
					'link', '/control/method'
				),
				'Root Controller No Method(Control/nomethod)' => array (
					'link', '/control/nomethod'
				),
				'Folder Root (folder/Index)' => array (
					'link', '/folder'
				),
				'Folder Root method (Folder/Method)' => array (
					'link', '/folder/method'
				),
				'Folder Root no method (Folder/Index)' => array (
					'link', '/folder/nomethod'
				),
				'Folder Controller (Folder/FolderController)' => array (
					'link', '/folder/FolderController'
				),
				'Folder Controller Method (Folder/FolderController/Method)' => array (
					'link', '/folder/FolderController/Method'
				),
				'Folder SubFolder Root (Folder/SubFolder/Index)' => array (
					'link', '/folder/subfolder'
				),
				'Folder SubFolder Root controller (Folder/SubFolder/subfoldercontroller)' => array (
					'link', '/folder/subfolder/subfoldercontroller'
				),
				'Folder SubFolder Root controller method (Folder/SubFolder/subfoldercontroller/Method)' => array (
					'link', '/folder/subfolder/subfoldercontroller/Method'
				),
				'Folder SubFolder Root method (Folder/SubFolder/Method)' => array (
					'link', '/folder/subfolder/method'
				),
				'Folder SubFolder Root no method (Folder/SubFolder/Index)' => array (
					'link', '/folder/subfolder/nomethod'
				),
			)
		),

        ]; // $nav_items

        $out = '';

        $toggle_button = Php2Html::button ([
            'content' => Php2Html::span ([
                    'content' => '',
                    'class' => 'navbar-toggler-icon'
            ]),
            'class' => 'navbar-toggler navbar-toggler-right',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#main-nav',
            ],
            'aria' => [
                'controls' => 'main-nav',
                'expanded' => 'false',
                'label' => 'Toggle navigation',

            ],
        ]);

         $menu = '';
         foreach ($nav_items as $key => $value)
 		{
 			// 'type' is set as 'link'
            if($value[0] == 'link') {
 				/*
 					Build a <li> with the class of .nav-item
 					Inside this put an <a> with a value of $value[1] (the link)
 					and a display of $key (the link name)
 				 */
                 $params['href'] = $value[1];
                 $params['class'] = 'text-light';
                 $params['content'] = $key;
                 $menu .= Php2Bs::bs_nav_item ([
                     'content' => Php2Bs::bs_nav_link (
                         $params
                     )
                 ]);
            }

 			// 'type' is set as 'dropdown'
             if($value[0] == 'dropdown') {
 				/*
 					Build a <li> with the class of .nav-item dropdown .

 					Inside this, build an <a> with a class of dropdown-toggle. This
 					will then use the Bootstap toggle class.
 					Set the id to the $key (the link name) appended with '_menu'. This
 					will be to target the correct dropdown menu. Also set the display to $key.

 					Build a <div> with the class of .dropdown-menu. Give it an
 					aria-labelledby of $key appended with '_menu' so it matches
 					the <a> that triggers it.

 					Finally, inside the div, loop through the links (stored in $value[1]) and creat an <a> for each one.
 				 */
                  $links = '';
                  foreach ($value[1] as $items => $item)
                  {


                      $links .= Php2Bs::bs_dropdown_item([
							'content' => $items,
                            'href' => $item[1]
                      ]);

                       //$out .= '  <a class="dropdown-item" href="'.$item[1].'">'.$menu.'</a>';
                  }

                 $menu .= Php2Bs::bs_nav_dropdown([

                         'li' => [
                             //'class' => 'nav-item dropdown',
                         ],
                         'a' => [
                             'content' => $key,
                             'id' => $key.'_menu',
                             'class' => 'text-info-100',
                             'data_attr' => [
                                 'toggle' => 'dropdown',

                             ],
                             'aria' => [
                                 'haspopup' => 'main-nav',
                                 'expanded' => 'true',
                                 'expanded' => 'false',

                             ],
                         ],
                         'menu' => [
                             'content' => $links,
                         ]

                 ]);
             }
         }


        $nav_params['content'] = Php2Bs::bs_navbar_nav ([
			'content' => $menu
        ]);
        $nav_params['class'] = '';
        $nav_params['id'] = 'main-nav';

        $navbar_collapse = Php2Bs::bs_navbar_collapse (
            $nav_params
        );

        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            $user_button_text = 'Login';
        } else {
            $user_button_text = 'Logout / Profile';
        }

        $user_button = Php2Html::ul ([
            'content' => Php2Html::li ([
                'content' => Php2Html::a ([
                    'content' => $user_button_text,
                    'href' => '#',
                    'id' => 'user_dropdown',
                    'class' => 'nav-link dropdown-toggle ',
                    'data_attr' => [
                         'toggle' => 'collapse',
                         'target' => '#user_menu'
                    ],
                    'aria' => [
                         'controls' => 'dropdown-menu',
                         'expanded' => 'false',
                         'label' => 'Toggle user navigation'
                    ]
                ]).'<div id="user_menu" class="dropdown-menu dropdown-menu-right" aria-labelledby="user_dropdown"><div class="container-fluid">
            '.$this->user_box ().'
          </div></div>',
                'class' => 'nav-item dropdown',
            ]),
            'class' => 'navbar-nav',
        ]);


         $out = Php2Bs::bs_navbar ([
            // Navbar content
            'content' => Php2Bs::bs_container ([
                'content' =>  $toggle_button.$navbar_collapse.$user_button,
                'class' => 'text-white',
                //'type' => 'fluid'
            ]),
            'class' => 'navbar-expand-lg navbar-dark bg-dark invert sticky-top h-1 pl-2 p-md-0'


        ]);
        $out .= Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => Php2Bs::bs_container ([
                'content' => $this->user_box (),


            ]),
            'class' => 'collapse py-2 bg-light text-dark border-bottom border-dark',
            'id' => 'nav-user'
        ]);


 		echo $out;
     } // topNav()
     /**
      * Basic outputs for test
      *
      * These are just temporary functions to show something in the
      * left and right columns.
      *
      * All will be replaced with something more useful.
      */
     protected function user_box () {
         $model = new M_Users();

         if($model->isLoggedIn()) {

             $model->find(Session::get(Settings::members()['login_session']));

             $link_array = [
                 'Profile' => [
                     'href' => '/Users/'.$model->data()->username,
                 ],
                 'Edit Details' => [
                     'href' => '/Users/Edit',
                 ]
             ];

             if($model->hasPermission('admin')) {
                 $link_array['Admin Area'] = ['href' => '/Admin'];
             }


             $content = '';
             $content .= Php2Bs::bs_list_group ([
                 'content' => $link_array,
                 'group_type' => 'a',
                 'class' => ' mb-2'
             ]);

             $content .= $model->logoutForm();
         } else {
             $content = $model->loginForm();
         }

         return $content;

     }

	/**
	 * Build footer
	 *
	 * Sets the page footer
	 *
	 * @return string 	footer
	 */
    public function footer () {
        $out = Php2Bs::bs_footer ([
            'content' => Php2Bs::bs_container ([
                'content' =>  'Footer content.',
                'class' => 'text-white',
            ]),
            'class' => 'bg-dark',
        ]);
		echo $out;
    } // footer()


}






























<?php

/**
 * Database class
 *
 * Controls all database CRUD functions as well as opening up an instance
 * of this class.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the inititisation file
require_once 'src/init.php';

class DB
{
	// Set any private variables
    private static $_instance = null;
    private $_pdo,
            $_query,
            $_error = false,
            $_results,
            $_count = 0;

	/**
	 * Construct the database connection
	 *
	 *	Opens up a connection to the database and assigns it to
	 *	$this->_pdo to make it re-usable.
	 *
	 * The connection parameters are called using Globals on values held
	 * in /app/core/config_files/db.php
	 *
	 * @return 	Database connection
	 */
    private function __construct()
	{
        $db = Settings::db();

        try
		{
            $this->_pdo = new PDO('mysql:host=' . $db['host'] . ';dbname=' . $db['dbname'],  $db['username'], $db['password']);

        } catch(PDOException $e) {
            die($e->getMessage());
        }
    } //__construct ()

	/**
	 * Create a new Database instance
	 *
	 * Creates a new instance of the database class that can be assigned to a
	 * variable and re-used.
	 *
	 * @return Database connection
	 * @example $this->db = DB::dbConnect();
	 */
    public static function dbConnect()
	{
		// If an instance has not already been set, set it
        if(!isset(self::$_instance)) {
            self::$_instance = new DB();
        }
		// Return the instance
        return self::$_instance;
    } // dbConnect()

	/**
	 * Perform a query on an SQL statement
	 *
	 * All of the variables created are private so cannot be called
	 * externally, but each has it's own public function.
	 *
	 * If you are using parameters, you need to replace the position where
	 * their values would be with ?
	 *
	 * self::db()->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash));
	 *
	 * @param  string 	$sql    SQL statement
	 * @param  array  	$params Paremeters to add to the string
	 * @return array         	Query results, errors and count
	 */
    public function query ($sql, $params = array()) {
		// Set error to false by default
        $this->error = false;
		/*
			We attempt to prepare the query and if it is succesful,
			we bind the parameters and execute it.
		 */
        if ($this->_query = $this->_pdo->prepare($sql))
		{
			/*
				The query is prepared so we have to check to see if
				there are any parameters.

				If there are we loop through them annd then bind them
				to the query
			 */

			// Set the counter to one
            $x = 1;

			// Check to see if there are any parameters
            if(count($params))
			{
				/*
					There are parameters so we loop through them and
					bind each
				 */
                foreach($params as $param) {
					// Bind the parameter with it's counter position
                    $this->_query->bindValue($x, $param);

					// Increment the counter
                    $x++;
                }
            }


			/*
				Now that the parameters have been bound, we try to execute
				the query.
				If succesful we set the results and row count, otherwise we
				set the error.
			 */
            if($this->_query->execute())
			{
				// The query executed succesfully so set the results and count
                $this->_results = $this->_query->fetchAll(PDO::FETCH_OBJ);
                $this->_count = $this->_query->rowCount();
            } else
			{
				// The query failed so set error to true
                $this->_error = true;
            }
        } // prepare

		// Return anything that has been set as a result of the wquery attempt
        return $this;

    } // query ()


	/**
	 * Perfom a simple action on a table
	 *
	 * Allows you to perform a quick SELECT or DELETE on a table when
	 * only one parameter needs to be set.
	 *
	 * @param  string $action SELECT/DELETE
	 * @param  string $table  The name of the table
	 * @param  array  $where  An array of parameters - field, operator, value
	 * @return array          The output from the query() function in this class
	 */
    public function action ($action, $table, $where = array())
	{
		/*
			A $where array MUST contain exactly three paramenters for this to
			work so the first thing to do is check that.

		 */
        if (count($where) === 3)
		{
			// There are three parameters so set the available operators
            $operators = array('=', '>', '<', '>=', '<=');

			/*
				As the $where array is set as field, operator, value we can easily set them to named variables
			 */
            $field = $where[0];
            $operator = $where[1];
            $value = $where[2];

			/*
				The next check is to make sure that the supplied operator is
				one of the ones set in $operators
			 */
            if (in_array($operator, $operators))
			{
				// The operator matches so create the SQL statement
                $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";

				// Try to execute the query using the query() function.
                if(!$this->query($sql, array($value))->error()) {

					// Return anything returned from the query
                    return $this;
                }
            } // Operator check
        }// count check

        return false;
    } // action ()

	/**
	 * Perform a quick select on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example get('users', array('joined', '>', '2017-01-01'))
	 */
    public function get ($table, $where)
	{
        return $this->action('SELECT *', $table, $where);
    } // get ()

	/**
	 * Perform a quick delete on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example delete('users', array('joined', '>', '2017-01-01'))
	 */
    public function delete ($table, $where)
	{
        return $this->action('DELETE', $table, $where);
    } // delete ()


	/**
	 * Insert a row into a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example insert('users', array('username' => 'SteveB', 'active' => '1'))
	 */
    public function insert ($table, $fields = array())
	{
		/*
			The $fields array will have a $key => $value pairing for
			each field having data inserted. The $key will matche the
			table field name and the $value will be the value to insert.

			We use array_keys extract the keys from the $fields array
			and assigned them to $keys.
		 */
        $keys = array_keys($fields);

		// Create a default $values variable
        $values = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create a ? to
			place in the fields section of the insert statement
		 */
        foreach($fields as $field)
		{
			// Add a placeholder to $values
            $values .= '?';

			// If we are not on the last pairing, add a comma to $values
            if ($x < count($fields))
			{
                $values .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach

		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the fields and values.

			Using the example at the top of this function, the statement would be
			INSERT INTO `users` (`username`, `active`) VALUES (?, ?)

			We then pass the statement into the query() function
		 */
        $sql = "INSERT INTO `{$table}` (`" . implode('`,`', $keys) . "`) VALUES ({$values})";

		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error())
		{
			// Return anything returned from the query
			return true;
        }

        return false;

    } // insert()


	/**
	 * Update a row in a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param   int 	$id     The id of the row to update
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example update('users', 1, array('username' => 'SteveBNew', 'active' => '0'))
	 */
    public function update ($table, $id, $fields = array())
	{
		// Create a default $set variable to hold the values and fields
        $set = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create an x=? to
			place in the values section of the update statement
		 */
        foreach ($fields as $name => $value)
		{
			// Add a field = ?
            $set .= "`{$name}` = ?";

			// If we are not on the last pairing, add a comma to $set
            if ($x < count($fields)) {
                $set .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach


		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the values in $set.

			Using the example at the top of this function, the statement would be
			UPDATE `users` SET `username`='SteveBNew',`active`='0' WHERE id=1

			We then pass the statement into the query() function
		 */
        $sql = "UPDATE `{$table}` SET {$set} WHERE id = {$id}";

		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error())
		{
			// Return anything returned from the query
			return true;
        }

        return false;

    } // update ()

	//////////////////////////////////////////////////
	// Public functions to call private variables  //
	//////////////////////////////////////////////////

	// Allow a single row of results data to be called publically
    public function first ()
	{
        return $this->results()[0];
    }

	// Allow a results set data to be called publically
    public function results ()
	{
        return $this->_results;
    }

	// Return a row count
    public function count ()
	{
        return $this->_count;
    }

	// Return an error
    public function error ()
	{
        return $this->_error;
    }

     //  Get the id of the last inserted row
    public function insertId () {
       return $this->_pdo->lastInsertId();
    } // insertId ()

}






























<?php

/**
 *  Users Model
 *
 *  Contains the standard functions for data
 *  manipulation, as well as the CRUD forms and displays.
 *
 *  Note that Users have a lot more functionality than mosts sections so there is a lot more to this one than most
 *  models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';

class M_OneThing
{
    private
        $_data,
        $_db_table = 'one_thing',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the database connection
     *
     *	Opens up a connection to the database and assigns it to
     *	$this->_pdo to make it re-usable.
     *
     * The connection parameters are called using Globals on values held
     * in /app/core/config_files/db.php
     *
     * @return 	Database connection
     */
    public function __construct()
    {
        $this->_logs = new Logs();

    } //__construct ()

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db() {
        return  DB::dbConnect();
    } // db()

    public function count_unviewed_ideas() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table.' WHERE `viewed` = ?', ['0']);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    public function count_public_pending_ideas() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table.' WHERE `public` = ? AND `status` = ?', ['1', '0']);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
	 * Create a new record
	 *
	 * Collects post data, validates it and inserts it into the database
	 *
	 */
	public function create ($_params=[]) {
        $_params['created_date'] = date('Y-m-d H:i:s');
        if (!self::db()->insert($this->_db_table, $_params)){
            # maybe Redirect::to('404');
			// The insert was unsuccesful
			if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Faults->create()';
            }

			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;

	} // create()

    /**
     * Create a new record
     *
     * Collects post data, validates it and inserts it into the database
     *
     */
    public function create_follow_up ($data) {

        $data['created_by'] = Session::get('uid');
        $data['created_date'] = date('Y-m-d H:i:s');
        if (!self::db()->insert('one_thing_fu', $data)){
            # maybe Redirect::to('404');
            // The insert was unsuccesful
            if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_OneThing->create_follow_up()';
            }

            return false;
        }
        $this->_insertId = $this->db()->insertId();
        return true;

    } // create()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
         * Delete a record
         *
         *  Deletes the specified record from $this->crud_table()->name
         *
         * @param  int  $record  Record ID
         */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
			if(!self::db()->delete($this->_db_table, array('id', '=', $record)))
			{
				// The update was unsuccesful
				throw new Exception('There was a problem updating the account!');
				// Flash a generic error message
				$this->crudFlash ('generic_error');

				return false;
			}

            return true;

	} // delete()


    /**
     *  Check if a record exists
     *
     *	Checks to see if $this->data() exists following a find()
     *
     **/
    public function exists() {
      return ($this->data()) ? true : false;
    } // exists()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'title';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    public function follow_up_form () {

        $content = '';

        // Outline
        $default_var = 'details';

        $input = Php2Bs::bs_textarea ([
            'class' => 'ckeditor',
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'rows' => 6,

        ]); // Php2Bs::bs_input_text

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Outline


       // Add the button form group
       $content .= Php2Bs::bs_form_row ([
           'content' =>
           Php2Bs::bs_form_group ([
               'class' => 'col-12',
               'content' => Php2Bs::bs_button ([
                   'button_type' => 'submit',
                   'class' => 'float-right',
                   'color' => 'primary',
                   //'size' => 'sm',
                   'content' =>  'Submit',
                   'name' => 'add_follow_up'
               ]) // Php2Bs::bs_button
           ]) // Php2Bs::bs_form_group
       ]); // Button row

       // Return the form
       return Php2Html::form([
           'id' => '',
           'action' => '',
           'method' => 'post',
           'class' => '',
           'content' => $content
       ]); //  Php2Html::form
    }

    public function form ($status) {
        $_field_data = [];

        $_form_fields = [
            'details' => [
                'help_text' => 'Clear and descriptive outline of the thing.'
            ],

        ];


       foreach ($_form_fields as $key => $value) {
            // Check for errors
            if (isset($_params['errors'][$key])) {
                // Errors found for the field so add invalid class
                $_field_data[$key]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$key]['class'] = (Input::exists()) ? 'is-valid' : '';
            }
            // Check for posted data if an account update has been attempted
            if (Input::exists($key) && trim(Input::get($key)) !== false) {
                // There is posted data so set that as the value
                $_field_data[$key]['val'] = Input::get($key);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$key]['val'] = $_params['data'][$key];
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$key]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        $content = '';

        // Outline
        $default_var = 'details';

        $checkbox_row = Php2Bs::bs_form_group ([
            'class' => 'col-md-6 mb-0',
            'content' => Php2Html::div ([
                'class' => 'form-check',
                'content' => Php2Html::checkbox ([
                    'id' => 'Public',
                    'name' => 'public',
                    'checked' => '',
                    'class' => 'form-check-input',
                ]) // checkbox
                .Php2Html::label ([
                    'for' => 'Public',
                    'content' => 'Allow others to see this \'one thing\'',
                    'class' => 'mb-0',
                ]) // label
            ]) // Php2Bs::bs_input_text
        ]);

        if($status) {
            $checkbox_row .=Php2Bs::bs_form_group ([
                'class' => 'col-md-6 mb-0',
                'content' => Php2Html::div ([
                    'class' => 'form-check',
                    'content' => Php2Html::checkbox ([
                        'id' => 'User',
                        'name' => 'user',
                        'class' => 'form-check-input',
                    ]) // checkbox
        			.Php2Html::label ([
                        'for' => 'User',
                        'content' => 'Add your name to your \'one thing\'',
                        'class' => 'mb-0',
                    ]) // label
                ]) // Php2Bs::bs_input_text
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' =>$checkbox_row
        ]);

        $content .= '<hr>'; // Php2Html::div.form-group

        $input = Php2Bs::bs_textarea ([
            'class' => 'ckeditor',
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'rows' => 6,
            'placeholder' => 'Add details of your \'One Thing\'',

        ]); // Php2Bs::bs_input_text

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Outline


       // Add the button form group
       $content .= Php2Bs::bs_form_row ([
           'content' =>
           Php2Bs::bs_form_group ([
               'class' => 'col-12',
               'content' => Php2Bs::bs_button ([
                   'button_type' => 'submit',
                   'class' => 'float-right',
                   'color' => 'primary',
                   //'size' => 'sm',
                   'content' =>  'Submit',
                   'name' => 'add_one_thing'
               ]) // Php2Bs::bs_button
           ]) // Php2Bs::bs_form_group
       ]); // Button row

       // Return the form
       return Php2Html::form([
           'id' => '',
           'action' => '',
           'method' => 'post',
           'class' => '',
           'content' => $content
       ]); //  Php2Html::form
    }

   /**
    * Get the total most recent record
    *
    * @return int 	    Count of rows
    */
   public function mostRecent() {
       // Select all records from the database
       $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table .' ORDER BY `created_date` DESC LIMIT 1');

       // Return a count of the records returned
       return $_qry->first();
   } // mostRecent()


   public function ragStatusList () {
       return [
           'g' => 'green',
           'a' => 'amber',
           'r' => 'red',

       ];
   }

   public function priorityList () {
       return [
           'l' => 'low',
           'm' => 'medium',
           'h' => 'high',
           'u' => 'urgent',
       ];
   }

   public function listingFollowUps($_record) {


           // Select all records from the database
           $list = self::db()->query('SELECT
           *
           FROM `one_thing_fu` WHERE `parent` = ? ORDER BY `created_date` DESC', [$_record]
           );


       // Return the results as an array
       return $list->results();
   } // listing()


   public function listing($start_date=null, $end_date=null) {

       if (!$start_date) {
           // Select all records from the database
           $list = self::db()->query('SELECT
           *
           FROM `' . $this->_db_table . '` WHERE `public` = ? AND `status` = ? ORDER BY `created_date` DESC',['1','1']
           );
       } else {
           if (!$end_date) {
               // Select all records from the database
               $list = self::db()->query('SELECT
               *
               FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
               [$start_date]
               );
           } else {
               // Select all records from the database
               $list = self::db()->query('SELECT
               *
               FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
               [$start_date, $end_date]
               );
           }

       }


       // Return the results as an array
       return $list->results();
   } // listing()




    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function adminlisting($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '` ORDER BY `created_date` DESC'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->results();
    } // listing()


    public function listingcount($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '`'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->count();
    } // listing()



    public function messages ($msg=null) {
        $array = [
            'empty' => [
                'title' => 'Nothing posted',
                'content' => 'You have to enter something in the box! ',
                'alert_color' => 'danger',
            ],
            'unauthorised' => [
                'title' => 'Unauthorised',
                'content' => 'You do not have permission to view this page ',
                'alert_color' => 'danger',
                'dismissible' => false
            ],
            'success' => [
                'title' => 'Your One Thing has been added',
                'content' => 'Thank you for submitting your \'One Thing\'. If you have included your name, we will give feedback to you. If you have set it to be viewed by others, it will appear once approved.',
                'alert_color' => 'success',
            ],

            'marked' => [
                'title' => 'The One Thing has been marked as viewed',
                'content' => '',
                'alert_color' => 'success',
            ],

            'follow_up' => [
                'title' => 'Your follow-up has been added and can now be viewed.',
                'content' => '',
                'alert_color' => 'success',
            ],

            'public' => [
                'title' => 'The One Thing has been made visible to all',
                'content' => '',
                'alert_color' => 'success',
            ],

            'unpublic' => [
                'title' => 'The One Thing has been made invisible',
                'content' => '',
                'alert_color' => 'success',
            ],
            'not_found' => [
                'title' => 'One Thing not found',
                'content' => 'Please select one from the list! ',
                'alert_color' => 'danger',
                'dismissible' => false
            ],

        ];

        if($msg) {
            return $array[$msg];
        } else {
            return $array;
        }
    }


    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }



    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being
     * processed.
     *
     * See the core/Validate.php class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'outline' => [
                'required' => true,
            ],
        ];
    }



}






























<?php

/**
 *  Users Model
 *
 *  Contains the standard functions for data
 *  manipulation, as well as the CRUD forms and displays.
 *
 *  Note that Users have a lot more functionality than mosts sections so there is a lot more to this one than most
 *  models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';

class M_Ideas
{
    private
        $_data,
        $_db_table = 'ideas',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the database connection
     *
     *	Opens up a connection to the database and assigns it to
     *	$this->_pdo to make it re-usable.
     *
     * The connection parameters are called using Globals on values held
     * in /app/core/config_files/db.php
     *
     * @return 	Database connection
     */
    public function __construct()
    {
        $this->_logs = new Logs();

    } //__construct ()

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db() {
        return  DB::dbConnect();
    } // db()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    public function count_pending_ideas() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table.' WHERE `status` = ?', ['p']);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    public function list_pending_ideas() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table.' WHERE `status` = ?', ['p']);

        // Return a count of the records returned
        return $_qry->results();
    } // count()

    public function list_pending_comments () {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT I.`id` idea_id, I.`title` idea_title, I.`details` idea_details, C.* FROM `idea_comments` C LEFT JOIN `ideas` I ON I.`id` = C.`idea` WHERE C.`status` = ?', ['p']);

        // Return a count of the records returned
        return $_qry->results();
    }

    public function count_pending_comments() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM `idea_comments` WHERE `status` = ?', ['p']);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    public function countCats() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM `idea_categories`');

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
	 * Create a new record
	 *
	 * Collects post data, validates it and inserts it into the database
	 *
	 */
	public function create ($_params=[]) {
        $_params['created_by'] = Session::get('uid');
        $_params['created_date'] = date('Y-m-d H:i:s');
        if (!self::db()->insert($this->_db_table, $_params)){
            # maybe Redirect::to('404');
			// The insert was unsuccesful
			if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Faults->create()';
            }

			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;

	} // create()

    /**
	 * Create a new record
	 *
	 * Collects post data, validates it and inserts it into the database
	 *
	 */
	public function create_comment ($record, $_params=[]) {
        $_params['idea'] = $record;
        $_params['created_by'] = Session::get('uid');
        $_params['created_date'] = date('Y-m-d H:i:s');
        if (!self::db()->insert('idea_comments', $_params)){
            # maybe Redirect::to('404');
			// The insert was unsuccesful
			if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Faults->create()';
            }

			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;

	} // create()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
         * Delete a record
         *
         *  Deletes the specified record from $this->crud_table()->name
         *
         * @param  int  $record  Record ID
         */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
			if(!self::db()->delete($this->_db_table, array('id', '=', $record)))
			{
				// The update was unsuccesful
				throw new Exception('There was a problem updating the account!');
				// Flash a generic error message
				$this->crudFlash ('generic_error');

				return false;
			}

            return true;

	} // delete()


    /**
     *  Check if a record exists
     *
     *	Checks to see if $this->data() exists following a find()
     *
     **/
    public function exists() {
      return ($this->data()) ? true : false;
    } // exists()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'title';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    public function comment_form () {
        // Outline
        $default_var = 'details';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => 'Add a comment',
            'class' => 'mb-0 font-weight-bold',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => 'ckeditor',
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'rows' => 6,
            'placeholder' => 'Add details of your \'One Thing\'',

        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content = Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Outline


        // Add the button form group
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-12',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => 'float-right',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' =>  'Submit',
                    'name' => 'add_comment'
                ]) // Php2Bs::bs_button
            ]) // Php2Bs::bs_form_group
        ]); // Button row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]); //  Php2Html::form


    }


    public function form () {
        $_field_data = [];

        $_form_fields = [
            'title' => [
                'help_text' => 'Clear and descriptive title of the idea.'
            ],
            'details' => [
                'help_text' => 'The full idea.'
            ],
            'category' => [
                'help_text' => 'Choose the most suitable category. If none fit, select \'Other\'.'
            ],

        ];


       foreach ($_form_fields as $key => $value) {
            // Check for errors
            if (isset($_params['errors'][$key])) {
                // Errors found for the field so add invalid class
                $_field_data[$key]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$key]['class'] = (Input::exists()) ? 'is-valid' : '';
            }
            // Check for posted data if an account update has been attempted
            if (Input::exists($key) && trim(Input::get($key)) !== false) {
                // There is posted data so set that as the value
                $_field_data[$key]['val'] = Input::get($key);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$key]['val'] = $_params['data'][$key];
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$key]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        $content = '';


        $default_var = 'title';
        $input_cus_num = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);

        $input_cus_num .= Php2Bs::bs_input_text ([
            'id' => ucfirst($default_var).'_input',
            'value' => $_field_data[$default_var]['val'],
            'class' => $_field_data[$default_var]['class'],
            'name' => $default_var,
            'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $default_var)) . '',
            'aria' => [
                'label' => 'Add '.ucfirst(str_replace("_", " ", $default_var)),
            ],
        ]); // Php2Bs::bs_input_text
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input_cus_num .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $input_cus_num
        ]);



        // Outline
        $default_var = 'details';

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_textarea ([
            'class' => 'ckeditor',
            'id' => ucfirst($default_var).'_input',
            'name' => $default_var,
            'rows' => 6,
            'placeholder' => 'Add details of your \'One Thing\'',

        ]); // Php2Bs::bs_input_text

        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => $input
            ])
        ]); // Outline


        $default_var = 'category';
        $category_options = '';

          foreach ($this->listingCats() as $key => $value) {
              $category_options .= Php2Html::option ([
                  'content' => ucwords(str_replace("_", " ", $value->category_name)),
                  'value' => $value->id,
                     'is_selected' => (isset($_field_data[$default_var]['val']) && $value->id == $_field_data[$default_var]['val']) ? true: false,
              ]);
          }

          $category_options .= Php2Html::option ([
              'content' => 'Other',
              'value' => '-1',
                 'is_selected' => (isset($_field_data[$default_var]['val']) && $value->id == $_field_data[$default_var]['val']) ? true: false,
          ]);

        $input = Php2Html::label ([
            'for' => ucfirst($default_var).'_input',
            'content' => ucfirst(str_replace("_", " ", $default_var)),
            'class' => 'mb-0',
            'aria' => [
                'described-by' => $default_var.'_help'
            ],
        ]);
        $input .= Php2Bs::bs_select ([
               'class' => $_field_data[$default_var]['class'],
               'content' =>$category_options,
               'id' => ucfirst($default_var).'_input',
               'name' => $default_var,
               'aria' => [
                   'label' => ucfirst(str_replace("_", " ", $default_var)),
               ],
           ]);
        if(isset($_form_fields[$default_var]['help_text'])) {
            $input .= Php2Bs::bs_form_text ([
                'id' => $default_var.'_help',
                'class' => 'text-muted',
                'content' => $_form_fields[$default_var]['help_text']
            ]);
        }
        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $input
        ]);


       // Add the button form group
       $content .= Php2Bs::bs_form_row ([
           'content' =>
           Php2Bs::bs_form_group ([
               'class' => 'col-12',
               'content' => Php2Bs::bs_button ([
                   'button_type' => 'submit',
                   'class' => 'float-right',
                   'color' => 'primary',
                   //'size' => 'sm',
                   'content' =>  'Submit',
                   'name' => 'add_idea'
               ]) // Php2Bs::bs_button
           ]) // Php2Bs::bs_form_group
       ]); // Button row

       // Return the form
       return Php2Html::form([
           'id' => '',
           'action' => '',
           'method' => 'post',
           'class' => '',
           'content' => $content
       ]); //  Php2Html::form
   }

   /**
    * Get the total most recent record
    *
    * @return int 	    Count of rows
    */
   public function mostRecent() {
       // Select all records from the database
       $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table .' ORDER BY `created_date` DESC LIMIT 1');

       // Return a count of the records returned
       return $_qry->first();
   } // mostRecent()


   public function ragStatusList () {
       return [
           'g' => 'green',
           'a' => 'amber',
           'r' => 'red',

       ];
   }

   public function priorityList () {
       return [
           'l' => 'low',
           'm' => 'medium',
           'h' => 'high',
           'u' => 'urgent',
       ];
   }


   public function get_user_vote ($_record) {

       if(Session::exists(Settings::members()['login_session'])) {
           $list = self::db()->query('SELECT
           *
           FROM `idea_votes` WHERE `idea` =? AND user =?',[$_record, Session::get(Settings::members()['login_session'])]
           );

           if($list->count()) {
               return $list->first()->vote;
           } else {
                return false;
           }
       }

   }

    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '` ORDER BY `created_date` DESC'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->results();
    } // listing()
    public function findCats($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'title';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = $this->db()->get('idea_categories', array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()


    public function listingComments($_record) {


            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `idea_comments` WHERE `idea` = ?', [$_record]
            );


        // Return the results as an array
        return $list->results();
    } // listing()

    public function listingVotes($_record) {

        $array = ['down'=>0, 'up'=>0, 'total'=>0];

            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `idea_votes` WHERE `idea` =?',[$_record]
            );

            foreach ($list->results() as $key => $value) {

                if($value->vote > 0) {
                    $array['up']++;
                    $array['total']++;
                } else {
                    $array['down']++;
                    $array['total']--;
                }

            }

        // Return the results as an array
        return $array;
    } // listing()

    public function listingCats() {


            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `idea_categories`'
            );


        // Return the results as an array
        return $list->results();
    } // listing()

    public function listingcount($start_date=null, $end_date=null) {

        if (!$start_date) {
            // Select all records from the database
            $list = self::db()->query('SELECT
            *
            FROM `' . $this->_db_table . '`'
            );
        } else {
            if (!$end_date) {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) = ?',
                [$start_date]
                );
            } else {
                // Select all records from the database
                $list = self::db()->query('SELECT
                *
                FROM `' . $this->_db_table . '` WHERE date(`created_date`) BETWEEN ? and ?',
                [$start_date, $end_date]
                );
            }

        }


        // Return the results as an array
        return $list->count();
    } // listing()



    public function messages ($msg=null) {
        $array = [
            'vote_saved' => [
                'title' => 'Vote Saved',
                'content' => 'Your vote has been recorded and is included in the figures. ',
                'alert_color' => 'success',
            ],
            'already_voted' => [
                'title' => 'Vote not recorded',
                'content' => 'You have already voted for this idea. ',
                'alert_color' => 'info',
            ],
            'idea_approved' => [
                'title' => 'The Idea has been approved',
                'content' => 'This can now be seen by everyone. ',
                'alert_color' => 'success',
            ],
            'all_comments_approved' => [
                'title' => 'All pending comments approved',
                'content' => 'All of the prending comments for this idea have been approved and can now be seen by everyone. ',
                'alert_color' => 'success',
            ],
            'nothing_pending' => [
                'title' => 'There are no pending items to show',
                'alert_color' => 'info',
            ],

            'single_comment_approved' => [
                'title' => 'Comment approved',
                'content' => 'The comment has been approved and can now be seen by everyone. ',
                'alert_color' => 'success',
            ],
            'not_found' => [
                'title' => 'Idea not found',
                'content' => 'Please select one from the list! ',
                'alert_color' => 'danger',
                'dismissible' => false
            ],
            'unathorised' => [
                'title' => 'Unauthorised',
                'content' => 'You do not have permission to view this page! ',
                'alert_color' => 'warning',
                'dismissible' => false
            ],
            'empty' => [
                'title' => 'Nothing posted',
                'content' => 'You have to enter something in the box! ',
                'alert_color' => 'danger',
            ],

            'idea_empty' => [
                'title' => 'Idea not submitted',
                'content' => 'All fields must be filled in! ',
                'alert_color' => 'danger',
            ],

            'comment_empty' => [
                'title' => 'Comment not submitted',
                'content' => 'The comment box must be filled in! ',
                'alert_color' => 'danger',
            ],
            'not_logged_in' => [
                'title' => 'Unauthorised',
                'content' => 'You must be logged in to view this page ',
                'alert_color' => 'danger',
                'dismissible' => false
            ],
            'comment_success' => [
                'title' => 'Your comment has been added',
                'content' => 'Thank you for submitting your comment. It is waiting approval and will appear soon.',
                'alert_color' => 'success',
            ],
            'success' => [
                'title' => 'Your Idea has been added',
                'content' => 'Thank you for submitting your \'Idea\'. It is waiting approval and will appear soon.',
                'alert_color' => 'success',
            ],

            'marked' => [
                'title' => 'The One Thing has been marked as viewed',
                'content' => '',
                'alert_color' => 'success',
            ],

        ];

        if($msg) {
            return $array[$msg];
        } else {
            return $array;
        }
    }

    public function submit_vote ($record, $vote) {

        if (!self::db()->insert(
            'idea_votes',
            [
                'idea' => $record,
                'user' => Session::get(Settings::members()['login_session']),
                'vote' => ($vote == 'up') ? '1' : '-1',
            ])){
            # maybe Redirect::to('404');
            // The insert was unsuccesful
            if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Ideas->submit_vote()';
            }

            return false;
        }
    }
    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }

    public function approve_all_comments($record) {
        if (!self::db()->query('UPDATE `idea_comments` SET `status` = ? WHERE `idea` = ? AND `status` = ?', ['o', $record, 'p']))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }

    public function approve_single_comment($record) {
        if (!self::db()->update('idea_comments', $record, ['status'=>'o']))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }

    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being
     * processed.
     *
     * See the core/Validate.php class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'outline' => [
                'required' => true,
            ],
        ];
    }

    public function pending_idea_form() {
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-link p-0 pb-1',
            'content' => 'Approve',
            'name' => 'approve_idea'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => ' d-inline mb-2',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()

    public function pending_comments_form() {
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-link p-0 pb-1',
            'content' => 'Approve',
            'name' => 'approve_all_comments'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => ' d-inline mb-2',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()
}





























<?php

/**
 * Faults View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/home/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Faults/
 *
 */


//nicePrint_r($data);
//nicePrint_r($_POST);

//Set the parameters for the page
$params['layout'] = 'full-width';
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;
$params['meta'] = ['description' => 'Description set in page'];
$params['js'] = [
    'remote/ckeditor',
    #'path/to/js2',
    #'path/to/js3'
];
$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data);

# Show the required data based on passed in page type



# TODO Better overview page

if($data['page_type'] == 'admin') {

    if(isset($data['list'])) {
        foreach ($data['list'] as $key => $value) {
            $created_date = new DateTime($value->created_date);
            $data['list'][$key]->created_date = $created_date->format('d/m/Y g:ia');



            $data['list'][$key]->details = Php2Html::a ([
                'content' => substr($data['list'][$key]->details, 0, 40),
                'href' => '/OneThing/Admin/'.$data['list'][$key]->id
            ]);

            if($data['list'][$key]->viewed == '0') {
                $data['list'][$key]->viewed =Php2Html::span ([
                    'content' => 'No',
                    'class' => 'font-weight-bold text-danger'
                ]);

            } else {
                $data['list'][$key]->viewed =Php2Html::span ([
                    'content' => 'Yes',
                    'class' => 'font-weight-bold text-success'
                ]);
            }

        }

        $table = Php2Html::make_table ([
            'columns' => [
                'details' => [
                    'alias' => 'Content',
                    'th_class' => 'bg-dark text-light',
                ],
                'created_date' => [
                    'alias' => 'Created Date',
                    'th_class' => 'bg-dark text-light ',
                    'td_class' => 'text-info',
                    'global_class' => 'd-none d-md-table-cell'
                ],
                'viewed' => [
                    'alias' => 'Viewed',
                    'th_class' => 'bg-dark text-light',
                ],

            ],
            // The listing is an object so convert it to an array
            'data' => objectToArray($data['list']),
            'settings' => [
                'show_header' => true,
                //'border' =>'1',
                'class' =>'table mb-0'
            ]
        ]); // make table()

        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-secondary mb-1',
            'body' => [
                'class' => 'bg-light',
                'content' => $table,
            ],
        ]);// bs_card
    }

    if(isset($data['record']->details)) {
        $date = new DateTime($data['record']->created_date);



        if($data['record']->viewed == '0') {
            $text = 'Not Viewed';
            $class = 'text-danger';
        } else {
            $text = 'Viewed';
            $class = 'text-success';
        }
        $content .= Php2Html::span ([
            'content' => $text,
            'class' => 'float-right ' . $class
        ]).'<br>';
        $content .= Php2Bs::bs_card ([
            'class' => 'border-secondary mb-1',
            'body' => [
                'class' => '',
                'content' => $data['record']->details,
            ],
        ]);// bs_card

        $content .= ($data['record']->user) ? 'Submitted by '.$data['record']->user : 'Submitted anonymously';
        $content .= ' on ' . $date->format('l, jS F, Y \a\t g:ia');
        $content .= '<br>';

        if($data['record']->public) {
            $content .= 'The poster has allowed this to be public ';

            if($data['record']->status) {
                $content .= ' and it has already been made visible. '. Php2Html::a ([
                    'class' => 'btn btn-link px-0 pb-2',
                    'content' => 'Click Here',
                    'href' => '/OneThing/Admin/'.$data['record']->id.'/MakeInvisible'
                ]).' to hide it.';
            } else {
                $content .= ' so ' . Php2Html::a ([
                    'class' => 'btn btn-link px-0 pb-2',
                    'content' => 'Click Here',
                    'href' => '/OneThing/Admin/'.$data['record']->id.'/MakeVisible'
                ]).' to make it visible to all.';
            }
        } else {
            $content .= 'The poster has chosen for this to be private.';
        }

        if($data['record']->viewed == '0') {
            $content .= Php2Html::a ([
                'class' => 'btn btn-block btn-success mb-2',
                'content' => 'Mark as viewed',
                'href' => '/OneThing/Admin/'.$data['record']->id.'/MarkViewed'
            ]);
        }

        if($data['record']->follow_up) {
            $content .= '<h3>Follow-ups</h4>';

            foreach ($data['record']->follow_up as $key => $value) {
                $content .= Php2Bs::bs_card ([
                    'class' => 'mb-1',
                    'body' => [
                        'class' => 'border-dark p-2',
                        'content' =>  Php2Html::p ([
                            'content' =>$value->details
                        ]).Php2Html::p ([
                            'content' =>$value->created_by . ' on ' . $value->created_date,
                            'class' => 'text-muted'
                        ]),
                    ],
                ]);// bs_card
            }
        }

        $content .= '<h4>Post follow-up</h4>'.$data['form'];
    }

}

if($data['page_type'] == 'overview') {

    if($data['is_admin'] && ($data['unviewed'] || $data['pending'])) {
        $body = '';
        if($data['unviewed']) {
            $text = ($data['unviewed'] > 1) ? 'There are currently ' . $data['unviewed'] . ' unviewed \'one thing`s\'. ' :
            'There is currently ' . $data['unviewed'] . ' unviewed \'one thing\'. ';

            $body .= Php2Html::p([
                'content' => $text
            ]);
        }

        if($data['pending']) {
            $text = ($data['unviewed'] > 1) ? 'There are currently ' . $data['pending'] . ' \'one thing`s\' marked as public that are waiting to be authorised. ' :
            'There is currently ' . $data['pending'] . ' \'one thing\' marked as public that are waiting to be authorised.';

            $body .= Php2Html::p([
                'content' => $text
            ]);
        }


        $body .=  Php2Html::a ([
            'content' => 'View Admin Area',
            'href' => '/OneThing/Admin',
            'id' => 'left',
            'class' => '',
        ]);

        $content .= Php2Bs::makeAlert($color = 'info', $heading='There are items pending.', $body, $dismissible=false);
    }

    $content .=  Php2Html::p([
        'content' => 'What\'s your one thing? If you want to submit a new one '.Php2Bs::bs_nav_link ([
            'content' => 'Click Here',
            'href' => '#',
            'id' => 'left',
            'class' => 'd-inline px-1',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#add_one_thing'
            ],
            'aria' => [
                'controls' => 'add_one_thing',
                'expanded' => 'false',
                'label' => 'Toggle user One Thing form'
            ]
        ]).'. You can submit anonymously or with your name for feedback or ask for it to remain private or visible for all.'
    ]);

    $container_content = '';
    if(!$data['logged_in']) {
        $container_content .=  Php2Html::p([
            'content' => 'Note that your \'One Thing\' will be submitted anonymously. If you would like personal feedback, please login.'
        ]);
    }
    $container_content .= Php2Bs::bs_card ([
        'class' => 'border-secondary bg-secondary mb-1',
        'body' => [
            'class' => 'bg-light',
            'content' => $data['form'],
        ],
    ]);// bs_card

    $content .= Php2Bs::bs_container ([
        'container_type' => 'fluid',
        'content' => Php2Bs::bs_container ([
            'content' => $container_content,
        ]),
        'class' => 'collapse p-0 py-2 bg-light text-dark',
        'id' => 'add_one_thing'
    ]);

    if(isset($data['list'])) {
        foreach ($data['list'] as $key => $value) {



            $created_date = new DateTime($value->created_date);
            $data['list'][$key]->created_date = $created_date->format('d/m/Y g:ia');

            $thing_record = $value->details;
            $thing_record .= Php2Html::span([
                'content' => 'Submitted on ' .$created_date->format('l, jS F, Y \a\t g:ia'),
                'class' => 'font-italic font-weight-bold text-muted'
                ]);

            if($data['list'][$key]->follow_up) {
                $thing_record .= '<hr><h4>Follow-ups</h4>';

                foreach ($data['list'][$key]->follow_up as $replies => $reply) {
                    $thing_record .= Php2Bs::bs_card ([
                        'class' => 'mb-2  bg-light',
                        'body' => array (
                            'content' =>  Php2Html::div([
                                'content' => $reply->details,
                                'class' => 'border-bottom border-secondary'
                            ]).Php2Html::span([
                                'content' => $reply->created_by.' on ' . $reply->created_date,
                                'class' => 'font-italic text-muted'
                            ])

                        ),
                    ]);
                }
            }

            $content .= Php2Bs::bs_card ([
                'class' => 'border-secondary  mb-4 ',
                'body' => array (
                    'content' => $thing_record,
                    'class' => 'p-2',
                ),

            ]);// bs_card

        }

    }




} // $data->page_type == 'overview'


// Pass the details to the template
$template = new T_Main ($content,$params);
?>






























<?php

/**
 * Faults View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/home/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Faults/
 *
 */

//ini_set('display_errors', 1);
//ini_set('display_startup_errors', 1);
//error_reporting(E_ALL);

//nicePrint_r($_POST);
nicePrint_r($data);
$model = new M_Ideas();

$params['layout'] = 'right-col';
//Set the parameters for the page
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;
$params['meta'] = ['description' => 'Description set in page'];
$params['js'] = [
    'remote/ckeditor',
    #'path/to/js2',
    #'path/to/js3'
];
$params['sidebar'] = 'ideas';
$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data);

# Show the required data based on passed in page type



# TODO Better overview page

if($data['page_type'] == 'add') {

    if(isset($data['form'])) {
        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-secondary mb-1',
            'body' => [
                'class' => 'bg-light',
                'content' => $data['form'],
            ],
        ]);// bs_card
    }


}

if($data['page_type'] == 'pending_comment') {
    foreach ($data['list'] as $key => $value) {

        $user = new M_Users();
        $user->find($value->created_by);
        $date = new DateTime($value->created_date);


        if($value->status == 'p') {
            $border = 'danger';
            $card_info['header'] = [
                'content' => $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia').Php2Html::form([
                    'id' => '',
                    'action' => '',
                    'method' => 'post',
                    'class' => ' d-inline mb-2',
                    'content' => Php2Html::button ([
                        'button_type' => 'submit',
                        'class' => 'btn btn-sm btn-primary float-right',
                        'content' => 'Approve',
                        'name' => 'approve_single_comment',
                        'value' => $value->id
                    ])
                ]),
                'class' => 'p-1 bg-danger font-weight-bold text-light'
            ];
        } else {
            $border = 'primary';
            $card_info['header'] = null;
        }

        $card_info['class'] = 'border-'.$border.' bg-light mb-1 ';

        $card_info['body'] = [
            'content' => $value->details.'<hr>Replying to idea...<b><br>'.$value->idea_title . '</b> <br>' .$value->idea_details,
            'class' => 'p-2',
        ];

        $content .= Php2Bs::bs_card ($card_info);// bs_card
    }
}

if($data['page_type'] == 'pending_ideas') {

        foreach ($data['list'] as $key => $value) {

            $date = new DateTime($value->created_date);
            $user = new M_Users();
            $user->find($value->created_by);
            if($value->category == '-1') {
                $cat_name = 'Other';
            } else {
                $model->findCats($value->category);

                $cat_name = $model->data()->category_name;
            }

            switch ($value->status) {
                case 'o':
                    $status = 'Open';
                    break;
                case 'c':
                    $status = 'Closed';
                    break;
                case 'i':
                    $status = 'In Progress';
                    break;
                case 'p':
                    $status = 'Pending';
                    break;
                default:
                    # code...
                    break;
            }


            $show_category = Php2Html::i(['content' => '', 'class' => 'far fa-folder-open mr-2']).
            Php2Html::span(['content' => $cat_name, 'class' => 'border-secondary border-right mr-2 pr-2']);

            $show_status = Php2Html::i(['content' => '', 'class' => 'fas fa-battery-half mx-2']).
            Php2Html::span(['content' => $status, 'class' => 'border-secondary border-right mr-2 pr-2']);

            $show_comments = Php2Html::i(['content' => '', 'class' => 'fas fa-comments mx-2']).
            Php2Html::span(['content' => count($model->listingComments($value->id))]);

            $details_row = Php2Bs::bs_column ([
                'content' => $value->details,
                'class' => 'text-truncate',
                'style' => 'height:20px;'
            ]).
            '<hr>'.
            $show_category.
            $show_status.
            $show_comments.
            Php2Html::a(['class'=>'float-right','content' => 'View', 'href'=>'/Ideas/Details/'.$value->id]);

            if($value->status == 'p') {
                $border = 'danger';
                $footer = 'danger';
            } else {
                $border = 'primary';
                $footer = 'secondary';
            }

            if($value->status !== 'p' || $data['is_admin']) {
                $content .= Php2Bs::bs_card ([
                    'class' => 'border-'.$border.' bg-light mb-1 ',
                    'header' => array (
                        'content' => Php2Html::a(['content' => $value->title.Php2Html::form([
                            'id' => '',
                            'action' => '',
                            'method' => 'post',
                            'class' => ' d-inline mb-2',
                            'content' => Php2Html::button ([
                                'button_type' => 'submit',
                                'class' => 'btn btn-sm btn-primary float-right',
                                'content' => 'Approve',
                                'name' => 'approve_idea',
                                'value' => $value->id
                            ])
                        ]), 'href'=>'/Ideas/Details/'.$value->id]),
                        'class' => 'font-weight-bold'
                    ),
                    'body' => array (
                        'content' => $details_row,
                        'class' => 'p-2',
                    ),
                    'footer' => array (
                        'content' => 'Posted by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
                        'class' => 'font-italic font-weight-bold bg-'.$footer.' text-light p-2'
                    ),
                ]);// bs_card
            }
        }}

if($data['page_type'] == 'pending_overview') {
    if ($data['pending_ideas'] || $data['pending_comments']) {

        $body = '';

        if($data['pending_ideas']) {

            $text = ($data['pending_ideas'] > 1) ? 'There are currently ' . $data['pending_ideas'] . ' ideas pending. ' :
            'There is currently ' . $data['pending_ideas'] . ' idea pending. ';

            $body .= Php2Html::p([
                'content' => $text.Php2Html::a([
                    'content' => 'View',
                    'href' => '/Ideas/Pending/Idea'
                ])
            ]);
        }

        if($data['pending_comments']) {

            $text = ($data['pending_comments'] > 1) ? 'There are currently ' . $data['pending_comments'] . ' comments pending. ' :
            'There is currently ' . $data['pending_comments'] . ' comment pending. ';

            $body .= Php2Html::p([
                'content' => $text.Php2Html::a([
                    'content' => 'View',
                    'href' => '/Ideas/Pending/Comment'
                ])
            ]);
        }


    } else {}

    $content .= Php2Bs::makeAlert($color = 'info', $heading='There are items pending.', $body, $dismissible=false);

}

if($data['page_type'] == 'view') {
    if($data['record']) {


        $title = $data['record']->title;
        $user = new M_Users();
        $user->find($data['record']->created_by);
        $date = new DateTime($data['record']->created_date);

        if($data['is_admin'] && isset($data['pending_idea_form'])) {
            $content .=  'This idea is currently pending. '. $data['pending_idea_form'];
        }

        if($data['is_admin'] && isset($data['pending_comments_form'])) {
            $content .=  'This idea currently has '.$data['pending_comments'].' pending comments. '. $data['pending_comments_form'].'. You can also approve individually below.';
        }

        if($data['record']->category == '-1') {
            $cat_name = 'Other';
        } else {
            $model->findCats($data['record']->category);

            $cat_name = $model->data()->category_name;
        }

        switch ($data['record']->status) {
            case 'o':
                $status = 'Open';
                break;
            case 'c':
                $status = 'Closed';
                break;
            case 'i':
                $status = 'In Progress';
                break;
            case 'p':
                $status = 'Pending';
                break;
            default:
                # code...
                break;
        }

        $show_category = Php2Html::i(['content' => '', 'class' => 'far fa-folder-open mr-2']).
        Php2Html::span(['content' => $cat_name, 'class' => 'border-secondary border-right mr-2 pr-2']);

        $show_status = Php2Html::i(['content' => '', 'class' => 'fas fa-battery-half mx-2']).
        Php2Html::span(['content' => $status, 'class' => 'border-secondary border-right mr-2 pr-2']);

        $show_comments = Php2Html::i(['content' => '', 'class' => 'fas fa-comments mx-2']).
        Php2Html::span(['content' => count($model->listingComments($data['record']->id)),'class' => 'border-secondary border-right mr-2 pr-2']);

        if($data['record']->votes['total'] > 0) {
            $colour = 'text-success';
        } else {
            $colour = 'text-danger';
        }


        if (!$data['logged_in']) {
            $show_votes = Php2Html::span([
                'data_attr' => [
                    'toggle' => 'popover',
                    'content' => 'You must be logged in to vote.',
                    'placement' => 'top'
                ],
                'title' => 'Voting blocked',
                'content' => Php2Html::i(['content' => '', 'class' => 'far fa-thumbs-up mr-2 text-success']).
                Php2Html::span(['content' => $data['record']->votes['up']]).
                Php2Html::i(['content' => '', 'class' => 'far fa-thumbs-down mx-2 text-danger']).
                Php2Html::span(['content' => $data['record']->votes['down']]).
                Php2Html::span(['content' => ' ('.$data['record']->votes['total'].')','class' => 'mx-1 font-weight-bold '.$colour])
            ]);
        } else {
            if(!empty($data['user_vote'])) {
                if($data['user_vote'] == '1') {
                    $vote_type = 'up';
                    $up_type = 'fas';
                    $down_type = 'far';
                } else {
                    $vote_type = 'down';
                    $up_type = 'far';
                    $down_type = 'fas';
                }

                $show_votes = Php2Html::span([
                    'data_attr' => [
                        'toggle' => 'popover',
                        'content' => 'You have already '.$vote_type.'voted for this idea.',
                        'placement' => 'top'
                    ],
                    'title' => 'Voting blocked',
                    'content' => Php2Html::i(['content' => '', 'class' => $up_type.' fa-thumbs-up mr-2 text-success']).
                    Php2Html::span(['content' => $data['record']->votes['up']]).
                    Php2Html::i(['content' => '', 'class' => $down_type.' fa-thumbs-down mx-2 text-danger']).
                    Php2Html::span(['content' => $data['record']->votes['down']]).
                    Php2Html::span(['content' => ' ('.$data['record']->votes['total'].')','class' => 'mx-1 font-weight-bold '.$colour])
                ]);
            } else {
                $show_votes = Php2Html::form([
                    'id' => '',
                    'action' => '',
                    'method' => 'post',
                    'class' => 'd-inline',
                    'content' => Php2Html::button ([
                        'button_type' => 'submit',
                        'class' => 'btn btn-link text-success mx-0 mr-1 p-0 mb-1',
                        'content' => Php2Html::i(['content' => '', 'class' => 'far fa-thumbs-up']),
                        'name' => 'upvote'
                    ])
                ]).
                Php2Html::span(['content' => $data['record']->votes['up']]).
                $show_votes = Php2Html::form([
                    'id' => '',
                    'action' => '',
                    'method' => 'post',
                    'class' => 'd-inline',
                    'content' => Php2Html::button ([
                        'button_type' => 'submit',
                        'class' => 'btn btn-link text-danger mx-1 mr-1 p-0 mb-1',
                        'content' => Php2Html::i(['content' => '', 'class' => 'far fa-thumbs-down']),
                        'name' => 'downvote'
                    ])
                ]).
                Php2Html::span(['content' => $data['record']->votes['down']]).
                Php2Html::span(['content' => ' ('.$data['record']->votes['total'].')','class' => 'mx-1 font-weight-bold '.$colour]);
            }
        }

        $details_row = Php2Bs::bs_column ([
            'content' => $data['record']->details,
            'class' => 'text-truncate',
            'style' => 'height:20px;'
        ]).
        '<hr>'.
        $show_category.
        $show_status.
        $show_comments.
        $show_votes;

        if($data['record']->status == 'p') {
            $border = 'danger';
            $footer = 'danger';
        } else {
            $border = 'primary';
            $footer = 'secondary';
        }

        $content .= Php2Bs::bs_card ([
            'class' => 'border-'.$border.' bg-light mb-1 ',
            'header' => array (
                'content' => $title,
                'class' => 'font-weight-bold'
            ),
            'body' => array (
                'content' => $details_row,
                'class' => 'p-2',
            ),
            'footer' => array (
                'content' => 'Posted by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
                'class' => 'font-italic font-weight-bold bg-'.$footer.' text-light p-2'
            ),
        ]);// bs_card


        if(isset($data['comments'])) {
            $content .= Php2Html::h([
                'size'=> '4',
                'content' => 'Comments'
            ]);
            foreach ($data['comments'] as $key => $value) {
                if($value->status !== 'p' || $data['is_admin']) {
                    $user = new M_Users();
                    $user->find($value->created_by);
                    $date = new DateTime($value->created_date);


                    if($value->status == 'p') {
                        $border = 'danger';
                        $card_info['header'] = [
                            'content' => 'Needs approval'.Php2Html::form([
                                'id' => '',
                                'action' => '',
                                'method' => 'post',
                                'class' => ' d-inline mb-2',
                                'content' => Php2Html::button ([
                                    'button_type' => 'submit',
                                    'class' => 'btn btn-sm btn-primary float-right',
                                    'content' => 'Approve',
                                    'name' => 'approve_single_comment',
                                    'value' => $value->id
                                ])
                            ]),
                            'class' => 'p-1 bg-danger font-weight-bold text-light'
                        ];
                    } else {
                        $border = 'primary';
                        $card_info['header'] = null;
                    }

                    $card_info['class'] = 'border-'.$border.' bg-light mb-1 ';

                    $card_info['body'] = [
                        'content' => $value->details.'<hr>'.$user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
                        'class' => 'p-2',
                    ];

                    $content .= Php2Bs::bs_card ($card_info);// bs_card
                }
            }
        }

        $content .= $data['comment_form'];
    }


}

if($data['page_type'] == 'overview') {
    if($data['is_admin']) {
        if ($data['pending_ideas'] || $data['pending_comments']) {

            $body = '';

            if($data['pending_ideas']) {

                $text = ($data['pending_ideas'] > 1) ? 'There are currently ' . $data['pending_ideas'] . ' ideas pending. ' :
                'There is currently ' . $data['pending_ideas'] . ' idea pending. ';

                $body .= Php2Html::p([
                    'content' => $text.Php2Html::a([
                        'content' => 'View',
                        'href' => '/Ideas/Pending/Idea'
                    ])
                ]);
            }

            if($data['pending_comments']) {

                $text = ($data['pending_comments'] > 1) ? 'There are currently ' . $data['pending_comments'] . ' comments pending. ' :
                'There is currently ' . $data['pending_comments'] . ' comment pending. ';

                $body .= Php2Html::p([
                    'content' => $text.Php2Html::a([
                        'content' => 'View',
                        'href' => '/Ideas/Pending/Comment'
                    ])
                ]);
            }

            $content .= Php2Bs::makeAlert($color = 'info', $heading='There are items pending.', $body, $dismissible=false);
        }
    }

    $list = '';

    foreach ($data['list'] as $key => $value) {

        $date = new DateTime($value->created_date);
        $user = new M_Users();
        $user->find($value->created_by);
        if($value->category == '-1') {
            $cat_name = 'Other';
        } else {
            $model->findCats($value->category);

            $cat_name = $model->data()->category_name;
        }

        switch ($value->status) {
            case 'o':
                $status = 'Open';
                break;
            case 'c':
                $status = 'Closed';
                break;
            case 'i':
                $status = 'In Progress';
                break;
            case 'p':
                $status = 'Pending';
                break;
            default:
                # code...
                break;
        }

        $show_category = Php2Html::i(['content' => '', 'class' => 'far fa-folder-open mr-2']).
        Php2Html::span(['content' => $cat_name, 'class' => 'border-secondary border-right mr-2 pr-2']);

        $show_status = Php2Html::i(['content' => '', 'class' => 'fas fa-battery-half mx-2']).
        Php2Html::span(['content' => $status, 'class' => 'border-secondary border-right mr-2 pr-2']);

        $show_comments = Php2Html::i(['content' => '', 'class' => 'fas fa-comments mx-2']).
        Php2Html::span(['content' => count($model->listingComments($value->id)),'class' => 'border-secondary border-right mr-2 pr-2']);




        if($value->votes['total'] > 0) {
            $colour = 'text-success';
        } else {
            $colour = 'text-danger';
        }

        $up_type = 'far';
        $down_type = 'far';
        if(!empty($value->user_vote)) {
            if($value->user_vote == '1') {
                $up_type = 'fas';
                $down_type = 'far';
            } else {
                $up_type = 'far';
                $down_type = 'fas';
            }
        }
        $show_votes = Php2Html::i(['content' => '', 'class' => $up_type . ' fa-thumbs-up mr-2 text-success']).
        Php2Html::span(['content' => $value->votes['up']]).Php2Html::i(['content' => '', 'class' => $down_type.' fa-thumbs-down mx-2 text-danger']).
        Php2Html::span(['content' => $value->votes['down']]).
        Php2Html::span(['content' => ' ('.$value->votes['total'].')','class' => 'mx-1 font-weight-bold '.$colour]);





        $details_row = Php2Bs::bs_column ([
            'content' => $value->details,
            'class' => 'text-truncate',
            'style' => 'height:20px;'
        ]).
        '<hr>'.
        $show_category.
        $show_status.
        $show_comments.
        $show_votes.
        Php2Html::a(['class'=>'float-right','content' => 'View', 'href'=>'/Ideas/Details/'.$value->id]);

        if($value->status == 'p') {
            $border = 'danger';
            $footer = 'danger';
        } else {
            $border = 'primary';
            $footer = 'secondary';
        }

        if($value->status !== 'p' || $data['is_admin']) {
            $content .= Php2Bs::bs_card ([
                'class' => 'border-'.$border.' bg-light mb-1 ',
                'header' => array (
                    'content' => Php2Html::a(['content' => $value->title, 'href'=>'/Ideas/Details/'.$value->id]),
                    'class' => 'font-weight-bold'
                ),
                'body' => array (
                    'content' => $details_row,
                    'class' => 'p-2',
                ),
                'footer' => array (
                    'content' => 'Posted by '. $user->data()->username . ' on ' .$date->format('l, jS F, Y \a\t g:ia'),
                    'class' => 'font-italic font-weight-bold bg-'.$footer.' text-light p-2'
                ),
            ]);// bs_card
        }
    }


} // $data->page_type == 'overview'


// Pass the details to the template
$template = new T_Main ($content,$params);
?>
<script>


	$(document).ready(function () {

        $(function () {
    		$('[data-toggle="popover"]').popover()
    	});

});

</script>



































<?php

/**
 * Home Page View
 *
 * This only controls the view from the home page of the site.
 *
 * As very little is actually done in this file, we use it as the guidline for
 * all other views and as a result, there will be more commenting in this view
 * than any others, including things that might not get used here but might get
 * used elsewhere.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	/app/controllers/home.php->index()
 * @link 		http://yoursite/
 *
 */

/*
    Any information passed to the view from the controller will be available as as a variable called $data. This will contain all of the required information but without any formatting (mainly) as this will be done in this file.

    You can uncomment the first line below to see any data passed in as a formatted array. There are also lines that can be uncommented to show any $_POST or $_SESSION data in the same way.

    The nicePrint_r() function that these use can be found in '/src/functions/globals.php'.
*/
// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');


/**
 * Set the parameters for the page
 *
 * As well as the content to display, there are some other parameters that
 * the call to the template also accepts. These are stored in an array called
 * $params and can either be set within this file, or passed in from the
 * controller.
 *
 * This example file contains all available parameters to give an explanation
 * of what can be used an how to use it, some of which are set within this file,
 * some of which are passed from the controller.
 */

/*
    Set the page version.

    The default template system provides several different layouts that can be
    used, within a standard wrapper.

    The layouts can be edited and new ones added in the layout_switcher() function
    in the called template file and the demos ones are
    'full-width' - single column layout
    'left-col'  - two column layout with left sidebar and content to the right
    'right-col' - two column layout with right sidebar and content to the left
    'three-col' - three column layout with both sidebars and content in the middle
    'test' - a playground for testing styles.

    This parameter can be ommitted and if so, the layout will default to the
    default case within the switch statement in layout_switcher().

    In this demo, the layout is set within this file, but can be passed in from
    the controller.
 */
$params['layout'] = 'full-width';

/*
    Set the page title and subtitle.

    To set the page title, which will be shown at the top of the page and also part of the <title> in <head> set it to $params['page_title'].

    In this demo, we are sending the title from the controller as
    'page_name' but have set it to only populate $params['page_title'] if
    it has been passed in. You can set it manually in this file.

    This parameter can be ommitted and if so, no title or subtitle will
    show and the <title> in <head> will not include anything and default
    to whatever is set as the $title variable in the head() function in
    the Base template.

    To set a subtitle for the page set a $params['page_subtitle']. This
    works in exactly the same way as the page title other than it does not
    affect the  <title> in <head> and will not show if a page title is not
    set. Again, for this demo, we are assuming it to be from the controller, this time as 'page_subtitle', and leave it empty if it does not exist.

 */
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;

/*
    Override meta tags

    You can override any of the default meta tags stored in the meta_tags()
    function in /app/core/Settings.php by including them in via $params['meta'].

    You can override as many as needed and simply created a key/value pair for
    each one that you want to override.

    It would be recommended to set this in the $data passed to this page from
    the controller, espcially if this view is being used for multiple page
    types and content.

    If you do not need to override any, you can omit the variable completely.
 */
$params['meta'] = ['description' => 'Description set in page'];

/*
    Add page specific css

    You can any page specific stylesheets stored called from the css() function in /app/core/Settings.php by including them in via $params['css'].

    These are set in a multidimensional array and return the full stylesheet link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4_beta' would return the string at
    'remote' => 'bootstrap' => 'v4_beta'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['css'] = [
    'remote/simple-line-icons',
    #'path/to/css2',
    #'path/to/css3'
];

/*
    Add page specific js

    You can any page specific stylesheets stored called from the js() function in /app/core/Settings.php by including them in via $params['js'].

    These are set in a multidimensional array and return the full script link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4' would return the string at
    'remote' => 'bootstrap' => 'v4'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['js'] = [
    'remote/jquery_ui',
    #'path/to/js2',
    #'path/to/js3'
];

/*
    With the index page, we use it like a landing page in that we want it to still keep the navigation menu and footer that other areas of the site use but not have the banner at the top of the page, as well as giving the whole page a dark background and light text.

    We do this by using two extra $params.
    'hide_banner' will not show the the header at the top of the page is set to true. If set to false or not set at all, the banner will show.
    'body_class' allows you to add classes to the opening body tag. In this case we just set the bg and text.
*/
$params['hide_banner'] = true;
$params['body_class'] = 'bg-dark text-light';

/*
    Everything that needs to be displayed on this page is currently created here against a variable called $content. This will change so this is only here as a temporary filler.
 */
 $content = '';

 /*
    Show any messages that have been sent ot the page as an alert.

    If there are any user messages that need to be shown, such as success or failure messages following a form post, we set the paramaters of it in the controller and pass it through as $data['messages']. This, itself, gets populated from details in a function called messages() in the current model being used.

    Each model has it's own messages() function to make the messages relevant to the area of the site being viewed and a full explanation of how they work can be found in '/app/models/M_Users.php'.

    When we require one of these messages, we set it to $data['messages'] and that will now contain an array of values that can be used as an alert. Rather than checking to see if $data['message'] exists on every view, we simply pass all of $data into the showPageAlerts () function in '/app/core/global.php' and that checks if there is message to show. There is a full commenting of showPageAlerts () to explain exactly how it works and how, as an alternative, we can use $_SESSIONS to pass the message.
 */
 $content .= showPageAlerts ($data);

 /*
    Finally, we add the actual content that needs to be displayed on the page. In this example we currently only show some hardcoded stuff so that will need improving.

    TODO: Replace the below with something more useful and amend the comments.
  */
 $content .= '<h4>Welcome to the UAT Hub!</h4>';
 $content .= '<p>Although still a work in process, this is the first working version of the long-promised UAT Hub - an area that will eventually become the go-to resource for any UAT and CMT things.</p>';
 $content .= '<p>As well as help files and automation tools, this will also contain a few new things and some replacements for existing methods.</p>';




  $content .= '<div class="col">';
  $content .= '<div class="row mb-3">';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-light bg-secondary">';

  $content .= '    <i class="fas fa-lightbulb fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>Ideas</h2>';
 $content .= '            <p>Got an idea that you think could improve life in the derpartment? Share it in the Ideas section, make comments on other ideas and vote for your favourites.</p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-secondary" href="/Ideas" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-left-0 border-light bg-dark">';

  $content .= '    <i class="fas fa-question fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>One Thing</h2>';
 $content .= '            <p>Feel uncomfortable placing something in the \'One Thing\' box? You can now do it via an online form, either anonymously or with your name. You can even set it so it can be viewed by others if you want! </p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-dark" href="/OneThing" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-left-0 border-light bg-secondary">';

  $content .= '    <i class="fas fa-phone-volume fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>Call Log</h2>';
 $content .= '            <p>Still in concept stage, this is a potential replacement for the Excel sheet currently used for UAT calls. Only to be used if told to for now.</p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-secondary" href="/CallLog" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '        </div>';

  $content .= '</div>';


 $content .= '<div class="card mb-3 border-secondary text-dark w-100">';
 $content .= '    <h4 class="card-header bg-secondary text-light">';
 $content .= '    Links';
 $content .= '    </h4>';
 $content .= '  <div class="card-body">';
 $content .= '  <b>Original Selenium Folders</b><br>';
 $content .= '    <a href="http://10.60.151.86/current/Selenium" target="_blank">Current</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/regression/Selenium" target="_blank">Regression</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting1/Selenium" target="_blank">Scripting 1</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting2/Selenium" target="_blank">Scripting 2</a>' ;

 $content .= '  <br><br><b>Interim site</b><br>';
 $content .= '    <a href="/dev/Selenium" target="_blank">Home Page</a>' ;

 $content .= '  <br><br><b>New Hub site</b><br>';
 $content .= '    <a href="/Selenium" target="_blank">Home Page</a>' ;
 $content .= '   | ';
 $content .= '    <a href="/Admin" target="_blank">Admin</a>' ;
 $content .= '  <br><br><b>Other Links</b><br>';
 $content .= '    <a href="http://10.60.151.86/phpmyadmin" target="_blank">Database</a>' ;

 $content .= '  <br><br><b>File Locations</b>';
 $content .= '    <br>WebOpts MVT list - \\\\ZEUS\\Ecommerce\\Webopt MVT folder\\Agendas\\' ;
 $content .= '    <br>Firefox 54.0.1 Installation - \\\\10.60.151.86\\files\\Firefox Installs\\' ;

 $content .= '  <br><br><b>Known Issues</b>';
 $content .= '  <br>Remember me function causes count() on boolean error in M_Users line 991(ish)' ;
 $content .= '  <br>Main template edit link goes to /Members/ instead of /Users/' ;
 $content .= '  <br>User box not visible when scrolled down the page.' ;


 $content .= '</div>';


/**
 * Pass the details to the template
 *
 * All that is left to do is pass the information that we have created above,
 * through to the template that we are using for this view.
 *
 * In this instance, we are using the Main template at /'app/core/Templates/T_Main.php'.
 *
 * @var string 	    $content    The actual page relevant content to be shown
 * @var array 	    $params     Any other required page settings.
 */
new T_Main ($content,$params);
































<?php

/**
 * 404 view
 *
 * This only controls the view from the home page of the site.
 *
 * No formatting is carried out anywhere and all that is passed in is an
 * array. The entire layout is styled within this file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	/app/controllers/home.php->index()
 * @link 		http://site.com/
 *
 */

$params['layout'] = 'right-col';
$params['page_title'] = '404';
$params['page_subtitle'] = 'The file could not be found';

/**
 * Start the output string that will be passed to the template
 * @var string
 */
$content = '';




$content .= Php2Bs::makeAlert($color = 'info', $heading='That page cannot be found', $body='You have either used an incorrect url or have tried to access an area that you are not authorised to view.', $dismissible=false);



/**
 * Pass the details to the template
 *
 * @var string 	Data to be shown
 * @var string 	Version on template to use
 * @var string 	Title of the page
 */
$template = new T_Main (
    $content,
    $params
     /*,


    $include = array (
        'css' => array (
            'css/local/site',
            'css/local/admin'
        ),
        'js' => array (
            'js/local/shared',
            'js/local/default'
        )
    ) */

);









































-- phpMyAdmin SQL Dump
-- version 4.4.0-dev
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Mar 06, 2018 at 04:45 PM
-- Server version: 5.5.42
-- PHP Version: 5.6.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";

--
-- Database: `hub`
--

-- --------------------------------------------------------

--
-- Table structure for table `activity`
--

CREATE TABLE IF NOT EXISTS `activity` (
  `id` int(11) NOT NULL,
  `area` varchar(1) NOT NULL,
  `user` int(11) DEFAULT NULL,
  `stamp` datetime NOT NULL,
  `type` int(11) NOT NULL,
  `status` varchar(1) DEFAULT NULL,
  `target` varchar(20) DEFAULT NULL,
  `record` int(11) DEFAULT NULL
) ENGINE=MyISAM AUTO_INCREMENT=217 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `activity`
--

INSERT INTO `activity` (`id`, `area`, `user`, `stamp`, `type`, `status`, `target`, `record`) VALUES
(1, '0', 1, '2018-02-13 16:44:28', 5, '', NULL, NULL),
(2, '0', 1, '2018-02-13 16:44:31', 4, '', NULL, NULL),
(3, '0', 1, '2018-02-13 16:45:37', 5, '', NULL, NULL),
(4, '0', 1, '2018-02-14 11:59:17', 4, '', NULL, NULL),
(5, '0', 0, '2018-02-14 12:02:38', 4, '', NULL, NULL),
(6, '0', 0, '2018-02-14 12:03:28', 6, '', NULL, NULL),
(7, '0', 0, '2018-02-14 12:04:15', 6, '', NULL, NULL),
(8, '0', 0, '2018-02-14 12:04:29', 6, '', NULL, NULL),
(9, '0', 0, '2018-02-14 12:05:32', 6, '', NULL, NULL),
(10, '0', 0, '2018-02-14 12:06:33', 6, '', NULL, NULL),
(11, '0', 0, '2018-02-14 12:06:41', 6, '', NULL, NULL),
(12, '0', 0, '2018-02-14 12:08:17', 6, '', NULL, NULL),
(13, '0', 1, '2018-02-14 12:09:18', 4, '', NULL, NULL),
(14, '0', 1, '2018-02-14 12:10:04', 5, '', NULL, NULL),
(15, '0', 1, '2018-02-14 12:44:03', 4, '', NULL, NULL),
(16, '0', 1, '2018-02-14 12:47:10', 5, '', NULL, NULL),
(17, '0', 1, '2018-02-14 13:32:39', 4, '', NULL, NULL),
(18, '0', 1, '2018-02-14 13:36:22', 5, '', NULL, NULL),
(19, 'f', 0, '2018-02-14 13:37:16', 8, '', NULL, NULL),
(20, 'f', 0, '2018-02-14 13:48:26', 8, '', NULL, NULL),
(21, 'f', 0, '2018-02-14 13:50:53', 8, '', NULL, NULL),
(22, 'f', 0, '2018-02-14 13:54:50', 8, '', NULL, NULL),
(23, 'f', 0, '2018-02-14 14:06:52', 8, '', NULL, NULL),
(24, 'f', 0, '2018-02-14 14:08:10', 8, '', NULL, NULL),
(25, 'f', 0, '2018-02-14 14:08:37', 8, '', NULL, NULL),
(26, 'f', 0, '2018-02-14 14:09:04', 8, '', NULL, NULL),
(27, 'f', 0, '2018-02-14 14:10:10', 8, '', NULL, NULL),
(28, 'f', 0, '2018-02-14 14:10:37', 8, '', NULL, NULL),
(29, 'f', 0, '2018-02-14 14:12:52', 8, '', NULL, NULL),
(30, 'f', 0, '2018-02-14 14:33:54', 8, '', NULL, NULL),
(31, 'f', 0, '2018-02-14 14:36:17', 8, '', NULL, NULL),
(32, 'f', 0, '2018-02-14 14:38:01', 8, '', NULL, NULL),
(33, 'f', 0, '2018-02-14 14:38:51', 8, '', NULL, NULL),
(34, 'f', 0, '2018-02-14 14:40:43', 8, '', NULL, NULL),
(35, 'f', 11, '2018-02-14 14:40:51', 7, '', NULL, NULL),
(36, '0', 1, '2018-02-14 14:49:15', 4, '', NULL, NULL),
(37, 'f', 1, '2018-02-14 14:51:19', 1, '', 'user_groups', 9),
(38, 'f', 1, '2018-02-14 14:52:58', 1, '', 'user_groups', 10),
(39, '0', 1, '2018-02-14 15:03:37', 5, NULL, NULL, NULL),
(40, 'f', NULL, '2018-02-14 15:04:05', 6, 'p', NULL, NULL),
(41, 'f', NULL, '2018-02-14 15:04:27', 6, 'f', NULL, NULL),
(42, 'f', NULL, '2018-02-14 15:05:16', 6, 'f', NULL, NULL),
(43, 'f', NULL, '2018-02-14 15:06:04', 6, 'f', NULL, NULL),
(44, 'f', 12, '2018-02-14 15:06:26', 6, 'p', NULL, NULL),
(45, '0', NULL, '2018-02-14 15:07:59', 4, 'f', NULL, NULL),
(46, '0', NULL, '2018-02-14 15:08:38', 4, 'f', NULL, NULL),
(47, '0', 1, '2018-02-14 15:08:56', 4, 'p', NULL, NULL),
(48, 'f', 1, '2018-02-14 15:12:16', 1, 'p', 'user_groups', 11),
(49, 'f', 1, '2018-02-14 15:28:11', 1, 'p', 'user_groups', 12),
(50, 'a', 1, '2018-02-14 15:36:11', 1, 'f', 'user_groups', NULL),
(51, 'a', 1, '2018-02-14 15:39:35', 1, 'f', 'user_groups', NULL),
(52, 'a', 1, '2018-02-14 15:40:10', 1, 'f', 'user_groups', NULL),
(53, '0', 1, '2018-02-19 09:21:38', 4, 'p', NULL, NULL),
(54, '0', 1, '2018-02-20 09:24:37', 5, NULL, NULL, NULL),
(55, '0', 1, '2018-02-20 09:29:36', 4, 'p', NULL, NULL),
(56, '0', 1, '2018-02-20 09:30:02', 5, NULL, NULL, NULL),
(57, '0', 1, '2018-02-20 09:30:05', 4, 'p', NULL, NULL),
(58, '0', 1, '2018-02-20 10:09:22', 5, NULL, NULL, NULL),
(59, '0', 1, '2018-02-20 10:10:40', 4, 'p', NULL, NULL),
(60, '0', 1, '2018-02-20 12:27:16', 5, NULL, NULL, NULL),
(61, '0', 1, '2018-02-20 12:48:32', 4, 'p', NULL, NULL),
(62, '0', 1, '2018-02-20 12:50:18', 5, NULL, NULL, NULL),
(63, '0', 1, '2018-02-20 12:51:02', 4, 'p', NULL, NULL),
(64, '0', 2, '2018-02-20 13:16:00', 4, 'p', NULL, NULL),
(65, '0', 1, '2018-02-20 13:55:15', 5, NULL, NULL, NULL),
(66, '0', 1, '2018-02-20 13:56:20', 4, 'p', NULL, NULL),
(67, '0', 1, '2018-02-20 14:38:28', 5, NULL, NULL, NULL),
(68, '0', 1, '2018-02-20 14:39:26', 4, 'p', NULL, NULL),
(69, '0', 1, '2018-02-20 14:40:27', 5, NULL, NULL, NULL),
(70, '0', 1, '2018-02-20 15:18:34', 4, 'p', NULL, NULL),
(71, '0', 1, '2018-02-20 15:41:49', 5, NULL, NULL, NULL),
(72, '0', 1, '2018-02-20 15:42:05', 4, 'p', NULL, NULL),
(73, '0', 1, '2018-02-20 15:42:47', 5, NULL, NULL, NULL),
(74, '0', 1, '2018-02-20 15:43:03', 4, 'p', NULL, NULL),
(75, '0', 1, '2018-02-20 15:43:11', 5, NULL, NULL, NULL),
(76, '0', 1, '2018-02-20 15:43:15', 4, 'p', NULL, NULL),
(77, '0', 1, '2018-02-20 15:44:45', 5, NULL, NULL, NULL),
(78, '0', 1, '2018-02-20 15:45:31', 4, 'p', NULL, NULL),
(79, '0', 1, '2018-02-20 15:46:15', 5, NULL, NULL, NULL),
(80, '0', 1, '2018-02-20 15:46:21', 4, 'p', NULL, NULL),
(81, '0', 2, '2018-02-20 15:56:01', 4, 'p', NULL, NULL),
(82, '0', 1, '2018-02-20 17:06:01', 4, 'p', NULL, NULL),
(83, '0', 1, '2018-02-21 11:06:30', 5, NULL, NULL, NULL),
(84, '0', 1, '2018-02-21 11:14:20', 4, 'p', NULL, NULL),
(85, '0', 1, '2018-02-21 11:19:32', 5, NULL, NULL, NULL),
(86, '0', 1, '2018-02-21 11:19:41', 4, 'p', NULL, NULL),
(87, '0', 1, '2018-02-21 11:28:07', 5, NULL, NULL, NULL),
(88, '0', 1, '2018-02-21 11:31:47', 4, 'p', NULL, NULL),
(89, '0', 1, '2018-02-21 11:36:23', 5, NULL, NULL, NULL),
(90, '0', 1, '2018-02-21 11:37:08', 4, 'p', NULL, NULL),
(91, '0', 1, '2018-02-21 11:58:40', 5, NULL, NULL, NULL),
(92, '0', 1, '2018-02-21 11:59:25', 4, 'p', NULL, NULL),
(93, '0', 1, '2018-02-21 12:11:48', 5, NULL, NULL, NULL),
(94, '0', 1, '2018-02-21 12:12:45', 4, 'p', NULL, NULL),
(95, '0', 1, '2018-02-21 12:17:23', 5, NULL, NULL, NULL),
(96, '0', 1, '2018-02-21 12:17:34', 4, 'p', NULL, NULL),
(97, '0', 3, '2018-02-21 13:59:37', 4, 'p', NULL, NULL),
(98, '0', 1, '2018-02-22 09:05:31', 5, NULL, NULL, NULL),
(99, 'f', NULL, '2018-02-22 09:05:55', 6, 'f', NULL, NULL),
(100, 'f', NULL, '2018-02-22 09:06:18', 6, 'f', NULL, NULL),
(101, 'f', NULL, '2018-02-22 09:06:20', 6, 'f', NULL, NULL),
(102, '0', 1, '2018-02-22 16:32:05', 4, 'p', NULL, NULL),
(103, '0', 1, '2018-02-23 12:15:12', 4, 'p', NULL, NULL),
(104, '0', NULL, '2018-02-26 13:45:34', 4, 'f', NULL, NULL),
(105, '0', NULL, '2018-02-26 13:45:49', 4, 'f', NULL, NULL),
(106, '0', NULL, '2018-02-26 13:45:52', 4, 'f', NULL, NULL),
(107, '0', NULL, '2018-02-26 13:46:07', 4, 'f', NULL, NULL),
(108, '0', NULL, '2018-02-26 13:47:29', 4, 'f', NULL, NULL),
(109, '0', NULL, '2018-02-26 13:47:59', 4, 'f', NULL, NULL),
(110, '0', NULL, '2018-02-26 13:48:28', 4, 'f', NULL, NULL),
(111, '0', NULL, '2018-02-26 13:49:10', 4, 'f', NULL, NULL),
(112, '0', NULL, '2018-02-26 13:50:40', 4, 'f', NULL, NULL),
(113, '0', NULL, '2018-02-26 13:50:46', 4, 'f', NULL, NULL),
(114, '0', NULL, '2018-02-26 13:52:41', 4, 'f', NULL, NULL),
(115, '0', NULL, '2018-02-26 13:59:37', 4, 'f', NULL, NULL),
(116, '0', NULL, '2018-02-26 14:03:06', 4, 'f', NULL, NULL),
(117, '0', NULL, '2018-02-26 14:08:29', 4, 'f', NULL, NULL),
(118, '0', NULL, '2018-02-26 14:15:46', 4, 'f', NULL, NULL),
(119, '0', NULL, '2018-02-26 14:40:16', 4, 'f', NULL, NULL),
(120, '0', NULL, '2018-02-26 14:40:49', 4, 'f', NULL, NULL),
(121, '0', NULL, '2018-02-26 14:41:11', 4, 'f', NULL, NULL),
(122, '0', NULL, '2018-02-26 14:41:38', 4, 'f', NULL, NULL),
(123, '0', NULL, '2018-02-26 14:42:07', 4, 'f', NULL, NULL),
(124, '0', NULL, '2018-02-26 14:43:00', 4, 'f', NULL, NULL),
(125, '0', NULL, '2018-02-26 14:43:27', 4, 'f', NULL, NULL),
(126, '0', NULL, '2018-02-26 14:43:58', 4, 'f', NULL, NULL),
(127, '0', NULL, '2018-02-26 14:44:44', 4, 'f', NULL, NULL),
(128, '0', NULL, '2018-02-26 14:45:39', 4, 'f', NULL, NULL),
(129, '0', NULL, '2018-02-26 14:46:30', 4, 'f', NULL, NULL),
(130, '0', NULL, '2018-02-26 14:46:56', 4, 'f', NULL, NULL),
(131, '0', NULL, '2018-02-26 14:47:50', 4, 'f', NULL, NULL),
(132, '0', NULL, '2018-02-26 14:48:43', 4, 'f', NULL, NULL),
(133, '0', NULL, '2018-02-26 14:50:59', 4, 'f', NULL, NULL),
(134, '0', NULL, '2018-02-26 14:51:17', 4, 'f', NULL, NULL),
(135, '0', NULL, '2018-02-26 14:53:40', 4, 'f', NULL, NULL),
(136, '0', NULL, '2018-02-26 14:54:42', 4, 'f', NULL, NULL),
(137, '0', NULL, '2018-02-26 14:55:18', 4, 'f', NULL, NULL),
(138, '0', NULL, '2018-02-26 14:55:21', 4, 'f', NULL, NULL),
(139, '0', NULL, '2018-02-26 15:36:03', 4, 'f', NULL, NULL),
(140, 'f', NULL, '2018-02-26 15:38:44', 6, 'f', NULL, NULL),
(141, '0', NULL, '2018-02-26 15:41:50', 4, 'f', NULL, NULL),
(142, 'f', NULL, '2018-02-27 11:06:23', 6, 'f', NULL, NULL),
(143, 'f', NULL, '2018-02-27 11:07:43', 6, 'f', NULL, NULL),
(144, 'f', NULL, '2018-02-27 11:08:07', 6, 'f', NULL, NULL),
(145, 'f', NULL, '2018-02-27 11:08:24', 6, 'f', NULL, NULL),
(146, 'f', NULL, '2018-02-27 11:11:36', 6, 'f', NULL, NULL),
(147, 'f', NULL, '2018-02-27 11:12:59', 6, 'f', NULL, NULL),
(148, 'f', NULL, '2018-02-27 11:14:02', 6, 'f', NULL, NULL),
(149, 'f', NULL, '2018-02-27 11:15:30', 6, 'f', NULL, NULL),
(150, 'f', NULL, '2018-02-27 11:16:42', 6, 'f', NULL, NULL),
(151, 'f', NULL, '2018-02-27 11:19:09', 6, 'f', NULL, NULL),
(152, 'f', NULL, '2018-02-27 11:19:33', 6, 'f', NULL, NULL),
(153, 'f', NULL, '2018-02-27 11:20:40', 6, 'f', NULL, NULL),
(154, 'f', NULL, '2018-02-27 11:22:03', 6, 'f', NULL, NULL),
(155, 'f', NULL, '2018-02-27 11:23:03', 6, 'f', NULL, NULL),
(156, 'f', NULL, '2018-02-27 11:23:52', 6, 'f', NULL, NULL),
(157, 'f', NULL, '2018-02-27 11:24:35', 6, 'f', NULL, NULL),
(158, 'f', NULL, '2018-02-27 11:24:39', 6, 'f', NULL, NULL),
(159, 'f', NULL, '2018-02-27 11:26:36', 6, 'f', NULL, NULL),
(160, 'f', NULL, '2018-02-27 11:26:52', 6, 'f', NULL, NULL),
(161, 'f', NULL, '2018-02-27 11:27:29', 6, 'f', NULL, NULL),
(162, 'f', NULL, '2018-02-27 11:28:03', 6, 'f', NULL, NULL),
(163, 'f', NULL, '2018-02-27 11:28:25', 6, 'f', NULL, NULL),
(164, 'f', NULL, '2018-02-27 11:29:16', 6, 'f', NULL, NULL),
(165, 'f', NULL, '2018-02-27 11:29:22', 6, 'f', NULL, NULL),
(166, 'f', NULL, '2018-02-27 11:29:41', 6, 'f', NULL, NULL),
(167, 'f', NULL, '2018-02-27 11:29:57', 6, 'f', NULL, NULL),
(168, 'f', NULL, '2018-02-27 11:32:30', 6, 'f', NULL, NULL),
(169, 'f', 13, '2018-02-27 11:32:38', 6, 'p', NULL, NULL),
(170, 'f', NULL, '2018-02-27 11:45:19', 6, 'f', NULL, NULL),
(171, 'f', 14, '2018-02-27 11:45:24', 6, 'p', NULL, NULL),
(172, 'f', NULL, '2018-02-27 11:45:32', 6, 'f', NULL, NULL),
(173, 'f', 15, '2018-02-27 11:45:40', 6, 'p', NULL, NULL),
(174, 'f', NULL, '2018-02-27 13:56:20', 6, 'f', NULL, NULL),
(175, 'f', NULL, '2018-02-27 13:56:49', 6, 'f', NULL, NULL),
(176, '0', 1, '2018-03-01 13:52:31', 4, 'p', NULL, NULL),
(177, '0', 1, '2018-03-01 14:35:24', 5, NULL, NULL, NULL),
(178, '0', 1, '2018-03-01 14:39:46', 4, 'p', NULL, NULL),
(179, '0', 1, '2018-03-01 15:12:51', 5, NULL, NULL, NULL),
(180, '0', 1, '2018-03-01 15:13:41', 4, 'p', NULL, NULL),
(181, '0', 1, '2018-03-01 15:15:00', 5, NULL, NULL, NULL),
(182, '0', 1, '2018-03-01 15:15:04', 4, 'p', NULL, NULL),
(183, '0', 1, '2018-03-01 15:51:15', 5, NULL, NULL, NULL),
(184, '0', 1, '2018-03-01 15:51:22', 4, 'p', NULL, NULL),
(185, '0', 1, '2018-03-01 15:51:52', 5, NULL, NULL, NULL),
(186, '0', 1, '2018-03-01 16:02:57', 4, 'p', NULL, NULL),
(187, '0', 1, '2018-03-01 16:26:34', 5, NULL, NULL, NULL),
(188, '0', 1, '2018-03-01 16:26:47', 4, 'p', NULL, NULL),
(189, '0', 1, '2018-03-01 16:26:53', 5, NULL, NULL, NULL),
(190, '0', 1, '2018-03-01 16:27:06', 4, 'p', NULL, NULL),
(191, '0', 1, '2018-03-05 09:10:47', 4, 'p', NULL, NULL),
(192, '0', 1, '2018-03-05 13:37:17', 5, NULL, NULL, NULL),
(193, '0', 1, '2018-03-05 13:37:23', 4, 'p', NULL, NULL),
(194, '0', 1, '2018-03-05 13:39:08', 5, NULL, NULL, NULL),
(195, '0', 1, '2018-03-05 13:40:21', 4, 'p', NULL, NULL),
(196, '0', 1, '2018-03-05 13:40:54', 5, NULL, NULL, NULL),
(197, '0', 1, '2018-03-05 13:43:45', 4, 'p', NULL, NULL),
(198, '0', 1, '2018-03-05 13:46:30', 5, NULL, NULL, NULL),
(199, '0', 1, '2018-03-05 13:58:35', 4, 'p', NULL, NULL),
(200, '0', 1, '2018-03-05 15:33:00', 5, NULL, NULL, NULL),
(201, '0', 1, '2018-03-05 15:34:21', 4, 'p', NULL, NULL),
(202, '0', 1, '2018-03-05 16:14:42', 5, NULL, NULL, NULL),
(203, '0', 1, '2018-03-05 17:03:10', 4, 'p', NULL, NULL),
(204, '0', 1, '2018-03-06 09:00:38', 5, NULL, NULL, NULL),
(205, '0', 1, '2018-03-06 09:00:49', 4, 'p', NULL, NULL),
(206, '0', 1, '2018-03-06 09:03:43', 5, NULL, NULL, NULL),
(207, '0', 1, '2018-03-06 09:04:01', 4, 'p', NULL, NULL),
(208, '0', 1, '2018-03-06 09:30:32', 5, NULL, NULL, NULL),
(209, '0', 1, '2018-03-06 09:30:42', 4, 'p', NULL, NULL),
(210, '0', 1, '2018-03-06 10:01:28', 5, NULL, NULL, NULL),
(211, '0', 1, '2018-03-06 10:11:50', 4, 'p', NULL, NULL),
(212, '0', 1, '2018-03-06 10:17:22', 5, NULL, NULL, NULL),
(213, '0', 1, '2018-03-06 10:19:03', 4, 'p', NULL, NULL),
(214, '0', NULL, '2018-03-06 11:04:26', 4, 'f', NULL, NULL),
(215, '0', NULL, '2018-03-06 11:04:30', 4, 'f', NULL, NULL),
(216, '0', 5, '2018-03-06 11:04:36', 4, 'p', NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `activity_failed_logins`
--

CREATE TABLE IF NOT EXISTS `activity_failed_logins` (
  `id` int(11) NOT NULL,
  `ref` int(11) NOT NULL,
  `user` varchar(40) NOT NULL,
  `reason` varchar(40) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `activity_failed_logins`
--

INSERT INTO `activity_failed_logins` (`id`, `ref`, `user`, `reason`) VALUES
(1, 0, 'SteveB', 'user unverified'),
(2, 0, 'SteveB', 'user unverified'),
(3, 0, 'SteveB', 'user unverified'),
(4, 0, 'SteveB', 'user unverified'),
(5, 0, 'unknown', 'empty field'),
(6, 0, 'unknown', 'empty field'),
(7, 5, '', 'empty_field'),
(8, 6, '', 'empty_field'),
(9, 7, 'unknown', 'empty_field'),
(10, 8, 'SteveB', 'empty_field'),
(11, 9, 'SteveBf', 'user_not_found'),
(12, 10, 'SteveB', 'user_banned'),
(13, 11, 'SteveB', 'user_unverified'),
(14, 12, 'SteveB', 'incorrect_pw'),
(15, 45, 'SteveBw', 'user_unverified'),
(16, 46, 'SteveBwww', 'user_not_found'),
(17, 104, 'unknown', 'empty_field'),
(18, 105, 'SteveB', 'empty_field'),
(19, 106, 'Steve', 'user_not_found'),
(20, 107, 'SteveB', 'empty_field'),
(21, 108, 'Steve', 'user_not_found'),
(22, 109, 'unknown', 'empty_field'),
(23, 110, 'unknown', 'empty_field'),
(24, 111, 'unknown', 'empty_field'),
(25, 112, 'Steve', 'user_not_found'),
(26, 113, 'unknown', 'empty_field'),
(27, 114, 'unknown', 'empty_field'),
(28, 115, 'unknown', 'empty_field'),
(29, 116, 'unknown', 'empty_field'),
(30, 117, 'unknown', 'empty_field'),
(31, 118, 'unknown', 'empty_field'),
(32, 119, 'unknown', 'empty_field'),
(33, 120, 'unknown', 'empty_field'),
(34, 121, 'unknown', 'empty_field'),
(35, 122, 'unknown', 'empty_field'),
(36, 123, 'unknown', 'empty_field'),
(37, 124, 'unknown', 'empty_field'),
(38, 125, 'unknown', 'empty_field'),
(39, 126, 'unknown', 'empty_field'),
(40, 127, 'unknown', 'empty_field'),
(41, 128, 'unknown', 'empty_field'),
(42, 129, 'unknown', 'empty_field'),
(43, 130, 'SteveBf', 'user_not_found'),
(44, 131, 'unknown', 'empty_field'),
(45, 132, 'SteveBe', 'user_not_found'),
(46, 133, 'Banned', 'user_not_found'),
(47, 134, 'Banned', 'user_not_found'),
(48, 135, 'unknown', 'empty_field'),
(49, 136, 'unknown', 'empty_field'),
(50, 137, 'unknown', 'empty_field'),
(51, 138, 'SteveBggg', 'user_not_found'),
(52, 139, 'SteveBt', 'user_not_found'),
(53, 141, 'unknown', 'empty_field'),
(54, 214, 'George_A', 'user_not_found'),
(55, 215, 'George_A', 'user_not_found');

-- --------------------------------------------------------

--
-- Table structure for table `activity_failed_registrations`
--

CREATE TABLE IF NOT EXISTS `activity_failed_registrations` (
  `id` int(11) NOT NULL,
  `ref` int(11) NOT NULL,
  `field` varchar(40) NOT NULL,
  `value` varchar(40) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=203 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `activity_failed_registrations`
--

INSERT INTO `activity_failed_registrations` (`id`, `ref`, `field`, `value`) VALUES
(1, 27, 'username', 'exists'),
(2, 27, 'email', 'null'),
(3, 27, 'firstname', 'null'),
(4, 27, 'lastname', 'null'),
(5, 27, 'confirm_password', 'null'),
(6, 27, 'terms', 'null'),
(7, 28, 'username', 'max_length'),
(8, 28, 'confirm_password', 'no_match'),
(9, 28, 'terms', 'null'),
(10, 29, 'username', 'max_length'),
(11, 29, 'confirm_password', 'no_match'),
(12, 29, 'terms', 'null'),
(13, 30, 'terms', 'null'),
(14, 31, 'terms', 'null'),
(15, 32, 'terms', 'null'),
(16, 33, 'terms', 'null'),
(17, 34, 'terms', 'null'),
(18, 40, 'username', 'exists'),
(19, 40, 'email', 'null'),
(20, 40, 'firstname', 'null'),
(21, 40, 'lastname', 'null'),
(22, 40, 'confirm_password', 'null'),
(23, 40, 'terms', 'null'),
(24, 41, 'username', 'exists'),
(25, 41, 'email', 'null'),
(26, 41, 'firstname', 'null'),
(27, 41, 'lastname', 'null'),
(28, 41, 'confirm_password', 'null'),
(29, 41, 'terms', 'null'),
(30, 42, 'username', 'exists'),
(31, 42, 'email', 'null'),
(32, 42, 'firstname', 'null'),
(33, 42, 'lastname', 'null'),
(34, 42, 'confirm_password', 'null'),
(35, 42, 'terms', 'null'),
(36, 43, 'terms', 'null'),
(37, 99, 'username', 'exists'),
(38, 99, 'email', 'null'),
(39, 99, 'firstname', 'null'),
(40, 99, 'lastname', 'null'),
(41, 99, 'confirm_password', 'null'),
(42, 99, 'terms', 'null'),
(43, 100, 'username', 'exists'),
(44, 100, 'email', 'null'),
(45, 100, 'firstname', 'null'),
(46, 100, 'lastname', 'null'),
(47, 100, 'confirm_password', 'null'),
(48, 100, 'terms', 'null'),
(49, 101, 'username', 'exists'),
(50, 101, 'email', 'null'),
(51, 101, 'firstname', 'null'),
(52, 101, 'lastname', 'null'),
(53, 101, 'confirm_password', 'null'),
(54, 101, 'terms', 'null'),
(55, 140, 'username', 'exists'),
(56, 140, 'email', 'null'),
(57, 140, 'firstname', 'null'),
(58, 140, 'lastname', 'null'),
(59, 140, 'confirm_password', 'null'),
(60, 140, 'terms', 'null'),
(61, 142, 'username', 'exists'),
(62, 142, 'email', 'null'),
(63, 142, 'firstname', 'null'),
(64, 142, 'lastname', 'null'),
(65, 142, 'confirm_password', 'null'),
(66, 142, 'terms', 'null'),
(67, 143, 'username', 'exists'),
(68, 143, 'email', 'null'),
(69, 143, 'firstname', 'null'),
(70, 143, 'lastname', 'null'),
(71, 143, 'confirm_password', 'null'),
(72, 143, 'terms', 'null'),
(73, 144, 'username', 'exists'),
(74, 144, 'email', 'null'),
(75, 144, 'firstname', 'null'),
(76, 144, 'lastname', 'null'),
(77, 144, 'confirm_password', 'null'),
(78, 144, 'terms', 'null'),
(79, 145, 'username', 'exists'),
(80, 145, 'email', 'null'),
(81, 145, 'lastname', 'null'),
(82, 145, 'confirm_password', 'null'),
(83, 145, 'terms', 'null'),
(84, 146, 'username', 'exists'),
(85, 146, 'email', 'null'),
(86, 146, 'lastname', 'null'),
(87, 146, 'confirm_password', 'null'),
(88, 146, 'terms', 'null'),
(89, 147, 'username', 'exists'),
(90, 147, 'email', 'null'),
(91, 147, 'lastname', 'null'),
(92, 147, 'confirm_password', 'null'),
(93, 147, 'terms', 'null'),
(94, 148, 'username', 'exists'),
(95, 148, 'email', 'null'),
(96, 148, 'lastname', 'null'),
(97, 148, 'confirm_password', 'null'),
(98, 148, 'terms', 'null'),
(99, 149, 'username', 'exists'),
(100, 149, 'email', 'null'),
(101, 149, 'lastname', 'null'),
(102, 149, 'confirm_password', 'null'),
(103, 149, 'terms', 'null'),
(104, 150, 'username', 'exists'),
(105, 150, 'email', 'null'),
(106, 150, 'lastname', 'null'),
(107, 150, 'confirm_password', 'null'),
(108, 150, 'terms', 'null'),
(109, 151, 'username', 'exists'),
(110, 151, 'email', 'null'),
(111, 151, 'lastname', 'null'),
(112, 151, 'confirm_password', 'null'),
(113, 151, 'terms', 'null'),
(114, 152, 'username', 'exists'),
(115, 152, 'email', 'null'),
(116, 152, 'lastname', 'null'),
(117, 152, 'confirm_password', 'null'),
(118, 152, 'terms', 'null'),
(119, 153, 'username', 'exists'),
(120, 153, 'email', 'null'),
(121, 153, 'lastname', 'null'),
(122, 153, 'confirm_password', 'null'),
(123, 153, 'terms', 'null'),
(124, 154, 'username', 'exists'),
(125, 154, 'email', 'null'),
(126, 154, 'lastname', 'null'),
(127, 154, 'confirm_password', 'null'),
(128, 154, 'terms', 'null'),
(129, 155, 'username', 'exists'),
(130, 155, 'email', 'null'),
(131, 155, 'lastname', 'null'),
(132, 155, 'confirm_password', 'null'),
(133, 155, 'terms', 'null'),
(134, 156, 'username', 'exists'),
(135, 156, 'email', 'null'),
(136, 156, 'lastname', 'null'),
(137, 156, 'confirm_password', 'null'),
(138, 156, 'terms', 'null'),
(139, 157, 'username', 'exists'),
(140, 157, 'email', 'null'),
(141, 157, 'lastname', 'null'),
(142, 157, 'confirm_password', 'null'),
(143, 157, 'terms', 'null'),
(144, 158, 'username', 'exists'),
(145, 158, 'email', 'null'),
(146, 158, 'lastname', 'null'),
(147, 158, 'confirm_password', 'null'),
(148, 158, 'terms', 'null'),
(149, 159, 'username', 'exists'),
(150, 159, 'email', 'null'),
(151, 159, 'lastname', 'null'),
(152, 159, 'confirm_password', 'null'),
(153, 159, 'terms', 'null'),
(154, 160, 'username', 'exists'),
(155, 160, 'email', 'null'),
(156, 160, 'lastname', 'null'),
(157, 160, 'confirm_password', 'null'),
(158, 160, 'terms', 'null'),
(159, 161, 'username', 'exists'),
(160, 161, 'email', 'null'),
(161, 161, 'lastname', 'null'),
(162, 161, 'confirm_password', 'null'),
(163, 161, 'terms', 'null'),
(164, 162, 'username', 'exists'),
(165, 162, 'email', 'null'),
(166, 162, 'lastname', 'null'),
(167, 162, 'confirm_password', 'null'),
(168, 162, 'terms', 'null'),
(169, 163, 'username', 'exists'),
(170, 163, 'email', 'null'),
(171, 163, 'lastname', 'null'),
(172, 163, 'confirm_password', 'null'),
(173, 163, 'terms', 'null'),
(174, 164, 'username', 'exists'),
(175, 164, 'email', 'null'),
(176, 164, 'lastname', 'null'),
(177, 164, 'confirm_password', 'null'),
(178, 164, 'terms', 'null'),
(179, 165, 'username', 'exists'),
(180, 165, 'email', 'null'),
(181, 165, 'lastname', 'null'),
(182, 165, 'confirm_password', 'null'),
(183, 165, 'terms', 'null'),
(184, 166, 'username', 'exists'),
(185, 166, 'email', 'null'),
(186, 166, 'lastname', 'null'),
(187, 166, 'confirm_password', 'null'),
(188, 166, 'terms', 'null'),
(189, 167, 'username', 'exists'),
(190, 167, 'email', 'exists'),
(191, 167, 'terms', 'null'),
(192, 168, 'username', 'exists'),
(193, 168, 'email', 'exists'),
(194, 168, 'terms', 'null'),
(195, 170, 'username', 'exists'),
(196, 170, 'email', 'exists'),
(197, 172, 'username', 'exists'),
(198, 172, 'email', 'exists'),
(199, 174, 'username', 'exists'),
(200, 174, 'email', 'exists'),
(201, 175, 'username', 'exists'),
(202, 175, 'email', 'exists');

-- --------------------------------------------------------

--
-- Table structure for table `activity_table_updates`
--

CREATE TABLE IF NOT EXISTS `activity_table_updates` (
  `id` int(11) NOT NULL,
  `ref` int(11) NOT NULL,
  `field` varchar(40) NOT NULL,
  `value` text NOT NULL,
  `old_value` text
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `activity_table_updates`
--

INSERT INTO `activity_table_updates` (`id`, `ref`, `field`, `value`, `old_value`) VALUES
(1, 27, 'username', 'exists', NULL),
(2, 27, 'email', 'null', NULL),
(3, 27, 'firstname', 'null', NULL),
(4, 27, 'lastname', 'null', NULL),
(5, 27, 'confirm_password', 'null', NULL),
(6, 27, 'terms', 'null', NULL),
(7, 28, 'username', 'max_length', NULL),
(8, 28, 'confirm_password', 'no_match', NULL),
(9, 28, 'terms', 'null', NULL),
(10, 29, 'username', 'max_length', NULL),
(11, 29, 'confirm_password', 'no_match', NULL),
(12, 29, 'terms', 'null', NULL),
(13, 30, 'terms', 'null', NULL),
(14, 31, 'terms', 'null', NULL),
(15, 32, 'terms', 'null', NULL),
(16, 33, 'terms', 'null', NULL),
(17, 34, 'terms', 'null', NULL),
(18, 51, 'group_name', 'null', NULL),
(19, 52, 'group_name', 'Group_name already exists', NULL),
(20, 52, 'permissions', 'null', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `activity_types`
--

CREATE TABLE IF NOT EXISTS `activity_types` (
  `id` int(11) NOT NULL,
  `type_name` varchar(20) NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `activity_types`
--

INSERT INTO `activity_types` (`id`, `type_name`, `created_by`, `created_date`) VALUES
(1, 'create', 1, '2018-02-13 15:29:04'),
(2, 'update', 1, '2018-02-13 15:29:09'),
(3, 'delete', 1, '2018-02-13 15:29:12'),
(4, 'login', 1, '2018-02-13 15:29:16'),
(5, 'logout', 1, '2018-02-13 15:29:27'),
(6, 'register', 1, '2018-02-13 15:31:41'),
(7, 'register_success', 1, '2018-02-14 12:46:02'),
(8, 'register_fail', 1, '2018-02-14 13:32:57');

-- --------------------------------------------------------

--
-- Table structure for table `call_log`
--

CREATE TABLE IF NOT EXISTS `call_log` (
  `id` int(11) NOT NULL,
  `outline` text NOT NULL,
  `customer_number` varchar(20) DEFAULT NULL,
  `policy_number` varchar(20) DEFAULT NULL,
  `product` int(11) NOT NULL DEFAULT '0',
  `outcome` text,
  `status` varchar(1) NOT NULL DEFAULT 'o',
  `follow_up` text,
  `agent` varchar(244) DEFAULT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `call_log`
--

INSERT INTO `call_log` (`id`, `outline`, `customer_number`, `policy_number`, `product`, `outcome`, `status`, `follow_up`, `agent`, `created_by`, `created_date`) VALUES
(1, 'dsfsdsdfs', '', '', 0, NULL, 'o', NULL, '', 1, '2018-02-19 16:45:36'),
(2, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer vel augue vel nisl dapibus vestibulum in et tortor. Curabitur sollicitudin arcu nibh, eget malesuada eros placerat sed. Aliquam id massa eu ante interdum laoreet quis sed leo. Nulla vitae leo lectus. Suspendisse potenti. Donec libero nisl, cursus at odio eget, placerat viverra purus. Mauris quis mi efficitur, laoreet sem sit amet, tincidunt dui. Integer ultricies massa neque, sed vehicula tortor finibus a. Etiam a orci tempor, tristique est vel, suscipit lorem. Nam varius lectus quam, consequat viverra urna molestie in. Suspendisse nec sollicitudin purus.\r\n\r\nNam auctor ex massa, ut imperdiet odio efficitur quis. Nulla elit urna, feugiat sit amet turpis vel, sollicitudin vehicula dui. Suspendisse quis enim dolor. Sed nec massa hendrerit, tincidunt leo non, fermentum sapien. Phasellus hendrerit ipsum vitae tempor blandit. Nullam sagittis felis at tincidunt ornare. Proin elementum libero ac erat condimentum tristique non eu magna. Etiam euismod massa in volutpat dictum. Donec a orci tempus, tincidunt nibh sed, scelerisque urna. Cras id tristique nulla, quis iaculis ex. Morbi tempus nulla a sapien tincidunt blandit. Curabitur gravida, augue vel blandit imperdiet, orci enim elementum odio, eu lobortis orci lectus a erat. Suspendisse elementum ligula tellus, vel congue lacus mattis nec. Nunc eu consectetur leo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla facilisi.', '12345678', '966666666', 3, NULL, 'o', NULL, 'An Agent', 1, '2018-02-19 16:47:38'),
(3, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer vel augue vel nisl dapibus vestibulum in et tortor. Curabitur sollicitudin arcu nibh, eget malesuada eros placerat sed. Aliquam id massa eu ante interdum laoreet quis sed leo. Nulla vitae leo lectus. Suspendisse potenti. Donec libero nisl, cursus at odio eget, placerat viverra purus. Mauris quis mi efficitur, laoreet sem sit amet, tincidunt dui. Integer ultricies massa neque, sed vehicula tortor finibus a. Etiam a orci tempor, tristique est vel, suscipit lorem. Nam varius lectus quam, consequat viverra urna molestie in. Suspendisse nec sollicitudin purus.\r\n\r\nNam auctor ex massa, ut imperdiet odio efficitur quis. Nulla elit urna, feugiat sit amet turpis vel, sollicitudin vehicula dui. Suspendisse quis enim dolor. Sed nec massa hendrerit, tincidunt leo non, fermentum sapien. Phasellus hendrerit ipsum vitae tempor blandit. Nullam sagittis felis at tincidunt ornare. Proin elementum libero ac erat condimentum tristique non eu magna. Etiam euismod massa in volutpat dictum. Donec a orci tempus, tincidunt nibh sed, scelerisque urna. Cras id tristique nulla, quis iaculis ex. Morbi tempus nulla a sapien tincidunt blandit. Curabitur gravida, augue vel blandit imperdiet, orci enim elementum odio, eu lobortis orci lectus a erat. Suspendisse elementum ligula tellus, vel congue lacus mattis nec. Nunc eu consectetur leo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla facilisi.', '12345678', '966666666', 3, NULL, 'c', NULL, 'An Agent', 1, '2018-02-19 16:47:51'),
(4, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer vel augue vel nisl dapibus vestibulum in et tortor. Curabitur sollicitudin arcu nibh, eget malesuada eros placerat sed. Aliquam id massa eu ante interdum laoreet quis sed leo. Nulla vitae leo lectus. Suspendisse potenti. Donec libero nisl, cursus at odio eget, placerat viverra purus. Mauris quis mi efficitur, laoreet sem sit amet, tincidunt dui. Integer ultricies massa neque, sed vehicula tortor finibus a. Etiam a orci tempor, tristique est vel, suscipit lorem. Nam varius lectus quam, consequat viverra urna molestie in. Suspendisse nec sollicitudin purus.\r\n\r\nNam auctor ex massa, ut imperdiet odio efficitur quis. Nulla elit urna, feugiat sit amet turpis vel, sollicitudin vehicula dui. Suspendisse quis enim dolor. Sed nec massa hendrerit, tincidunt leo non, fermentum sapien. Phasellus hendrerit ipsum vitae tempor blandit. Nullam sagittis felis at tincidunt ornare. Proin elementum libero ac erat condimentum tristique non eu magna. Etiam euismod massa in volutpat dictum. Donec a orci tempus, tincidunt nibh sed, scelerisque urna. Cras id tristique nulla, quis iaculis ex. Morbi tempus nulla a sapien tincidunt blandit. Curabitur gravida, augue vel blandit imperdiet, orci enim elementum odio, eu lobortis orci lectus a erat. Suspendisse elementum ligula tellus, vel congue lacus mattis nec. Nunc eu consectetur leo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla facilisi.', '12345678', '966666666', 3, NULL, 'o', NULL, 'An Agent', 1, '2018-02-19 16:48:37'),
(5, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ut porta augue. Proin sed feugiat elit, non molestie nunc. Nulla placerat vel enim nec hendrerit. Duis pharetra eleifend metus vitae efficitur. Maecenas maximus molestie massa eget vestibulum. Quisque eu imperdiet arcu. Ut tincidunt sodales mauris ac vestibulum. In a ante eget dolor mollis imperdiet. Morbi et ullamcorper magna. Ut aliquet pulvinar mi. Aliquam rutrum, tellus a convallis tincidunt, augue felis volutpat lacus, ac pharetra nulla velit quis odio.\r\n\r\nProin interdum ornare purus ac facilisis. Ut vitae lectus diam. Proin scelerisque ipsum in vestibulum suscipit. In ut egestas sem. Nunc orci purus, fringilla ac vulputate vel, tincidunt eu turpis. Phasellus a rutrum velit, ac posuere lacus. Aliquam porttitor, tellus quis semper scelerisque, turpis odio suscipit arcu, a dictum libero lacus ac magna. Nullam congue odio at mi vestibulum, id sollicitudin nunc efficitur. In consequat viverra magna et accumsan. Aenean ultrices euismod vulputate. Curabitur vel lectus a neque tempor fringilla sed ultrices est. Sed ullamcorper feugiat semper. Donec maximus faucibus nunc eu aliquet. Cras sed nulla ut magna egestas convallis. Nullam lacinia porta tortor, at egestas mi gravida vel.', '123456', '147258369', 2, NULL, 'o', NULL, 'aaa bbb', 1, '2018-02-19 16:49:56'),
(6, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ut porta augue. Proin sed feugiat elit, non molestie nunc. \n\nNulla placerat vel enim nec hendrerit. Duis pharetra eleifend metus vitae efficitur. Maecenas maximus molestie massa eget vestibulum. Quisque eu imperdiet arcu. Ut tincidunt sodales mauris ac vestibulum. In a ante eget dolor mollis imperdiet. Morbi et ullamcorper magna. Ut aliquet pulvinar mi. Aliquam rutrum, tellus a convallis tincidunt, augue felis volutpat lacus, ac pharetra nulla velit quis odio.\n\nProin interdum ornare purus ac facilisis. Ut vitae lectus diam. Proin scelerisque ipsum in vestibulum suscipit. In ut egestas sem. Nunc orci purus, fringilla ac vulputate vel, tincidunt eu turpis. Phasellus a rutrum velit, ac posuere lacus. Aliquam porttitor, tellus quis semper scelerisque, turpis odio suscipit arcu, a dictum libero lacus ac magna. Nullam congue odio at mi vestibulum, id sollicitudin nunc efficitur. In consequat viverra magna et accumsan. Aenean ultrices euismod vulputate. Curabitur vel lectus a neque tempor fringilla sed ultrices est. Sed ullamcorper feugiat semper. Donec maximus faucibus nunc eu aliquet. Cras sed nulla ut magna egestas convallis. Nullam lacinia porta tortor, at egestas mi gravida vel.', '123456', '147258369', 2, NULL, 'o', NULL, 'aaa bbb', 1, '2018-02-14 00:00:00'),
(7, 'erterterterterterter', '123456', '0123456', 0, 'sdfsdafsdfsfsdf', 'o', NULL, 'And agent', 1, '2018-02-20 09:40:32'),
(8, '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Proin non ligula nec nisi pharetra pellentesque. Maecenas vitae nibh quis massa malesuada rutrum. Mauris sodales malesuada urna, nec condimentum nibh laoreet efficitur. Vivamus sollicitudin odio dapibus, hendrerit libero euismod, bibendum nulla. Donec aliquet luctus mauris, nec consectetur metus imperdiet a.</p>\r\n\r\n<p>Suspendisse sapien libero, viverra vel neque in, consequat semper metus. Phasellus tincidunt, quam et iaculis laoreet, justo augue commodo est, nec luctus arcu quam ac sem. <strong><em>Maecenas ac hendrerit lectus. Duis justo ante</em></strong>, aliquet vitae massa ut, efficitur tristique nisl. Praesent pharetra arcu lacus, ac consequat sapien dignissim eget.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Mauris et mattis justo, non vestibulum lacus. Quisque tincidunt erat magna, eget sagittis ex placerat elementum. Vestibulum a efficitur tortor, non condimentum diam. Donec in purus at ante congue egestas et vel velit. Fusce at tristique lorem.</p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', '', '', 1, '<p>sadasdasdsa</p>\r\n\r\n<p>sa</p>\r\n\r\n<p><strong>das</strong></p>\r\n\r\n<p>ds</p>\r\n\r\n<p>sda</p>\r\n\r\n<p>sda</p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', 'o', NULL, '', 1, '2018-02-20 10:22:41'),
(9, 'dfgdfgdfgd', '', '', 0, '', 'o', NULL, '', 1, '2018-03-01 13:55:42'),
(10, '<p>sdfsdfsd</p>\r\n', '', '', 0, '', 'o', NULL, '', 1, '2018-03-01 14:05:31');

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE IF NOT EXISTS `categories` (
  `id` int(11) NOT NULL,
  `category_name` varchar(60) NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `category_name`, `created_by`, `created_date`) VALUES
(1, 'test', 1, '2018-02-05 00:00:00'),
(2, 'Test 2', 1, '2018-02-13 11:03:28');

-- --------------------------------------------------------

--
-- Table structure for table `ideas`
--

CREATE TABLE IF NOT EXISTS `ideas` (
  `id` int(11) NOT NULL,
  `title` varchar(244) NOT NULL,
  `details` text NOT NULL,
  `category` int(11) NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL,
  `status` varchar(1) NOT NULL DEFAULT 'p'
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `ideas`
--

INSERT INTO `ideas` (`id`, `title`, `details`, `category`, `created_by`, `created_date`, `status`) VALUES
(1, 'This is a better idea', '<p>wqeqweqeq</p>\r\n', 2, 1, '2018-02-20 13:56:38', 'o'),
(2, 'This is an idea', '<p>sadsad tertr ter ert ert ertertesadas</p><p>sadsadsadas</p>\n<p>sadsadsadas</p>\n<p>sadsads ertert ert ert ertadas</p>\n\n', -1, 1, '2018-02-20 13:56:57', 'o'),
(3, 'Hello', '<p>grgreg</p>\r\n', 2, 2, '2018-02-20 15:56:46', 'o'),
(4, 'This is my idea', '<p>Bring back the greenary. I used to like <strong>sleeping</strong>.</p>\r\n', 3, 1, '2018-02-21 11:16:35', 'o'),
(5, 'My great idea', '<p>I think we should all go and get drunk.</p>\r\n', 3, 1, '2018-02-21 12:18:38', 'o'),
(6, 'ewrwerw', '<p>ewrwerwerw</p>\r\n', 1, 1, '2018-03-01 14:34:45', 'o'),
(7, 'This is pending', '<p>Just to test it.</p>\r\n', 1, 1, '2018-03-01 14:40:06', 'o'),
(8, 'retertert', '<p>rteerter</p>\r\n', 1, 1, '2018-03-02 11:29:07', 'o');

-- --------------------------------------------------------

--
-- Table structure for table `idea_categories`
--

CREATE TABLE IF NOT EXISTS `idea_categories` (
  `id` int(11) NOT NULL,
  `category_name` varchar(60) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `idea_categories`
--

INSERT INTO `idea_categories` (`id`, `category_name`) VALUES
(1, 'Process'),
(2, 'Systems'),
(3, 'Team Building');

-- --------------------------------------------------------

--
-- Table structure for table `idea_comments`
--

CREATE TABLE IF NOT EXISTS `idea_comments` (
  `id` int(11) NOT NULL,
  `idea` int(11) NOT NULL,
  `details` text NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL,
  `status` varchar(1) NOT NULL DEFAULT 'p'
) ENGINE=MyISAM AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `idea_comments`
--

INSERT INTO `idea_comments` (`id`, `idea`, `details`, `created_by`, `created_date`, `status`) VALUES
(1, 2, '<p>This is the first comment</p>\n', 1, '2018-02-20 15:32:12', 'p'),
(2, 2, '<p>This is another comment</p>\n', 1, '2018-02-20 15:35:03', 'o'),
(3, 2, '<p>Comments, comments everywhere</p>\n', 1, '2018-02-20 15:35:18', 'o'),
(4, 1, '<p>Another comment.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Just because I can.</p>\r\n', 1, '2018-02-20 15:35:51', 'o'),
(5, 1, '<p>More commenty womenty&#39;s.</p>\r\n', 1, '2018-02-20 15:36:39', 'o'),
(6, 2, '<p>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxLorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vehicula sollicitudin nisl congue consectetur. Nam imperdiet, turpis vitae consequat gravida, turpis sapien pharetra dolor, vitae scelerisque nunc ex sit amet felis. Cras at magna malesuada, efficitur dui vitae, rutrum lacus. Mauris vel e<strong>st ac diam dictum blandit. Nunc varius nunc vitae porta lobortis. Duis luctus congue augue nec tincidunt. Nam auctor erat id elit molestie dapibus. Duis id felis vel risus dignissim commodo id et arcu. Duis pretium purus odio, malesuada mattis purus hendrerit sed. Curabitur scelerisque, leo a blandit vestibulum, urna augue tempor orci, rhoncus ultricies velit odio a leo. Proin ultricies turpis justo, a ven</strong>enatis mi cursus eget. Nulla vitae urna massa. Phasellus mattis metus dolor, quis facilisis mi sollicitudin non. Pellentesque in urna mollis, feugiat libero in, dictum purus. Praesent sit amet bibendum erat. Curabitur venenatis porta lacinia.</p>\n\n<p>Suspendisse auctor a magna ac laoreet. Nullam turpis tellus, mattis a aliquet eget, feugiat eget sapien. Sed ac venenatis justo, ut elementum dolor. Nulla ultrices, dolor non vestibulum ultrices, felis ligula fermentum nisi, ac tempor nisi tortor in sapien. Sed iaculis ultrices lacus, a luctus ex mattis vitae. Ut ornare rhoncus mauris vitae faucibus. Maecenas mollis ac arcu sit amet molestie. Etiam laoreet justo non odio convallis, vitae venenatis felis commodo. Sed faucibus malesuada pharetra. Cras pulvinar feugiat nibh.</p>\n\n<p>Aenean vestibulum libero turpis, finibus elementum augue tristique ac. Suspendisse potenti. Morbi eget neque sit amet ipsum lacinia accumsan a a turpis. Fusce nunc libero, semper id ipsum vel, fringilla ultrices augue. Duis suscipit vitae augue in malesuada. Nunc tempor malesuada diam eget molestie. Pellentesque venenatis rutrum tellus sit amet facilisis. Maecenas eget lacus quam. Sed vitae magna rutrum, ultricies urna sit amet, imperdiet sem. Nunc eleifend rutrum dolor a blandit. Sed ac ante a nibh pellentesque volutpat.</p>\n\n<p>Donec ornare posuere malesuada. Pellentesque commodo pellentesque tristique. Nam vehicula lobortis lectus, vel vulputate arcu semper ut. Curabitur varius auctor mollis. Duis sit amet rhoncus mi. Curabitur tincidunt nisi imperdiet libero feugiat, vel elementum justo porta. Aliquam porttitor leo et est consequat, et elementum erat malesuada. Sed consectetur velit a lacinia sollicitudin. Sed faucibus sapien diam, vel facilisis arcu eleifend non. Morbi ac quam mattis, sollicitudin orci ut, tempor risus. Suspendisse nec convallis felis. In ultricies quam vitae scelerisque pretium. In blandit, lacus ac ullamcorper tincidunt, tortor nisi dictum mauris, eu tempor quam augue consequat nisi.</p>\n\n<p>Sed at bibendum augue. Integer ligula ante, consectetur vel lacus at, ultrices vulputate augue. Duis in sem ut nulla venenatis mollis a dignissim dui. Sed libero urna, auctor dictum scelerisque at, consectetur id augue. Phasellus vitae tempor dolor. Quisque aliquet euismod ante eget pretium. Nulla consectetur nibh id felis convallis tempor. Pellentesque cursus augue sed sagittis maximus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n', 1, '2018-02-20 15:44:34', 'p'),
(7, 2, '<p><span class="marker">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam imperdiet molestie leo, et pulvinar mi lobortis sed. Duis ac nunc magna. Phasellus feugiat ut nulla vitae iaculis. In hac habitasse platea dictumst. Vestibulum orci massa, congue eget lectus sit amet, consequat ornare nisl. Praesent posuere sapien ligula, non mollis eros vestibulum vitae. Proin ut magna vitae eros congue rutrum eu ut enim. Nullam vehicula cursus gravida.</span></p>\r\n\r\n<p>Proin cursus erat urna, eget hendrerit enim tincidunt a. In feugiat libero quis turpis maximus imperdiet. Vestibulum eu ornare odio. Pellentesque malesuada consequat felis, quis finibus leo accumsan in. Sed sit amet enim ut eros vehicula porttitor id sed odio. Sed mattis nunc vitae mattis eleifend. Nulla eu tortor tortor. Praesent non scelerisque neque. Praesent tincidunt, orci pretium tempus aliquet, lacus dolor ultrices purus, nec elementum orci mauris et diam. Ut et ante mattis, hendrerit justo at, dignissim nunc. Nunc nec congue erat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec a enim vel velit gravida ornare.</p>\r\n', 1, '2018-02-20 15:47:05', 'o'),
(8, 2, '<p><span class="marker">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam imperdiet molestie leo, et pulvinar mi lobortis sed. Duis ac nunc magna. Phasellus feugiat ut nulla vitae iaculis. In hac habitasse platea dictumst. Vestibulum orci massa, congue eget lectus sit amet, consequat ornare nisl. Praesent posuere sapien ligula, non mollis eros vestibulum vitae. Proin ut magna vitae eros congue rutrum eu ut enim. Nullam vehicula cursus gravida.</span></p>\r\n\r\n<p>Proin cursus erat urna, eget hendrerit enim tincidunt a. In feugiat libero quis turpis maximus imperdiet. Vestibulum eu ornare odio. Pellentesque malesuada consequat felis, quis finibus leo accumsan in. Sed sit amet enim ut eros vehicula porttitor id sed odio. Sed mattis nunc vitae mattis eleifend. Nulla eu tortor tortor. Praesent non scelerisque neque. Praesent tincidunt, orci pretium tempus aliquet, lacus dolor ultrices purus, nec elementum orci mauris et diam. Ut et ante mattis, hendrerit justo at, dignissim nunc. Nunc nec congue erat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec a enim vel velit gravida ornare.</p>\r\n', 1, '2018-02-20 15:47:22', 'o'),
(9, 2, '<p><span class="marker">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam imperdiet molestie leo, et pulvinar mi lobortis sed. Duis ac nunc magna. Phasellus feugiat ut nulla vitae iaculis. In hac habitasse platea dictumst. Vestibulum orci massa, congue eget lectus sit amet, consequat ornare nisl. Praesent posuere sapien ligula, non mollis eros vestibulum vitae. Proin ut magna vitae eros congue rutrum eu ut enim. Nullam vehicula cursus gravida.</span></p>\r\n\r\n<p>Proin cursus erat urna, eget hendrerit enim tincidunt a. In feugiat libero quis turpis maximus imperdiet. Vestibulum eu ornare odio. Pellentesque malesuada consequat felis, quis finibus leo accumsan in. Sed sit amet enim ut eros vehicula porttitor id sed odio. Sed mattis nunc vitae mattis eleifend. Nulla eu tortor tortor. Praesent non scelerisque neque. Praesent tincidunt, orci pretium tempus aliquet, lacus dolor ultrices purus, nec elementum orci mauris et diam. Ut et ante mattis, hendrerit justo at, dignissim nunc. Nunc nec congue erat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec a enim vel velit gravida ornare.</p>\r\n', 1, '2018-02-20 15:47:37', 'o'),
(10, 1, '<p>hello world</p>\r\n', 2, '2018-02-20 15:56:21', 'p'),
(11, 2, '<p>This is another comment.</p>\r\n', 1, '2018-02-20 17:06:12', 'o'),
(12, 4, '<p>I agree. I think we should have sleep pods too.</p>\r\n', 1, '2018-02-21 11:19:56', 'o'),
(13, 4, '<p>I agree lets bring beds in.</p>\r\n', 1, '2018-02-21 12:19:32', 'o'),
(14, 2, '<p>ewrwerwerwe</p>\r\n', 1, '2018-03-01 14:35:13', 'o'),
(15, 2, '<p>gdfgdfgdfgdfgdfdfgdg</p>\r\n', 1, '2018-03-01 14:52:17', 'o'),
(16, 5, '<p>rterterterterteter</p>\r\n', 1, '2018-03-02 11:33:15', 'o'),
(17, 5, '<p>rterterterterteter</p>\r\n', 1, '2018-03-02 11:34:00', 'o');

-- --------------------------------------------------------

--
-- Table structure for table `idea_votes`
--

CREATE TABLE IF NOT EXISTS `idea_votes` (
  `id` int(11) NOT NULL,
  `idea` int(11) NOT NULL,
  `user` int(11) NOT NULL,
  `vote` int(11) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `idea_votes`
--

INSERT INTO `idea_votes` (`id`, `idea`, `user`, `vote`) VALUES
(1, 8, 4, -1),
(2, 8, 3, 1),
(3, 8, 2, 1),
(4, 7, 3, 1),
(22, 8, 1, 1),
(23, 7, 2, 1),
(31, 6, 1, -1);

-- --------------------------------------------------------

--
-- Table structure for table `issues`
--

CREATE TABLE IF NOT EXISTS `issues` (
  `id` int(11) NOT NULL,
  `title` text NOT NULL,
  `description` text NOT NULL,
  `product` varchar(30) NOT NULL,
  `project` varchar(11) NOT NULL,
  `area` varchar(30) NOT NULL,
  `issue_type` varchar(30) NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `issues`
--

INSERT INTO `issues` (`id`, `title`, `description`, `product`, `project`, `area`, `issue_type`, `created_by`, `created_date`) VALUES
(1, 'rgtert', '<p>tter</p>\r\n', 'mh', '0', 't', 'setup', 1, '2017-08-25 08:25:56'),
(2, 'rgtert', '<p>tter</p>\r\n', '', '0', 't', 'setup', 1, '2017-08-25 08:26:43'),
(3, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:33:15'),
(4, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:36:45'),
(5, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:44:14'),
(6, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:45:06'),
(7, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:46:02'),
(8, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:46:50'),
(9, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:48:00'),
(10, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:48:33'),
(11, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:49:25'),
(12, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:49:52'),
(13, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:50:36'),
(14, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:51:13'),
(15, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:51:45'),
(16, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:52:37'),
(17, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:55:20'),
(18, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:57:12'),
(19, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:57:52'),
(20, 'sdfsdf', '<p>sdfsdf<strong>dsdfsdffsd</strong></p>\r\n', 'null', '0', 'w', 'setup', 1, '2017-08-25 08:58:16'),
(21, 'rtert', '<p>reterer</p>\r\n', 'ms', 'pr43534', 's', 'setup', 1, '2017-08-25 09:36:30'),
(22, 'rtert', '<p>reterer</p>\r\n', 'ms', 'pr43534', 's', 'setup', 1, '2017-08-25 09:37:15'),
(23, 'rtert', '<p>reterer</p>\r\n', 'ms', 'pr43534', 's', 'setup', 1, '2017-08-25 09:37:56');

-- --------------------------------------------------------

--
-- Table structure for table `issue_screenshots`
--

CREATE TABLE IF NOT EXISTS `issue_screenshots` (
  `id` int(11) NOT NULL,
  `issue` int(11) NOT NULL,
  `image` varchar(244) NOT NULL,
  `comment_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `issue_tag`
--

CREATE TABLE IF NOT EXISTS `issue_tag` (
  `id` int(11) NOT NULL,
  `issue` int(11) NOT NULL,
  `tag` varchar(20) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=16 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `issue_tag`
--

INSERT INTO `issue_tag` (`id`, `issue`, `tag`) VALUES
(1, 10, '1'),
(2, 1, '1'),
(3, 2, '1'),
(4, 3, '1'),
(5, 4, '1'),
(6, 15, '1'),
(7, 6, '1'),
(8, 16, '1'),
(9, 8, '1'),
(10, 18, '1'),
(11, 18, '1'),
(12, 18, '1'),
(13, 20, 'setup'),
(14, 20, 'outdate'),
(15, 20, 'fields');

-- --------------------------------------------------------

--
-- Table structure for table `one_thing`
--

CREATE TABLE IF NOT EXISTS `one_thing` (
  `id` int(11) NOT NULL,
  `details` text NOT NULL,
  `created_date` datetime NOT NULL,
  `user` int(11) NOT NULL DEFAULT '0',
  `public` int(11) NOT NULL DEFAULT '0',
  `viewed` int(11) NOT NULL DEFAULT '0',
  `status` int(11) NOT NULL DEFAULT '0'
) ENGINE=MyISAM AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `one_thing`
--

INSERT INTO `one_thing` (`id`, `details`, `created_date`, `user`, `public`, `viewed`, `status`) VALUES
(1, 'werwer', '2018-02-20 11:15:24', 0, 0, 0, 0),
(2, 'werwer', '2018-02-20 11:15:33', 0, 0, 1, 0),
(3, 'werwer', '2018-02-20 11:15:44', 0, 0, 0, 0),
(4, '<p>\nPhasellus sed sem et risus tincidunt tempor eu et diam. Interdum et malesuada fames ac ante ipsum primis in faucibus. Integer non pulvinar nulla. Praesent dolor sapien, egestas vel maximus vitae, pharetra nec dolor. Donec non mauris fringilla, commodo odio in, viverra quam. Donec bibendum, augue id luctus placerat, lorem nunc scelerisque felis, at sagittis velit mauris ut turpis. Curabitur at ligula massa. Fusce faucibus imperdiet tincidunt. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;\n</p>\n<p>\nNunc tempus semper metus, in pharetra est aliquet eget. Donec volutpat diam non ullamcorper gravida. Suspendisse efficitur, erat eu molestie bibendum, quam lacus tincidunt urna, et feugiat dolor elit eget odio. Aliquam sodales, nunc nec euismod fringilla, massa orci convallis elit, eget lobortis felis orci nec elit. Etiam at malesuada quam, eu rhoncus ipsum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nullam lobortis arcu eget tortor malesuada tristique. Maecenas fringilla lacinia urna, non dignissim nunc placerat vitae. Integer ac augue sed nisl gravida rhoncus. Vivamus cursus eros ut mattis pretium. Aliquam lacinia euismod ipsum, sit amet volutpat nibh imperdiet a. Fusce cursus accumsan purus, vel accumsan arcu laoreet vitae. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum condimentum sollicitudin pharetra.\n</p>', '2018-02-20 11:19:07', 0, 0, 1, 0),
(5, '<p>\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed erat dui, molestie in venenatis id, accumsan in purus. Integer maximus faucibus metus vitae scelerisque. Vivamus vestibulum posuere egestas. Aenean magna arcu, hendrerit eget molestie vel, luctus a nulla. Nullam ac neque enim. Ut imperdiet sapien vitae leo aliquam sodales. Integer enim elit, gravida ut massa in, aliquam imperdiet massa. Aliquam ullamcorper erat ut felis aliquet condimentum. Suspendisse scelerisque tortor vel augue lobortis, ut luctus nisl facilisis. Mauris elementum lectus in dolor dictum, vitae pretium tortor faucibus. Cras maximus, lorem non aliquam sodales, dolor elit commodo dui, vitae laoreet arcu lorem et velit. Aenean magna nisl, sodales fringilla rhoncus vel, condimentum vitae sem. Donec vulputate scelerisque ante ut ultrices. Sed vitae bibendum magna. Donec finibus, tellus quis luctus posuere, mi lorem congue odio, et tincidunt nisi nisl sit amet ante. Nunc quam metus, dapibus non egestas eget, euismod ac sapien.\n</p>\n<p>\nAenean fringilla erat eu libero rhoncus, egestas aliquam eros ornare. Quisque nisi ipsum, commodo nec lobortis sed, tincidunt sed turpis. Nam eu semper ex. Nunc tincidunt non mauris eu varius. Fusce sagittis risus magna. Quisque et nisl sodales, auctor ex a, convallis dolor. Nulla diam dui, elementum aliquet erat non, lacinia consequat ligula. Morbi vulputate eu ante id rutrum. Cras vel leo viverra enim aliquam dictum. Ut gravida risus enim, eget ultrices orci vulputate nec. Sed in elit eget felis volutpat vestibulum. Duis bibendum nulla urna, eget semper enim varius sit amet. Ut mi odio, tempor quis elit a, laoreet fermentum lectus.\n</p>', '2018-02-20 11:19:38', 0, 0, 1, 0),
(6, '<p>sasadsa&nbsp;<strong>sadasdsa</strong>&nbsp;sadfasdad&nbsp;<em>sadsadsad</em>&nbsp;asdsad&nbsp;<ins>sadsadasdsa</ins></p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', '2018-02-20 11:20:10', 0, 0, 1, 0),
(7, '<p>I would like everything to be better as it is all <em><strong>rubbish</strong></em>.</p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', '2018-02-20 12:48:08', 0, 0, 1, 0),
(8, '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis iaculis tristique quam eget luctus. Morbi vel diam quis risus accumsan sagittis sed eu sapien. Donec leo velit, tincidunt ac molestie sed, interdum vel urna. Nulla ornare scelerisque sem nec rhoncus. Aliquam a ullamcorper ligula. Nullam dignissim dolor velit, vitae elementum tortor fermentum tincidunt. Fusce id nisl eu dolor viverra feugiat. Donec ac dolor elit. <strong><em>Etiam faucibus tellus vitae lacus aliquet faucibus. Curabitur tincidunt posuere sapien, eu pellentesque quam luctus id. In sollicitudin in mi et maximus. Integer ornare volutpat nisl non rhoncus. Sed bibendum vulputate urna, a blandit ex bibendum et. Nam dapibus sapien quis convallis sodales. Nunc vel nisi porta, tempus neque ac, auctor nisi. Praesent id ipsum eu tortor egestas placerat.</em></strong></p>\r\n\r\n<p>Phasellus sed sem et risus tincidunt tempor eu et diam. Interdum et malesuada fames ac ante ipsum primis in faucibus. Integer non pulvinar nulla. Praesent dolor sapien, egestas vel maximus vitae, pharetra nec dolor. Donec non mauris fringilla, commodo odio in, viverra quam. Donec bibendum, augue id luctus placerat, lorem nunc scelerisque felis, at sagittis velit mauris ut turpis. Curabitur at ligula massa. Fusce faucibus imperdiet tincidunt. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;</p>\r\n\r\n<p>Nunc tempus semper metus, in pharetra est aliquet eget. Donec volutpat diam non ullamcorper gravida. Suspendisse efficitur, erat eu molestie bibendum, quam lacus tincidunt urna, et feugiat dolor elit eget odio. Aliquam sodales, <strong>nunc nec euismod fringilla</strong>, massa orci convallis elit, eget lobortis felis orci nec elit. Etiam at malesuada quam, eu rhoncus ipsum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nullam lobortis arcu eget tortor malesuada tristique. Maecenas fringilla lacinia urna, non dignissim nunc placerat vitae. Integer ac augue sed nisl gravida rhoncus. Vivamus cursus eros ut mattis pretium. Aliquam lacinia euismod ipsum, sit amet volutpat nibh imperdiet a. Fusce cursus accumsan purus, vel accumsan arcu laoreet vitae. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum condimentum sollicitudin pharetra.</p>\r\n\r\n<div id="selenium-highlight">&nbsp;</div>\r\n', '2018-02-20 12:50:49', 0, 0, 1, 0),
(9, '<p>This should be a big feather in Steve&#39;s cap</p>\r\n', '2018-02-20 12:54:00', 0, 0, 0, 0),
(10, '<p>&copy;</p>\r\n', '2018-02-20 12:56:15', 0, 0, 0, 0),
(11, '<p>This is a test just for George.</p>\r\n', '2018-02-21 11:31:42', 0, 0, 1, 0),
(12, '<p>My one thing is more money.</p>\r\n', '2018-02-21 11:59:06', 0, 0, 1, 0),
(13, '<p>My idea is more beards.</p>\r\n', '2018-02-21 12:12:34', 0, 0, 1, 0),
(14, '<p>ghfghfg</p>\r\n', '2018-03-01 14:05:49', 0, 0, 0, 0),
(15, '<p>ghfghfg</p>\r\n', '2018-03-01 14:06:25', 0, 0, 1, 0),
(16, '<p>\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nam semper nulla nec volutpat varius. Fusce convallis magna eros, vel pharetra ante pharetra vel. Duis ac sapien a justo varius congue. Integer ac dolor vitae magna accumsan tincidunt. Aliquam dui elit, ornare nec nulla tempus, gravida aliquam turpis. Duis egestas felis lectus, et bibendum ligula convallis ac. Fusce a quam a turpis efficitur lacinia sit amet nec purus. Curabitur vitae mattis orci.\n</p>\n<p>\nVivamus commodo mauris ipsum, quis maximus tellus venenatis vel. Maecenas a dignissim lacus. Morbi commodo volutpat ultricies. Aenean efficitur efficitur sapien, non finibus sem condimentum at. Nam vel vulputate felis. Aenean non leo tempor, tristique ex vitae, sodales ex. Sed posuere blandit lorem sed tempus. In euismod varius euismod. Nam convallis lacus vestibulum mi tincidunt gravida.\n</p>', '2018-03-02 14:00:15', 0, 1, 1, 1),
(17, '<p>rrrrrrrrrrrrrrrr</p>\r\n', '2018-03-02 14:00:34', 1, 0, 0, 0),
(18, '<p>gfhgf</p>\r\n', '2018-03-02 14:04:49', 0, 1, 0, 0),
(19, '<p>gfhgf</p>\r\n', '2018-03-02 14:10:40', 0, 1, 0, 0),
(20, '<p>gfhgf</p>\r\n', '2018-03-02 14:12:47', 0, 1, 0, 0),
(21, '<p>gfhgf</p>\r\n', '2018-03-02 14:13:06', 0, 1, 0, 0),
(22, '<p>gfhgf</p>\r\n', '2018-03-02 14:13:59', 0, 1, 0, 0),
(23, '<p>gfhgf</p>\r\n', '2018-03-02 14:14:13', 0, 1, 0, 0),
(24, '<p>\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi dapibus blandit orci, non cursus orci ultricies a. Cras cursus, est et porttitor semper, magna augue vulputate nulla, quis iaculis felis purus a diam. Ut tristique dictum diam at varius. In ut arcu posuere, maximus elit eu, tincidunt metus. Donec vel facilisis mi, quis porta est. Cras vel purus ultricies, condimentum velit nec, semper urna. Aliquam et lorem nisi. Aliquam cursus sem id purus viverra, non interdum ligula lobortis. Aliquam malesuada venenatis eros, dignissim pharetra elit vehicula at.\n</p>\n<p>\nNullam nec hendrerit metus. Aenean sagittis porta hendrerit. Nunc et risus nec purus finibus dapibus quis vitae justo. Maecenas nec dolor vitae ex euismod commodo. Nam sed imperdiet sem. Sed molestie sollicitudin mauris eu tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce pharetra sapien ac elit fermentum, id suscipit ipsum porta. Nunc neque libero, ornare at arcu et, lacinia volutpat enim. Praesent placerat et metus at porta. Quisque a mauris felis. Nunc tempus fringilla tincidunt. Nulla aliquet odio vitae justo feugiat, ut commodo ipsum blandit. Nullam vel eleifend lacus, et efficitur nisi. Integer ullamcorper mollis enim sit amet elementum. Pellentesque rhoncus sem lectus, auctor efficitur velit imperdiet ac.\n</p>', '2018-03-02 14:15:18', 0, 1, 1, 1),
(25, '<p>\nPhasellus sed sem et risus tincidunt tempor eu et diam. Interdum et malesuada fames ac ante ipsum primis in faucibus. Integer non pulvinar nulla. Praesent dolor sapien, egestas vel maximus vitae, pharetra nec dolor. Donec non mauris fringilla, commodo odio in, viverra quam. Donec bibendum, augue id luctus placerat, lorem nunc scelerisque felis, at sagittis velit mauris ut turpis. Curabitur at ligula massa. Fusce faucibus imperdiet tincidunt. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;\n</p>\n<p>\nNunc tempus semper metus, in pharetra est aliquet eget. Donec volutpat diam non ullamcorper gravida. Suspendisse efficitur, erat eu molestie bibendum, quam lacus tincidunt urna, et feugiat dolor elit eget odio. Aliquam sodales, nunc nec euismod fringilla, massa orci convallis elit, eget lobortis felis orci nec elit. Etiam at malesuada quam, eu rhoncus ipsum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nullam lobortis arcu eget tortor malesuada tristique. Maecenas fringilla lacinia urna, non dignissim nunc placerat vitae. Integer ac augue sed nisl gravida rhoncus. Vivamus cursus eros ut mattis pretium. Aliquam lacinia euismod ipsum, sit amet volutpat nibh imperdiet a. Fusce cursus accumsan purus, vel accumsan arcu laoreet vitae. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum condimentum sollicitudin pharetra.\n</p>', '2018-03-02 14:16:23', 0, 1, 0, 0),
(26, '<p>\nDonec et consequat urna. Nunc porta rutrum urna eget viverra. Donec aliquet turpis eu est vehicula, id pellentesque nulla gravida. Donec diam dui, cursus a magna id, consectetur ultricies tortor. Etiam porttitor massa vehicula ligula tincidunt vehicula. Etiam sollicitudin urna ac diam egestas, non euismod sem ornare. Curabitur mattis tempor magna elementum finibus. Nullam id laoreet neque. Suspendisse sit amet scelerisque dolor.\n</p>\n<p>\nEtiam sit amet fringilla nisi. Nunc maximus diam sem, nec aliquam turpis pharetra vitae. Etiam lobortis in dolor non iaculis. Nulla rutrum sodales leo, efficitur malesuada neque interdum eu. Donec hendrerit dui gravida augue tincidunt, eu pellentesque magna malesuada. Pellentesque a purus venenatis, cursus libero vitae, placerat risus. Aliquam sed scelerisque ipsum, consequat commodo quam.\n</p>', '2018-03-05 09:16:24', 1, 1, 1, 1),
(27, '<p>\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed erat dui, molestie in venenatis id, accumsan in purus. Integer maximus faucibus metus vitae scelerisque. Vivamus vestibulum posuere egestas. Aenean magna arcu, hendrerit eget molestie vel, luctus a nulla. Nullam ac neque enim. Ut imperdiet sapien vitae leo aliquam sodales. Integer enim elit, gravida ut massa in, aliquam imperdiet massa. Aliquam ullamcorper erat ut felis aliquet condimentum. Suspendisse scelerisque tortor vel augue lobortis, ut luctus nisl facilisis. Mauris elementum lectus in dolor dictum, vitae pretium tortor faucibus. Cras maximus, lorem non aliquam sodales, dolor elit commodo dui, vitae laoreet arcu lorem et velit. Aenean magna nisl, sodales fringilla rhoncus vel, condimentum vitae sem. Donec vulputate scelerisque ante ut ultrices. Sed vitae bibendum magna. Donec finibus, tellus quis luctus posuere, mi lorem congue odio, et tincidunt nisi nisl sit amet ante. Nunc quam metus, dapibus non egestas eget, euismod ac sapien.\n</p>\n<p>\nAenean fringilla erat eu libero rhoncus, egestas aliquam eros ornare. Quisque nisi ipsum, commodo nec lobortis sed, tincidunt sed turpis. Nam eu semper ex. Nunc tincidunt non mauris eu varius. Fusce sagittis risus magna. Quisque et nisl sodales, auctor ex a, convallis dolor. Nulla diam dui, elementum aliquet erat non, lacinia consequat ligula. Morbi vulputate eu ante id rutrum. Cras vel leo viverra enim aliquam dictum. Ut gravida risus enim, eget ultrices orci vulputate nec. Sed in elit eget felis volutpat vestibulum. Duis bibendum nulla urna, eget semper enim varius sit amet. Ut mi odio, tempor quis elit a, laoreet fermentum lectus.\n</p>', '2018-03-05 09:17:17', 1, 1, 1, 0),
(28, '<p>qwrw3r234234</p>\r\n', '2018-03-05 15:32:26', 0, 1, 1, 1);

-- --------------------------------------------------------

--
-- Table structure for table `one_thing_fu`
--

CREATE TABLE IF NOT EXISTS `one_thing_fu` (
  `id` int(11) NOT NULL,
  `parent` int(11) NOT NULL,
  `details` text NOT NULL,
  `created_by` int(11) NOT NULL,
  `created_date` datetime NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `one_thing_fu`
--

INSERT INTO `one_thing_fu` (`id`, `parent`, `details`, `created_by`, `created_date`) VALUES
(1, 26, '<p>wqeqweqwwqe</p>\r\n', 1, '2018-03-05 11:01:48'),
(12, 16, '<p>qwqwerwerwer</p>\r\n\r\n<p>wer</p>\r\n\r\n<p>wer</p>\r\n\r\n<p>we</p>\r\n\r\n<p>rwe</p>\r\n\r\n<p>r</p>\r\n', 1, '2018-03-05 11:39:37'),
(13, 16, '<p>qwqwerwerwer</p>\r\n\r\n<p>wer</p>\r\n\r\n<p>wer</p>\r\n\r\n<p>we</p>\r\n\r\n<p>rwe</p>\r\n\r\n<p>r</p>\r\n', 1, '2018-03-05 12:29:58'),
(14, 28, '<p>AaasaS</p>\r\n', 1, '2018-03-05 15:42:03');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `activity`
--
ALTER TABLE `activity`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `activity_failed_logins`
--
ALTER TABLE `activity_failed_logins`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `activity_failed_registrations`
--
ALTER TABLE `activity_failed_registrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `activity_table_updates`
--
ALTER TABLE `activity_table_updates`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `activity_types`
--
ALTER TABLE `activity_types`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `call_log`
--
ALTER TABLE `call_log`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `ideas`
--
ALTER TABLE `ideas`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `idea_categories`
--
ALTER TABLE `idea_categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `idea_comments`
--
ALTER TABLE `idea_comments`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `idea_votes`
--
ALTER TABLE `idea_votes`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `issues`
--
ALTER TABLE `issues`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `issue_screenshots`
--
ALTER TABLE `issue_screenshots`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `issue_tag`
--
ALTER TABLE `issue_tag`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `one_thing`
--
ALTER TABLE `one_thing`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `one_thing_fu`
--
ALTER TABLE `one_thing_fu`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `activity`
--
ALTER TABLE `activity`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=217;
--
-- AUTO_INCREMENT for table `activity_failed_logins`
--
ALTER TABLE `activity_failed_logins`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=56;
--
-- AUTO_INCREMENT for table `activity_failed_registrations`
--
ALTER TABLE `activity_failed_registrations`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=203;
--
-- AUTO_INCREMENT for table `activity_table_updates`
--
ALTER TABLE `activity_table_updates`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=21;
--
-- AUTO_INCREMENT for table `activity_types`
--
ALTER TABLE `activity_types`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=9;
--
-- AUTO_INCREMENT for table `call_log`
--
ALTER TABLE `call_log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=11;
--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=3;
--
-- AUTO_INCREMENT for table `ideas`
--
ALTER TABLE `ideas`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=9;
--
-- AUTO_INCREMENT for table `idea_categories`
--
ALTER TABLE `idea_categories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `idea_comments`
--
ALTER TABLE `idea_comments`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=18;
--
-- AUTO_INCREMENT for table `idea_votes`
--
ALTER TABLE `idea_votes`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=32;
--
-- AUTO_INCREMENT for table `issues`
--
ALTER TABLE `issues`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=24;
--
-- AUTO_INCREMENT for table `issue_screenshots`
--
ALTER TABLE `issue_screenshots`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `issue_tag`
--
ALTER TABLE `issue_tag`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=16;
--
-- AUTO_INCREMENT for table `one_thing`
--
ALTER TABLE `one_thing`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=29;
--
-- AUTO_INCREMENT for table `one_thing_fu`
--
ALTER TABLE `one_thing_fu`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=15;



