<?php

/**
 * Main Template
 *
 * The front end template is built using two files. This one deals with any of the
 * page-specific content but it exends '/app/core/Templates/T_Base.php', which
 * contains any shared content such as the nav bar and footer.
 *
 * As everything is done within the __construct() we only ever need to call the
 * class itself and no functions, so look at that for a full explanation of the process.
 *
 * We call the template from a view and pass in two arguments. The first is the
 * main content to show for the page  while the second is an array of other page
 * settings such as the page title and required layout specifics.
 *
 * The following can be passed in as part of the array for the second argument.
 * 'page_title'     - Sets the title to be shown at the top of the page and in <head>
 * 'page_subtitle'  - Sets a subtitle to be showm just below the title at the top of the page
 * 'layout'         - Sets the layout type. We can add unlimited layouts within the laoyout function in this file.
 * 'meta'           - Adds extra, page-specific, meta tags to <head>
 * 'css'            - An array of page-specific css styles
 * 'js'             - An array of page-specific js scripts
 * 'sidebar'        - Sets the function to be called when using a layout with a sidebar.
 * 'hide_banner     - Allows you to hide the banner at the top of the page.
 * 'body_class'     - Sets any global styles for the whole page.
 *
 * All of these are described in full in '/app/views/home/index.php', where there
 * is a full example of how to build the template from within a view.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	new T_Main($content, $args)
 * @return 		string     Entire HTML page
 */
class T_Main extends T_Base {

	/**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and at the end of it, called the Template() function
     * to create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$args          Additional arguments
	 */
    public function __construct($content, $args=array()) {

		// Set the displayed content to $this->content
        /*
            As this is a class file that relies on some of the functions within itself, we set whatever we can to $this to allow it to be called from anywhere.

            $content will always be a string of the innermost content, ready formatted, and should never need any manipulation from within this file, other than adding a couple of bits where necessary (seuch as breadcrumbs). With that in mind, we set it to $this->content before we do anything else.
         */
		$this->content = $content;

		/*
            Next we work through the second arugument - $args. This will be an array and we check for each part that may exist individually, adding them to $this where required.

            We start of with the page title and subtitle, to show above the content.

            If a 'page_title' has been passed set it to $this->page_title, otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle, if required.

            These variables get checked in the content() function and then added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT show, even if it has been set.
         */
		$this->page_title = (isset($args['page_title'])) ? $args['page_title'] : null;
        $this->page_subtitle = (isset($args['page_subtitle'])) ? $args['page_subtitle'] : null;

		/*
           Set the layout version

           If a layout has been passed from the view via $args['layout'] set $this->layout to it otherwise use 'default'.

           These variables get checked in the layout() function within this file and will return a layout based on that is set here. The comments around the layout() function explains which layouts are available to use and how to add new ones..
		 */
        if(isset($args['layout'])) {
            $this->layout = $args['layout'];
        } else {
            $this->layout = 'default';
        }

        /*
            Set any page specific meta tags. These will be set in the view as a key/value pairing and will override the defaults set in /app/core/Settings.php->meta_tags()
         */
        if(isset($args['meta'])) {$this->meta = $args['meta'];}

        /*
            Set any page specific css. These will be set in the view as an array of path strings.

            We set the available css files into an array in SiteSettings.php in a static function called css(). This allows us to pass in a reference to return the correct css file.

         */
        if(isset($args['css'])) {$this->css =$args['css'];}

        /*
            Set any page specific js. These works exactly the same as the css one above other than it returns a js script from the js() function in SiteSettings.php.
         */
        if(isset($args['js'])) {$this->js =$args['js'];}

        /*
            On layouts that have sidebars, we can specifiy what is shown in it via $args['sidebar'].

            Each sidebar will have its own function within this file and all of these will end with '_sidebar', so to include the users_sidebar() function, we simply pass in $args['sidebar']='user'.

            If no sidebar is specified, it will use the default_sidebar() function.

            An example is shown in the right_Column() function.
         */
        $this->sidebar = (isset($args['sidebar'])) ? $args['sidebar'].'_sidebar' : 'default_sidebar';

        /*
            We also have the option to hide the top banner from the page, which we do by passing in $args['hide_banner'] = true. If it is false or not set, the banner will be show.

            This is used in '/app/views/home/index.php' where the nav bar now shows at the very top of the page.
         */
        $this->show_banner = (isset($args['hide_banner']) && $args['hide_banner']) ? false : true;

        /*
            We can also set a class for the entire body using $args['body_class'].

            Again, this is used in '/app/views/home/index.php' to give the whole page a dark background and light text.
         */
        $this->body_class = (isset($args['body_class'])) ? $args['body_class'] : 'bg-light';

        /*
            We have now set everything we require to $this so it can be used anywhere within the class so can build the template.

            We do this by calling the Template() function (right below the end of this function), which calls all of the functions required and then returns the entire page display.
         */
        self::Template($args);

    } // __construct


	/**
	 * Build the entire template
	 *
	 * We build this up gradually via functions contained either in this file or
     * in the T_Base file it extends. It simple calls the required functions,
     * each of which echo out a specific part of the page.
     *
	 * @return 	HTML page
	 */
    private function Template ($params) {
		/*
            Create the <!doctype> and <head> sections, along with the opening <html> and <body> tags.

            Stored in T_Base.
         */
        self::bodyStart ();

        // Build banner
        if($this->show_banner) {
            self::banner ();
        }


        // Build top navigation bar
        self::topNav ();

		// Show the actual content for the page
        self::content ($params);

		// Show the footer
        self::footer ();

		// Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()

    /**
     * Page banner
     *
     * Simply creates the banner that shows at the top of the page.
     *
     * Theoretically, this could be placed in the T_Base file but, if you are
     * running multiple sites based around the same template, having it in the
     * specific template files means it can be styled independently.
     *
     * The output of this is a fluid bootstrap container (to force it full width
     * ensuring any background colour stretches across the screen), inside which
     * we place a standard container so the content matches the width of the rest
     * of the page. Inside that inner container, we place a <h1> with the title.
     *
     * To simplify the construction, we build them individually, innermost first,
     * and pass each into it's parent.
     *
     * @return string 					Banner
     */
    public function banner () {

        // Build the H! tag as $title
        $title = Php2Html::h ([
            'size' => '1',
            'class' => 'title',
            'content' => 'UAT Hub',
        ]); // $title

        // Build the inner container as $inner_container, passing in $title as the content
        $inner_container = Php2Bs::bs_container ([
            'content' => $title
        ]); // $inner_container

        // Echo out the outer container, passing in $inner_container as the content and include some formatting
        echo Php2Bs::bs_container_fluid ([
            'id' => 'masthead',
            'class' => 'py-3',
            'content' => $inner_container
        ]); // container

    } // banner()

	/**
	 * Show the actual page content
	 *
	 * We show the actual content of the page using a pre-defined layout that has
     * either been set when calling the template from the view or as a default.
	 *
	 * This function returns the entire content, aside from the wrapper created with
     * the base file this extends and the content is built before being passed into a
     * 'bs_container' function from the Php2Bs (Bootstrap) class to create the entire
     * content area.
	 *
	 * @return     string  	   Page content
	 */
    private function content ($params) {
        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $args['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $args['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title) {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);

            /*
                If a subtitle has been set, add it to $title as a paragraph
                using the p() function in the Php2Html class with a class of 'lead-description'.
             */
            if($this->page_subtitle) {
                $title .=  Php2Html::p([
                    'class' => 'lead description',
                    'content' => $this->page_subtitle
                ]);
            }

            /*
                Now $title will contain everything required in the page_title
                div so we add it to $content using the div() function in the
                Php2Html class.
             */

             $this->content = Php2Bs::bs_column ([
                 'content' => Php2Html::h([
                     'class' => 'col-12',
                     'size' => '4',
                     'content' => $title
                 ]).breadcrumbs().$this->content
             ]);
        } // $this->page_title

        /*
            Now we just need to call the function that builds the page content, including all columns that may have been requested. The content could be called into one of several different layouts. The reason for this is you may want a slightly different layout for certain content such as some pages having a content specific sidebar.We do this by simply passing the layout() function into a Bootstrap container function.

            layout() will generate the required columns, which will have already been populated with the $this->content variable created in the construct and any data that is specified in the indicidual column functions.
         */
        echo Php2Bs::bs_container ([
            'content' => $this->layout($params)
        ]); // container

    } // content()

    /**
     * Set the correct layout
     *
     * Each of the different available layouts are created using the 'bs_row'
     * and 'bs_column' functions from the Php2Bs (Bootstrap) class.
     * The layouts that are available by default are
     * 'full-width' - single column layout
     * 'left-col'  - two column layout with left sidebar and content to the right
     * 'right-col' - two column layout with right sidebar and content to the left
     * 'three-col' - three column layout with both sidebars and content in the middle
     * 'test' - a playground for testing styles.
     *
     * The required layout is set to $this->layout in the __construct of
     * this file. If it has been passed in from the view as $args['layout']
     * that is what it will be set to, otherwise it will be set to 'default'.
     *
     * We run a switch on $this->layout and return a row (bs_row). As well
     * as setting any attributes, such as id's and classes, we pass in a
     * parameter called 'content'. This will be be any number of functions
     * that create columns using specific functions.
     *
     * The columns themselves could have multiple functions included and
     * these are explained at the start of the columns functions below. Note
     * that any classes applied to the rows will be inherited by the
     * columns unless they have overriding classes.
     *
     * To add a new layout, create a new case in the switch statement,
     * matching the format of the existing ones and create any new columns
     * that are required.
     *
     * @return  string  Page Layout
     */
    protected function layout ($params) {

        switch ($this->layout) {
            /*
                Full Width

                This is a single column layout using the main_column_full()
                function, with an id of main_content and a class of bg-light
             */
            case 'full-width':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_full (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Left column

                This is a two column layout using the left_Column () and
                main_column() functions concatenated, with an id of main_content and a class of bg-dark text-info
             */
            case 'left-col':
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                    'class' => 'bg-dark text-info',
                ]);
            break;

            /*
                Right column

                This is a two column layout using the main_column() and
                right_Column () functions concatenated, with an id of main_content and a class of text-danger
            */
            case 'right-col':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_medium ()
								.self::right_Column (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;


            case 'guides-col':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_medium ()
                                .self::guides_Column ($params['chapters'], $params['guide_slug']),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;


            /*
                Three column

                This is a three column layout using the left_Column (),
                main_column() and right_Column () functions concatenated,
                with an id of multi_column.
            */
            case 'three-col':
                return Php2Bs::bs_row ([
                	'content' => self::left_Column ()
								.self::main_column_small ()
								.self::right_Column (),
                	'id' => 'multi_column',
                ]);
            break;

            /*
                Test layout

                This is here as a simple way of testing new things or
                playing around with layouts and contains a few more attributes.
            */
            case 'test':
                return Php2Bs::bs_row ([
					'content' => self::main_column_full (),
                    'class' => 'bg-info',
                    'id' => 'main_content',
                    'data_attr' => [
                        'ref' => 'refdata',
                        'cat' => 'news'
                    ]
                ]);
            break;

            /*
                Default layout

                If no layout has been specified in the view, we default to
                the left column one.
            */
            default:
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                ]);
            break;
        } // Layout switch
    }

    /**
     * Layout column functions
     *
     * These are the functions that are called in to the rows created in
     * layout() and are all created using the 'bs_column' function
     * from the Php2Bs (Bootstrap) class.
     *
     * As when creating the rows we can set any attributes, such as id's and
     * classes, with the actual required output being passed as 'content'.
     *
     */

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {
        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9 p-0 mb-2'
        ]);
    } // main_column_medium ()

    /*
        Full Main Column

        Used in the 'full-width' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with at all breakpoints.
     */
    private function main_column_full () {
        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 mb-2'
        ]);
    } // main_column_full ()

    /*
        Small Main Column

        Used in the 'three-col' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        However, this time we also concatenate the function demo_extra_box() to give extra content to the column.

        Using the Bootstrap grid sizes it is full with, changing to 6/12
        width at the medium breakpoint.
     */
	private function main_column_small () {
        return Php2Bs::bs_column ([
			'content' => $this->content
						.$this->demo_extra_box (),
			'id' => 'main_small_column',
			'class' => 'col-md-6 mb-2'
        ]);

    } // main_column_small ()

	/*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.

        TODO: Put something more useful in here
     */
    private function left_Column () {
        return Php2Bs::bs_column ([
			'content' => 'Left Hand Box',
			'id' => 'left',
			'class' => 'col-12 col-md-3 left-col bg-warning pt-2'
        ]);
    } // left_Column ()

    /*
        Right Column

        Used in the 'default', 'right-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        side_menu () and user_box () functions (the same as we did in left_column () but in a different order. Also, in this one we concatenate them into a variable first, rather than straight into the bs_column function.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
	private function right_Column ($params=null) {

        return Php2Bs::bs_column ([
			'content' => $this->{$this->sidebar}($params),
			'id' => 'right',
			'class' => 'col-12 col-md-3 right-col saga-l-blue-bg pt-2 mt-4 mt-md-0'
        ]);
    } // right_Column ()


    private function guides_Column($params=null, $slug) {
        return Php2Bs::bs_column ([
			'content' => $this->{$this->sidebar}($params, $slug),
			'id' => 'right',
			'class' => 'col-12 col-md-3 right-col saga-l-blue-bg pt-2 mt-4 mt-md-0'
        ]);
    }

    private function guides_sidebar($chapters, $slug) {
        $content = '<ul class="chapters-sidebar">';
        foreach ($chapters as $key => $value) {
            $content .= '<li class="list-unstyled">';
            $content .= '<b>'.$value->ref.'</b> '.Php2Html::a([
                'content' => $value->title,
                'href' => '/Guides/'.$slug.'/'.$value->ref.'/'.$value->slug
            ]);

            if(isset($value->children)) {
                $content .= '<ul>';
                foreach ($value->children as $children_1 => $child_1) {
                    $content .= '<li class="list-unstyled">';
                    $content .= '<b>'.$child_1->ref.'</b> '.Php2Html::a([
                        'content' => $child_1->title,
                        'href' => '/Guides/'.$slug.'/'.$child_1->ref.'/'.$child_1->slug
                    ]);
                    if(isset($child_1->children)) {
                        $content .= '<ul>';
                        foreach ($child_1->children as $children_2 => $child_2) {
                            $content .= '<li class="list-unstyled">';
                            $content .= '<b>'.$child_2->ref.'</b> '.Php2Html::a([
                                'content' => $child_2->title,
                                'href' => '/Guides/'.$slug.'/'.$child_2->ref.'/'.$child_2->slug
                            ]);
                            $content .= '</li>';
                        }
                        $content .= '</ul>';
                    }

                    $content .= '</li>';
                }
                $content .= '</ul>';
            }
            $content .= '</li>';
        }
        $content .= '</ul>';
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'class' => 'p-1 font-weight-bold',
                'content' =>  Php2Html::h ([
                    'size' => 4,
                    'class' => 'mb-0  text-center',
                    'content' => 'Index',
                ])
            ),
            'body' => array (
                'content' =>  $content,
                'class' => 'p-2',
            ),
        ]).$this->default_sidebar();// bs_card
    }

    private function browserstats_sidebar() {
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'class' => 'p-1 font-weight-bold',
                'content' =>  Php2Html::h ([
                    'size' => 4,
                    'class' => 'mb-0  text-center',
                    'content' => 'Browser Stats',
                ])
            ),
            'body' => array (
                'content' =>  'More coming soon',
                'class' => 'p-2',
            ),
        ]).$this->default_sidebar();// bs_card
    }

    private function calls_sidebar() {
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Call Log Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Call',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/CallLog/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Today',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Today'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Week',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Week'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Month',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Month'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Year',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Year'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    private function ideas_sidebar() {
        return Php2Html::a ([
                    'content' => 'Add New Idea',
                    'class' => 'btn btn-success btn-sm btn-block mb-2',
                    'href' => '/Ideas/Add'
        ]).$this->default_sidebar();// bs_card
    }

    private function faults_sidebar() {
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Faults Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Fault',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/Faults/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Today',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Today'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Week',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Week'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Month',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Month'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Year',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Year'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    private function default_sidebar() {
        $user_model = new M_Users();

        $r = '';


        $user_content = '';
        if($user_model->isLoggedIn()) {
        $curr_user = $user_model->currentUserDetails();
        $user_content .= '<b>Username : </b>' . $curr_user->username;
        $user_content .= '<br>';
        $user_content .= '<b>Email : </b>' . $curr_user->email;
        $user_content .= '<br>';
        $user_content .= '<b>Ext No. : </b>' . $curr_user->ext;
        $user_content .= '<hr>';
        $user_content .= Php2Html::a([
            'content' => 'Update',
            'href' => '/Users/Edit/'
        ]);


            $r .= Php2Bs::bs_card ([
                'class' => 'border-dark bg-light mb-1 ',
                'header' => array (
                    'class' => 'p-1 font-weight-bold',
                    'content' => Php2Html::h ([
                        'size' => 4,
                        'class' => 'mb-0  text-center',
                        'content' => 'Your Details',
                    ])
                ),
                'body' => array (
                    'content' => $user_content,
                    'class' => 'p-2',
                ),
            ]);// bs_card
        }


        $model = new M_Ideas();
        $latestidea = $model->mostRecentSidebar();

        $idea = Php2Html::a([
            'content' => $latestidea->title,
            'href' => '/Ideas/Details/'.$latestidea->id
        ]);

        $idea_user = Php2Html::a([
            'content' => $latestidea->username,
            'href' => '/Users/'.$latestidea->username,
        ]);
        $ideas_date = new DateTime( $latestidea->created_date);

        $ideas_date = $ideas_date->format('d/m/Y \a\t g:ia');
        $ideas_content = Php2Html::p ([
            'content' => '<b>Total : </b>'.$model->count(),
        ]);
        $ideas_content .= Php2Html::p ([
            'content' => "Most recent was <br> $idea, by $idea_user on <br>$ideas_date",
        ]);
        //$ideas_content .= '<hr>';

        //$ideas_voted = $model->most_commented();
        //$idea = Php2Html::a([
        //    'content' => $ideas_voted->title .' ('.$ideas_voted->c.')',
        //    'href' => '/Ideas/Details/'.$ideas_voted->id
        //]);

        //$idea_user = Php2Html::a([
        //    'content' => $ideas_voted->username,
        //    'href' => '/Users/'.$ideas_voted->username,
        //]);
        /*
        $ideas_content .= Php2Html::p ([
            'content' => "Most commented is <br> $idea, posted on <br>$ideas_date",
        ]);
 */

        $r .= Php2Bs::bs_card ([
            'class' => 'border-dark bg-light mb-1 ',
            'header' => array (
                'class' => 'p-1 font-weight-bold',
                'content' => Php2Html::h ([
                    'size' => 4,
                    'class' => 'mb-0  text-center',
                    'content' => 'Ideas',
                ])
            ),
            'body' => array (
                'content' => $ideas_content,
                'class' => 'p-2',
            ),
        ]);// bs_card


        $latestuser = $user_model->mostRecent();
        $latest_user_date = new DateTime($latestuser->created);
        //nicePrint_r($latestuser);
        $n = Php2Html::a([
            'content' => $latestuser->username,
            'href' => '/Users/'.$latestuser->username,
        ]);
        $d = $latest_user_date->format('d/m/Y \a\t g:ia');
        $userbox_content = Php2Html::p ([
            'content' => '<b>Total : </b>'.$user_model->count(),
        ]);
        $userbox_content .= Php2Html::p ([
            'content' => "Most recent <br> $n joined<br>$d",
        ]);

        $r .= Php2Bs::bs_card ([
            'class' => 'border-dark bg-light mb-1 ',
            'header' => array (
                'class' => 'p-1 font-weight-bold',
                'content' => Php2Html::h ([
                    'size' => 4,
                    'class' => 'mb-0  text-center',
                    'content' => 'Users',
                ])
            ),
            'body' => array (
                'content' => $userbox_content,
                'class' => 'p-2',
            ),
        ]);// bs_card

        return $r;
    }

    /*
        Demo Box

        This is purely to show how extra content can be tacked on to any of the columns. It is only used in main_column_small(), which is the content area on the 'three-col' version.
    */
    private function demo_extra_box () {

        return Php2Bs::bs_alert([
            'heading' => 'Alert Example',
            'content' => Php2Html::p([
                'content' => 'Stuff can go here.'
            ]),
            'dismissible' => false,
            'color' => 'warning',
        ]);
    } // demo_extra_box ()

}









/* line 1, W:/xampp/htdocs/GitProjects/Framework/src/sass/site.scss */
body {
  background-color: #fff;
}

/* line 7, W:/xampp/htdocs/GitProjects/Framework/src/sass/site.scss */
.page_title h1{
  font-size: 3.5rem;
  color: #0e3ca7;
}

/* line 18, W:/xampp/htdocs/GitProjects/Framework/src/sass/site.scss */
.card.menu .card-block {
  padding: .5rem .75rem;
}

/* line 22, W:/xampp/htdocs/GitProjects/Framework/src/sass/site.scss */
.card.menu .card-title {
  margin-bottom: .25rem;
}

/* line 31, W:/xampp/htdocs/GitProjects/Framework/src/sass/site.scss */
li.nav-item.user {
  color: aliceblue;
  font-size: 1.5em;
}

/*# sourceMappingURL=../../public/css/site.map */

.input-group-text {
    padding: .675rem .75rem;

}

.font-size-large {
    font-size : large;
}
.title {
    font-size : 3.5rem !important;
    font-weight: 700;
}

#masthead {
     background-color: #c6dae7;
     color: #1A658F;
}

#topnav {
    background-color: rgb(26, 100, 151);
}

footer {
    background-color: rgb(26, 100, 151);
}

.saga-l-blue-fg {
    color: #c6dae7;
}

.saga-d-blue-fg {
    color: rgb(26, 100, 151);
}

.saga-l-blue-bg {
    background-color: #c6dae7;
    color: rgb(26, 100, 151);
}

.saga-d-blue-bg {
    background-color: rgb(26, 100, 151);
    color: #c6dae7;
}

footer .list-group-item.saga-d-blue-bg {
    background-color: rgb(26, 100, 151);
    border-width: 0;
    color: #c6dae7;
}

footer a.list-group-item.saga-d-blue-bg:hover {
    border-width: 0;
    color: #ccc;
}

.breadcrumb {
    background-color: #c6dae7;
}

.breadcrumb .breadcrumb-item {
    color: rgb(26, 100, 151, 0.71);
}

.breadcrumb .breadcrumb-item a{
    color: #2a6496;
}

.clicky {
    cursor: pointer;
}


.chapters-sidebar {
    padding-inline-start: 0;
}

.chapters-sidebar ul{
    padding-inline-start: .75rem;
}

.chapters-sidebar ul ul{
    padding-inline-start: 1.5rem;
}









<?php

require_once 'src/init.php';

class M_Guides
{
    private
        $_data,
        $_db_table = 'guides',
        $_field,
        $_field_data,
        $_form_data,
        $_data_chapters,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public
        $_insertId,
        $_ref,
        $_post_data;

    public function __construct(){

    }
    public function data() {
        return  $this->_data;
    } // db()

    public function data_guide() {
        return  $this->_data_guide;
    } // data_guide()

    public function data_chapter() {
        return  $this->_data_chapter;
    } // data_chapter()

    protected function db() {
        return  DB::dbConnect_hub();
    } // db()

    public function listing() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->results();
    } // list()

    public function find_guide() {

        if ($this->_ref) {

            if(is_numeric($this->_ref) && (int) $this->_ref == $this->_ref)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'guide_id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'slug';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get('guides', array($_field, '=', $this->_ref));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data_guide = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    public function find_chapter() {

        $data = self::db()->query('
        SELECT
        gc.*,
        cu.`username` c_user,
        mu.`username` m_user 
        FROM `guide_chapters` gc
        LEFT JOIN `users` cu ON gc.`created_by` = cu.`user_id`
        LEFT JOIN `users` mu ON gc.`updated_by` = mu.`user_id`
        WHERE `guide` = ?
        AND `ref` = ?
        ', [$this->_data_guide->guide_id, $this->_chapter]);
        if ($data->count()) {
            $this->_data_chapter = $data->first();
            return true;
        }

        return false;
    } // find()

    public function single_chapter () {
        $data = self::db()->query('
        SELECT
            gc.`title`,
            gc.`details`,
            gc.`created_date`,
            cu.`username` c_user,
            gc.`updated_date`,
            mu.`username` m_user
        FROM `guide_chapters` gc
        LEFT JOIN `users` cu ON gc.`created_by` = cu.`user_id`
        LEFT JOIN `users` mu ON gc.`updated_by` = mu.`user_id`
        WHERE gc.`guide` = ? && gc.`ref` = ? ORDER BY `ref` ASC', [$this->_data_guide->guide_id, $this->_chapter]);

        if ($data->count()) {
            return $data->first();
        }

        return false;
    }
    public function guide_chapters () {
        $data = self::db()->query('SELECT * FROM `guide_chapters` WHERE `guide` = ? ORDER BY `ref` ASC', [$this->_data_guide->guide_id]);

        if ($data->count()) {
            $array = [];

            foreach ($data->results() as $key => $value) {
                $bits = explode('.',$value->ref);

                $num = count($bits);

                if($num == '1') {
                    $array[$bits[0]] = $value;
                } else if ($num == '2') {
                    $array[$bits[0]]->children[$bits[1]] = $value;
                } else if ($num == '3') {
                    $array[$bits[0]]->children[$bits[1]]->children[$bits[2]] = $value;
                }




            }
            return $array;
        }

        return false;
    }

    public function add_guide_form ($type='new') {
        $_form_fields = [
            'title' => [
                'label' => 'Guide Title',
                'field_type' => 'text',
                'help_text' => 'Clear and descriptive title of the idea.'
            ],
            'intro' => [
                'label' => 'Introduction',
                'field_type' => 'textarea',
                'help_text' => 'Clear and descriptive title of the idea.'
            ],
            'description' => [
                'label' => 'Description',
                'field_type' => 'text',
                'help_text' => 'The full idea.'
            ],
            'slug' => [
                'label' => 'Slug',
                'field_type' => 'text',
                'help_text' => 'Choose the most suitable category. If none fit, select \'Other\'. To suggest a new category, add it at the end of the details field.'
            ],

        ];

        $input = '';
        foreach ($_form_fields as $key => $value) {

            $$key = Php2Html::label ([
                'for' => $key.'_input',
                'content' => $value['label'],
                'class' => 'mb-0 font-weight-bold',
                'aria' => [
                    'described-by' => $key.'_help'
                ],
            ]);

            if($value['field_type'] == 'select') {

            } else if ($value['field_type'] == 'number') {

            } else if ($value['field_type'] == 'textarea') {
                if(Input::exists($key)) {
                    $value = Input::get($key);

                    $class = (isset($this->_errors[$key])) ? 'is-invalid' : 'is-valid';

                } else if(isset($this->_data_guide->$key)) {
                    $value = $this->_data_guide->$key;

                    $class = '';

                } else {
                    $value = '';
                    $class = '';
                }

                $$key .= Php2Bs::bs_textarea ([
                    'id' => $key.'_input',
                    'content' => $value,
                    'class' => $class . ' ckeditor',
                    'name' => $key,
                    'rows' => 6,
                    'aria' => [
                        'label' => 'Add '.ucfirst(str_replace("_", " ", $key)),
                    ],
                ]);
            } else {

                if(Input::exists($key)) {
                    $value = Input::get($key);

                    $class = (isset($this->_errors[$key])) ? 'is-invalid' : 'is-valid';

                } else if($this->_data_guide) {
                    $value = $this->_data_guide->$key;

                    $class = '';

                } else {
                    $value = '';
                    $class = '';
                }
                $$key .= Php2Bs::bs_input_text ([
                    'id' => $key.'_input',
                    'value' => $value,
                    'class' => $class,
                    'name' => $key,
                    'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $key)) . '',
                    'aria' => [
                        'label' => 'Add '.ucfirst(str_replace("_", " ", $key)),
                    ],
                ]);
            }
        }

        $content = Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $title
        ]);

        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $intro
        ]);

        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $description
        ]);

        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $slug
        ]);

        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-12',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => 'float-right',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' =>  'Submit',
                    'name' => ($type=='new') ? 'add_guide':'edit_guide'
                ]) // Php2Bs::bs_button
            ]) // Php2Bs::bs_form_group
        ]); // Button row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]); //  Php2Html::form
    }

    public function chapter_form ($type='new') {
        $_form_fields = [
            'ref' => [
                'label' => 'Chapter No.',
                'field_type' => 'text',
                'help_text' => 'Clear and descriptive title of the idea.'
            ],
            'title' => [
                'label' => 'Chapter Title',
                'field_type' => 'text',
                'help_text' => 'Clear and descriptive title of the idea.'
            ],
            'details' => [
                'label' => 'Details',
                'field_type' => 'textarea',
                'help_text' => 'The full idea.'
            ],
            'slug' => [
                'label' => 'Slug',
                'field_type' => 'text',
                'help_text' => 'Choose the most suitable category. If none fit, select \'Other\'. To suggest a new category, add it at the end of the details field.'
            ],

        ];

        $input = '';
        foreach ($_form_fields as $key => $value) {

            $$key = Php2Html::label ([
                'for' => $key.'_input',
                'content' => $value['label'],
                'class' => 'mb-0 font-weight-bold',
                'aria' => [
                    'described-by' => $key.'_help'
                ],
            ]);

            if($value['field_type'] == 'select') {

            } else if ($value['field_type'] == 'number') {

            } else if ($value['field_type'] == 'textarea') {
                if(Input::exists($key)) {
                    $value = Input::get($key);

                    $class = (isset($this->_errors[$key])) ? 'is-invalid' : 'is-valid';

                } else if(isset($this->_data_chapter->$key)) {
                    $value = $this->_data_chapter->$key;

                    $class = '';

                } else {
                    $value = '';
                    $class = '';
                }

                $$key .= Php2Bs::bs_textarea ([
                    'id' => $key.'_input',
                    'content' => $value,
                    'class' => $class . ' ckeditor',
                    'name' => $key,
                    'rows' => 6,
                    'aria' => [
                        'label' => 'Add '.ucfirst(str_replace("_", " ", $key)),
                    ],
                ]);
            } else {

                if(Input::exists($key)) {
                    $value = Input::get($key);

                    $class = (isset($this->_errors[$key])) ? 'is-invalid' : 'is-valid';

                } else if(isset($this->_data_chapter->$key)) {
                    $value = $this->_data_chapter->$key;

                    $class = '';

                } else {
                    $value = '';
                    $class = '';
                }
                $$key .= Php2Bs::bs_input_text ([
                    'id' => $key.'_input',
                    'value' => $value,
                    'class' => $class,
                    'name' => $key,
                    'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $key)) . '',
                    'aria' => [
                        'label' => 'Add '.ucfirst(str_replace("_", " ", $key)),
                    ],
                ]);
            }
        }

        $content = Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $ref
        ]);

        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $title
        ]);

        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $details
        ]);

        $content .= Php2Bs::bs_form_group ([
            'class' => '',
            'content' => $slug
        ]);

        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-12',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => 'float-right',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' =>  'Submit',
                    'name' => ($type=='new') ? 'add_chapter':'edit_chapter'
                ]) // Php2Bs::bs_button
            ]) // Php2Bs::bs_form_group
        ]); // Button row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]); //  Php2Html::form
    }

    public function userAlerts ($msg) {
        $admin_record_link = Php2Bs::bs_alert_link([
            'content' => 'View',
            'href'=>'/Admin/Selenlium/Batch/{{insert_id}}'
        ]).' in admin area';

        $array = [
            'create_fail_guide' => [
                'title' => 'Create Failed',
                'alert_color' => 'danger',
                'content' => 'Please correct the following errors...<br>{{errors}}',
                'dismissible' => true,
            ],
            'create_success_guide' => [
                'title' => 'Create Successful',
                'alert_color' => 'success',
                'content' => 'The guide was successfully created. ' . Php2Bs::bs_alert_link([
                    'content' => 'View',
                    'href'=>'/Admin/Guides/'.Input::get('slug')
                ]),
                'dismissible' => true,
            ],
            'create_fail_chapter' => [
                'title' => 'Create Failed',
                'alert_color' => 'danger',
                'content' => 'Please correct the following errors...<br>{{errors}}',
                'dismissible' => true,
            ],
            'create_success_chapter' => [
                'title' => 'Create Successful',
                'alert_color' => 'success',
                'content' => 'The chapter was successfully created. ',
                'dismissible' => true,
            ],
            'edit_fail_guide' => [
                'title' => 'Edit Failed',
                'alert_color' => 'danger',
                'content' => 'Please correct the following errors...<br>{{errors}}',
                'dismissible' => true,
            ],
            'edit_success_guide' => [
                'title' => 'Edit Successful',
                'alert_color' => 'success',
                'content' => 'The guide was successfully edited. ',
                'dismissible' => true,
            ],
            'guide_not_found' => [
                'title' => 'Guide Not Found',
                'alert_color' => 'danger',
                'content' => 'The guide that you are trying to view does not exist.<br>Please view the '.Php2Bs::bs_alert_link([
                    'content' => 'List',
                    'href'=>'../Guides'
                ]),
                'dismissible' => false,
            ],
            'no_change' => [
                'title' => 'No Change',
                'alert_color' => 'info',
                'content' => 'You did not change any data. ',
                'dismissible' => true,
            ],

        ];
        $output = $array[$msg['msg']];

        if(isset($this->_errors)) {
            $errors = null;
            foreach ($this->_errors as $key => $value) {
                $errors .= ucfirst($key) . ' - ' . $value . '<br>';
            }
            $output['content'] = str_replace('{{errors}}', $errors, $output['content']);

        }
        Messages::userAlert($output);
    } // userAlerts()

    public function create_guide () {
        $this->_post_data['created_by'] = Session::get('uid');
        $this->_post_data['created_date'] = date('Y-m-d H:i:s');

        if (!self::db()->insert($this->_db_table, $this->_post_data)){
			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;
    }

    public function create_chapter () {

        $this->_post_data['created_by'] = Session::get('uid');
        $this->_post_data['created_date'] = date('Y-m-d H:i:s');

        if (!self::db()->insert('guide_chapters', $this->_post_data)){
			return false;
		}


        $this->_insertId = $this->db()->insertId();
        return true;
    }

    public function update_guide () {
        $this->_post_data['updated_by'] = Session::get('uid');
        $this->_post_data['updated_date'] = date('Y-m-d H:i:s');

        if (!self::db()->update($this->_db_table, $this->_data_guide->guide_id, $this->_post_data, $id_column='guide_id')){
            return false;
        }
        return true;
    }

    public function update_chapter () {
        $this->_post_data['updated_by'] = Session::get('uid');
        $this->_post_data['updated_date'] = date('Y-m-d H:i:s');

        if (!self::db()->update('guide_chapters', $this->_data_chapter->chapter_id, $this->_post_data, $id_column='chapter_id')){
            return false;
        }
        return true;
    }

    public function validate_guide () {


        $rules = stripValidateRules (
            $this->_post_data,
            $this->validation_rules_guide()
        );

        $validate = new Validate();
        $check = $validate->check(
            $this->_post_data,
            $rules
        );

        return $check;


    }

    public function validate_chapter () {


        $rules = stripValidateRules (
            $this->_post_data,
            $this->validation_rules_chapter()
        );

        $validate = new Validate();
        $check = $validate->check(
            $this->_post_data,
            $rules
        );

        return $check;


    }

    public function validation_rules_guide() {
        return[
            'title' => [
                'required' => true,
            ],
            'description' => [
                'required' => true,
            ],
            'intro' => [
                'required' => true,
            ],
            'slug' => [
                'required' => true,
                'unique' => 'guides'
            ],
        ];
    }

    public function validation_rules_chapter() {
        return[
            'ref' => [
                'required' => true,
            ],
            'title' => [
                'required' => true,
            ],
            'details' => [
                'required' => true,
            ],
            'slug' => [
                'required' => true,
            ],
        ];
    }


}







<?php

/**
 * Admin Guides Controller
 *
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://
 * @link 	http://
 * @link 	http://
 *
 */

class Guides extends Controller
{
    public function __construct () {

		$this->_model = $this->model('M_Guides');

        $this->_m_users = new M_Users();

        $this->_db_data = DB::dbConnect_scripting();


	} // __construct ()

	/**
	 * Guides Home Page
	 * @return 	view
	 * @link 	http://
	 */
	public function index($guide=null, $chapter=null) {
        /*
            If we have parameters at a controller root there has
            been a url error so send to the 404 page
         */
        if($guide){
            $this->_model->_ref = $guide;

            if($this->_model->find_guide()) {
                if($chapter){

                    if($chapter=='Add') {

                        if(Input::exists(['name'=>'add_chapter'])) {
                            unset($_POST['add_chapter']);

                            $this->_model->_post_data = $_POST;

                            $_validation = $this->_model->validate_chapter ();

                            if($_validation->passed()) {
                                $this->_model->_post_data['guide'] = $this->_model->data_guide()->guide_id;
                                if($this->_model->create_chapter($this->_model->_post_data)) {
                                    $this->_model->userAlerts([
                                        'msg' => 'create_success_chapter',
                                    ]);
                                }
                            } else {
                                $this->_model->_errors = $_validation->errors();

                                $this->_model->userAlerts([
                                    'msg' => 'create_fail_chapter',
                                ]);
                            }
                        }

                        $view_data = [
            	            'page_name' => $this->_model->data_guide()->title . ' - Add Chapter' ,
                            'page_subtitle' => 'Add new chapter',
                            'page_type' => 'add_chapter',
                            'form' => $this->_model->chapter_form(),
            	        ];
                    } else {
                        $this->_model->_chapter = $chapter;

                        if(Input::exists(['name'=>'edit_chapter'])) {
                            unset($_POST['edit_chapter']);



                            if($this->_model->find_chapter()) {
                                $this->_model->_post_data = $_POST;
                                $this->_model->_post_data = stripPostData ($this->_model->_post_data, $this->_model->data_chapter());
                            }

                            if(!$this->_model->_post_data) {
                                $this->_model->userAlerts([
                                    'msg' => 'no_change',
                                ]);
                            } else {
                                $_validation = $this->_model->validate_chapter ();

                                if($_validation->passed()) {
                                    if($this->_model->update_chapter($this->_model->_post_data)) {
                                        $this->_model->userAlerts([
                                            'msg' => 'edit_success_guide',
                                        ]);
                                        if(isset($this->_model->_post_data['slug']) && $this->_model->_post_data['slug'] !== $this->_model->data_chapter()->slug) {
                                            Redirect::to($this->_model->_post_data['slug']);
                                        }
                                    }
                                } else {
                                    $this->_model->_errors = $_validation->errors();

                                    $this->_model->userAlerts([
                                        'msg' => 'edit_fail_guide',
                                    ]);
                                }
                            }

                        }
                        $this->_model->find_chapter();
                        $view_data = [
            	            'page_name' => $this->_model->data_guide()->title . ' - ' . $chapter . ' ' . $this->_model->data_chapter()->title,
                            'page_subtitle' => 'Chapters',
                            'page_type' => 'guide_chapter',
                            'form' => $this->_model->chapter_form($type='edit'),
            	        ];
                    }
                } else {

                    if(Input::exists(['name'=>'edit_guide'])) {
                        unset($_POST['edit_guide']);

                        $this->_model->_post_data = $_POST;

                        if($this->_model->data_guide()) {
                            $this->_model->_post_data = stripPostData ($this->_model->_post_data, $this->_model->data_guide());
                        }

                        if(!$this->_model->_post_data) {
                            $this->_model->userAlerts([
                                'msg' => 'no_change',
                            ]);
                        } else {
                            $_validation = $this->_model->validate_guide ();

                            if($_validation->passed()) {
                                if($this->_model->update_guide($this->_model->_post_data)) {
                                    $this->_model->userAlerts([
                                        'msg' => 'edit_success_guide',
                                    ]);
                                    if(isset($this->_model->_post_data['slug']) && $this->_model->_post_data['slug'] !== $this->_model->data_guide()->slug) {
                                        Redirect::to($this->_model->_post_data['slug']);
                                    }
                                }
                            } else {
                                $this->_model->_errors = $_validation->errors();

                                $this->_model->userAlerts([
                                    'msg' => 'edit_fail_guide',
                                ]);
                            }
                        }

                    }
                    $view_data = [
        	            'page_name' => $this->_model->data_guide()->title,
                        'page_subtitle' => $this->_model->data_guide()->description,
                        'page_type' => 'guide_single',
                        'data_guide' => $this->_model->data_guide(),
                        'chapters' => $this->_model->guide_chapters(),
                        'slug' => $this->_model->data_guide()->slug,
                        'form' => $this->_model->add_guide_form($type='edit'),
        	        ];
                }
            } else {

                $view_data = [
                   'page_name' => 'Guides',
                    'page_subtitle' => 'Subtitle stuff',
                    'page_type' => 'guide_not_found',
               ];

                $this->_model->userAlerts([
                    'msg' => 'guide_not_found',
                ]);
            }

        } else {
	        $view_data = [
	            'page_name' => 'Guides',
                'page_subtitle' => 'Subtitle stuff',
                'page_type' => 'guide_overview',
                'list' => $this->_model->listing (),
	        ];
        }

        $this->view('admin/guides',$view_data);
  	} // index()

    public function Add () {

        if(Input::exists(['name'=>'add_guide'])) {
            unset($_POST['add_guide']);

            $this->_model->_post_data = $_POST;
            $_validation = $this->_model->validate_guide ();

            if($_validation->passed()) {
                if($this->_model->create_guide($_POST)) {
                    $this->_model->userAlerts([
                        'msg' => 'create_success_guide',
                    ]);
                }
            } else {
                $this->_model->_errors = $_validation->errors();

                $this->_model->userAlerts([
                    'msg' => 'create_fail_guide',
                ]);
            }
        }
        $view_data = [
            'page_name' => 'Add New Guide',
            'page_type' => 'guide_add',
            'form' => $this->_model->add_guide_form(),
        ];

        $this->view('admin/guides',$view_data);
    } // New ()

}







<?php

/**
 * Admin Page View
 *
 * This only controls the view from the home page of the admin area.
 *
 * As very little is actually done in this file, we use it as the guidline for
* all other views and as a result, there will be more commenting in this view
* than any others, including things that might not get used here but might get
* used elsewhere.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 		http://yoursite/Admin
 *
 */



/**
 * Set the parameters for the page
 *
 * As well as the content to display, there are some other parameters that
 * the call to the template also accepts. These are stored in an array called
 * $params and can either be set within this file, or passed in from the
 * controller.
 *
 * This example file contains all available parameters to give an explanation
 * of what can be used an how to use it, some of which are set within this file,
 * some of which are passed from the controller.
 */


 $params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
 $params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;
$params['meta'] = ['description' => 'Description set in page'];
$params['css'] = [
    'remote/simple-line-icons',
    #'path/to/css2',
    #'path/to/css3'
];

$params['js'] = [
    'remote/ckeditorfull',
    #'path/to/js2',
    #'path/to/js3'
];

$params['menu_category'] = 'Guides';


$content = '';
$content .= Session::flash('userAlert');

if($data['page_type'] == 'guide_overview') {


    $content .= Php2Html::a([
        'content' => 'New Guide',
        'href' => '/Admin/Guides/Add'
    ]);

    $content .= '<hr>';

    $end_key = key( array_slice( $data['list'], -1, 1, TRUE ) );

    foreach ($data['list'] as $key => $value) {


        $content .= Php2Html::a([
            'content' => $value->title,
            'href' => '/Admin/Guides/'.$value->slug
        ]);
        $content .= '<br>';
        $content .= $value->description;

        if($key !== $end_key) {
            $content .= '<hr>';

        }

    }

} // guide_overview

if($data['page_type'] == 'guide_add') {
    $content .= $data['form'];
} // guide_add

if($data['page_type'] == 'add_chapter') {
    $content .= $data['form'];
} // add_chapter

if($data['page_type'] == 'guide_chapter') {
    $content .= $data['form'];
} // guide_chapter

if($data['page_type'] == 'guide_single') {


    $content .= $data['form'];

    $content .= Php2Html::a([
        'content' => 'Add Chapter',
        'href' => '/Admin/Guides/'.$data['slug'].'/Add'
    ]);

    $content .= '<hr>';

    if($data['chapters']) {
        $content .= '<ul>';
        foreach ($data['chapters'] as $key => $value) {
            $content .= '<li class="list-unstyled">';
            $content .= '<b>'.$value->ref.'</b> '.Php2Html::a([
                'content' => $value->title,
                'href' => '/Admin/Guides/'.$data['data_guide']->slug.'/'.$value->ref.'/'.$value->title
            ]);

            if(isset($value->children)) {
                $content .= '<ul>';
                foreach ($value->children as $children_1 => $child_1) {
                    $content .= '<li class="list-unstyled">';
                    $content .= '<b>'.$child_1->ref.'</b> '.Php2Html::a([
                        'content' => $child_1->title,
                        'href' => '/Admin/Guides/'.$data['data_guide']->slug.'/'.$child_1->ref.'/'.$child_1->title
                    ]);
                    if(isset($child_1->children)) {
                        $content .= '<ul>';
                        foreach ($child_1->children as $children_2 => $child_2) {
                            $content .= '<li class="list-unstyled">';
                            $content .= '<b>'.$child_2->ref.'</b> '.Php2Html::a([
                                'content' => $child_2->title,
                                'href' => '/Admin/Guides/'.$data['data_guide']->slug.'/'.$child_2->ref.'/'.$child_2->title
                            ]);
                            $content .= '</li>';
                        }
                        $content .= '</ul>';
                    }

                    $content .= '</li>';
                }
                $content .= '</ul>';
            }
            $content .= '</li>';
        }
        $content .= '</ul>';
    }

} // guide_add
new T_Admin ($content,$params);

?>

<script>
	$(document).ready(function () {
        $("input#title_input").blur(function(){
            console.log('exited');

            var slug = $("input#slug_input").val();
            console.log('Slug : ' + slug);

                console.log('Slug : ' + $("input#title_input").val());
                $("input#slug_input").val($("input#title_input").val().toLowerCase().replace(/ /g,'-'));
        });
    });
</script>?>
<script src="/includes/js/ck_editor_config.js">
</script>








<?php
/**
* Front End Home Controller
*
*
* @author      Steve Ball <steve@follyball.co.uk>
* @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
* @link 	   http://
* @link    	   http://
* @link 	   http://
*/
class Guides extends Controller
{
    // Set the access rights for the variables, including any defaults
    private $_base_model,
            $_logs;

    // Construct the class
    public function __construct () {
        $this->_base_model = $this->model('M_Users');
        $this->_model = $this->model('M_Guides');
    } // __construct ()

    /**
	 * Site Home Page
	 *
	 * This is the page that will be seen when viewing the site root.
	 *
     * @param   mixed    $params     If not null, forces a 404
     * @return 	         /app/views/home/index.php
	 * @link 	         http://yoursite/
	 */
	public function index($guide=null, $chapter=null) {
        if($guide){
            $this->_model->_ref = $guide;

            if($this->_model->find_guide()) {
                if($chapter){
                    $this->_model->_chapter = $chapter;
                    if($this->_model->find_chapter()) {
                        $view_data = [
            	            'page_name' => $this->_model->data_guide()->title . ' - ' . $chapter . ' ' . $this->_model->data_chapter()->title,
                            'page_subtitle' => 'Chapters',
                            'page_type' => 'guide_chapter',
                            'data_guide' => $this->_model->data_guide(),
                            'chapters' => $this->_model->guide_chapters(),
                            'chapter' => $this->_model->single_chapter(),
                            'slug' => $this->_model->data_guide()->slug,
            	        ];
                    }

                } else {

                    $view_data = [
                        'page_name' => $this->_model->data_guide()->title,
                        'page_subtitle' => $this->_model->data_guide()->description,
                        'page_type' => 'guide_intro',
                        'data_guide' => $this->_model->data_guide(),
                        'chapters' => $this->_model->guide_chapters(),
                        'slug' => $this->_model->data_guide()->slug,
        	        ];
                }
            } else {
                $this->_model->userAlerts([
                    'msg' => 'guide_not_found',
                ]);
            }


        } else {
            $view_data = [
	            'page_name' => 'Guides',
                'page_subtitle' => 'Subtitle stuff',
                'page_type' => 'guide_overview',
                'list' => $this->_model->listing (),
	        ];
        }

        $this->view('home/guides',$view_data);
  	} // index()
}







<?php

/**
 * Admin Page View
 *
 * This only controls the view from the home page of the admin area.
 *
 * As very little is actually done in this file, we use it as the guidline for
* all other views and as a result, there will be more commenting in this view
* than any others, including things that might not get used here but might get
* used elsewhere.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 		http://yoursite/Admin
 *
 */



/**
 * Set the parameters for the page
 *
 * As well as the content to display, there are some other parameters that
 * the call to the template also accepts. These are stored in an array called
 * $params and can either be set within this file, or passed in from the
 * controller.
 *
 * This example file contains all available parameters to give an explanation
 * of what can be used an how to use it, some of which are set within this file,
 * some of which are passed from the controller.
 */


 $params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
 $params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;
$params['meta'] = ['description' => 'Description set in page'];
$params['css'] = [
    'remote/simple-line-icons',
    #'path/to/css2',
    #'path/to/css3'
];

$params['js'] = [
    'remote/jquery_ui',
    #'path/to/js2',
    #'path/to/js3'
];
$params['layout'] = 'right-col';
$params['menu_category'] = 'Guides';


$content = '';
$content .= Session::flash('userAlert');

if(isset($data['chapters'])) {
    $params['chapters'] = $data['chapters'];
}

if($data['page_type'] == 'guide_chapter') {
    $params['guide_slug'] = $data['data_guide']->slug;
    $params['layout'] = 'guides-col';
    $params['sidebar'] = 'guides';
    $content .= $data['chapter']->details;

    $content .= '<hr>';

    $created_date = new DateTime($data['chapter']->created_date);
    $content .= '<small class="text-secondary">Created on '.$created_date->format('d/m/Y \a\t G:i').' by '.$data['chapter']->c_user.'</small>';

    if($data['chapter']->updated_date) {
        $updated_date = new DateTime($data['chapter']->updated_date);
        $content .= '<br><small class="text-secondary">Updated on '.$updated_date->format('d/m/Y \a\t G:i').' by '.$data['chapter']->m_user.'</small>';

    }
}

if($data['page_type'] == 'guide_intro') {
    $params['guide_slug'] = $data['data_guide']->slug;
    $params['layout'] = 'guides-col';
    $params['sidebar'] = 'guides';
    $content .= '<p>'.$data['data_guide']->intro.'</p>';

    $content .= '<hr>';

    if($data['chapters']) {
        $content .= '<ul>';
        foreach ($data['chapters'] as $key => $value) {
            $content .= '<li class="list-unstyled">';
            $content .= '<b>'.$value->ref.'</b> '.Php2Html::a([
                'content' => $value->title,
                'href' => '/Guides/'.$data['data_guide']->slug.'/'.$value->ref.'/'.$value->slug
            ]);

            if(isset($value->children)) {
                $content .= '<ul>';
                foreach ($value->children as $children_1 => $child_1) {
                    $content .= '<li class="list-unstyled">';
                    $content .= '<b>'.$child_1->ref.'</b> '.Php2Html::a([
                        'content' => $child_1->title,
                        'href' => '/Guides/'.$data['data_guide']->slug.'/'.$child_1->ref.'/'.$child_1->slug
                    ]);
                    if(isset($child_1->children)) {
                        $content .= '<ul>';
                        foreach ($child_1->children as $children_2 => $child_2) {
                            $content .= '<li class="list-unstyled">';
                            $content .= '<b>'.$child_2->ref.'</b> '.Php2Html::a([
                                'content' => $child_2->title,
                                'href' => '/Guides/'.$data['data_guide']->slug.'/'.$child_2->ref.'/'.$child_2->slug
                            ]);
                            $content .= '</li>';
                        }
                        $content .= '</ul>';
                    }

                    $content .= '</li>';
                }
                $content .= '</ul>';
            }
            $content .= '</li>';
        }
        $content .= '</ul>';
    }

}

if($data['page_type'] == 'guide_overview') {

    $content .= '<hr>';

    $end_key = key( array_slice( $data['list'], -1, 1, TRUE ) );

    foreach ($data['list'] as $key => $value) {


        $content .= Php2Html::a([
            'content' => $value->title,
            'href' => '/Guides/'.$value->slug
        ]);
        $content .= '<br>';
        $content .= $value->description;

        if($key !== $end_key) {
            $content .= '<hr>';

        }

    }

} // guide_overview



new T_Main ($content,$params);







CKEDITOR.stylesSet.add( 'default', [
    // Block Styles
    { name: 'Blue Title',       element: 'h3',      styles: { 'color': 'Blue' } },
    { name: 'Red Title',        element: 'h3',      styles: { 'color': 'Red' } },
    { name: 'Big',              element: 'big' },
    { name: 'Small',            element: 'small' },
    { name: 'Typewritder',       element: 'tt' },
    // Inline Styles

    { name: 'CC: Folders',   element: 'span',    styles: { 'color': 'rgb(26, 100, 151)' } },
    { name: 'CC: Files',   element: 'span',    styles: { 'color': 'rgb(19, 107, 37)' } },
    { name: 'CC: Functions',   element: 'span',    styles: { 'color': 'rgb(144, 25, 37);' } },
    { name: 'Marker: Yellow',   element: 'span',    styles: { 'background-color': 'Yellow' } },
    { name: 'Marker: Green',    element: 'span',    styles: { 'background-color': 'Lime' } },

    // Object Styles
    {
        name: 'Image on Left',
        element: 'img',
        attributes: {
            style: 'padding: 5px; margin-right: 5px',
            border: '2',
            align: 'left'
        }
    }
] );











