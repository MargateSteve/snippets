<?php

/**
 * Front End Members Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Members.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Users
 * @link 	http://yoursite/Users/{User}
 * @link 	http://yoursite/Users/Edit
 * @link 	http://yoursite/Users/Listing
 * @link 	http://yoursite/Users/Profile
 * @link 	http://yoursite/Users/ResetPassword
 * @link 	http://yoursite/Users/Verify

 */
class Users extends Controller
{

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Users');

	} // __construct ()


    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($params=null) {
		// Initianate any models that we will be using to pass data.
		$user = $this->model('M_Users');
        $groups = $this->model('M_Usergroups');

        if ($params) {
            if (!$user->find($params)) {
                $array = array (
                    'page_name' => 'User not found',
                    'page_type' => 'profile',
                    'status' => 'not_found',
                );
            } else {

                $user_data = $user->data();

                $user_group = $groups->find($user_data->group);

                $user_data->group = $groups->data()->name;

                $array = array (
                    'page_name' => $user_data->username.'\'s Profile',
                    'page_type' => 'profile',
                    'userdata' => $user_data,
                    /*
                        Users are called 'Users' backend and 'Members' front end so we need to overwrite the default here
                     */
                    'path' => 'Members',
                );
            }

        } else {
            $array = array (
                'page_name' => 'Members Overview',
                'page_type' => 'overview',
                'usercount' => $user->count(),
				'latestuser' => $user->mostRecent(),
                /*
                    Users are called 'Users' backend and 'Members' front end so we need to overwrite the default here
                 */
                'path' => 'Members',
            );
        }




		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/users',
            $array
        );
  	} // index()


	/** 	Show a listing of all Batches
	 *
	 *	Shows a list of all existing batches
	 *
	 *	$name is not used, it is just a reminder that we can pass variables in.
	 *
	 * 	One function from the 'Batches_Model' is used...
	 *	listing() returns an array containing the details of all batches in the database
	**/
	public function listing($params=null) {
        /*
            If we have parameters at a controller root there has
            been a url error so send to the 404 page
         */
        if($params) {Redirect::to('404');}

        // Initianate any models that we will be using to pass data.
        $user = $this->model('M_Users');

		// Pass the details to the page via showview()
		$this->view(
			// Select the View to use
			'home/users',
			// Pass the data to the view. These will be available as $data.
			[
				'page_name' => 'Members List',
                'page_type' => 'listing',
                'list' => $user->listing()
			]

		) ;
	} // list

    public function resetpassword ($email=null, $hash=null) {
        $model = $this->model('M_Users');

        if ($model->isLoggedIn()) {
            Redirect::to('/');
        }


        $params = [
            'page_name' => 'Reset Password',
            'page_type' => 'reset_password',
        ];



        if($email) {
            if($model->find($email)) {
                if ($model->checkUserHash($email, $hash)) {

                    if(Input::exists(['name'=>'reset_password'])) {
                        unset($_POST['reset_password']);

                        $_postdata = stripPostData ($_POST, $model->data());

                        if($_postdata) {
                            $_rules = $model->validation_rules();
                            $_rules = stripValidateRules ($_postdata, $_rules);

                            $validate = new Validate();

                            // Check the posted data against the validation rules
                            $validation = $validate->check(
                                $_postdata,
                                $_rules
                            );


                            if ($validation->passed()) {
                                unset($_postdata['confirm_password']);
                                $_postdata['salt'] = Hash::salt(32);
                                $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

                                if($model->update($model->data()->id, $_postdata)) {
                                    $params['status'] = 'pw_update_success';
                                    $params['form'] = null;
                                } else {
                                    $params['status'] = 'pw_update_failed_unspecified';
                                }
                            } else {
                                $params['status'] = 'validation_failed';
                                $params['errors'] = $validation->errors();
                                $params['form'] = $model->resetPasswordForm(['errors'=>$validation->errors()]);
                            }
                        } else {
                            $params['status'] = 'no_change';
                        }



                    } else {
                        $params['form'] =$model->resetPasswordForm(['errors'=>null]);
                    }
                } else {
                    $params['status'] = 'hash_fail';
                    $params['form'] = $model->resetPasswordLinkForm();
                }
            } else {
                $params['status'] = 'not_found';
                $params['form'] = $model->resetPasswordLinkForm();
            }

        } else {

            if(Input::exists('send_reset_email')) {
                $params['form'] = $model->resetPasswordLinkForm();
                if(!Input::get('username')) {
                    $params['errors'] = ['username'=> 'You must enter something to search for.'];
                    $params['status'] = 'send_link_fail';
                } else {

                    if($model->find(Input::get('username'))) {
                        $_postdata['salt'] = Hash::unique();
                        $model->createUserHash(['email'=>$model->data()->email, 'hash'=>$_postdata['salt']]);
                        $model->sendPasswordLinkMail ($model->data()->email,$_postdata['salt']);
                        $params['status'] = 'pw_email_sent';
                        $params['form'] = null;
                    } else {
                        $params['status'] = 'not_found';
                    }
                }

            } else {
                $params['form'] = $model->resetPasswordLinkForm();
            }


        }



        $this->view(
            'home/users',
            $params
        );
    }

    /**
	 * Verify a users account
	 *
	 * This is generally accessed via a url sent in the registration email.
	 *
	 * Both email and hash must exist in the url otherwise nothing
	 * will be processed.
	 * Also, if the email and hash do not match a row in the 'user_hash'
	 * table, nothing will be processed.
	 *
	 * If there is an email and hash in the url and they do match a
	 * row in the 'user_hash' table, the user is activated by setting
	 * their status to 1.
	 *
	 * Nothing is passed to the view other than the page name. everything
	 * else is handled with Session::flash messages.
	 *
	 * @param  	email 		$email 		Users Email address
	 * @param  	sha256 		$hash  		Stored hash
	 * @return 	view
	 * @link 	http://site.com/Members/Verify/{$email}/{$hash}
	 */
  	public function verify($email=null, $hash=null) {
        $errors = null;

        $model = $this->model('M_Users');

        if ($model->isLoggedIn()) {
            Redirect::to('/');
        }

		// Check that the email and hash variables exist
		if(isset($email) && isset($hash))
		{
			// They both exist so continue with the verification attempt



			// Check the email and hash match a row. checkUserHash() returns true or false
		  	if ($model->checkUserHash($email, $hash))
			{
                $user = $model->find($email);

				// checkUserHash() was succesful so activate the account
			  	$model->update($model->data()->id, array('status' => '1'));

                $model->deleteUserHash($hash);

                $status = 'account_verified';

		 	} else
			{
                $status = 'incorrect_verify_link';
	  	    }
        }
        else
        {
            $status = 'incorrect_verify_link';
	  	}

		/**
		 * Pass the data to the view
		 * we only need the page name as everything else is
		 * in a flashAlert()
		 *
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
		$this->view(
            'home/users',
			[
				'page_name' => 'Verify Account',
				'page_type' => 'verify',
				'status' => $status
			]
		);
  	} // verify ()


    public function edit($_user=null) {

        /*
            If we have parameters there has been a url error so send to
            the 404 page
         */
        if($_user){Redirect::to('404');}

        $model = $this->model('M_Users');


        $params = [
            'page_name' => 'Edit Profile',
            'page_type' => 'edit',
        ];

        if(!$model->isLoggedIn()) {
            $params['errors'] = true;
            $params['status'] = 'not_logged_in';
        } else {
            $update_errors = '';
            $pw_errors = '';
            if($model->find(Session::get(Settings::members()['login_session']))) {

                if (Input::exists(['name'=>'update_user'])) {
                    unset($_POST['update_user']);

                    $_postdata = stripPostData ($_POST, $model->data());

                    if($_postdata) {
                        $_rules = $model->validation_rules();
                        $_rules = stripValidateRules ($_postdata, $_rules);

                        $validate = new Validate();

                        // Check the posted data against the validation rules
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );


                        if ($validation->passed()) {
                            if($model->update($model->data()->id, $_postdata)) {
                                $params['status'] = 'account_update_success';
                            } else {
                                $params['status'] = 'update_failed_unspecified';
                            }
                        } else {
                            $params['status'] = 'validation_failed';
                            $params['errors'] = $validation->errors();
                        }
                    } else {
                        $params['status'] = 'account_update_no_change';
                    }
                } // End profile form post

                if (Input::exists(['name'=>'reset_password'])) {
                    unset($_POST['reset_password']);

                    $_postdata = stripPostData ($_POST, $model->data());

                    if($_postdata) {
                        $_rules = $model->validation_rules();
                        $_rules = stripValidateRules ($_postdata, $_rules);

                        $validate = new Validate();

                        // Check the posted data against the validation rules
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );


                        if ($validation->passed()) {
                            unset($_postdata['confirm_password']);
                            $_postdata['salt'] = Hash::salt(32);
                            $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

                            if($model->update($model->data()->id, $_postdata)) {
                                $params['status'] = 'pw_update_success';
                            } else {
                                $params['status'] = 'pw_update_failed_unspecified';
                            }
                        } else {
                            $params['status'] = 'validation_failed';
                            $params['errors'] = $validation->errors();
                        }
                    } else {
                        $params['status'] = 'no_change';
                    }

                }

                $params['edit_form'] = $model->userForm([
                    'errors' => (isset($params['errors'])) ? $params['errors'] : '',
                    'version' => 'edit',
                    'area' => 'user',
                    'data' => $model->data()
                ]);

                $params['password_form'] = $model->resetPasswordForm([
                    'errors' => (isset($params['errors'])) ? $params['errors'] : '',
                ]);
            }
        }

        $this->view(
            'home/users',
			$params
		);

    }



    /**
     * Shows either the users profile page or an update form
     *
     * We do two things here. Firstly we check to see if
     * an update form has been posted and if so, process it
     * using profile_update() in the User Model, returning any
     * errors to $update. These errors are used to put error
     * validation on the form fields.
     *
     * We then use profile() in the User Model to check if a user
     * has been passed in and if so search for them and return the
     * results.
     *
     * All onscreen messages are handled with Session::flash in the
     * relevant classes.
     * @param  int/string/email 	$user 	Username, User ID or User Email
     * @return view
     * @link 	http://site.com/Members/Profile/{username}/
     * @link 	http://site.com/Members/Profile/{user id}/
     * @link 	http://site.com/Members/Profile/{user email}/
     */
    public function profile($user=null)
    {
        /**
         * Set the model
         *
         * All functions used here are held in the user model.
         *
         * @return Class
         */
        $model = $this->model('M_Users');

        /**
         * 	Create default variables
         *
         *	During this function, we use $errors to store any errors, $posted to show whether any
         *	form data has been posted and $method to show whether we are in view or edit mode
         *	as well as situations where no user has been found or non logged-in users try to edit
         *	a profile.
         */
        $errors = null;
        $posted = false;
        $method = null;

        /**
         * 	Check if the user has been passed in
         *
         *	If a user has been passed in, we have two options. If the user actually exists, we need to show
         *	their profile, otherwise we need to show a message that the user does not exists.
         *
         *	If a user has not been passed in, we also have two options. If the view is logged in, we then need to
         *	show the form to update their details, otherwise we show an unathorised message.
         *
         * 	@var int/string/email 	$user 	Username, User ID or User Email
         */
        if(!$user)
        {
            /*
                No user has been passed in so we need to check if is being viewed by a logged in person.

                If it is, we set $status to  'show_form'  otherwise we set it to  'unauthorised'.
            */
            $status = ($model->isLoggedIn()) ? 'show_form' : 'unauthorised';

            /*
                If the viewer is logged in (meaning $status = 'show_form') we are in edit mode so we have to
                check to see if either the profile or password update forms have been posted.

                If either have, we attempt the update and set $method to a relevant string
             */
            if($status == 'show_form')
            {

                $user = $model->getData(Session::get('user'));

                 // Check if a profile update has been posted and if so, process it
                if (Input::get('user_submit'))
                {
                    $posted = true;
                    $method = 'profile';
                    $errors = $model->update($user, $admin=false);
                }
                                // Check if a password update has been posted and if so, process it
                if (Input::get('reset_password_submit')) {
                    $posted = true;
                    $method = 'password';
                    $errors = $model->changePassword($user->id);
                }



            } // If 'show_form'

        }
        else
        {
            /*
                A user has been passed in so we need to check if they exist.

                If they do, we set $status to  'show_profile'  otherwise we set it to  'no_user'.
            */
            $status = ($model->getData($user)) ? 'show_profile' : 'no_user';
            if($status == 'show_profile')
            {
                $user = $model->getData($user);
            } else
            {
                $errors = 'nouser';
            }
        }


        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'users/index',
            [
                'page_name' => 'View Member',
                'user' => $user,
                'errors' => $errors,
                'type' => 'profile',
                'status' => $status,
                'posted' => $posted,
                'method' => $method
            ]
        );
    } // profile()


}










===============================================================================================================================================================








<?php

/**
 * Admin Users Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Admin/Users.
 *
 * An explanation of how we pass the information to the view can be
 * found in app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Users
 * @example 	http://yoursite/Admin/Users/{User}
 * @example 	http://yoursite/Admin/Users/Add
 * @example 	http://yoursite/Admin/Users/Listing
 * @example 	http://yoursite/Admin/Users/Edit/{User}
 * @example 	http://yoursite/Admin/Users/Delete/{User}
 * @example 	http://yoursite/Admin/Users/ResetPassword/{Email}/{Hash}
 * @example 	http://yoursite/Admin/Users/Verify/{Email}/{Hash}
 *
 *
 */
class Users extends Controller
{
    private $_args,
            $_default_model,
            $_postdata,
            $_rules,
            $_user;
    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Users');

	} // __construct ()

    /**
     * Registration page
     *
     * Contains the registration form and checks for any registration
     * attempts.
     *
     * @return 	view
     * @param   null         Only present to enforce 404 errors
     */
    public function add($_params=null) {
        /*
            If we have parameters there has been a url error so send to
            the 404 page
         */
        if($_params){Redirect::to('404');}

        /*
            Set any data that will either not change, or will be the most
            prominent version of that parameter, to $_params.
         */
		$_params = [
            'page_name' => 'Create new account',
            'page_type' => 'register',
            'errors' => null,
        ];


        /*
            Before anything else, we check to see if there has already been an attempt to register a user.
         */
		if (Input::exists(['name'=>'register'])) {
            // Form posted so unset the submit button from $_POST
            unset($_POST['register']);

            /*
                We now create a variable called $_postdata and set $_POST to it to preserve the original data in case we need it again.

                We also run another function to unset unrequired validation rules to avoid them firing on unset fields.
             */
            $_postdata = $_POST;

            $_rules = stripValidateRules (
                $_postdata,
                $this->_default_model->validation_rules()
            );

            // Open a new instance of the validation class
            $validate = new Validate();

            /*
                Check the posted data against the validation
                rules using the check () function from the
                Validate () class.
                If successful, the $validation->passed()
                function will return true.
             */
            $validation = $validate->check(
                $_postdata,
                $_rules
            );

            /*
                If validation has passed, we unset the 'confirm_password' and 'terms' from the $_postdata as they were only for validation purposes.
                We then set the 'status' to 1 as we want all users created in the admin area to be instantly verified, before we attempt to create a new record using the create () function in the model.
             */
            if ($validation->passed()) {
                // Validation passed so unset unrequired fields
                unset($_postdata['confirm_password']);
                unset($_postdata['terms']);

                // Automatically verify the user
                $_postdata['status'] = 1;

                if($this->_default_model->create($_postdata)) {
                    $_params['status'] = 'admin_create_success';
                    $_params['page_name'] = 'Registration Succesful';
                    $_params['insert_id'] = $this->_default_model->_insertId;

                } else {
                    // The create was unsuccessful
                    $_params['status'] = 'create_failed_unspecified';
                }
            } else {
                // The validation failed so set the status and errors
                $_params['status'] = 'validation_failed';
                $_params['errors'] = $validation->errors();
            }

        } // Form Posted

        /*
            All we need to do now is pass in the form with any errors from a previous post.
         */
		$_params['form'] = $this->_default_model->userForm([
			'errors' => $_params['errors'],
			'version' => 'create',
			'area' => 'admin',
		]);

        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'admin/users',
            $_params
        );

    } // index()

    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($_params=null) {

		// Initianate any models that we will be using to pass data.
		$user = $this->model('M_Users');
        $groups = $this->model('M_Usergroups');

        if ($_params) {
            if (!$user->find($_params)) {
                $array = array (
                    'page_name' => 'User not found',
                    'page_type' => 'profile',
                    'status' => 'admin_not_found',
                );
            } else {
                $user_data = $user->data();

                $user_group = $groups->find($user_data->group);

                $user_data->group = $groups->data()->group_name;


                $array = array (
                    'page_name' => $user_data->username.'\'s Profile',
                    'page_type' => 'profile',
                    'user' => $user_data,
                    /*
                        Users are called 'Users' backend and 'Members' front end so we need to overwrite the default here
                     */
                    'path' => 'Members',
                );

                switch ($user_data->status) {
                    case '-1':
                        $array['status'] = 'admin_user_banned';
                        break;

                    case '0':
                        $array['status'] = 'admin_user_unverified';
                        break;
                }
            }



        } else {
            $array = array (
                'page_name' => 'Members Overview',
                'page_type' => 'overview',
                'usercount' => $user->count(),
				'latestuser' => $user->mostRecent(),
                /*
                    Users are called 'Users' backend and 'Members' front end so we need to overwrite the default here
                 */
                'path' => 'Members',
            );
        }




		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'admin/users',
            $array
        );
  	} // index()


	/**
     * Show a listing of all Users
	 *
	 * Collects a list of users from the listing() function within
     * the model default model and passes it to the view at
     * /app/views/users.php.
	 *
	 *	$_args is not used for anything other than to cause a 404
     * error if there is anything after /Listing in the url.
	 *
     * @param  ambig    $_args  Creates a 404 if the url has parameters
     * @return view
     * @example 	http://yoursite/Admin/Users/Listing
     *
	 **/
	public function listing($_args=null) {
        /*
            If we have any arguments there has been a url error so send to the 404 page.
         */
        if($_args) {Redirect::to('404');}

		// Pass the details to the page via showview()
		$this->view(
			// Select the View to use
			'admin/users',
			// Pass the data to the view. These will be available as $data.
			[
				'page_name' => 'Users List',
                'page_type' => 'listing',
                'list' => $this->_default_model->listing()
			]

		) ;
	} // list

    /**
     * Edit a user
     *
     * Shows both the update and change password form for the specified
     * user, including any validation formatting, as well as attempting
     * to process any submissions of these.
     *
     * The user is passed in as the last part of the url and this can
     * either be their username, id or email address.
     *
     * @param  int/string/email    $_user   User reference
     * @return view
     * @example 	http://yoursite/Admin/Users/Edit/{User}
     *
     **/
    public function edit($_user=null) {
        /*
            When we pass the information to the view at the end of the function,
            it requires two parameters, the path to the view and all of the data
            that we need to display.

            We pass this second part as an array called $_params so we create it
            and set any data that will either not change, or will be the most
            prmonient version of that parameter.
         */
		$_view_data = [
            'page_name' => 'Edit User',
            'page_type' => 'edit',
        ];

        /**
         * 	Check if the user has been passed in
         *
         *	If a user has been passed in, we have two options. If the
         *	user actually exists, we need to show the edit form,
         *	otherwise we need to show a message that the user does
         *	not exist.
         *
         *	If a user has not been passed in, we redirect to the 404 page.
         *
         * 	@var int/string/email 	$_user 	Username, User ID or User Email
         */
        if(!$_user) {
            Redirect::to('404');
        } else {
            /*
                Next we check if the passed in user actually exists.

                If it does, we show the form, otherwise we set a 'status' parameter to give a group not found message
                in the view.
            */
            if($this->_default_model->find($_user)) {
                /*
                    The user exists so we now need to check if either the
                    update or change password forms have been posted.

                    If they have, we run any required validation and attempt
                    to process them.
                 */
				if (Input::exists(['name'=>'update_user'])) {
                    // Unset the submit button from the post
					unset($_POST['update_user']);

                    /*
                        Check any posted data against the existing data to
                        strip it down to only fields that have changed.
                     */
					$_postdata = stripPostData (
                        $_POST, $this->_default_model->data()
                    );
                    /*
                        $_postdata now contains any remaining $_POST data so,
                        if it is not empty, we start to process it.
                     */
					if($_postdata) {
                        /*
                            There is some remaining $_POST data so we now need
                            to attempt to validate it.

                            As we will probably have unset some of the $_POST
                            data, we run another function, this time unsetting
                            any unrequired validation rules to avoid them firing
                            on unset fields.
                         */
                        $_rules = stripValidateRules (
                            $_postdata, $this->_default_model->validation_rules()
                        );

                        // Open a new instance of the validation class
						$validate = new Validate();

                        /*
                            Check the posted data against the validation
                            rules using the check () function from the
                            Validate () class.
                            If successful, the $validation->passed()
                            function will return true.
                         */
						$validation = $validate->check(
							$_postdata,
							$_rules
						);

                        /*
                            If validation has passed, we attempt to update the table using the update () function in the
                            model.

                            As we use the username as the reference in
                            the url, if that is updated, the current link will be incorrect. In this case, we redirect to the edit page of the new name.

                            If it has not passed, we set a 'status' of
                            'update_fail' to $_params, and also 'errors' containing
                            the validation errors.
                         */
						if ($validation->passed()) {
                            // Validation passed so attempt the update
							if($this->_default_model->update(
                                $this->_default_model->data()->id, $_postdata)
                            ) {
                                // The update was successful, so see if 'username' has changed
								if(isset($_postdata['username']) && $this->_default_model->data()->username !== $_postdata['username']) {
                                    /*
                                        'username' has changed so set the status
                                        message to a $_SESSION and redirect to
                                        the new name.
                                     */
									Session::put('status', 'admin_account_update_success');
									Redirect::to('/Admin/Users/Edit/'.$_postdata['username']);
								} else {
                                    /*
                                        'username' has not changed so set the status message to $_params.
                                     */
									$_view_data['status'] = 'admin_account_update_success';
								}
                                // Re-find the user to pass updated details to the view
                                $this->_default_model->find($this->_default_model->data()->id);

							} else {
                                /*
                                    The update failed for an unspecified reson so
                                    simply set the status
                                 */
								$_view_data['status'] = 'update_failed_unspecified';
							}
						} else {
                            /*
                                The validation failed so set the status and errors
                             */
							$_view_data['status'] = 'validation_failed';
							$_view_data['errors'] = $validation->errors();
						}
					} else {
                        // No data had changed so just set the status
						$_view_data['status'] = 'account_update_no_change';
					}
				} // End profile form post

				if (Input::exists(['name'=>'reset_password'])) {
                    // Unset the submit button from the post
					unset($_POST['reset_password']);

					$_postdata = stripPostData ($_POST, $this->_default_model->data());

					if($_postdata) {
						$_rules = $this->_default_model->validation_rules();
						$_rules = stripValidateRules ($_postdata, $_rules);

						$validate = new Validate();

						// Check the posted data against the validation rules
						$validation = $validate->check(
							$_postdata,
							$_rules
						);

                        /*
                            Validation has passed so continue with the password update.
                         */
						if ($validation->passed()) {
							unset($_postdata['confirm_password']);
							$_postdata['salt'] = Hash::salt(32);
							$_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

							if($this->_default_model->update($this->_default_model->data()->id, $_postdata)) {
								$_view_data['status'] = 'admin_pw_update_success';

							} else {
								$_view_data['status'] = 'pw_update_failed_unspecified';
							}
						} else {
							$_view_data['status'] = 'validation_failed';
							$_view_data['errors'] = $validation->errors();

						}
					} else {
						$_view_data['status'] = 'no_change';
					}

				}

                /*
                    Set the forms

                    We add each of the forms independently with their own
                    parameters. We can set the errors for both from
                    $_params['errors'] if it is set as their will only ever be
                    errors from one of these forms at a time.
                 */
				$_view_data['edit_form'] = $this->_default_model->userForm([
					'errors' => (isset($_view_data['errors'])) ? $_view_data['errors'] : '',
					'version' => 'edit',
					'area' => 'admin',
					'data' => $this->_default_model->data()
				]);

				$_view_data['password_form'] = $this->_default_model->resetPasswordForm([
					'errors' => (isset($_params['errors'])) ? $_view_data['errors'] : '',
				]);
            }

            /*
                We pass the user status to the view so we can show an alert if
                the user is unverified or banned.
             */
            $_view_data['user_status'] = $this->_default_model->data()->status;
        }


        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'admin/users',
            $_view_data
        );
    } // edit ()

    /**
     * Delete a user from the database
     * @param  int      $data   User id
     * @return boolean          Delete status
     */
    public function delete($user=null) {
        // Set the model
        $this->_default_model = $this->model('M_Users');

        // Set the basic parameters for the page
        $_params = [
            'page_name' => 'Delete User',
            'page_type' => 'delete',
        ];

        /**
         * 	Check if the user has been passed in
         *
         *	If a user has been passed in, we have two options. If the user
         *	actually exists, process the delete form if submitted, otherwise simply
         *	show the form.
         *
         *	If a user has not been passed in, we simply redirect to the 404 page.
         *
         * 	@var int/string/email 	$user 	Username, User ID or User Email
         */
        if(!$user) {
            if($_params) {Redirect::to('404');}
        } else {
            /*
                A user has been passed in so we need to check if it exists.

                If it does, we process any delete requests that exist, otherwise
                we show the delete form.
            */
            if($this->_default_model->find($user)) {
                // Check if the delete form has been posted
                if (Input::exists(['name'=>'delete_user'])) {

                    // The delete form has been posted so unset the form button
                    unset($_POST['delete_user']);

                    // Attempt to delete the user
                    if($this->_default_model->delete($this->_default_model->data()->id)) {
                        $_params['status'] = 'admin_account_delete_success';
                    }
                } else {
                    // The delete form has not been posted so show it
                    $_params['delete_form'] = $this->_default_model->deleteForm([
                        'version' => 'delete',
                        'area' => 'admin',
                    ]);
                }
            } else {
                // No user found so show a message
                $_params['status'] = 'admin_not_found';
            }

        } // if $user


        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'admin/users',
            $_params
        );
    } // delete()









    /**
     * Reset a users password page
     *
     * This page should only be accessed via a link in an email sent.
     *
     * @param  email    $email  Email address
     * @param  sha256   $hash   Matching hash from the database row
     * @link 	http://site.com/Members/ResetPassword/{email}/{Hash}
     */
    public function resetpassword ($email=null, $hash=null)
    {
        $errors = null;
        /**
         * Set the model
         *
         * All functions used here are held in the user model.
         *
         * @return Class
         */
        $this->_default_model = $this->model('M_Users');

        if ($this->_default_model->isLoggedIn()) {
            Redirect::to('/');
        }

        /*
            We need both parameters for this to work so first of we check for the
            email.

            If there is nothing there we know then we know that we are still at the
            inital stage of the process and the reset email has not yet been requested..
         */
        if($email)
        {
            /*
                Next up we use the checkUserHash() function to see it there is a row in
                the table with a matching username and hash.

                If there is, we will send the email, show the form when the link is clicked
                and also try to process it when posted.
             */
            if ($this->_default_model->checkUserHash($email, $hash))
            {


                if (Input::get('reset_password_submit'))
                {
                    $errors =$this->_default_model->changePassword($this->_default_model->getData($email)->id);

                    if(!$errors)
                    {
                        $this->_default_model->deleteUserHash($email, $hash);
                        $status = 'updated';
                    } else {
                        $status = 'errors';
                    }

                } else
                {
                    $status = 'reset_form';
                }

            }  else
            {

                $status = 'hash_fail';


            }
        }
        else
        {
            /*
                As there is no parameters, we are at the initial stage so we need to see if an email
                has been posted to request a rest password email.
             */
            if (Input::get('reset_password_user'))
            {
                if(!Token::check(Input::get('token')))
                {
                    $status = 'token_fail';
                } else
                {


                    /*
                        The form has been posted so get the users details via the username input.

                        Although the input is called 'username' it can be a username, password or id.
                     */
                    $_user = $this->_default_model->find (Input::get('username'));

                    /*
                        If the user has been found, create a new hash and pass it into the createUserHash()
                        function in User_Functions to insert it into the table.

                        Once this is done, we send the email using SendMail::sendPasswordUpdateMail()
                     */
                    if($_user)
                    {
                        // The user exists so collect the data and create the hash
                        $_user = $this->_default_model->data();
                        $display = 'Send the email';
                        $hash = Hash::unique();

                        // Insert into the user_hash table
                        try {
                            $this->_default_model->createUserHash(array(
                                'email' => $this->_default_model->data ()->email,
                                'hash' => $hash,
                                'stamp' => date('Y-m-d H:i:s')
                            ));
                            // Send the registration email

                        } catch(Exception $e) {
                            die();
                        }

                        // Send the email
                        SendMail::sendPasswordUpdateMail($this->_default_model->data ()->email, $hash);

                        $status = 'email_sent';

                    } else
                    {
                        // The user was not found so flash an alert stating this and show the form again
                        $status = 'no_user';
                    }
                }

            } else
            {
                // The form has not been posted so just show it!
                $status = 'initial';
            }
        }

        /**
         * Pass the data to the view
         *
         * We only send the page name and what type of display we need to show.
         *
         * Everything else is handled by the view and flash alerts.
         *
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'users/index',
            [
                'page_name' => 'Reset Password',
                'type' => 'reset_password',
                'class' => 'Users',
                'status' => $status,
                'errors' => $errors
            ]

        );
    } // resetpassword ()

	/**
	 * Verify a users account
	 *
	 * This is generally accessed via a url sent in the registration email.
	 *
	 * Both email and hash must exist in the url otherwise nothing
	 * will be processed.
	 * Also, if the email and hash do not match a row in the 'user_hash'
	 * table, nothing will be processed.
	 *
	 * If there is an email and hash in the url and they do match a
	 * row in the 'user_hash' table, the user is activated by setting
	 * their status to 1.
	 *
	 * Nothing is passed to the view other than the page name. everything
	 * else is handled with Session::flash messages.
	 *
	 * @param  	email 		$email 		Users Email address
	 * @param  	sha256 		$hash  		Stored hash
	 * @return 	view
	 * @link 	http://site.com/Members/Verify/{$email}/{$hash}
	 */
  	public function verify($email=null, $hash=null)
  	{
        $errors = null;

        $this->_default_model = $this->model('M_Users');

        if ($this->_default_model->isLoggedIn()) {
            Redirect::to('/');
        }

		// Check that the email and hash variables exist
		if(isset($email) && isset($hash))
		{
			// They both exist so continue with the verification attempt



			// Check the email and hash match a row. checkUserHash() returns true or false
		  	if ($this->_default_model->checkUserHash($email, $hash))
			{
				// checkUserHash() was succesful so activate the account
			  	$this->_default_model->quickUpdate($this->_default_model->getData($email)->id, array('status' => '1'));

                $hash_model = $this->model('Userhash_Model');
                $hash_model->delete($hash);

                $status = 'verified';

		 	} else
			{
                $status = 'no_record';
	  	    }
        }
        else
        {
            $status = 'incorrect_link';
	  	}

		/**
		 * Pass the data to the view
		 * we only need the page name as everything else is
		 * in a flashAlert()
		 *
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
		$this->view(
            'users/index',
			[
				'page_name' => 'Verify Account',
				'type' => 'verify',
                'class' => 'Users',
				'status' => $status,
				'errors' => $errors
			]
		);
  	} // verify ()

}









===============================================================================================================================================================








<?php

/**
 * Controller class
 *
 * Processes requests within a controller to open up any required Models
 * as well as passing the data to the view.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */
class Controller
{

	/**
	 * Construct the view
	 *
	 * Once multi-site is up and running, the argument will be a
	 * site reference passed in via new App($site_ref). This will
	 * then be appended to the path of the view.
	 *
	 * To use this, each site will require it's own directory in the
	 * views folder and each od its views within it.
	 *
	 * @param 	var  	$site Not used, ready for multi-site
	 */
	function __construct($site=null)
	{
		/*
			If the $site has been set, add it to $this->site_view,
		 	otherwise, leave it blank.
		 */
		if(isset($site))
		{
			$this->site_view = $site.'/';
		} else
		{
			$this->site_view = '';
		}

	} // __construct ()

	/**
	 * Open an instance of a Model class
	 *
	 * Opens a requested model class file from /app/models and
	 * returns a new instance of it.
	 *
	 * This instance can be re-used by assigning it to a variable
	 * such as $this->model = $this->model('M_Users')
	 *
	 * @param  string 	$model 	Model class name
	 * @return class        	Model
	 */
  	protected function model ($model)
  	{
		// Open the model class file
    	require_once 'app/models/' . $model . '.php';

		// Return a new instance of the model
    	return new $model ();

  	} // model ()


	/**
	 * Create the view
	 *
	 * The view is what the end user actually sees this function simply
	 * selects the correct view file and passes the data to it.
	 *
	 * The data is then manipulated and formatted to the final content that
	 * the user will see in the view file
	 *
	 * @param  string 	$view 	Path to the view from /app/views/
	 * @param  array  	$data 	All of the data to pass to the view.
	 * @return The entire HTML page
	 */
 	protected function view ($view, $data = [])
 	{

        if (!isset($this->site_view)) {
            $this->site_view = '';
        }

    	require_once 'app/views/' . $this->site_view .$view . '.php';
 	} // view ()

}











===============================================================================================================================================================








<?php

/**
 * Redirect class
 *
 * Class file to url redirects
 *
 * One simple function - to() - that creates a header redirect
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 * TODO: Sort out the 404 etc
 */

// Include the initiation file
require_once 'app/init.php';

class Redirect
{
	/**
	 * Create a header redirect
	 * @param  string $location The required url path
	 * @example Redirect::to('index.php')
	 */
    public static function to($location = '') {
		// We only do anything if $location is set so check that
        if ($location) {
			/*
				If $location is a numeric value, such as a 404, we need to
				redirect that to a specified page relating to that number,
				otherwise we just direct to $location.
			 */
            if (is_numeric($location)) {
                switch ($location) {
                    case 404:
                        header('HTTP/1.0 404 Not Found');
                        include '/app/views/errors/404.php';
                        exit();
                        break;

                }
            }
            header('Location: ' . $location);
            exit();
        }
    }
}











===============================================================================================================================================================







<?php

/**
 * Main Template Base
 *
 * This file contains the core structure and functions for building the main
 * template all bar the actual page content, which is called using new T_Main_Template
 * which extends this class.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */
class T_Admin {

    /**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$params        Additional parameters
	 */
    public function __construct($content, $params=array()) {

        /*
            Before we attempt to do anything, we need to ensure that the
            user logged in and authorised to view the admin area.

            If they are not logged in, the get directed to the admin login page
            otherwise they get sent to the unathorised page.
         */

        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            Redirect::to('/Admin/Login/');
        } else {
            if(!$user->hasPermission('admin')) {
                Redirect::to('/Admin/Unauthorised/');
            }
        }

		// Set the displayed content to $this->content
		$this->content = $content;

		/*
            If a 'page_title' has been passed set it to $this->page_title,
            otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle,
            if required .

            These variables get checked in the content() function and then
            added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT
            show, even if it has been set.
         */
		$this->page_title = (isset($params['page_title'])) ? $params['page_title'] : null;
        $this->page_subtitle = (isset($params['page_subtitle'])) ? $params['page_subtitle'] : null;

		/**
		 * Set the layout version
		 *
		 * If a layout has been passed from the view via $params['layout'] set $this->layout
		 * to it otherwise use 'default'.
		 *
		 * These variables get checked in the layout_switcher() function within this file
		 * and will return a layout based on that is set here.
		 *
		 * To see the demo layout versions and instructions on how to edit them or create a
		 *  new one, see layout_switcher() and its comments.
		 *
		 * @var string
		 */
        if(isset($params['layout'])) {
            $this->layout = $params['layout'];
        } else {
            $this->layout = 'default';
        }

        /**
         * Set any page specific meta tags. These will be set in the view as a
         * key/value pairing and will override the defaults set in
         * /app/core/Settings.php->meta_tags()
         * @var [type]
         */
        if(isset($params['meta'])) {$this->meta =$params['meta'];}

        /**
         * Set any page specific css. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['css'])) {$this->css =$params['css'];}

        /**
         * Set any page specific js. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['js'])) {$this->js =$params['js'];}

        if(isset($params['alert'])) {$this->content = $params['alert'].$this->content;}


        $this->menu_category = (isset($params['menu_category'])) ? $params['menu_category'] : null;
        $this->menu_item = (isset($params['menu_item'])) ? $params['menu_item'] : null;

		// Call the template function
        self::Template();

    } // __construct

    /**
     * Build the entire template
     *
     * We build this up gradually via functions contained eihter in this file or in
     * the Base_Template file it extends
     * @return 	HTML page
     */
    private function Template () {
        // Build the start of the page up to the opening body tag, including the <head>
        self::bodyStart ();

        // Build top navigation bar
        self::topNav ();

        self::dropMenus ();

        // Show the actual content for the page
        self::content ();

        self::footer ();

        // Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()





	/**
	 * Build the HTML down to the opening body tag and include extra css
	 *
	 * @return string 					Template to the opening <body> tag
	 */
    public function bodyStart ()
	{

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';


        /**
         * Include the <head> section
         *
         * If a page needs any extra css apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out .= self::head ();

        // Open the body tag
        $out .= '<body class="bdy">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

	/**
	 * Finish the HTML
	 *
	 * @return string 					Template for the end of the HTML
	 */
    public function bodyEnd ()
	{

		/**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

    private function content () {

        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $params['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $params['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title)
        {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);


        }



        /*
            Call the correct layout of the page

            The main content could be called into one of several different
            layouts. The reason for this is you may want a slightly
            different layout for certain content such as some pages having
            a content specific sidebar.

            This is fully controlled by the layout_switcher () function in
            this file (a separate function has been created as there is an
            infinite number of combinations that you can use) controls all of it so we simply add that to the $content variable.

            See the comments for that function for a list of available ones and how to create a new one.
         */
        $content .= Php2Bs::bs_row ([
            'content' => self::left_Column ()
                        .self::main_column_medium (),
            'class' => 'flex-xl-nowrap',
        ]);


        /*
            We now have the entire content of the page, in the required layout
            version, contained within $content.

            In this template, the entire content area is wrapped in the Bootstrap container within a Bootstrap fluid-container.

            Tp make this, we echo out a bs_container() function from the Php2Bs
            class, with 'container_type' set to fluid.

            Inside this, we set it's 'content' as another bs_container(), but this time without the 'fluid' request. It is in the 'content' for
            this that we actually pass the completed $content.
         */
        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => $content
        ]); // container-fluid

    } // content()

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {


        /*
            Now $title will contain everything required in the page_title
            div so we add it to $content using the div() function in the
            Php2Html class.
         */
        $title = Php2Html::h([
            'size' => '2',
            'class' => 'page_title',
            'content' => $this->page_title
        ]);

        /*
            If a subtitle has been set, add it to $title as a paragraph
            using the p() function in the Php2Html class with a class of 'lead-description'.
         */
        if($this->page_subtitle)
        {
            $title .=  Php2Html::p([
                'class' => 'lead description',
                'content' => $this->page_subtitle
            ]);
        }

        $this->content = $title.$this->content;

        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9 col-xl-10'
        ]);
    } // main_column_medium ()

    /*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        demo_user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
    private function left_Column () {

        $links = array (
            'Dashboard' => array (
                'type' => 'link',
                'href' => '/home',
            ),
            'Users' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Overview' => '/Users',
                    'List' => '/Users/Listing',
                    'Add' => '/Users/Add',
                    'Usergroups' => '/Usergroups',
                    'Activity Types' => '/ActivityType',
                )
            ),
            'Faults' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Overview' => '/Faults',
                    'List' => '/Faults/Listing',
                    'Add' => '/Faults/Add',
                    'Rag Status' => '/Faults/RagStatus',
                )
            ),
            'Systems' => array (
                'type' => 'link',
                'href' => '/Systems',
            ),
            'Categories' => array (
                'type' => 'link',
                'href' => '/Categories',
            ),
            'Utilities' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Blend' => 'Blend',
                    'Borders' => 'Borders',
                    'Colors' => 'Colors',
                    'Contrast' => 'Contrast',
                    'Complement' => 'Complement',
                    'Invert' => 'Invert',
                    'Sizing' => 'Sizing',
                )
            )

        );


        $content = '';

        foreach ($links as $key => $value) {

            $nav_button = '';
            $nav_content = '';


            $params = [
                'content' => $key,
                'class' => 'text-light border-bottom border-light',
            ];

            if($key == $this->menu_category) {
                $params['class'] = 'bg-dark ' . $params['class'];
            }
            if($value['type']=='link') {
                $params['href'] = '/Admin'.$value['href'];
                $content .= Php2Bs::bs_nav_item ([
                    'content' => Php2Bs::bs_nav_link (
                        $params
                    )
                ]);

            }

            if($value['type']=='menu') {
                $params['href'] = '#';
                $params['data_attr'] = [
                    'toggle' => 'collapse',
                    'target' => '#nav-'.$key
                ];
                $params['aria'] = [
                    'controls' => 'nav-'.$key,
                    'expanded' => 'false',
                    'label' => 'Toggle '.$key.' navigation'
                ];


                $children = '';
                foreach ($value['children'] as $menu => $link) {
                    // Remove Link from active
                    $menu_class = ($key == $this->menu_category && $menu == $this->menu_item) ? 'list-group-item-info' : 'list-group-item-action list-group-item-light';
                    $children .= Php2Bs::bs_nav_item ([
                        'content' => Php2Bs::bs_nav_link ([
                            'href' => '/Admin'.$link,
                            'content' => $menu,
                            'class' => $menu_class. ' border-bottom border-dark pl-4'

                        ])
                    ]);
                }

                $menu_class = ($key == $this->menu_category) ? 'show' : '';
                $nav_content .= Php2Html::div ([
                    'id' => 'nav-'.$key,
                    'content' => Php2Bs::bs_nav ([
                        'content' => $children,
                        'class' => 'flex-column'
                    ]),
                    'class' => 'collapse ' . $menu_class

                ]);

                $nav_button = Php2Bs::bs_nav_item ([
                    'content' => Php2Bs::bs_nav_link (
                        $params
                    ).$nav_content
                ]);
                $content .= $nav_button;
            }




        }




        return Php2Bs::bs_column ([
			'content' => Php2Html::div ([
                'id' => 'left-nav',
                'class' => 'collapse docs-menu',
                'content' => Php2Bs::bs_nav ([
                    'content' => $content,
                    'class' => 'flex-column',


                ]),
            ]),
			'id' => 'left',
            'class' => 'col-12 col-md-3 col-xl-2 left-menu bg-secondary',

        ]);
    } // left_Column ()

	/**
	 * Build the <head> section
	 *
	 * Builds the entire <head> tag and includes any global or
	 * page specific css and meta tags.
	 *
	 * @return     string      <head> section
	 */
    private function head ()
	{
		/*
            We build the contents of the <head> gradually so we create a $out
            variable containing the opening tag and concatenate to it as we go along.
         */
		$out = '<head>';

		/*
            Include the <meta> tags

            Each of the meta tags should initially be stored in the meta_tags()
            function in /app/core/Settings.php with a default content to be used
            if an alternative is not set.

            For page specific meta tags, set a key/pairing array in the view as
            $params['meta'] with the name and content of each once you want to
            overwrite.

            You can also set global meta tags manually and this is required for any
            that do not use a name and content combination.
         */
        $out .=  ' <meta charset="utf-8">';

        /*
            As there may be overrides for some of the meta tags set in the page/view, we initially store the default meta tags in a $tags variable so it can be easily manipulated.
         */
        $tags = Settings::meta_tags();

        /*
            If any page-specific meta tags have been passed in, they would have
            been set to $this->meta in the called template file (by default
            /app/core/Templates/Main.php).
            We loop though these and for each one, overwrite the matching tag
            name in $tags.
         */
        if(isset($this->meta))
        {
            foreach ($this->meta as $name => $content) {

                $tags[$name] = $content;
            }
        }

        /*
            Finally, we loop through the tags array and create a meta tag for each one, adding it to the $out variable.
         */
        foreach ($tags as $name => $content) {
            $out .= Php2Html::meta([
                    'name' => $name,
                    'content' => $content
            ])."\n";
        }

		/*
            Set the Page Title

            If the page title has been passed in from the view, show the site name as set in Settings.php followed by a colon and then the page title.
            Otherwise, it just shows the site name.

            You can change this to suit your needs.
         */
		$title = isset($this->page_title) ? Settings::site_details('site_name') .': '.$this->page_title: Settings::site_details('site_name');
		$out .=  '<title>' . $title. '</title>';

		// Link the Favicon
		$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

		/*
            Call in the stylesheets

            Again, you can have global style sheets as well as page, specific ones. Wherever they are set, they are called from the css() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full stylesheet link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['css'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/site' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
		$out .= Settings::css('remote/bootstrap/v4');


        // Loop through the page specific styles
        if(isset($this->css))
        {
            foreach ($this->css as $stylesheet) {
                $out .= Settings::css($stylesheet);
            }
        }


        $out .= Settings::css('local/admin');

        // Close the head tag
        $out .=  '</head>';

        // Echo the $out variable
		echo $out;

    } // head()

	/**
	 * Build the required scripts
	 *
	 * Builds the js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts ()
	{
        $out = '';

        /*
            Call in the any scripts

            Again, you can have global scripts as well as page, specific ones. Wherever they are set, they are called from the js() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full script link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['js'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/default' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
         $out .= Settings::js('remote/jquery');
         $out .= Settings::js('remote/popper');
         $out .= Settings::js('remote/bootstrap/v4');
         $out .= Settings::js('remote/font-awesome-5');

        // Loop through the page specific styles
        if(isset($this->js))
        {
            foreach ($this->js as $script) {
                $out .= Settings::js($script);
            }
        }

        $out .= Settings::js('local/default');

        // Echo the $out variable
        echo $out;

    } // scripts()


    public function dropMenus()
 	{
        $out = '';

        $out .= Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => 'Search',
            'class' => 'collapse py-2 bg-secondary text-light border-bottom border-dark',
            'id' => 'nav-search'
       ]);

       $out .= Php2Bs::bs_container ([
           'container_type' => 'fluid',
           'content' => 'User',
           'class' => 'collapse py-2 bg-secondary text-light border-bottom border-dark',
           'id' => 'nav-user'
      ]);

       echo $out;
    }

	/**
	 * Build the top navigation menu
	 *
	 * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
	 * in the required links and dropdowns
	 *
	 * @return string 	nav
	 */
    public function topNav ()
 	{

        $brand = Php2Html::a ([
            'class' => 'navbar-brand',
            'href' => '#',
            'content' => 'BSADMIN'
        ]);

        $home_button = Php2Html::a ([
            'content' => '<i class="fas fa-home"></i>',
            'id' => 'left',
            'href' => '/home',
            'class' => 'text-light p-0 pr-2',
        ]);

        $toggle_button = Php2Html::a ([
            'content' => '<i class="fas fa-search mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#nav-search'
            ],
            'aria' => [
                'controls' => 'nav-search',
                'expanded' => 'false',
                'label' => 'Toggle search navigation'
            ]
        ]);


        $search_button = Php2Html::a ([
            'content' => '<i class="fas fa-bars mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  d-md-none p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#left-nav'
            ],
            'aria' => [
                 'controls' => 'left-nav',
                 'expanded' => 'false',
                 'label' => 'Toggle left navigation'
            ]
        ]);

        $user_button = Php2Html::a ([
            'content' => '<i class="fas fa-user mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#nav-user'
            ],
            'aria' => [
                 'controls' => 'nav-user',
                 'expanded' => 'false',
                 'label' => 'Toggle user navigation'
            ]
        ]);


        $left_buttons = Php2Html::span([
            'content' => $home_button.$search_button.$toggle_button,
            'class' => 'fa-lg mr-auto',
        ]);

        $right_buttons = Php2Html::span([
            'content' => $user_button,
            'class' => 'fa-lg',
        ]);




         $out = Php2Bs::bs_navbar ([
             // Navbar content
                'content' => $brand . $left_buttons . $right_buttons,
                'class' => 'navbar-expand-lg navbar-dark bg-dark text-light invert sticky-top justify-content-start'


         ]);



 		echo $out;
     } // topNav()

	/**
	 * Build footer
	 *
	 * Sets the page footer
	 *
	 * @return string 	footer
	 */
    public function footer ()
	{
        echo Php2Bs::bs_footer ([
            'content' => Php2Bs::bs_container ([
                'container_type' => 'fluid',
                'content' =>  'Place sticky footer content here.',
                'class' => 'text-white',
            ]),
            'class' => 'bg-dark',
        ]);

    } // footer()


}












===============================================================================================================================================================








<?php

/**
 * Global functions
 *
 * Functions that can be used anywhere within the site, both front end and backend
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */


//  Call in the seperate autoload class
include_once 'autoload_class.php';

/**
 * Sanitise html string
 *
 * Sanitizes html before passing to the browser or inserting into a database
 * @param  string $string The string to sanitise
 * @return string         Sanitised string
 */
function escape($string) {

    return htmlentities($string, ENT_QUOTES, 'ISO-8859-15');
} // escape

/**
 * Prettify an array
 *
 * Shows and array in a more easy-to-read format.
 *
 * @param  array        $array  The array to prettify
 * @param  string/null  $title  Optional title to show (useful when used multiple times)
 * @return string        Formatted array
 */
function nicePrint_r ($array, $title = null) {
    echo '<pre>';
    echo (isset($title)) ? '<h1>'.$title.'</h1>': '';
    print_r($array);
    echo '</pre>';

} // nicePrint_r ()

/**
 * Include files into the template
 *
 * Reads the extra required css/js files called from a view when calling the
 * templates and returns them based on the reference in config_files/css.php or
 * config_files/js.php.
 *
 * These are only called in the template files and will be used when a view requires
 * a one-off include of a css or js file - forexample a datepicker or WYSIWIG.
 *
 * @param  string   $include    Path to the and value in the config file
 * @param  string   $type       Type of request (css/js)
 * @return string         File includes
 */
function getIncludeFiles ($include, $type) {
    if(isset($include[$type])) {
        foreach ($include[$type] as $value) {
            echo Globals::get($value);
        }
    }
} // getIncludeFiles ()

/**
 * Slug or deslug a string
 *
 * Replaces all spaces in a string with underscores in forward mode and replaces
 * all underscores with spaces in reverse mode.
 *
 * Example
 *
 * $string = 'This is a string';
 * $newstring = slugify ($string)
 *
 * $newstring now equals 'This_is_a_string'
 *
 * $reversestring = slugify ($string, $direction = 'reverse')
 *
 * $reversestring now equals 'This is a string'
 *
 * @param  string   $string    The string to slug/deslug
 * @param  string   $direction Optional direction
 * @return string         Slugged/deslugged string
 */
function slugify ($string, $direction = 'forward') {
	if ($direction == 'forward')
	{
		return str_replace(" ", "_", $string);
	} else {
		return str_replace("_", " ", $string);
	}
} // slugify ()

/**
 * Change an object to an array
 *
 * Takes an object and returns it as an array with exactly the same structure.
 * @param  object    $obj    A php data object
 * @return array             The original object as an array
 */
function objectToArray($obj) {
    /*
        We first have to check if it is actually an object that has been passed in. If it is, we then get tghe properties so we can later tell what type of object it is.
    */
    if (is_object($obj)) {
        $obj = get_object_vars($obj);
    }

    /*
        Now that we have the object properties, we need to see if it is an array.

        If it is, we return it, converted to an array, using php's __FUNCTION__ magic constant.

        If it is not an array, we simply return the object as it is.
    */
    if (is_array($obj)) {
        return array_map(__FUNCTION__, $obj);
    } else {
        return $obj;
    }
} // objectToArray()

function listErrors ($errors) {

    $output = '';

    foreach ($errors as $key => $value) {
        $output .= Php2Html::li(['content' => $value]);
    }

    return Php2Html::ul(['content' => $output]);
}

/**
 * Unset posted data that matches the existing database data
 *
 * After a form is posted, we only want to attempt to validate
 * and update any fields that have changed.
 *
 * This function takes a set of $_POST data and matches it
 * against the table record being updated. It unsets any fields
 * that are not different from the existing data.
 *
 * @param  array    $post    Form $_POST data
 * @param  array    $records Existing database record data
 * @return array             $_POST data that is different from existing
 */
function stripPostData ($post, $records) {
    /*
        Set an array of field names that you do not want checked. These
        will generally be fields that do not actually have a corresponding
        database column.
     */
    $ignore = [
        'confirm_password', 'terms'
    ];

    // Loop through the posted data
    foreach($post as $key => $value) {

        /*
            If the field is not in the $ignore list, check it against
            the corresponding database column record. If they match,
            unset it.
         */
        if(!in_array($key, $ignore)) {
            if($post[$key] === $records->$key) {
                unset($post[$key]);
            }
        }

    } // foreach

    // Return the remaining post data
    return $post;
} // stripPostData ()

/**
 * Unset unrequired rules
 *
 * After a form is posted, we only want to attempt to validate
 * and update any fields that have changed.
 *
 * This function takes a set of $_POST data and matches it
 * against the validation rules for the table being updated. It
 * unsets any rules that are not required due to unchanged form
 * field data.
 *
 * @param  array    $post    Form $_POST data
 * @param  array    $_rules  Table validation rules
 * @return array             Rules that are still required
 */
function stripValidateRules ($_postdata, $_rules) {

    // Loop through the posted data
    foreach($_postdata as $key => $value) {
        // Loop through the rules
        foreach ($_rules as $key => $value) {
            /*
                If the field does not exist unset the matching rule.
             */
            if(!isset($_postdata[$key])) {
                unset($_rules[$key]);
            }
        }
    } // foreach

    return $_rules;
} // stripValidateRules

function showPageAlerts ($data, $model) {
	if(isset($data->errors) && $data->errors) {
	    $list_errors = (is_array($data->errors)) ? listErrors ($data->errors) : '';
	}

	if(Session::exists('status')) {
		$data->status = Session::get('status');
		Session::delete('status');
	}

	if(isset($data->status)) {
	    $list_errors = (isset($data->errors) && is_array($data->errors)) ? listErrors($data->errors) : '';

        $insert_id = (isset($data->insert_id)) ? $data->insert_id : '';

	    return Messages::alert ([
	        'model' => $model,
	        'name' => $data->status,
	        'errors' => $list_errors,
	        'insert_id' => $insert_id
	    ]);
	}
}

function breadcrumbs($sep = '', $home = 'Home') {
    $bc      = '<nav aria-label="breadcrumb" class="mb-1 " role="navigation">';
    $bc     .=   '<ol class="breadcrumb  py-0 px-2 mb-2">';
    //Get the server http address
    $site   =   'http://'.$_SERVER['HTTP_HOST'];
    //Get all vars en skip the empty ones
    $crumbs =   array_filter( explode("/",$_SERVER["REQUEST_URI"]) );
    if(count($crumbs)){
        //Create the homepage breadcrumb
        $bc    .=   '<li class="breadcrumb-item"><a href="'.$site.'">'.$home.'</a>'.$sep.'</li>';
        //Count all not empty breadcrumbs
        $nm     =   count($crumbs);
        $i      =   1;
        //Loop through the crumbs
        foreach($crumbs as $crumb){
            //grab the last crumb
            $last_piece = end($crumbs);
            //Make the link look nice
            $link    =  ucfirst( str_replace( array(".php","-","_"), array(""," "," ") ,$crumb) );
            //Loose the last seperator
            $sep     =  $i==$nm?'':$sep;
            //Add crumbs to the root
            $site   .=  '/'.$crumb;
            //Check if last crumb
            if ($last_piece!==$crumb){
            //Make the next crumb
            $bc     .= '<li class="breadcrumb-item"><a href="'.$site.'">'.$link.'</a>'.$sep.'</li>';
            } else {
            //Last crumb, do not make it a link
            $bc     .= '<li class="breadcrumb-item active">'.ucfirst( str_replace( array(".php","-","_"), array(""," "," ") ,$last_piece)).'</li>';
            }
            $i++;
        }
        $bc .=  '</ol>';
        $bc .= '</nav>';
        //Return the result
        return $bc;
    }
}


/*
public static function breadcrumb ($array)
{

    $home = (isset($array['site'])) ? '/' . $array['site'] : '/';
    $output = '<nav aria-label="breadcrumb" class="mb-1 " role="navigation">';
    $output .= '<ol class="breadcrumb m-0 p-1">';

    $output .= '<li class="breadcrumb-item"><a href="'.$home.'">Home</a></li>';

    if(isset($array['path']))
    {
        foreach ($array['path'] as $key => $value) {
            $output .= '<li class="breadcrumb-item"><a href="'.$home.$key.'">'.$value.'</a></li>';
        }
    }

    $output .= '<li class="breadcrumb-item active" aria-current="page">'.$array['current'].'</li>';

    $output .= '</ol>';
    $output .= '</nav>';

    return $output . self::htmlComment('breadcrumb');
}
*/











===============================================================================================================================================================








<?php

/**
 * Admin Users View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/admin/index.php.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Users
 * @example 	http://yoursite/Admin/Listing
 * @example 	http://yoursite/Admin/Users/{Username}
 * @example 	http://yoursite/Admin/Users/Edit/{Username}
 * @example 	http://yoursite/Admin/Users/Delete/{Username}
 *
 */

//$data = (object)$data;
$model = new M_Users();

//Set the parameters for the page
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;
$params['menu_category'] = 'Users';

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

// If the user is banned or unverified, show an alert
if(isset($data->user_status) && $data->user_status !== '1') {
    switch ($data->user_status) {
        case '-1':
            $params['user_status'] = 'admin_user_banned';
            break;

        case '0':
            $params['user_status'] = 'admin_user_unverified';
            break;
    }
    $content .= Messages::alert ([
        'model' => 'M_Users',
        'name' => $params['user_status']
    ]);
} // user status alert

# Show the required data based on passed in page type
if($data['page_type'] == 'delete') {
    $params['menu_item'] = 'Delete';
    /*
        We only need the forms if the user is found  and we do not
        already have a delete request so, in the controller, we only
        pass the 'delete_form' parameter with the form this criteria
        is met, otherwise it is null.

        We only need to add to the content if $data->delete_form contains
        anything. If no user was found or the delete had already been
        processed, any page content is handled by the showPageAlerts()
        function above.
     */
    if(isset($data->delete_form)) {
        // Show the delete form
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Delete account'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => Php2Html::p(['content'=>'This will delete the account and cannot be undone.']).$data->delete_form,
                'class' => '',
            ],
        ]);// bs_card delete form
    } // if $data->delete_form
} // $data['page_type'] == 'delete'

if($data['page_type'] == 'register') {
    $params['menu_item'] = 'Add';
    /*
        As we want the form to show again, even after we succesfully
        create a new account, we simply add that to the content.

        Any other messages following an attempte create is handled by
        the showPageAlerts()  function above.
     */
    $content .= Php2Bs::bs_card ([
        'class' => 'border-dark bg-light mb-1',
        'body' => [
            'content' => $data->form,
            'class' => '',
        ],
    ]);// bs_card register
} // $data['page_type'] == 'register'

if($data['page_type'] == 'profile') {
    /*
        We only show the profile if the user was found in the controller
        function so we only add to the content if the status is not
        'admin_not_found'
     */
    if(!isset($data->status) || $data->status !== 'admin_not_found') {

        // The user was found so start building the output as a variable
        $profile = 'Full Name : ' . $data->user->firstname.' '.$data->user->lastname;
        $profile .= '<hr>';

        $join_date = new DateTime($data->user->joined);
        $profile .= 'Joined : ' . $join_date->format('l, jS F, Y \a\t g:ia');

        $profile .= '<hr>';
        $profile .= 'User Group : ' . $data->user->group;

        // Add to the content by passing $profile into a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-secondary bg-light mb-1',
            'body' => [
                'content' => $profile,
            ],
        ]);// bs_card profile
    } // $data->status not 'admin_not_found'
} // $data['page_type'] == 'profile'

if($data['page_type'] == 'overview') {
    $params['menu_item'] = 'Overview';
    ###################
    # Temporary content
    ###################
    $content .= Php2Html::a (
        array(
            'content' => 'Listing',
            'href' => '/Members/Listing',
        )
    );

    $latest_user_date = new DateTime($data->latestuser->joined);

    $content .= Php2Bs::bs_card (
        array(
            'class' => 'border-secondary bg-light mb-1',
            'header' => array (
                'content' => 'User Details'
            ),
            'body' => array (
                'content' => Php2Html::li (
                    array(
                        'content' => 'Total Users : ' . $data->usercount,
                        'class' => 'list-group-item border-warning'

                    )
                ).Php2Html::li (
                    array(
                        'content' => 'Latest User : ' . $data->latestuser->username . ' (' . $latest_user_date->format('d/m/Y g:ia') . ')',
                        'class' => 'list-group-item border-info'

                    )
                ),
            ),
        )
    );// bs_card
} // $data['page_type'] == 'overview'

/**
 * Edit a user
 *
 * Shows separate edit and change password forms for the specified
 * in a Bootstrap card.
 *
 * @example 	http://yoursite/Admin/Users/Edit/{Username}
 **/
if($data['page_type'] == 'edit') {

    /*
        We only need the forms if the user is found so, in the
        controller, we only pass the 'edit_form' parameter with the form
        attached if the user was found, otherwise it is null.

        We only need to add to the content if $data->edit_form contains
        anything. If no user was found, any page content is handled
        by the showPageAlerts() function above.
     */
	if(isset($data->edit_form)) {

        /*
            If the user is banned or unverified, show an give the card
            header a suitable background colour, otherwise just let it
            be default.
         */
        switch ($data->user_status) {
            case '-1':
                $header_style = 'bg-danger text-light';
                break;
            case '0':
                $header_style = 'bg-warning text-dark';
                break;
            default:
                $header_style = 'bg-light';
                break;
        } // card header style

        // Add the form to the content in a card
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update Profile',
                'class' => $header_style,
            ],
            'class' => 'border-dark mb-1 ',
            'body' => [
                'content' => $data->edit_form,
                'class' => '',
            ],
        ]);// bs_card edit form
    } // if $data->edit_form

    // If the password update form has been sent, add that to the content
    if(isset($data->password_form)) {
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Change Password'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data->password_form,
                'class' => '',
            ],
        ]);// bs_card passwordform
    } // if $data->password_form
} // $data['page_type'] == 'edit'


/**
 * Show a list of users
 *
 * Takes a passed-in array of users, ameneds some of the data to make it more
 * readable or add functionality before displaying it as a table.
 * The table is created using the make_table() function in /app/core/Php2Html.php and
 * and the amendment to the username column as well as adding the edit row also use
 * functions from that file and it is fully commented so look through that file to
 * understand how these work.
 *
 * @example 	http://yoursite/Admin/Listing
 **/
if($data['page_type'] == 'listing') {

    $params['menu_item'] = 'List';

    /*
        Loop through the list passed to the view and for each one,
        making any amendments required before passing it to the table.
     */
    foreach ($data['list'] as $key => $value) {

        /*
            Takes the username of the current record and overwrites itself
            in the list as a link to that users profile.

            $data['list'][$key]->username = SteveB
            becomes
            $data['list'][$key]->username = <a href="/Admin/Users/SteveB">SteveB</a>
        */
        $username = $value->username;
        $data['list'][$key]->username = Php2Html::a ([
            'content' => $username,
            'href' => '/Admin/Users/'.$username
        ]);

        /*
            Creates a new key in the list called 'full_name' and sets the
            users firstname and lastname to it.

            This would create
            $data['list'][$key]->full_name = Steve Ball
        */
        $data['list'][$key]->full_name = $value->firstname.' '.$value->lastname;

        /*
            Create a new DateTime object from the 'joined' value and then
            overwrite it with a formatted version.

            $data['list'][$key]->joined = 2017-05-11 14:58:00
            becomes
            $data['list'][$key]->joined = 22/05/2017 2:58pm
        */
        $join_date = new DateTime($value->joined);
        $data['list'][$key]->joined = $join_date->format('d/m/Y g:ia');

        /*
            Create a new key in the list called 'edit' and assigned it three buttons - view, edit and delete.
            The buttons are created using the a() and i() Php2Html. The i() 'class' has Bootstrap text color and margin styles, plus the name of the FontAwesome icon it uses.
        */
        $data['list'][$key]->edit = Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-search text-info mr-2'
            ]),
            'href' => '/Admin/Users/'.$username

        ])
        .Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-edit text-success mr-2'
            ]),
            'href' => '/Admin/Users/Edit/'.$username

        ])
        .Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-times-circle text-danger mr-2'
            ]),
            'href' => '/Admin/Users/Delete/'.$username

        ]);

        /*
            If the user status is '-1' (banned) or '0' unverified we
            add a background colour to the table row
         */
		switch ($value->status) {
			case -1:
				$data['list'][$key]->tr_class = 'table-danger';
				break;

			case 0:
				$data['list'][$key]->tr_class = 'table-warning';
				break;
		} // switch status

    } // foreach $data['list']

    // Build the table
    /*
        Now that $data['list'] has been modified to how we need it, we need to pass it into the table via make_table(). We will explain what is being used here but there is far more commenting against that function in /app/core/Php2Html.php.

        When calling make_table() we pass in an array that has three keys

            'columns' - sets the name of the columns, an alias to show in the header and any classes either for the <th>, the <td> or both. Each of the keys must exist in each record of $data['list']

            'data' - the records to show so in this case $data['list'], but tweaked

            'settings' - anything specific to the table itself but not data related such as an overall table class

        You can see that we are specifying to show 4 columns 'username', 'full_name', 'joined' and 'edit'.

        For 'username' and 'joined' we simply set the header to show a capitilised version of the column name and set it to have light text on a dark background.

        For 'edit', we choose to have an empty header so there is no need to add a class and we just set 'alias' as empty.

        We do a lot more in 'full_name'. Firstly we set the header to show as 'Full Name'. Next we set the <th> to have light text and a dark background as we did with 'username' and 'joined'. This time though we also set a 'td_class' which means that the full_names will have a different colour to the rest. Finally, we set a 'global_class' which applies to both the <th> and <td>. We are using a Bootstrap class that simply hides the column on small screens and shows it on larger ones.

        The second key is 'data' and that is simply our amended $data['list']. However, the way that our database functions work, this list is currently an object not an array but the function requires an array. We have built a function in /app/functions/global.php called  objectToArray() that we used to turn it into the array we require.

        Finally we have the 'settings' key. We have two parameters here - 'show_header' is set to true to denote that we want the table header to show and 'class' has a couple of Bootstrap classes.

        TODO:: Create a make_bs_table in Php2Bs
    */
    $table = Php2Html::make_table ([
        'columns' => [
            'username' => [
                'alias' => 'Username',
                'th_class' => 'bg-dark text-light'
            ],
            'full_name' => [
                'alias' => 'Full Name',
                'th_class' => 'bg-dark text-light ',
                'td_class' => 'text-info',
                'global_class' => 'd-none d-md-table-cell'
            ],
            'joined' => [
                'alias' => 'Joined',
                'th_class' => 'bg-dark text-light',
            ],
            'edit' => [
                'alias' => '',
            ],
        ],
        // The listing is an object so convert it to an array
		'data' => objectToArray($data['list']),
        'settings' => [
            'show_header' => true,
            'class' =>'table mb-0'
        ]
	]); // make table()

    /*
        Finally, now that we have a fully fledged html table set to $table,
        We wrap it in a Boostraps card and add it to $content.
    */
    $content .= Php2Bs::bs_card ([
        'class' => 'border-secondary bg-light mb-1',
        'body' => [
            'content' => $table,
            'class' => 'p-0',
        ],
    ]);// bs_card
} // $data['page_type'] == 'listing'


// Pass the details to the template
new T_Admin ($content,$params);











===============================================================================================================================================================









MVC design patterns are currently the best ‘write less do more’ methodology without using any third party frameworks. They simply break down everything into manageable and grouped chunks. MVC stands for Model, View, Controller and each of these has their own purpose in the process. 
Model collects  the required  raw data, including any database functions such as getting, inserting or editing data.
View shows the raw data collected by the model and adds any required formatting such as putting it into a table or styling. 
Controller looks at the url and based on that, collects the raw data from the correct Model and passes it to the correct View.

The Controller does all the leg work and everything it does is powered by the url entered so we will start off by looking at that.
The URL will match something in the app/controllers folder. It gets broken down and for each bit looks for a match, firstly as a folder, then a file, then a method in a file. A method is actually a function but called a method when used in a controller. If it gets to the point where it cannot find a match in the current folder, it reverts to the home.php file in that folder. If it has got to a point where it has found the folder/file/function, anything left in the url will be used as arguments in the function.
The way we do this is by exploding the url and then checking each part. So, if the url was http://uathub/ part1/ part2/ part3/ part4, would end up with…
	Array (
		 [0] => part1
		 [1] => part2
		 [2] => part3
		 [3] => part4
	) 
We would then go through them checking what exists.
If part 1 is not a folder and not a file in the root of /app/controllers/, it will look for it as a method in of /app/controllers/home.php. If the method exists, it will use that and the remaining parts would be the argument
 /app/controllers/home.php->part1(part2, part3, part4).
If the method does not exist it would default to index() and that is set up to throw a 404 error if it receives any arguments.
If part 1 is not a folder but is a file in the root of /app/controllers/, it would use that so we would be looking in /app/controllers/ part1.php for the method. At this point we follow the same process as above so if  the method exists, we would be using  
/app/controllers/ part1.php-> part2 (part3, part4)
Again, if the method does not exist it would default to index() but as we are not on the root home.php controller, this can sometimes accept arguments, which I explain in a full example below.
If part 1 is a folder, we move the search into that and look in there to see if a file matches part2. If it doesn’t, we use that folders home.php /app/controllers/ part1/home.php and look in there for a part2()method
/app/controllers/ part1/home.php-> part2 (part3, part4)
If there is a file that matches, again we use that and look for a part3()method
/app/controllers/ part1/ part2.php-> part3 (part4)
Simply put, we literally go through the url a bit at a time and as soon as anything matches a folder/file/ method combination, it uses that. If it is in a folder but has no matching file, it uses home.php in that folder. If it is in a file but has no matching function, it will use the index()method in that file. As soon as it has reached the method stage, anything left in the url will be arguments.
There are some case sensitive rules with the urls and the folders/files/functions. A folder part and file part must be exactly match the case while the method can be case insensitive. Using our /app/controllers folder…
http://uathub/Users will go to /app/controllers/Users.php as the case of ‘Users’ matches that file. No other arguments means it will use index() in that file.
http://uathub/users will go to /app/controllers/home.php as the case of ‘users’ does not match.
http://uathub/Adminwill go to /app/controllers/Admin/home.php as the case of ‘Admin ‘ matches that folder and no other arguments means it defaults to home. No other arguments means it will use index() in that file.
http://uathub/admin will go to /app/controllers/home.php as the case of ‘admin ‘does not match any folders or any files.
http://uathub/Admin/Userswill go to /app/controllers/Admin/Users.php as the case of ‘Admin ‘ matches that folder and ‘Users’ matches that file. No other arguments means it will use index() in that file.
http://uathub/Admin/Users/Add will go to /app/controllers/Admin/Users.php->add()  as the case of ‘Admin ‘ matches that folder and ‘Users’ matches that file. The fact that ’Add’ will match add() as the method call is case insensitive, we use that method.
http://uathub/Admin/Users/Edit/SteveB will go to /app/controllers/Admin/Users.php->edit(SteveB)  as the case of ‘Admin ‘ matches that folder and ‘Users’ matches that file. The fact that Edit will match edit () as the method call is case insensitive, we use that method. This leaves us with one more url part so we pass that as an argument into the method edit (SteveB).

As mentioned, we will always use any of the url parameters that can be found, but only in the order they are entered. So if the first part is wrong we would end up in the root of controllers, which can cause issues depending on  file names there.
With  http://uathub/admin/Users/Edit/SteveB, ‘admin’ does not match the case of the ‘Admin’ folder so we remain in the root of /app/controllers. There is a file in there that matches the next part ‘Users’ so we go into that file. In there, there is a method called edit() so we use that. So, instead of being on the page to edit a specified user, we are on the front end page where a user can edit their own details. However, on the front end edit page, the user form shown is for the user who is currently logged in and viewing the page so we do not need to pass in the username as an argument. The front end method has one default argument set to null, called $_user. With our url we are calling  /app/controllers/Users.php->edit(SteveB)  and as the ‘SteveB’ overwrites the null of $_user, we redirect to the 404 page. This prevents the wrong page actually showing. 
public function edit($_user=null) {
if($_user){Redirect::to('404');} 
}
Remember at this point, even though they are referred to as methods in controllers, they are actually referring to functions.
If nothing at all matches, no matter how many a parts there are to the url, it will always, at worst,  find it’s way back to /app/controllers/home.php as it is the root controller  file. If it then cannot find a method within that file, it defaults to  it is set up to create a 404 error. 

Once we have got to the file and method we require, we then start to collect the data we need to pass to the view. The controller, although it is the key to everything, it should do as little work as possible. It should collect the raw data, generally be via a call to functions in a model, manipulate it where necessary and pass it to the View along with any thing else required. There should be no formatting or styling at this stage. Some of the controllers have multiple functions that relate to the url, but some only have one and the parts of the url become the argument for the index()method in that controller. 

Starting off with simple one, using http://uathub/Admin/Users/Listing as the example, we will go through everything step by step from getting the url right through to the final output on the screen. It will be explained as it happens so there might be going in and out of files, but that is the best way to understand how it works. 
The Admin folder and Users.php exist so we know we are in /app/controllers/Admin/Users.php. If you look at that file, you will see in the comments at the top a list of all the urls this controller uses set as @example.
You will see the start of the class just below the comments with class Users extends Controller.  The class name must always match the file name of the controller exactly so we could not have ‘users’, as the class name as it does not match the case.
You will see that it extends ‘Controller’ and this simply means it can access all of the functions within /app/core/Controller.php. The functions in here are model() which opens the specified model and view() which controls passing the data to the correct view.  
Both of these functions are protected. This means that they can only be accessed via Controller.php itself or any file that extends it, which /app/controllers/Admin/Users.php does. In classes, most variables and functions have access rights and the ones we use are 
private – can only be accessed from within the file that they are set
protected – can be accessed from within the class that they are set and any classes that extend it
public – can be accessed from anywhere (as long as the class file is included)

The first thing you will see inside the class is a set of variables set as private. These are the variables used within the file and are set here simply as best practice to stop any potential undefined errors. These are set as private so they can only be accessed from within this file. We have taken a naming convention of variables in controllers to always start with an underscore just for uniformity. When the variable is actually set or used later in the file, we use a slightly different format. In classes, we use $this-> to show that we are calling something from within the same file (or from a file it extends) so although we set $_user at the start, when we call it, we drop the $ and put $this-> in front giving us $this->_user. 
Next is public function __construct (). This is called as soon as a class is called and can either be used to set some variables, open some other classes or even run the script. The construct can be used for many and can also doing everything in one go (our template files gather the information and display in as soon as it is called as the __construct() controls everything).
All we do in this file is to set a default model to use. As this class is solely for user based pages, we know that we will most likely need to use the users model (app/models/M_Users.php) to collect the raw data, so we set that to a variable that can be used anywhere. 
$this->_default_model = $this->model('M_Users');
$this->_default_model is simply the variable that can now be used to call the model from anywhere within the controller.
$this->model() accesses the model() function in /app/core/Controller.php. As /app/controllers/Admin/Users.php extends /app/core/Controller.php, it can access any of it’s functions and variables via $this-> as long as they are protected or public. 
'M_Users' is the name of the model file we want so will open app/models/M_Users.php

So now, we are in the correct function, inside the correct controller and we have access to the main model that we are going to need so it is time to get the data and pass it to the view.
Be aware, we are entering barely or badly commented areas here and although I am going to attempt to tidy these as I go, some might not get done and if you look outside of the functions we are talking about, you might find no or completely wrong comments.
If you go down to the listing()method you will see that it has a default argument set to null - public function listing($_args=null). This is common throughout the controllers as we do not want any incorrect urls to accidently match a page. If this is the case, we set that default and if it exists, redirect to the 404 page. 
To check this we use if($_args). Using an if statement in this way simply checks to see if the argument contains anything and will only work if the argument exists, which is why we set $_args=null as a default. Remembering that the argument will be the next unused part of the url so if we were at http://uathub/Admin/Users/Listing, we would still have $_args=null, but if we were are http://uathub/Admin/Users/Listing/Admins, we would now have $_args=Admins. As $_args will no longer be empty the if statement will fail and we would be redirected.
if($_args) {Redirect::to('404');}
The redirect is controlled by the class at /app/core/Redirect.php and as soon as it is called, nothing else in the script will run. This class only contains one function, to(), and it is set as public static. The public part means it can be called from anywhere and the static means that we can use it directly without opening the class first. 
If it was not static we would first open the class and set it to a variable, and then call the function from that variable. 
$redirect =  new Redirect ();
$redirect -> to('404');
Although static functions are nice to call, they are not as flexible as non-static ones so should only be used when you only need one specific function at a time. If you are potentially going to access several functions from the same class, then they should be no-static.
Reditect::to() works on a very simple basis and there are two types of argument. You can redirect to a specific url  and we do this in we do this in /app/controllers/Admin/Users.php->edit(). The user edit page relies on the username in the url to show the form for the correct user - http://uathub/Admin/Users/Edit/SteveB – so if the form is posted and the username has been changed to ‘Steve_B’, we  will get an error as the url is still looking for ‘SteveB’. To prevent this, after the table is updated, we check to see if the username has been changed and if so, we physically redirect to the edit page for the new name so the url will be correct. 
Redirect::to('/Admin/Users/Edit/'.$_postdata['username']);
Which would translate to 
Redirect::to('/Admin/Users/Edit/Steve_B’);  

The other type of argument, and the one we use here, is a numeric value. If the to() function recognises the argument as being numeric, it runs a switch statement. This results in the correct http header() and includes the specified view. Views for these errors will be kept in the /app/views/errors folder and eventually there will be one for all types of server error. Unlike the path example, this does nothing to the url so it will still have the original one that cased the 404. This will let us, at a later date, to put some sort of logging into the 404 view.
So, assuming we have not been redirected, we now need to get the data and send it to the view. On this occasion there is very little to do so we simply call the view() function from the extended /app/core/Controller.php and pass the information straight into it. The next example is far more complex so that will be done in a completely different way. 
When we call view() it must always have two arguments. The first is the path through to the correct view so 'admin/users' will open the ‘/app/views/admin/users.php’ view. 
The second is an array of everything that you need to pass to the view. Depending on how many different pages you are passing to the same view, you might only need to send the actual data (and sometimes nothing) there as the view has a simple use. In this case, though, ‘/app/views/admin/users.php’ controls the view for multiple pages so we have to provide a lot of information from the controller. 
In this example, we have three keys in the array so for each of these will be go through what they do in the view one by one, but first will explain the process. In ‘/app/views/admin/users.php’ you will see in the comments at the top that it mentions that thie file only keeps commenting to a necessary minimum and full commenting can be found in app/views/admin/index.php. This is another common thing where things are only explained in full once, in the first and most common file of it’s type, to keep other pages tidy. There is again also a list of the urls that the view uses.
The second part of the $this->view() call will be available as an array called data, so given that we passed in 
'page_name' => 'Users List',
'page_type' => 'listing',
'list' => $user->listing()
We now have those values stored as 
$data[‘page_name’] = 'Users List’
$data['page_type'] = 'listing'
$data[‘list’] = The array of users created by $user->listing()
The first thing we need to look at is under the comment //Set the parameters for the page. At the end of the view, once we have created the output as we want it to be seen, we pass it straight into the template. We also need to pass in other pages specific information suc as the page title, any specific layout we require, any additional css or js files the page requires (all pages get the standard ones by default but if a certain page needs any extra ones we pass them in from the view) along with a few other available options. 
These additional bits are passed as an array called $params. We any $params that won’t or rarely change at the very top and add to them, or occasionally amend them, as we go along. In this file we set three of them at the start.
$params['page_title'] – This controls the title the user sees at the top of the page. As this was passed in from the controller, this will be 'Users List’;
$params[page_subtitle] – If set, this will place a smaller line of text under the title. This has not been set by the controller so in this case we tell it to show nothing.
$params[menu_category] – This only appears in the admin section and shows which section of the side menu that we are in. The template highlights it in the menu and if it has any children, opens their container so you can view them. 

The next thing is an empty $content variable. As we build the output as we go, we use this variable and keep adding to it as required. This variable is what gets passed to the template to provide the actual content to display.
For now, you can skip passed everything up until the line if($data['page_type'] == 'listing') {.
The second parameter we passed to view was 'page_type' => 'listing'. As this view is used for many different pages, we use 'page_type' to specify which page we are on so anything inside this if statement will be executed. There is also some things added to $content outside of these if statements but that is in the next example.
The first thing we do inside the if() statement is set $params['menu_item'] = 'List'. At the start of the view we set $params[‘menu_category’] = ‘Users’ to highlight and open the ‘Users’ section of the side menu. We now also add $params['menu_item'] to show that we want ‘List’ to be highlighted within that menu. If the link is not a dropdown and just static, you only need the $params[‘menu_category’].
Next, we need to take the list of users that is now set to $data['list'] and manipulate it slightly before we create the table. Remember that $data['list'] was created using $user->listing()  which is the listing()method in app/models/M_Users.php. 
If you look at that, you will see that all it does is make a ‘SELECT’ query on the database table (in Models, the default table is set to $_db_table at the top of the file in the same way that the default model in set in the controller using $default_model) and return the records in database format, which is not useful at times to diplay.
There are four things we need to do 
•	Make the username a link that takes you to the users profile 
•	Create a new column out of the first and last names
•	Reformat the joined date into something more readable 
•	Add another column containing view edit and delete buttons
We do this by looping through the list and changing whatever is required on each loop. All the manipulation we need to do is fully commented within that section.
Once that is done, we simply need to turn the amended $data['list'] into a html table and display it. These final steps are fully commented in the file but we simply use a function called make_table() from /app/core/Php2Html.php and pass in $data['list'] along with some other settings to create the table. We then place that table inside a card to display it and add that to $content ready to pass to the template. 
That is it. Quite complicated as an initial look but it is a lot easier to understand than procedural methods and as much of it is re-usable, most things you would need can be copy, pasted and amended.
That example though was extremely simple as it was only calling a list of users from the database. Some of the methods also have to deal with looking up various bits of data as well as coping with any posted forms and insert, updating and deleting from the database. The best example of this is the user edit method in the admin area. 

To edit a record you would use http://uathub/Admin/Users/Edit/SteveB, where the last part would be the username of the person you want to edit. Again, we know from the url that we would be in /app/controllers/Admin/Users.php, but this time we are in the edit() method.
The first main difference in this example is the way we pass the parameters to the view. We still pass the path in the same way but we also need to send messages to the view to say that any update has been successful or failed, or even that a user was not found. For this, the first thing we do in the method is create a new array called $_view_data, containing the parts that we know will not, or will only rarely, change and at the end, pass that into the view() function. In this case we know that the 'page_name' and 'page_type' will always remain the same, so we set them in advance of everything else. 
 The next thing we need to do is check that we are trying to edit a valid user. Using if(!$_user), we check to see if a user is passed in. If not, we send it to the 404 page but if it has, we then need to check if it is a valid user.



















===============================================================================================================================================================



















===============================================================================================================================================================



















===============================================================================================================================================================



















===============================================================================================================================================================



















===============================================================================================================================================================



















===============================================================================================================================================================



















===============================================================================================================================================================



















===============================================================================================================================================================



















===============================================================================================================================================================









