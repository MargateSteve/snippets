<?php

/**
 * Home Page View
 *
 * This only controls the view from the home page of the site.
 *
 * As very little is actually done in this file, we use it as the guidline for
 * all other views and as a result, there will be more commenting in this view
 * than any others, including things that might not get used here but might get
 * used elsewhere.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 		http://yoursite/
 *
 */

/*
    Any information passed to the view from the controller will be available as as a variable called $data. This will contain all of the required information but without any formatting (mainly) as this will be done in this file.

    You can uncomment the first line below to see any data passed in as a formatted array. There are also lines that can be uncommented to show any $_POST or $_SESSION data in the same way.

    The nicePrint_r() function that these use can be found in '/src/functions/globals.php'.
*/
// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');


/**
 * Set the parameters for the page
 *
 * As well as the content to display, there are some other parameters that
 * the call to the template also accepts. These are stored in an array called
 * $params and can either be set within this file, or passed in from the
 * controller.
 *
 * This example file contains all available parameters to give an explanation
 * of what can be used an how to use it, some of which are set within this file,
 * some of which are passed from the controller.
 */

/*
    Set the page version.

    The default template system provides several different layouts that can be
    used, within a standard wrapper.

    The layouts can be edited and new ones added in the layout_switcher() function
    in the called template file and the demos ones are
    'full-width' - single column layout
    'left-col'  - two column layout with left sidebar and content to the right
    'right-col' - two column layout with right sidebar and content to the left
    'three-col' - three column layout with both sidebars and content in the middle
    'test' - a playground for testing styles.

    This parameter can be ommitted and if so, the layout will default to the
    default case within the switch statement in layout_switcher().

    In this demo, the layout is set within this file, but can be passed in from
    the controller.
 */
$params['layout'] = 'full-width';

/*
    Set the page title and subtitle.

    To set the page title, which will be shown at the top of the page and also part of the <title> in <head> set it to $params['page_title'].

    In this demo, we are sending the title from the controller as
    'page_name' but have set it to only populate $params['page_title'] if
    it has been passed in. You can set it manually in this file.

    This parameter can be ommitted and if so, no title or subtitle will
    show and the <title> in <head> will not include anything and default
    to whatever is set as the $title variable in the head() function in
    the Base template.

    To set a subtitle for the page set a $params['page_subtitle']. This
    works in exactly the same way as the page title other than it does not
    affect the  <title> in <head> and will not show if a page title is not
    set. Again, for this demo, we are assuming it to be from the controller, this time as 'page_subtitle', and leave it empty if it does not exist.

 */
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;

/*
    Override meta tags

    You can override any of the default meta tags stored in the meta_tags()
    function in /app/core/Settings.php by including them in via $params['meta'].

    You can override as many as needed and simply created a key/value pair for
    each one that you want to override.

    It would be recommended to set this in the $data passed to this page from
    the controller, espcially if this view is being used for multiple page
    types and content.

    If you do not need to override any, you can omit the variable completely.
 */
$params['meta'] = ['description' => 'Description set in page'];

/*
    Add page specific css

    You can any page specific stylesheets stored called from the css() function in /app/core/Settings.php by including them in via $params['css'].

    These are set in a multidimensional array and return the full stylesheet link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4' would return the string at
    'remote' => 'bootstrap' => 'v4'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['css'] = [
    'remote/simple-line-icons',
    #'path/to/css2',
    #'path/to/css3'
];

/*
    Add page specific js

    You can any page specific stylesheets stored called from the js() function in /app/core/Settings.php by including them in via $params['js'].

    These are set in a multidimensional array and return the full script link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4' would return the string at
    'remote' => 'bootstrap' => 'v4'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['js'] = [
    'remote/jquery_ui',
    #'path/to/js2',
    #'path/to/js3'
];

/*
    With the index page, we use it like a landing page in that we want it to still keep the navigation menu and footer that other areas of the site use but not have the banner at the top of the page, as well as giving the whole page a dark background and light text.

    We do this by using two extra $params.
    'hide_banner' will not show the the header at the top of the page is set to true. If set to false or not set at all, the banner will show.
    'body_class' allows you to add classes to the opening body tag. In this case we just set the bg and text.
*/
$params['hide_banner'] = true;
$params['body_class'] = 'bg-dark text-light';

/*
    Everything that needs to be displayed on this page is currently created here against a variable called $content. This will change so this is only here as a temporary filler.
 */
 $content = '';

 /*
    Show any messages that have been sent ot the page as an alert.

    If there are any user messages that need to be shown, such as success or failure messages following a form post, we set the paramaters of it in the controller and pass it through as $data['messages']. This, itself, gets populated from details in a function called messages() in the current model being used.

    Each model has it's own messages() function to make the messages relevant to the area of the site being viewed and a full explanation of how they work can be found in '/app/models/M_Users.php'.

    When we require one of these messages, we set it to $data['messages'] and that will now contain an array of values that can be used as an alert. Rather than checking to see if $data['message'] exists on every view, we simply pass all of $data into the showPageAlerts () function in '/app/core/global.php' and that checks if there is message to show. There is a full commenting of showPageAlerts () to explain exactly how it works and how, as an alternative, we can use $_SESSIONS to pass the message.
 */
 $content .= showPageAlerts ($data);

 /*
    Finally, we add the actual content that needs to be displayed on the page. In this example we currently only show some hardcoded stuff so that will need improving.

    TODO: Replace the below with something more useful and amend the comments.
  */
 $content .= '<h4>Welcome to the UAT Hub!</h4>';
 $content .= '<p>Although still a work in process, this is the first working version of the long-promised UAT Hub - an area that will eventually become the go-to resource for any UAT and CMT things.</p>';
 $content .= '<p>As well as help files and automation tools, this will also contain a few new things and some replacements for existing methods.</p>';




  $content .= '<div class="col">';
  $content .= '<div class="row mb-3">';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-light bg-secondary">';

  $content .= '    <i class="fas fa-lightbulb fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>Ideas</h2>';
 $content .= '            <p>Got an idea that you think could improve life in the derpartment? Share it in the Ideas section, make comments on other ideas and vote for your favourites.</p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-secondary" href="/Ideas" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-left-0 border-light bg-dark">';

  $content .= '    <i class="fas fa-question fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>One Thing</h2>';
 $content .= '            <p>Feel uncomfortable placing something in the \'One Thing\' box? You can now do it via an online form, either anonymously or with your name. You can even set it so it can be viewed by others if you want! </p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-dark" href="/OneThing" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-left-0 border-light bg-secondary">';

  $content .= '    <i class="fas fa-phone-volume fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>Call Log</h2>';
 $content .= '            <p>Still in concept stage, this is a potential replacement for the Excel sheet currently used for UAT calls. Only to be used if told to for now.</p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-secondary" href="/CallLog" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '        </div>';

  $content .= '</div>';


 $content .= '<div class="card mb-3 border-secondary text-dark w-100">';
 $content .= '    <h4 class="card-header bg-secondary text-light">';
 $content .= '    Links';
 $content .= '    </h4>';
 $content .= '  <div class="card-body">';
 $content .= '  <b>Original Selenium Folders</b><br>';
 $content .= '    <a href="http://10.60.151.86/current/Selenium" target="_blank">Current</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/regression/Selenium" target="_blank">Regression</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting1/Selenium" target="_blank">Scripting 1</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting2/Selenium" target="_blank">Scripting 2</a>' ;

 $content .= '  <br><br><b>Interim site</b><br>';
 $content .= '    <a href="/dev/Selenium" target="_blank">Home Page</a>' ;

 $content .= '  <br><br><b>New Hub site</b><br>';
 $content .= '    <a href="/Selenium" target="_blank">Home Page</a>' ;
 $content .= '   | ';
 $content .= '    <a href="/Admin" target="_blank">Admin</a>' ;
 $content .= '  <br><br><b>Other Links</b><br>';
 $content .= '    <a href="http://10.60.151.86/phpmyadmin" target="_blank">Database</a>' ;

 $content .= '  <br><br><b>File Locations</b>';
 $content .= '    <br>WebOpts MVT list - \\\\ZEUS\\Ecommerce\\Webopt MVT folder\\Agendas\\' ;
 $content .= '    <br>Firefox 54.0.1 Installation - \\\\10.60.151.86\\files\\Firefox Installs\\' ;

 $content .= '  <br><br><b>Known Issues</b>';
 $content .= '  <br>Remember me function causes count() on boolean error in M_Users line 991(ish)' ;
 $content .= '  <br>Main template edit link goes to /Members/ instead of /Users/' ;
 $content .= '  <br>User box not visible when scrolled down the page.' ;


 $content .= '</div>';

 $img = Php2BS::bs_figure_img ([
     'src' => 'https://nav.files.bbci.co.uk/orbit/2.0.0-134.88fa804/img/blq-orbit-blocks_grey.svg',
     'alt' => 'my-image',
     'class' => 'rounded',
 ]);

 $caption = Php2BS::bs_figure_caption ([
     'class' => 'text-danger',
     'content' => 'Descriptive caption'
 ]);

$content .= Php2BS::bs_figure ([
     'content' => $img.$caption,
     'id' => 'show_image',
 ]);

$content .= Php2Bs::bs_alert([
    'heading' => 'Alert Example',
    'content' => Php2Html::p([
        'content' => 'Stuff can go here.'
    ]),
    'dismissible' => false,
    'color' => 'warning',
]);

$content .=  '<h4>Badge '.Php2Bs::bs_badge([
    'content' => 'Badge text',
    'color' => 'success',
]).'</h4>';

$content .=  '<h4>Badge '.Php2Bs::bs_badge_pill([
    'content' => 'Badge text',
    'color' => 'success',
]).'</h4>';

$content .=  '<h4>Badge '.Php2Bs::bs_badge_link([
    'content' => 'Badge text',
    'color' => 'success',
    'href' => 'contact.php'
]).'</h4>';

$content .=  '<h4>Badge '.Php2Bs::bs_badge_pill_link([
    'content' => 'Badge text',
    'color' => 'success',
    'href' => 'contact.php'
]).'</h4>';

$content .= Php2BS::bs_breadcrumbs ([
     'items' => [
         'Home' => '/',
         'Contact' => '/Contact',
         'Users' => '',
     ],
     'nav_class' => 'mt-4',
     'ol_class' => 'bg-dark mx-4'
 ]);


 $content .= Php2Bs::bs_button ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'primary',
     //'size' => 'sm',
     'content' => 'aaa',
     'name' => 'bbb'
 ]);

 $content .= Php2Bs::bs_button_link ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'primary',
     'size' => 'sm',
     'content' => 'aaa',
     'name' => 'bbb',
     'href' => "/Copntact.php"
 ]);

 $content .= Php2Bs::bs_button_input_button ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'primary',
     //'size' => 'sm',
     'value' => 'aaa',
     'name' => 'bbb'
 ]);

 $content .= Php2Bs::bs_button_input_submit ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'info',
     //'size' => 'sm',
     'value' => 'aaa',
     'name' => 'bbb'
 ]);

 $content .= Php2Bs::bs_button_input_reset ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'warning',
     //'size' => 'sm',
     'value' => 'aaa',
     'name' => 'bbb'
 ]);

/**
 * Pass the details to the template
 *
 * All that is left to do is pass the information that we have created above,
 * through to the template that we are using for this view.
 *
 * In this instance, we are using the Main template at /'app/core/Templates/T_Main.php'.
 *
 * @var string 	    $content    The actual page relevant content to be shown
 * @var array 	    $params     Any other required page settings.
 */
new T_Main ($content,$params);




















































































Php2Bs
===================

Php2Bs is a set of Php functions to create Bootstrap 4 components other elements within a script, rather than switching between Php and HTML. This is built as an extension to Php2Html (https://github.com/MargateSteve/php2html) and follows the same building rules of the functions there. Php2Bs simply uses the functions in Php2Html but adds the relevant Bootstrap class to them.

The tags are fully nestable and can contain all standard attributes such as id's, classes, styles and HTML5 data attributes. Most attributes that can be used by individual tags are also available but there is a fall back to enforce any that are not yet included. A full explanation of how the attributes work can be found at the Php2Html readme on the link above.

As with Php2Html this an experimental class and as such, should be used with some caution. It is at a much earlier stage than Php2Html so glitches and bugs are inevitably, but it does work correctly in the main.

## Table of contents
- [Install and set-up](#installation)
- [Usage](#usage)
    - [Layout](#layout)
    - [Content](#content)
    - [Components](#components)
- [Available attributes](#available-attributes)
- [List of tags](#list-of-tags-and-their-function-names)
- [Examples](#examples)
- [About](#about)
    - [Concept](#concept)
    - [Version History](#version-history)

## Installation

There are specific dependencies other than it can only be used on a server running PHP5+ (either on a web host or locally with WAMP / XAMPP).

No specific set-up is required. Simply save Php2Bs.php within your project and call it in the file that you want to include it with include('path/to/Php2BS.php'), or using a class autoloader. As mentioned, this is an extension to Php2Html so that must be included either by adding it to this file directly with include('path/to/Php2Html.php'), or by using a class autoloader.

The example files, xxxxx.


## Usage
All functions are static so need to be called as a static method
```php
Php2Bs::function($params)
```
Any required parameters, such as content to display, id's, classes etc are passed in to the function as an array. For some of the functions, there will be a set of different parameters when an entire component is being build (such as a ul) but these will be explained as we go.

The majority of the functions will be an almost exact match to the name of the bootstrap class, prepended with 'bs_' and with hyphens replaced with underscores so the function for '.navbar-nav' would be 'bs_navbar_nav'.

There are exceptions to this though where the class name is replaced with a more memorable version - '.btn' to 'bs_button' for example.

The examples below includes various attributes only to show how they would be used and, unless specified, are optional.

## Layout

### Containers
https://getbootstrap.com/docs/4.0/layout/overview/#containers

#### Standard Container - bs_container()

```php
echo Php2BS::bs_container ([
    'content' => 'Container Content',
    'id' => 'wrapper',
]);
```

```html
<div id="wrapper" class="container">Container Content</div><!-- div#wrapper.container -->
```

#### Fluid Container - bs_container_fluid()
```php
echo Php2BS::bs_container ([
    'content' => 'Fluid Container Content',
    'class' => 'bg-light',
]);
```

```html
<div class="container-fluid bg-light">Fluid Container Content</div><!-- div.container bg-light -->
```

### Row and Column
#### Row - bs_row()
```php
echo Php2BS::bs_row ([
    'content' => 'Row Content',
    'class' => 'mb-1',
]);
```

```html
<div class="row mb-1">Row Content</div><!-- div.row mb-1 -->
```

#### Column - bs_column()
If you want specific column sizes, these need to be passed in as a 'class' in the array. Excluding this will default to 'class="col"'.
```php
echo Php2BS::bs_column ([
    'content' => 'Column Content',
    'class' => 'col-12 col-md-9 col-xl-10',
    'id' => 'main',
]);
```

```html
<div id="main" class="col-12 col-md-9 col-xl-10">Column Content</div><!-- div#main.col-12 col-md-9 col-xl-10 -->
```


## Content
#### Table - bs_table()
https://getbootstrap.com/docs/4.0/content/tables/

This utilises Php2Html::make_table() to create a fully fledged table, but with the Bootstrap .table class. Pass the parameters in as per the instructions for that at  https://github.com/MargateSteve/php2html#table-builder
```php
echo Php2BS::bs_table ([
    'data' => [array of table data],
    'columns' => [
        'username' => [
            'alias' => 'Username',
            'th_class' => 'bg-dark text-light',
        ],
        'group' => [
            'alias' => 'User Group',
            'th_class' => 'bg-dark text-light',
        ],
        'gender' => [
            'alias' => 'Gender',
            'th_class' => 'bg-dark',
            'global_class' => 'd-none d-md-table-cell text-danger'
        ],
    ],
    'settings' => [
        'show_header' => true,
        'class' =>'table mb-0'
    ]
]);
```

```html
<table class="table mb-0">
    <thead>
        <tr>
            <th class="bg-dark text-light">Username</th><!--  .bg-dark text-light -->
            <th class="bg-dark text-light">User Group</th><!--  .bg-dark text-light -->
            <th class=" bg-dark text-light">Gender</th><!--  .d-none d-md-table-cell text-danger -->
        </tr><!-- tr -->
    </thead><!-- thead -->
    <tbody>
        <tr id="28">
            <td>Admin</td>
            <td class="d-none d-md-table-cell text-info">Moderator</td>
            <td>Male</td><!--  .d-none d-md-table-cell text-danger -->
        </tr><!-- tr #28 -->
    </tbody><!-- tbody -->

</table><!--table.table mb-0 -->
```

#### Figure - bs_figure()
https://getbootstrap.com/docs/4.0/content/figures/

As a figure tag can contain multiple content, it is best to build this first then pass it in as the content. We also have functions to apply Bootstrap 4 classes on the images and captions it can contain.

```php
$img = Php2BS::bs_figure_img ([
    'src' => '/img.jpg',
    'alt' => 'my-image',
    'class' => 'rounded',
]);

$caption = Php2BS::bs_figure_caption ([
    'class' => 'text-danger',
    'content' => 'Descriptive caption'
]);

echo Php2BS::bs_figure ([
    'content' => $img.$caption,
    'id' => 'show_image',
]);
```

```html
<figure class="figure">
    <img src="/img.jpg" class="figure-img rounded" alt="my image."><!-- img.figure-img rounded -->
    <figcaption class="figure-caption text-danger">Descriptive caption</figcaption><!-- figcaption.figure-caption text-danger -->
</figure><!-- figure.figure -->
```


## Components

#### Alert - bs_alert()
https://getbootstrap.com/docs/4.0/components/alerts/

As alerts can have optional content, such as the heading and the dismiss button,
we call this as a multi-part array.
To omit the heading, just leave it out of the call.
The dismiss button is controlled by 'dismissible' and will only show if it is set to true. If you do not want a dismiss button, you can omit 'dismissible'.
By default, it will show an info alert (alert alert-info). To use one of the other Bootstrap alert variants, just pass the color name in as 'color'.
```php
echo Php2Bs::bs_alert([
    'heading' => 'Alert Example',
    'content' => Php2Html::p([
        'content' => 'Stuff can go here.'
    ]),
    'dismissible' => false,
    'color' => 'warning',
]);
```

```html
<div class="alert alert-warning " role="alert">
    <h4 class="alert-heading">Alert Example</h4><!--  .alert-heading -->
    <p>Stuff can go here.</p><!-- p -->
</div><!-- div .alert alert-warning  -->
```
### Badges - bs_badge()
By default, badges will use info as the contextual color. To use one of the other Bootstrap badge colour variants, just pass the colour name in as 'color'.
https://getbootstrap.com/docs/4.0/components/badge/

```php
echo Php2Bs::bs_badge([
    'content' => 'Badge text',
    'color' => 'success',
]);
```
```html
<span class="badge badge-success ">Badge text</span><!-- span .badge badge-success  -->
```
#### Pill Badges - bs_badge_pill()
https://getbootstrap.com/docs/4.0/components/badge/#pill-badges

```php
echo Php2Bs::bs_badge_pill([
    'content' => 'Badge text',
    'color' => 'info',
]);
```
```html
<span class="badge badge-pill badge-info ">Badge text</span><!-- span .badge badge-pill badge-info  -->
```

#### Link Badges - bs_badge_link(), bs_badge_pill_link()
https://getbootstrap.com/docs/4.0/components/badge/#links

By adding `_link` to either of the above, it will be treated as an a tag instead of a span.

```php
echo Php2Bs::bs_badge_link([
    'content' => 'Badge text',
    'color' => 'success',
    'href' => 'contact.php'
]);
```
```html
<a href="contact.php" class="badge badge-success ">Badge text</a><!-- a .badge badge-success  -->
```

```php
echo Php2Bs::bs_badge_pill_link([
    'content' => 'Badge text',
    'color' => 'info',
    'href' => 'contact.php'
]);
```
```html
<a href="contact.php" class="badge badge-pill badge-info ">Badge text</a><!-- a .badge badge-pill badge-info  -->
```

### Breadcrumbs - bs_breadcrumbs()
Breadcrumbs do not have a lot of options. You can add styling to the outer nav or the inner ol by useing `nav_class` and `ol_class`. Aside from that, you simply pass in an array of items as a key/value array, where the key will be the text displayed and the value will be the link. Leave the last link blank to make that the active item.

```php
echo Php2BS::bs_breadcrumbs ([
     'items' => [
         'Home' => '/',
         'Contact' => '/Contact',
         'Users' => '',
     ],
     'nav_class' => 'mt-4',
     'ol_class' => 'bg-dark mx-4'
 ]);
```
```html
<nav class=" mt-4" aria-label="breadcrumb">
    <ol class="bg-dark mx-4 breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a><!-- a -->
        </li><!-- li .breadcrumb-item -->
        <li class="breadcrumb-item">
            <a href="/Contact">Contact</a><!-- a -->
        </li><!-- li .breadcrumb-item -->
        <li class="breadcrumb-item active" aria-current="page">
            Users
        </li><!-- li .breadcrumb-item active -->
    </ol><!-- ol .bg-dark mx-4 breadcrumb -->
</nav><!-- nav . mt-4 -->
```

## Tags
Most of the commonly used HTML tags are available in Php2Html and you simply call the function with the same name as the tag and provide the details in an array.

At their simplest level, these will only contain the content to display but can also contain most HTML5 attributes.

By default, the majority of tags also automatically generate a HTML comment to append to the end of the tag (td and tr do this as it is not really required). You can turn this off on a by-case basis by including *'show_comment' => false* as part of the array when you call it.

The method to show the content varies depending on the type of tag. Tags that both open and close, require a 'content' element in the array.

```php
echo Php2Html::div ([
    'content' => 'Div Content'
]);
```
returns
```html
<div>Div Content</div><!-- div -->
```


Single tags require a 'value' element in the array (as it is filling the 'value' attribute).

```php
echo Php2Html::input_text ([
    'value' => 'Default Input'
]);
```
returns
```html
<input type="text" value="Default Input"><!-- input -->
```

Note that in the examples, we use the short array syntax. You can also use the classic style if that is your preferred way.

```php
echo Php2Html::div ([
    array (
        'content' => 'Div Content'
    )
);
```

Although it is unlikely that you would want to use this for single tags, the fact that you can nest and concatenate content means you can build whole sections in one go.

Combining the two examples above we could use
```php
echo Php2Html::div ([
    'content' => Php2Html::input_text ([
        'value' => 'Default Input'
    ])
]);
```
or
```php
echo Php2Html::div (
    array (
        'content' => Php2Html::input_text (
            array(
                'value' => 'Default Input'
            )
        )
    )
);
```
to give us
```html
<div><input type="text" value="Default Input"><!-- input --></div><!-- div -->
```
*Note that all output is minified. A future plan is to find a way to prettify the output.*

For more complex sections, you may want to build it in parts, and then put it all together at the end.

Taking the below example
```html
<div>
    <p>Paragraph one<p><!-- p -->
    <p>Paragraph two<p><!-- p -->
    <p>Paragraph three<p><!-- p -->
</div><!-- div -->
```

you could build each paragraph individually and concatenate them in the div at the end.

``` php
$p1 = Php2Html::p ([
    'content' => 'Paragraph one'
]);

$p2 = Php2Html::p ([
    'content' => 'Paragraph two'
]);

$p3 = Php2Html::p ([
    'content' => 'Paragraph three'
]);

echo Php2Html::div ([
    'content' => $p1.$p2.$p3
]);
```

To add any attributes to a tag, simply add them to the array when calling. In this early version, these are not necessarily only usable within tags that they apply to so, although nothing will break, using the wrong thing in the wrong place will not comply with HTML standards.
Most tags are simply a key => value pairing but html data or aria attributes get passed in as an array.

```php
echo Php2Html::div ([
    'content' => 'Div Content',
    'id' => 'main-div',
    'class' => 'bg-black text-white',
    'style' => 'height:50px;width:100px;',
    'data_attr' =>[
        'ref' => '45',
        'category' => 'news'
    ]
]);
```

```html
<div id="main-div" class="bg-black text-white" data-ref="45" data-category="news" style="height:50px;width:100px;">
    Div Content
</div><!-- div #main-div .bg-black text-white -->
```

If you want to add specific info to the HTML comment, you can pass that in the array as 'comment'.

```php
echo Php2Html::div ([
    'content' => 'Div Content',
    'id' => 'main-div',
    'class' => 'bg-black text-white',
    'comment' => 'My Example Div'
]);
```
returns

```html
<div id="main-div" class="bg-black text-white">
    Div Content
</div><!-- div #main-div .bg-black text-white My Example Div -->
```

There is also a catchall option to allow any attributes that are currently not available in the class or create custom ones. By adding 'controls' => 'xxx' to the array, you can send a string of anything to be placed in the tag.

```php
echo Php2Html::div ([
    'content' => 'Div Content',
    'id' => 'main-div',
    'controls' => 'role="alert" tabindex="4"'
]);
```
returns

```html
<div id="main-div" role="alert" tabindex="4">
    Div Content
</div><!-- div #main-div -->
```

A list of the [attributes](#available-attributes) can be found at the bottom of this file along with all available [tags](#list-of-tags-and-their-function-names).

## Table Builder
The make_table() function takes an array and relevant parameters and creates a full HTML table.

There are three different parameters that can be passed
in, but each of these are an array containing other
parameters.

- **'data'** - contains the records to be placed in the table rows.

- **'columns'** - contains a separate array for each column to be
shown, as well as any classes to be applied to either the th,
td or both.
The key for each column will the database column name. The other
parameters that can be used are
  - **'alias'** - if the table has a header, this will be the name
		shown in the th.
  -	**'td_class**' - a class to be added to the columns td.
  - **'th_class'** - a class to be added to the columns th.
  - **'global_class'** - a class to be added to both the th and td.

- **'settings'** - contains anything relating to the table itself,
such as whether to show a header and any table styles. The
parameters that can be used are
  - **'show_header'** - true/false to set whether to show the thead.
  - **'border'** - adds a border to the table with a specified width.
  - **'class'** - adds the specified class(es) to the whole table.

You can also add a class to a table row by adding a 'tr_class'
element to the relevant record in the array.

There is an [example](#examples) file that shows a slightly, complex table builder set up, where data is converted to links and various styles are applied.

## Available attributes
Php2Html supports the majority of available attributes by default. You can add any attribute to any tag without causing any issue but certain ones will only actually work with specific tags (e.g if you add 'href' to a div, it will show but will not turn the div into a link).

It would be safe to assume that global attributes of id, class, title, ref and data-attr (HTML5 data attributes) can be used against all tags.
The 'controls' option as mentioned in the [tags usage](#tags) section can also be used globally as can setting an inline 'style'.

The following attributes can only be used against the specified tags. Most are straightforward HTML attribute names but any that work slightly differently will be explained here and in the [list of tags](#list-of-tags-and-their-function-names), as well as commented within the functions themselves.

#### action
- form

#### alt
- img

#### button_type
- button

#### checked
- checkbox, radio

#### cite
- blockquote

#### cols
- textarea,

#### colspan
- td, th

#### data_attr
- all

These are the HTML5 data attributes and need to be supplied as a key=>value pairing.
'data-attr'=>['title'=>'My Element', 'ref'=>'99'] will return data-title="My Element" and data-ref="99"

#### datetime
- time

#### disabled
- button, checkbox, fieldset, radio

#### for
- label

#### form
- all inputs, button, fieldset

#### height
- all inputs, img, embed

#### href
- a

#### label
- optgroup, option

#### method
- form

#### max
- input_range, input_date

#### maxlength
- all inputs

#### min
- input_range, input_date

#### minlength
- all inputs

#### multiple
- input_email, input_file, select

#### name
- all inputs, button, checkbox

#### placeholder
- all inputs

#### required
- all inputs,

#### rel
- a

#### rows
- textarea

#### rowspan
- td, th

#### selected
- option

#### size
- all inputs, h

#### step
- input_range, input_date

#### style
- all

Adds any inline styles to the element. Pass it using a string as you normally would when writing html.
'style'=>'width:100%; bg-color:blue;' will return style="width:100%; bg-color:blue;"

#### src
- img, embed

#### target
- a

#### title
- all

#### type
- embed, a

#### value
- all inputs, button, checkbox, data, radio

#### width
- all inputs, img, embed

There is also one catchall attribute of 'controls'. This can be used to enter any string into the element so can be used to add any attributes not yet included.


## List of tags and their function names

Only the 'a' tag contains any of the option attributes as an example. All contain examples of attributes that are unique to them.

### a
- 	href, rel, type, target

```php
echo Php2Html::a ([
    'content' => 'Click Me',
    'href' => 'home.php',
    'id' => 'home_button',
    'class' => 'menu',
    'style' => 'display:inline; color:white;',
    'data_attr' => [
        'section' => 'core',
        'order' => '1'
    ]
]);

```

```html
<a href="/home.php" id="home_button" class="menu" style="display:inline; color:white;" data-section="core" data-order="1">Click Me</a><!-- a #home_button .menu -->
```

### abbr

```php
echo Php2Html::abbr ([
    'content' => 'HTML',
    'title' => 'Hyper Text Markup Language',
]);

```

```html
<abbr title="Hyper Text Markup Language">HTML</abbr><!-- abbr -->
```

### address

```php
echo Php2Html::address ([
    'content' => 'Street Name<br>Town Name<br>Country Name',
]);

```

```html
<address>Street Name<br>Town Name<br>Country Name</address><!-- address -->
```

### article

```php
echo Php2Html::article ([
    'content' => '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut mollis lectus enim, at imperdiet urna consequat in.</p> <p>Vivamus cursus diam enim, id fermentum metus aliquet eu. Vestibulum eu ex imperdiet eros efficitur posuere in at ipsum. Maecenas orci tortor, scelerisque nec nibh eget, accumsan blandit mi. Sed euismod felis turpis</p>',
]);

```

```html
<article><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut mollis lectus enim, at imperdiet urna consequat in.</p> <p>Vivamus cursus diam enim, id fermentum metus aliquet eu. Vestibulum eu ex imperdiet eros efficitur posuere in at ipsum. Maecenas orci tortor, scelerisque nec nibh eget, accumsan blandit mi. Sed euismod felis turpis</p></article><!-- article -->
```

### aside

```php
echo Php2Html::aside ([
    'content' => '<h4>Lorum Ipsum</h4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut mollis lectus enim, at imperdiet urna consequat in.</p> <p>Vivamus cursus diam enim, id fermentum metus aliquet eu. Vestibulum eu ex imperdiet eros efficitur posuere in at ipsum. Maecenas orci tortor, scelerisque nec nibh eget, accumsan blandit mi. Sed euismod felis turpis</p>',
]);

```

```html
<aside><h4>Lorum Ipsum</h4><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut mollis lectus enim, at imperdiet urna consequat in.</p> <p>Vivamus cursus diam enim, id fermentum metus aliquet eu. Vestibulum eu ex imperdiet eros efficitur posuere in at ipsum. Maecenas orci tortor, scelerisque nec nibh eget, accumsan blandit mi. Sed euismod felis turpis</p></aside><!-- aside -->
```

### b

```php
echo Php2Html::b ([
    'content' => 'This is bold text',
]);

```

```html
<b>This is bold text</b><!-- b -->
```

### blockquote

```php
echo Php2Html::blockquote ([
    'content' => 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',
    'cite' => 'https://www.lipsum.com/'
]);

```

```html
<blockquote cite="https://www.lipsum.com/">Lorem Ipsum is simply dummy text of the printing and typesetting industry</blockquote><!-- b -->
```

### br
Note that the br() function does not create a htnl comment as 'show_comment' is set to false.
```php
echo Php2Html::br ([
    'content' => '',
]);

```

```html
<br>
```

### button
- form, name, value, disabled, button_type

```php
echo Php2Html::button ([
    'content' => 'Click Me!',
    'button_type' => 'submit',
    'name' => 'submit_button',
    'disabled' => ''
]);
```

```html
<button type="submit" name="submit_button" disabled>Click Me!</button><!-- button -->
```

### checkbox
- checked, name, value, disabled

```php
echo Php2Html::checkbox ([
    'value' => '1',
    'name' => 'check_box',
    'checked' => ''
]);
```

```html
<input type="checkbox" name="check_box" value="1" checked><!-- checkbox -->
```

### cite

```php
echo Php2Html::cite ([
    'content' => 'Citation',
]);
```

```html
<cite>Citation</cite><!-- cite -->
```

### code

```php
echo Php2Html::code ([
    'content' => 'This is some code',
]);
```

```html
<code>This is some code</code><!-- code -->
```

### data

```php
echo Php2Html::data ([
    'content' => 'A piece of data',
    'value' => '457'
]);
```

```html
<data value="457">A piece of data</data><!-- data -->
```

### dd

```php
echo Php2Html::dd ([
    'content' => 'This is a description',
]);
```

```html
<dd>This is a description</dd><!-- dd -->
```

### div

```php
echo Php2Html::div ([
    'content' => '<p>This is a paragraph within a div.</p>'
]);
```

```html
<div><p>This is a paragraph within a div.</p></div><!-- div -->
```

### dl

As a dl tag will contain dd and dl tags, it would be best to create these first as a variable and then pass them in as 'content'.
```php
$dl_content = '<dt> and <dd> elements';
echo Php2Html::dl ([
    'content' => $dl_content
]);
```

```html
<dl>...</dl><!-- dl -->
```

### dt

```php
echo Php2Html::dt ([
    'content' => 'This is a definition'
]);
```

```html
<dt>This is a definition</dt><!-- dt -->
```

### em

```php
echo Php2Html::em ([
    'content' => 'Emphasised text'
]);
```

```html
<em>Emphasised text</em><!-- em -->
```

### fieldset
- form, disabled

As a fieldset tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php
$fieldset_content = 'form elements';
echo Php2Html::fieldset ([
    'content' => $fieldset_content,
    'form' => 'login_form',
    'name' => 'user_details'
]);
```

```html
<fieldset name="user_details" form="login_form">...</fieldset><!-- fieldset -->
```

### figcaption

```php
echo Php2Html::figcaption ([
    'content' => 'This is a caption',
]);
```

```html
<figcaption>This is a caption</figcaption><!-- figcaption -->
```

### figure

As a figure tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php
$figure_content = 'figure elements';
echo Php2Html::figure ([
    'content' => $figure_content,
]);
```

```html
<figure>...</figure><!-- figure -->
```

### footer
- action, method

As a footer tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php
$footer_content = 'footer content';
echo Php2Html::footer ([
    'content' => $footer_content,
]);
```

```html
<footer>...</footer><!-- footer -->
```


### form
- action, method

As a form tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php
$form_content = 'form elements';
echo Php2Html::form ([
    'content' => $form_content,
    'action' => 'login.php',
    'method' => 'post'
]);
```

```html
<form action="login.php" method="post">...</form><!-- form -->
```

### h
- size

All h tags work from the same function. We passs in a parameter of size to choios from h1, h2 etc.
```php
echo Php2Html::h ([
    'content' => 'Header Text',
    'size' => '2'
]);
```

```html
<h2>Header Text</h2><!-- h -->
```

### header

As a header tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php
$header_content = 'header content';
echo Php2Html::header ([
    'content' => $header_content,
]);
```

```html
<header>...</header><!-- header -->
```
### hr

```php
echo Php2Html::hr ([
    'content' => '',
]);
```

```html
<hr>
```

### i

```php
echo Php2Html::i ([
    'content' => 'Italicised text',
]);
```

```html
<i>Italicised text</i>
```

### img
- alt, height, src, width

```php
echo Php2Html::img ([
    'src' => 'image.gif',
    'alt' => 'My Image',
    'height' => '50',
    'width' => '100',
]);
```

```html
<img src="image.gif" alt="My Image" height="50" width="100"><!-- img -->
```

## input_xxx
Each different input type has it own function to simplify calling them.

We will show the 'text' input first as that can accept most of the attributes. After that, each of the different input functions will only generally show any attributes that have not been shown in the 'text' input and have not already been shown in another input example. Any attributes available for a function will be shown just under the function name, regardless of whether or not they are shown in the example.

In the examples, we will assume all can accept the disabled, form, height, width, name, placeholder, required, size and value attributes so will only show them in the text input example.

### input_text

```php
echo Php2Html::input_text ([
    'name' => 'firstname',
    'value' => 'Steve',
    'placeholder' => 'Enter your first name',
    'required' => '',
    'size' => '40',
    'width'=>'100',
    'height'=>'50'
]);
```

```html
<input type="text"  id="firstname" name="firstname" value="Steve" placeholder="Enter your first name" size="40" width="100" height="50"><!-- input #firstname -->
```


### input_date
- max, min, step

```php
echo Php2Html::input_date ([
    'name' => 'start_date',
    'id' => 'dates',
    'value' => '2018-06-01',
    'min' => '2018-01-01',
    'max' => '2018-12-31',
    'step' => '1',
]);
```

```html
<input type="range"  id="dates" name="start_date" min="2018-01-01" max="2018-12-31" step="1" value="2018-06-01"><!-- input #dates -->
```

### input_email
- multiple

```php
echo Php2Html::input_email ([
    'name' => 'email',
    'id' => 'user_email',
    'value' => 'email@address.com',
    'multiple' => ''
]);
```

```html
<input type="email"  id="user_email" name="email" value="email@address.com" multiple><!-- input #user_email -->
```

### input_hidden
- name, value

```php
echo Php2Html::input_hidden ([
    'name' => 'hidden_field',
    'value' => 'a51',
]);
```

```html
<input type="hidden" name="hidden_field" value="a51"><!-- input -->
```

### input_file
-  multiple

```php
echo Php2Html::input_file ([
    'id' => 'file_upload',
    'name' => 'avatar',
    'multiple'=>''
]);
```

```html
<input type="file" id="file_upload" name="avatar" multiple><!-- input #file_upload -->
```

### input_number
- max, min, step

```php
echo Php2Html::input_number ([
    'name' => 'max_price',
    'id' => 'product',
    'value' => '500',
    'min' => '0',
    'max' => '1000',
    'step' => '50',
]);
```

```html
<input type="number"  id="product" name="max_price" min="0" max="1000" step="50" value="500"><!-- input #product -->
```

### input_password
- minlength, maxlength

```php
echo Php2Html::input_password ([
    'name' => 'password',
    'id' => 'pass',
]);
```

```html
<input type="password"  id="pass" name="password"><!-- input #pass -->
```

### input_range
- max, min, step

```php
echo Php2Html::input_range ([
    'name' => 'max_price',
    'id' => 'product',
    'value' => '500',
    'min' => '0',
    'max' => '1000',
    'step' => '50',
]);
```

```html
<input type="range"  id="product" name="max_price" min="0" max="1000" step="50" value="500"><!-- input #product -->
```

### input_search
- max, min, step

```php
echo Php2Html::input_search ([
    'name' => 'user_search',
    'id' => 'search',
    'value' => '01234 567890',
    'minlength' => '6',
    'maxlength' => '60',
]);
```

```html
<input type="search"  id="search" name="user_search" minlength="6" maxlength="60"><!-- input #search -->
```

### input_tel
- minlength, maxlength

```php
echo Php2Html::input_tel ([
    'name' => 'home_num',
    'id' => 'phone',
    'value' => '01234 567890',
]);
```

```html
<input type="tel"  id="phone" name="home_num" value="01234 567890"><!-- input #phone -->
```

### input_time

```php
echo Php2Html::input_time ([
    'name' => 'current_time',
    'id' => 'current_time',
    'value' => '15:43',
]);
```

```html
<input type="time"  id="current_time" name="current_time" value="15:43"><!-- input #current_time -->
```

### input_url
- minlength, maxlength

```php
echo Php2Html::input_url ([
    'name' => 'home_page',
    'id' => 'link',
    'value' => 'http://www.google.com',
]);
```

```html
<input type="time"  id="link" name="home_page" value="http://www.google.com"><!-- input #link -->
```

### label
-  for, form

```php
echo Php2Html::label ([
    'for' => 'username',
    'form' => 'login',
    'content' => 'Username'
]);
```

```html
<label for="username" form="login">Username</label><!-- label -->
```

### legend

```php
echo Php2Html::legend ([
    'content' => 'Account Details'
]);
```

```html
<legend>Account Details</legend><!-- legend -->
```
### li
- value

```php
echo Php2Html::li ([
    'content' => 'List Content',
    'value' => 'content'
]);
```

```html
<li value="content">List Content</li><!-- li -->
```

### main
As a main tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.

```php
$main_content = 'Main Content';
echo Php2Html::main ([
    'content' => $main_content
]);
```

```html
<main>...</main><!-- main -->
```

### mark

```php
echo Php2Html::mark ([
    'content' => 'Marked Text'
]);
```

```html
<mark>Marked Text</mark><!-- mark -->
```
### nav
As a nav tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.

```php
$nav_content = 'Nav Content';
echo Php2Html::nav ([
    'content' => $nav_content
]);
```

### meta
- content, name

```php
echo Php2Html::meta ([
    'name' => 'name.',
    'content' => 'Steve Ball.',
]);
```

```html
<meta name="name" content="Steve Ball">
```

### ol
As an ol tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.

```php
$ol_content = 'List Content';
echo Php2Html::ol ([
    'content' => $ol_content
]);
```

```html
<ol>...</ol><!-- ol -->
```

### option
- label, disabled, selected

```php
echo Php2Html::option ([
    'content' => 'Option Text',
    'value' => '1'
]);
```

```html
<option value="1">Option Text</option><!-- option -->
```

### optgroup
- label, disabled

As an optgroup tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.

```php
$optgroup_content = 'Group Content';
echo Php2Html::optgroup ([
    'content' => $optgroup_content,
    'label' => 'Categories'
]);
```

```html
<optgroup label="Categories">...</optgroup><!-- optgroup -->
```

### p

```php
echo Php2Html::p ([
    'content' => 'This is some text within a paragraph.'
]);
```

```html
<p>This is some text within a paragraph.</p><!-- p -->
```

### pre

```php
echo Php2Html::pre ([
    'content' => 'This is some preformatted text.'
]);
```

```html
<pre>This is some preformatted text.</pre><!-- pre -->
```

### progress
- max, value

```php
echo Php2Html::progress ([
    'max' => '100',
    'value' => '50'
]);
```

```html
<progress max="100" value="50"></progress><!-- progress -->
```

### radio
- checked, name, value, disabled

```php
echo Php2Html::radio ([
    'value' => '1',
    'name' => 'radio_button',
    'checked' => ''
]);
```

```html
<input type="radio" name="radio_button" value="1" checked><!-- radio -->
```

### s

```php
echo Php2Html::s ([
    'content' => 'Some inaccurate text',
]);
```

```html
<s>Some inaccurate text</s><!-- s -->
```

### samp

```php
echo Php2Html::samp ([
    'content' => 'Sample output',
]);
```

```html
<samp>Sample output</samp><!-- s -->
```

### section

As a section tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php

$section_content = 'Section Content';
echo Php2Html::section ([
    'content' => $section_content,
]);
```

```html
<section>...</section><!-- section -->
```

### select

As a select tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php

$options = 'Options';
echo Php2Html::select ([
    'content' => $options,
    'id' => 'select_me',
    'name' => 'dropdown',
    'multiple' => '',
    'required' => '',
]);
```

```html
<select id="select_me" name="dropdown" multiple required>...</select><!-- select #select_me  -->
```

### small

```php
echo Php2Html::small ([
    'content' => 'Sample output',
]);
```

```html
<small>Sample output</small><!-- small -->
```

### span

```php
echo Php2Html::span ([
    'content' => 'Text within a span',
]);
```

```html
<span>Text within a span</span><!-- span -->
```

### strong

```php
echo Php2Html::strong ([
    'content' => 'Important text',
]);
```

```html
<strong>Important text</strong><!-- strong -->
```

### sub

```php
echo Php2Html::sub ([
    'content' => 'Subscript text',
]);
```

```html
<sub>Subscript text</sub><!-- sub -->
```

### sup

```php
echo Php2Html::sup ([
    'content' => 'Superscript text',
]);
```

```html
<sup>Superscript text</sup><!-- sup -->
```

### table

As a table tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php

$table_content = 'Table Content';
echo Php2Html::select ([
    'content' => $table_content,
]);
```

```html
<table>...</table><!-- table  -->
```

### tbody

As a tbody tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php

$tbody_content = 'Tbody Content';
echo Php2Html::tbody ([
    'content' => $tbody_content,
]);
```

```html
<tbody>...</tbody><!-- tbody  -->
```

### textarea
- cols, required, form, minlength, maxlength, placeholder, rows

```php
echo Php2Html::textarea ([
    'content' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    'placeholder' => 'Enter your article details',
    'required' => '',
    'rows' => '4',
    'cols'=>'50',
    'minlength' =>'100',
    'maxlength' =>'1000',
]);
```

```html
<textarea rows="4" cols="50" placeholder="Enter your article details" minlength="100" maxlength="1000" required>
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
</textarea><!-- textarea  -->
```

### td

```php
echo Php2Html::td ([
    'content' => 'Cell Content',
    'colspan' => '2',
    'rowspan' => '3',
]);
```

```html
<td colspan="2" rowspan="3">Cell Content</td><!-- td -->
```

### tfoot

```php
echo Php2Html::tfoot ([
    'content' => 'Table footer content',
]);
```

```html
<tfoot>Table footer content</tfoot><!-- tfoot -->
```

### th

```php
echo Php2Html::th ([
    'content' => 'Header Cell Content',
    'colspan' => '5',
    'rowspan' => '3',
]);
```

```html
<th colspan="5" rowspan="3">Header Cell Content</th><!-- th -->
```

### thead

As a thead tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php

$thead_content = 'Thead Content';
echo Php2Html::thead ([
    'content' => $thead_content,
]);
```

```html
<thead>...</thead><!-- thead  -->
```

### time
- datetime

```php
echo Php2Html::time ([
    'datetime' => '2018-06-14 19:00',
]);
```

```html
<time datetime="2018-06-14 19:00"><!-- time -->
```

### tr

As a tr tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php

$tr_content = 'Tr Content';
echo Php2Html::tr ([
    'content' => $tr_content,
]);
```

```html
<tr>...</tr><!-- tr  -->
```

### u

```php


echo Php2Html::u ([
    'content' => 'Stylised text.',
]);
```

```html
<u>Stylised text.</u><!-- u  -->
```

### ul

As a ul tag will contain multiple other elements, it would be best to create these first as a variable and then pass them in as 'content'.
```php

$ul_content = 'Ul Content';
echo Php2Html::ul ([
    'content' => $ul_content,
]);
```

```html
<ul>...</ul><!-- ul  -->
```

## Examples
There are a few example files in the /examples folder. These mainly focus on some of the more complicated ways of using Php2Html and are fully commented to explain the process as it goes along.

All files use [Bootstrap 4](http://getbootstrap.com) and some use [FontAwesome 5](https://fontawesome.com) to give the examples some styling.

**table_builder.php** gives an example of the make_table() function and shows how to create a simple user table with links and criteria specific formatting.

**select_menu.php** shows how to build a form dropdown menu along with preselecting an option and disabling the select.

**nav_menu.php** gives an example of a complex set up by creating a navigation menu, including a home button using a FontAwesome icon and a dropdown menu, as well as using the 'aria' and 'data' attributes, which require arrays.

## About
## Concept
This whole project started off as one simple function to make building &lt;a	&gt; tags simpler in a project I was working on.

While creating a navbar which had static links, dropdowns and other &lt;a&gt; based triggers, I found that most of my code was a jumble of HTML and becoming difficult to navigate. So I built a function to simplify creating links and was very happy with the end result. But obviously the dropdowns needed &lt;div&gt;s, so I created those too. Then of course a &lt;ul	&gt; and &lt;li&gt; to hold the menu items in the dropdown.

Realising that my functions file was now 80% functions for making HTML tags, but with the fact that my code was now far more readable and navigable, I decided to make it a project in it's own right, as a class that can be used on any site that uses Php.

It may be overkill in places but there are certainly times, particularly with inputs of long lists, that it really makes light work of the task.

## Version History
#### 1.0.0
Initial Build










































































<?php
/**
 * PHP2HTML
 *
 * A set of Php functions to create HTML tags and other elements
 * within a script, rather than switching betweek Php and HTML.
 *
 * These are fully nestable and can contain all standard attributes
 * such as id's, classes and HTML5 data attributes.
 *
 * Full examples
 * https://github.com/MargateSteve/php2html
 *
 *
 * This file is divide into three sections
 *
 * Build functions
 * These are internal functions which are only used from within the tag functions
 *
 * Tag functions
 * These are the actual functions to be called from other files to generate the tags
 *
 * Other elements
 * Any functions to build elements that go beyound simple tags, such as tables.
 *
 * @license     http://opensource.org/licenses/MIT The MIT License (MIT)
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @link		https://github.com/MargateSteve/php2html
 * @version		1.0.0
 */
class Php2Html {

    /////////////////////
    // Build functions //
    /////////////////////

    /**
     * make_tag ()
     *
     * This is the core function that builds the tags.
     *
     * This is called from all of the individual tag functions with
     * the 'tag' automatically passed in the $array, along with a 'structure'
     * to denote which structure of tag we are building.
     *
     * A full list of attributes that can be used is shown in the comment at the
     * start of the tags section.
     *
     * NOTE: This is a protected function and can only be called via the tag
     * functions in this file.
     *
     * @param   array   $array  The type of tag and all content/attributes
     * @return  string          Complete HTML tag
     */
    protected static function make_tag ($array) {
        // Set the attributes that have been passed in.
        $attr = self::set_attributes ($array);

        /*
            We automatically add a Html comment to the end of every tag.
            This is generated as we go through the parameters but we start
            it off but creating a $comment variable containing the tag itself.
            By default, comments will be created using the tag type, id and class
            but you can add to this by adding 'comment' when calling the function.
            You can also stop a comment from showing by passing in
            'show_comment' => false on an individual call, or permanently for a
            tag by incliding it in the function (see td() and th()).
         */
         if((!isset($array['show_comment']) || $array['show_comment']))  {
            $attr['comment'] = $array['tag'].$attr['comment'];
         }

        /*
            As there are different types of tag structure that need building in
            different ways, we deal with each type individually.The tag Functions
            that call this pass a 'structure' in $array and this is used to show which type we are building.
            We start off with the most common tag structure which has both start and end tags.
         */
        if($array['structure'] == 'full') {
            $output = '<' . $array['tag'];
            $output .= $attr['attributes'];
            $output .= '>';
            $output .=  (isset($array['content'])) ? $array['content'] : '';
            $output .= '</' . $array['tag'] . '>';
        }  // structure = full

        /*
            Next check is to check for tags that only open
         */
        if($array['structure'] == 'single') {
            $output = '<' . $array['tag'];
            $output .= $attr['attributes'];
            // If we creating a meta tag, the content is actually used as an attribute
            $output .= ($array['tag'] == 'meta') ? ' content="'.$array['content'].'"' : '';

            /*
                Some single tags do not need to self-close so the first
                thing we will do is check to see if this is one of them.
             */
            if (
                $array['tag'] == 'hr' ||
                $array['tag'] == 'br' ||
                $array['tag'] == 'img' ||
                $array['tag'] == 'meta'
            ) {
                $output .= '>';
            } else {
                $output .= '/>';
            }
        } // structure = single

        // If we have anything set as a comment add it to the end of the tag
        if($attr['comment']) {
            $output .= self::htmlComment($attr['comment']);
        }

        // Return the entire tag
        return $output;
    } // make_tag ()

    /**
     * set_attributes ()
     *
     * Sets the attributes and their values for the tag.
     *
     * This is called via the make_tag function and the parameters
     * set in $array are passed in from the original tag function call.
     *
     * @param   array   $array   Attributes and their values
     */
    protected static function set_attributes ($array) {

        /*
            We use an array called $output to collect the data
            to return, so we start of by creating two empty elements,
            one to contain the attributes and one to contain the html
            comment to show at the end.
         */
        $output['attributes'] = '';
        $output['comment'] = '';

        /*
            If we are creating a button, if we want it to have a type other
            than 'button' ('submit' for example) we pass in a parameter
            called button_type, containing the required type.
            If none is set, we simply set the type as 'button'.
            Whichever we use, we add it as a type="" attribute.
         */
        if($array['tag'] == 'button') {
            $type = (isset($array['button_type'])) ? $array['button_type'] : 'button';
            $output['attributes'] .= ' type="' . $type . '"';

        }

        /*
            If 'id' or 'class' parameters have been set, we add them
            as their respective attributes.
            Both of these also make up the html comment so we them to
            that as well.
         */
        if(isset($array['id']) && $array['id']) {
            $output['attributes'] .= ' id="' . $array['id'] . '"';
            $output['comment'] .= ' #' . $array['id'];
        }

        if(isset($array['class']) && $array['class']) {
            $output['attributes'] .= ' class="' . $array['class'] . '"';
            $output['comment'] .= ' .' . $array['class'];
        }

        /*
            Next up, we set any standard attributes that have been requested.

            By standard we mean that they follow the attribute="" format. Any
            other versions of attributes will be added after these.

            We create an array of the standard attributes and loop through
            them, checking each to see if exists in the $array or attributes
            passed in. If it does, it creates the attribute and concatenates
            it to the existing $output['attributes'].
         */
         $standard_attributes = [
 			'action',
 			'alt',
 			'cite',
 			'cols',
 			'colspan',
            'datetime',
 			'for',
 			'form',
 			'height',
            'href',
 	    	'label',
 			'method',
 			'min',
 			'minlength',
 			'max',
 			'maxlength',
 			'name',
 			'placeholder',
 			'ref',
            'role',
 			'rows',
 			'rowspan',
 			'step',
 			'src',
 			'target',
 			'title',
 			'type',
 			'value',
 			'width',
         ];

         // Loop through the standard attributes
        foreach ($standard_attributes as $value) {
            // If the attribute exists in array, add it to the existing attributes
            if(isset($array[$value])) {



                $output['attributes'] .= ' ' . $value . '="' . $array[$value] . '"';
            }
        }


        /*
            Next up we add any HTML5 data attributes as well as any aria
            meta data that has been set. Both work the same way, in that
            each takes an array of key=>value pairings where the key is
            the part of the attribute name after the -, and value is the
            attribute value.

            For both, we simply loop through add add an attribute for each
            element each one contains.
         */
        if(isset($array['data_attr'])) {
            foreach ($array['data_attr'] as $key => $value) {
                $output['attributes'] .= ' data-' . $key . '="' . $value . '"';
            }
        }

        if(isset($array['aria'])) {
            foreach ($array['aria'] as $key => $value) {
                $output['attributes'] .= ' aria-' . $key . '="' . $value . '"';
            }
        }

        /*
            If there are any required attrubtes not yet avaiable in this file,
            you can just add them as a string and passing it in as 'controls'
         */
        if(isset($array['controls'])) {
            $output['attributes'] .= ' ' . $array['controls'];
        }

        // Add any inlie style that has been passed in.
        if(isset($array['style'])) {
            $output['attributes'] .= ' style="' . $array['style'].'"';
        }

        /*
            Finally we have a set of non-standard attributes that simply
            need to be added raw, without a value.

            We deal with these in exactly the same way as we did with the
            standard ones.
         */

        $non_standard_attributes = [
            'selected', 'required', 'multiple', 'checked', 'disabled'
        ];

        foreach ($non_standard_attributes as $value) {
            if(isset($array[$value])) {
                $output['attributes'] .= ' ' . $value;
            }
        }

        // Return the attributes as a string
        return $output;
    } // set_attributes

	/**
	 * Create a HTML comment
	 * @param  string 	$details 	The text to place in the comment
	 * @return string           	HTML comment
	 */
	protected static function htmlComment ($details) {
        return '<!-- ' . $details . ' -->';
    }


    ///////////////////
    // Tag functions //
    ///////////////////

    /**
     * These are the individually functions that would be called in the script.
     * The tag itself and the type of structure (used to know which type of tag to
     * build in make_tag()) are automatically passed in.
     * All other required parameters should be passed in when calling the tag function.
     *
     * The most used $params value is 'content'. This is what is actually displayed (the
     * content of a div ot the text of a link).
     *
     * Beyond that, there are a range of other values that can be used in $params. These
     * are mainly standard HTML attributes but there are a couple of variations on this.
     *
     * In this early version, these are not necessarily only usable within tags that they
     * apply to so, although nothing will break, using the wrong thing in the wrong
     * place will not comply with HTML standards.
     *
     * Each tag function explains which attributes it can
     * accept, but assume that all can utilise the global attributes of id, class, title,
     * data-xxx and ref.
     */

    // a           <a>
    // href, rel, type, target
    public static function a ($params) {
        //TODO: Add attributes download
        $params['tag'] = 'a';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // abbr        <abbr>
    public static function abbr ($params) {
        $params['tag'] = 'abbr';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // address       <address>
    public static function address ($params) {
        $params['tag'] = 'address';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // article       <article>
    public static function article ($params) {
        $params['tag'] = 'article';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // aside        <aside>
    public static function aside ($params) {
        $params['tag'] = 'aside';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // b            <b>
    public static function b ($params) {
        $params['tag'] = 'b';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // blockquote   <blockquote>
    // cite
    public static function blockquote ($params) {
		$params['tag'] = 'blockquote';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // br           <br>
    public static function br ($params) {
        $params['tag'] = 'br';
        $params['structure'] = 'single';
        $params['show_comment'] = false;
        return self::make_tag ($params);
    }

    // button       <button>
    // form, name, value, disabled, button_type
    public static function button ($params) {
        /*
            Notes
            'disabled' does not require a value ('disabled'=>'')

			'button_type' can be set when calling to fill
            the 'type=""' attribute with any of the following
            values - button, reset, submit.
            If not set it will default to 'type="button"'
         */
        $params['tag'] = 'button';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // checkbox     <checkbox>
    // checked, name, value, disabled
    public static function checkbox ($params) {
        /*
            Note
            'disabled' does not require a value ('disabled'=>'')
            'checked' does not require a value ('checked'=>'')
         */
         $params['tag'] = 'input';
         $params['type'] = 'checkbox';
         $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // cite         <cite>
    public static function cite ($params) {
        $params['tag'] = 'cite';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // code         <code>
    public static function code ($params) {
        $params['tag'] = 'code';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // data           <data>
    // value
    public static function data ($params) {
        $params['tag'] = 'data';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // dd           <dd>
    public static function dd ($params) {
        $params['tag'] = 'dd';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // div           <div>
    public static function div ($params) {
        $params['tag'] = 'div';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // dl           <dl>
    public static function dl ($params) {
        $params['tag'] = 'dl';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // dt           <dt>
    public static function dt ($params) {
        $params['tag'] = 'dt';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }

    // em           <em>
    public static function em ($params) {
        $params['tag'] = 'em';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // fieldset     <fieldset>
    // form, disabled
    public static function fieldset ($params) {
        /* Note
			disabled - no value required ('disabled'=>'')
         */
        $params['tag'] = 'fieldset';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }

    // figcaption   <figcaption>
    public static function figcaption ($params) {
        $params['tag'] = 'figcaption';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // figure       <figure>
    public static function figure ($params) {
        $params['tag'] = 'figure';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // footer       <footer>
    public static function footer ($params) {
        $params['tag'] = 'footer';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // form         <form>
    // action, method
    public static function form ($params) {

        $params['tag'] = 'form';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }


    // h            <h1> <h2> <h3> <h4>
    public static function h ($params) {
        /*
            The size of the 'h' is passed in as 'size' in the $params so
            initially we just set the tag to 'h'. We then append the size if exists, otherwsie default to 1 (<h1>).
         */
        $params['tag'] = 'h';
        $params['tag'] .= isset($params['size']) ? $params['size'] : '1';
        $params['structure'] = 'full';
        $params['show_comment'] = false;
        return self::make_tag ($params);
    }

    // header       <header>
    public static function header ($params) {
        $params['tag'] = 'header';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }

    // hr           <hr>
    public static function hr ($params) {
        $params['tag'] = 'hr';
        $params['structure'] = 'single';
        $params['show_comment'] = false;
        return self::make_tag ($params);
    }

    // i            <i>
    public static function i ($params) {
        $params['tag'] = 'i';
        $params['structure'] = 'full';
        $params['show_comment'] = false;
        return self::make_tag ($params);
    }

    // img          <img>
    // alt, height, src, width
    public static function img ($params) {
        $params['tag'] = 'img';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // input_date    <input type="date">
    // disabled, form, height, width, name, placeholder, required, size, value, step, min, max
    public static function input_date ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'date';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_email    <input type="email">
    // disabled, form, height, width, name, placeholder, required, size, value, multiple
    public static function input_email ($params) {
        /*  Note
            'disabled' does not require a value ('disabled'=>'')
            'required' does not require a value ('required'=>'')
            'multiple' does not require a value ('multiple'=>'')
         */
        $params['tag'] = 'input';
        $params['type'] = 'email';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_hidden <input type="input_hidden">
    // name, value
    public static function input_hidden ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'hidden';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_file    <input type="file">
    // multiple
    public static function input_file ($params) {
        /*  Note
            'multiple' does not require a value ('multiple'=>'')
         */
        $params['tag'] = 'input';
        $params['type'] = 'file';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_number    <input type="number">
    // disabled, form, height, width, name, placeholder, required, size, value, max, min, step
    public static function input_number ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'number';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_search    <input type="search">
    // disabled, form, height, width, name, placeholder, required, size, value, minlength, maxlength
    static function input_password ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'password';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_range    <input type="range">
    // disabled, form, height, width, name, placeholder, required, size, value, max, min, step
    public static function input_range ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'range';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_search    <input type="search">
    // disabled, form, height, width, name, placeholder, required, size, value, minlength, maxlength
    public static function input_search ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'search';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_tel    <input type="tel">
    // disabled, form, height, width, name, placeholder, required, size, value, minlength, maxlength
    public static function input_tel ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'tel';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_text   <input type="text">
    // disabled, form, height, width, name, placeholder, required, size, value
    public static function input_text ($params) {
        /*  Note
            'disabled' does not require a value ('disabled'=>'')
            'required' does not require a value ('required'=>'')
         */
        $params['tag'] = 'input';
        $params['type'] = 'text';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_time   <input type="time">
    // disabled, form, height, width, name, placeholder, required, size, value
    public static function input_time ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'time';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // input_url    <input type="url">
    // disabled, form, height, width, name, placeholder, required, size, value, minlength, maxlength
    public static function input_url ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'url';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // label         <label>
    // for, form
    public static function label  ($params) {
        $params['tag'] = 'label';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // legend        <legend>
    public static function legend ($params) {
        $params['tag'] = 'legend';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // li            <li>
    // value
    public static function li ($params) {
	    $params['tag'] = 'li';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // main          <main>
    public static function main ($params) {
        $params['tag'] = 'main';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // mark          <mark>
    public static function mark ($params) {
        $params['tag'] = 'mark';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // meta           <meta>
    // content, name
    public static function meta ($params) {
        $params['tag'] = 'meta';
        $params['structure'] = 'single';
        $params['show_comment'] = false;

        return self::make_tag ($params);
    }

    // nav           <nav>
    public static function nav ($params) {
        $params['tag'] = 'nav';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // ol            <ol>
    public static function ol ($params) {
        $params['tag'] = 'ol';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }


    // option        <option>
    // label, disabled, selected
    public static function option  ($params) {
        /*
            To define which option in a select list is
            selected, pass in 'is_selected' as a parameter.
         */
        $params['tag'] = 'option';
        $params['structure'] = 'full';
		if(isset($params['is_selected']) && $params['is_selected']) {$params['selected'] = '';}
        return self::make_tag ($params);
    }

    // optgroup      <optgroup>
    // label, disabled
    public static function optgroup  ($params) {
        $params['tag'] = 'optgroup';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // p             <p>
    public static function p ($params) {
        $params['tag'] = 'p';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // pre          <pre>
    public static function pre ($params) {
        $params['tag'] = 'pre';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // progress     <progress>
    // max, value
    public static function progress  ($params) {
        $params['tag'] = 'progress';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // progress     <progress>
    // checked, name, value, disabled
	public static function radio ($params) {
        /*
            Note
            'disabled' does not require a value ('disabled'=>'')
            'checked' does not require a value ('checked'=>'')
         */
        $params['tag'] = 'input';
        $params['type'] = 'radio';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    // s            <s>
    public static function s ($params) {
        $params['tag'] = 's';
        $params['structure'] = 'full';

        return self::make_tag ($params);
    }

    // samp         <samp>
    public static function samp ($params) {
        $params['tag'] = 'samp';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // section      <section>
    public static function section ($params) {
        $params['tag'] = 'section';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // select       <select>
    // required, form, multiple, size, disabled
    public static function select  ($params) {
        /*
			To populate a select menu, pass the details for the options in as a key/value array in 'content'
		 */
        $params['tag'] = 'select';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // small        <small>
    public static function small ($params) {
        $params['tag'] = 'small';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // span         <span>
    public static function span ($params) {
        $params['tag'] = 'span';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // strong       <strong>
    public static function strong ($params) {
        $params['tag'] = 'strong';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // sub          <sub>
    public static function sub ($params) {
        $params['tag'] = 'sub';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // sup          <sup>
    public static function sup ($params) {
        $params['tag'] = 'sup';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // table       <table>
    public static function table   ($params) {
        $params['tag'] = 'table';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // tbody        <tbody>
	public static function tbody   ($params) {
		$params['tag'] = 'tbody';
		$params['structure'] = 'full';
		return self::make_tag ($params);
	}

    // textarea    <textarea>
    // cols, required, form, minlength, maxlength, placeholder, rows
    public static function textarea   ($params) {
        $params['tag'] = 'textarea';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // td           <td>
    // colspan, rowspan
	public static function td   ($params) {
		$params['tag'] = 'td';
		$params['structure'] = 'full';
        $params['show_comment'] = false;
		return self::make_tag ($params);
	}

    // tfoot         <tfoot>
	public static function tfoot   ($params) {
		$params['tag'] = 'tfoot';
		$params['structure'] = 'full';

		return self::make_tag ($params);
	}

    // th           <th>
    // colspan, rowspan
	public static function th   ($params) {
		$params['tag'] = 'th';
		$params['structure'] = 'full';
        $params['show_comment'] = false;

		return self::make_tag ($params);
	}

    // th           <thead>
	public static function thead   ($params) {
		$params['tag'] = 'thead';
		$params['structure'] = 'full';
		return self::make_tag ($params);
	}

    // time         <time>
    // datetime
    public static function time ($params) {
        $params['tag'] = 'time';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }

    // tr           <tr>
	public static function tr   ($params) {
		$params['tag'] = 'tr';
		$params['structure'] = 'full';
        $params['comment'] = false;
		return self::make_tag ($params);
	}

    // u            <u>
    public static function u ($params) {
        $params['tag'] = 'u';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }
    // ul           <ul>
    public static function ul ($params) {
        $params['tag'] = 'ul';
        $params['structure'] = 'full';
        return self::make_tag ($params);
    }



    public static function input_button ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'button';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    public static function input_submit ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'submit';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }

    public static function input_reset ($params) {
        $params['tag'] = 'input';
        $params['type'] = 'reset';
        $params['structure'] = 'single';
        return self::make_tag ($params);
    }







    ////////////////////
    // Other elements //
    ////////////////////

	/**
	 * Create a HTML table
	 *
	 * Takes an array and relevant parameters and creates a
	 * full HTML table.
	 *
	 * There are three different parameters that can be passed
	 * in, but each of these are an array containing other
	 * parameters.
	 *
	 * 'data' - contains the records to be placed in the table rows.
	 *
	 * 'columns' - contains a seperate array for each column to be
	 * shown, as well as any classes to be applied to either the th,
	 * td or both.
	 * The key for each column will the database column name. The other
	 * parameters that can be used are
	 * 		'alias' - if the table has a header, this will be the name
	 * 		shown in the th.
	 * 		'td_class' - a class to be added to the columns td.
	 * 		'th_class' - a class to be added to the columns th.
	 * 		'global_class' - a class to be added to both the th and td.
	 *
	 * 'settings' - contains anything relating to the table itself,
	 * such as whether to show a header and any table styles. The
	 * parameters that can be used are
	 * 		'show_header' - true/false to set whether to show the thead.
	 * 		'border' - adds a border to the table with a specified width.
	 * 		'class' - adds the specified class(es) to the whole table.
	 *
	 * You can also add a class to a table row by adding a 'tr_class'
	 * element to the relevant record in the array.
	 *
	 * @param  array 	$params 	Content and settings
	 * @return string         		HTML table
	 */
    public static function make_table ($params) {
		// Create empty variables to build the relevant sections
		$table_head = '';
        $body_rows = '';

		// Loop through the record data
        foreach ($params['data'] as $rows => $row) {
			/*
				On each loop '$row' will contain the data for each of
				the columns. We start of by adding an empty 'content'
				element to it as will be apply the columns to that
				with any formatting required.

				We build the head and body in the same loop so we
				als create an empty variabkle to hold the data for the head.
			 */
			$row['content'] = '';
			$thead = '';

			/*
				We now loop through the columns array that was passed in.

				We build the th's and td's here so we begin by creating an
				array for each of them including empty 'content' and 'class'
				elements. We then add to each of them as we go through.
			 */
            foreach ($params['columns'] as $columns => $column) {
                $td_params = ['content'=>'', 'class'=>''];
                $th_params = ['content'=>'','class'=>''];

				// Add any global classes to both th and td
                if (isset($column['global_class'])) {
                    $th_params['class'] = $column['global_class'];
                    $td_params['class'] = $column['global_class'];
                } // global class

				// Add any td classes to the td
                if (isset($column['td_class'])) {
                    $td_params['class'] = $td_params['class'] . ' ' . $column['td_class'];
                } // td class

                if (isset($column['td_style'])) {
                    $td_params['style'] = $column['td_style'];
                }

				/*
					If we require a table head, we now create the content for the th and
					add any required classes
				 */
                if(isset($params['settings']['show_header']) && $params['settings']['show_header']) {
					/*
						If an alias has been specified, use that as the content for the th,
						otherwise use the column name.
					 */
					$th_params['content'] = (isset($column['alias'])) ? $column['alias'] : $columns;

					// Add any th classes to the th
					if (isset($column['th_class'])) {
                        $th_params['class'] = $th_params['class'] . ' ' . $column['th_class'];
                    } // th_class

					/*
						Pass the th parameters into the th function and add the completed th
						to $table_head
					 */
                    $table_head .= self::th (
                        $th_params
                    );

                } // head

				/*
					At this point, $row[$columns] contains the content for the td, so we simply
					'content' element of $td_params.
				 */
                $td_params['content'] = $row[$columns];

				/*
					Finally pass the $td_params into the td function and add it to the 'content'
					element for $row.
				 */
                $row['content'] .= self::td (
                    $td_params
                );

            } // foreach $params['columns']

			// Remove the 'show_header' element to prevent conflicts
			unset($params['settings']['show_header']);

			// If there is a tr class set, add it to the row class
            if(isset($row['tr_class']))
            {
                $row['class'] = $row['tr_class'];
            }

			// Pass the row into the tr function and add it to $body_rows
            $body_rows .= self::tr (
                $row
            );
        } // foreach $params['data']

		/*
		 	If $table_head is not empty, add the content it contains to the
			existig $thead variable by placing it in a tr via the tr function
			and that into the thead function
		 */
        if ($table_head) {
            $thead .= self::thead ([
                'content'=> self::tr ([
                    'content'=> $table_head,
                ])
            ]);
        } // if $table_head

		/*
			Finally create the table body as $tbody by passing $body_rows
			 into the tbody function
		 */
        $tbody = self::tbody ([
			'content'=> $body_rows,
		]);// $tbody

		/*
			As eveything else we need for the table, such as the class is stored
			in $params['settings'], we add our content as a new element in that
			including whatever is stored in $thead and $tbody
		 */
        $params['settings']['content'] = $thead.$tbody;

		// Pass $params['settings'] into the table function and return it
        return self::table ($params['settings']);
    } // make_table ()


}


















































<?php

/**
 * PHP2BS
 *
 * A set of Php functions to create Bootstrap 4 components other elements
 * as re-usable functions. This is built as an extension to Php2Html
 * (https://github.com/MargateSteve/php2html) and follows the same ethic of
 * replacing the need to break in and out of Php for Html.
 *
 * Extends Php2Html to incorporate the quick tag building functions
 *
 * Asume that all can have a parameter of content, id, class etc unless stated
 *
 * most take parameters that are passed in and pass them straight on but there ares some exceptions.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 *
 *
 * TODO: Block Button - logout form
 */
class Php2Bs extends Php2Html {

    /////////////////////
    // layout          //
    /////////////////////

    /**
     * Column
     * .col-xxx
     *
     * @param  array    $params     Settings
     * @return string   <div class="col-xxx">
     */
    public static function bs_column($params) {
        $params['class'] = (isset($params['class'])) ?  $params['class'] : 'col';
        $content = Php2Html::div($params);
        return $content;
    } // bs_column()

    /**
     * Container
     * .container
     *
     * @param  array    $params     Settings
     * @return string   <div class="container">
     */
    public static function bs_container($params) {
        $params['class'] = (isset($params['class'])) ? 'container ' . $params['class'] . ' ' : 'container';
        return Php2Html::div ($params);
    } // bs_container ()

    /**
     * Fluid Container
     * .container-fluid
     *
     * @param  array    $params     Settings
     * @return string   <div class="container-fluid">
     */
    public static function bs_container_fluid($params) {
        $params['class'] = (isset($params['class'])) ? 'container-fluid ' . $params['class'] . ' ' : 'container-fluid';
        return Php2Html::div ($params);
    } // bs_container_fluid ()

    /**
	 * Row
	 * .row
	 *
	 * @param  array           $params     Settings
	 * @return string          <div class="row">
	 */
    public static function bs_row($params) {
        $params['class'] = (isset($params['class'])) ? 'row ' . $params['class'] : 'row';
        return Php2Html::div($params);
    } // bs_row ()


    /////////////////////
    // Content         //
    /////////////////////
    /**
     * Table
     * .table
     *
     * This utilises Php2Html::make_table() to create a fully fledged table, but
     * with the Bootstrap .table class. Pass the parameters in as per the
     * instructions for that.
     *
     * @param  array    $params     Settings
     * @return string   <table class="table">
     */
    public static function bs_table($params) {
        $params['settings']['class'] = (isset($params['settings']['class'])) ?  'table ' . $params['settings']['class'] : 'table';
        $content = Php2Html::make_table($params);
        return $content;
    } // bs_table()

    /**
     * Figure
     * .figure
     *
     * @param  array    $params     Settings
     * @return string   <Figure class="figure">
     */
    public static function bs_figure($params) {
        $params['class'] = (isset($params['class'])) ? 'figure ' . $params['class'] . ' ' : 'figure';
        $content = Php2Html::figure($params);
        return $content;
    } // bs_figure ()

    /**
     * Figure Image
     * .figure-img
     *
     * @param  array    $params     Settings
     * @return string   <img class="figure-img">
     */
    public static function bs_figure_img($params) {
        $params['class'] = (isset($params['class'])) ? 'figure-img ' . $params['class'] . ' ' : 'figure-img';
        $content = Php2Html::img($params);
        return $content;
    } // bs_figure_img ()

    /**
     * Figure Caption
     * .figure-caption
     *
     * @param  array    $params     Settings
     * @return string   <figcaption  class="figure-caption">
     */
    public static function bs_figure_caption($params) {
        $params['class'] = (isset($params['class'])) ? 'figure-caption ' . $params['class'] . ' ' : 'figure-caption';
        $content = Php2Html::figcaption($params);
        return $content;
    } // bs_figure_caption ()

    ////////////////////
    // Components     //
    ////////////////////

    /**
     * Alert
     * .alert
     *
     * @param  array    $params     Settings
     * @return string   <figcaption  class="figure-caption">
     */
    public static function bs_alert($params) {
        $core_class = 'alert alert-';
        $core_class .= (isset($params['color'])) ? $params['color'].' ': 'info ';

        $params['class'] = (!isset($params['class'])) ? $core_class : $core_class.$params['class'];


        if($params['heading']) {
            $params['content'] = Php2Html::h([
                'size' => '4',
                'class' => 'alert-heading',
                'content' => $params['heading']
            ]).$params['content'];
        }


        if(isset($params['dismissible']) && $params['dismissible']) {
            $params['class'] .= ' alert-dismissible';
            $params['content'] .= '	<button type="button" class="close" data-dismiss="alert" aria-label="Close">';
            $params['content'] .= '		<span aria-hidden="true">&times;</span>';
            $params['content'] .= '	</button>';
        }

        $params['role'] = 'alert';

        return  Php2Html::div ($params);
    } // bs_alert()

    /**
     * Badge
     * .badge badge-xxx
     *
     * @param  array    $params     Settings
     * @return string   <span  class="badge badge-xxx">
     */
    public static function bs_badge ($params) {
        $core_class = 'badge badge-';
        $core_class .= (isset($params['color'])) ? $params['color'].' ': 'info ';

        $params['class'] = (!isset($params['class'])) ? $core_class : $core_class.$params['class'];

        return  Php2Html::span ($params);
    } // bs_badge ()

    /**
     * Pill Badge
     * .badge badge-pill badge-xxx
     *
     * @param  array    $params     Settings
     * @return string   <span  class="badge badge-pill badge-xxx">
     */
    public static function bs_badge_pill ($params) {
        $core_class = 'badge badge-pill badge-';
        $core_class .= (isset($params['color'])) ? $params['color'].' ': 'info ';

        $params['class'] = (!isset($params['class'])) ? $core_class : $core_class.$params['class'];

        return  Php2Html::span ($params);
    } // bs_badge_pill ()

    /**
     * Badge link
     * .badge badge-xxx
     *
     * @param  array    $params     Settings
     * @return string   <a  class="badge badge-xxx">
     */
    public static function bs_badge_link ($params) {
        $core_class = 'badge badge-';
        $core_class .= (isset($params['color'])) ? $params['color'].' ': 'info ';

        $params['class'] = (!isset($params['class'])) ? $core_class : $core_class.$params['class'];

        return  Php2Html::a ($params);
    } // bs_badge_link ()

    /**
     * Pill Badge Link
     * .badge badge-pill badge-xxx
     *
     * @param  array    $params     Settings
     * @return string   <a  class="badge badge-pill badge-xxx">
     */
    public static function bs_badge_pill_link ($params) {
        $core_class = 'badge badge-pill badge-';
        $core_class .= (isset($params['color'])) ? $params['color'].' ': 'info ';

        $params['class'] = (!isset($params['class'])) ? $core_class : $core_class.$params['class'];

        return  Php2Html::a ($params);
    } // bs_badge_pill_link ()

    /**
     * Breadcrumbs
     * .breadcrumb / .breadcrumb-item
     *
     * @param  array    $params     Settings
     * @return string   <nav aria-label="breadcrumb"><ol class="breadcrumb"><li class="breadcrumb-item">
     */
    public static function bs_breadcrumbs ($params) {
        $items = '';
        foreach ($params['items'] as $key => $value) {
            if($value) {
                $item['content'] = Php2Html::a ([
                    'content' => $key,
                    'href' => $value
                ]);
                $item['class'] = 'breadcrumb-item';
            } else {
                $item['content'] = $key;
                $item['class'] = 'breadcrumb-item active';
                $item['aria']['current'] = 'page' ;
            }
            $items .= Php2Html::li ($item);
        }

        return Php2Html::nav ([
            'class' => (isset($params['nav_class'])) ? ' '.$params['nav_class'] : '',
            'aria' => [
                'label' => 'breadcrumb'
            ],
            'content' => Php2Html::ol ([
                'class' => (isset($params['ol_class'])) ? $params['ol_class'] . ' breadcrumb': 'breadcrumb',
                'content' => $items

            ])
        ]);
    } // bs_breadcrumbs ()

    /**
     * Button
     *
     * Creates a default Bootstrap button and allows all of the parameters that
     * can be set for Php2Html::button ().
     *
     * There are two other parameters that can be set
     * 'size' will add the specified btn-{size} class.
     * 'color' will add the specified btn-{color} class.
     *
     * For example
     *
     * Php2Bs::bs_button ([
     *     'color' => 'primary',
     *     'size' => 'sm',
     *     'content' => 'Login',
     * ]);
     * would create
     * <button class="btn btn-primary btn-sm">
     *
     * @param  array    $params     Settings
     * @return string   <button class="btn">
     */
    public static function bs_button($params) {
        $class = 'btn';

        if(isset($params['color'])) {
            $class .= ' btn-'.$params['color'];
        }

        if(isset($params['size'])) {
            $class .= ' btn-'.$params['size'];
        }

        $class .= (isset($params['class'])) ? ' '.$params['class']:'';

        $params['class'] = $class;

        return Php2Html::button (
           $params
        );
    } // bs_button ()


    public static function bs_button_link($params) {
        $class = 'btn';

        if(isset($params['color'])) {
            $class .= ' btn-'.$params['color'];
        }

        if(isset($params['size'])) {
            $class .= ' btn-'.$params['size'];
        }

        $class .= (isset($params['class'])) ? ' '.$params['class']:'';

        $params['class'] = $class;

        return Php2Html::a (
           $params
        );
    } // bs_button ()

    public static function bs_button_input_button($params) {
        $class = 'btn';

        if(isset($params['color'])) {
            $class .= ' btn-'.$params['color'];
        }

        if(isset($params['size'])) {
            $class .= ' btn-'.$params['size'];
        }

        $class .= (isset($params['class'])) ? ' '.$params['class']:'';

        $params['class'] = $class;

        return Php2Html::input_button (
           $params
        );
    } // bs_button ()

    public static function bs_button_input_submit($params) {
        $class = 'btn';

        if(isset($params['color'])) {
            $class .= ' btn-'.$params['color'];
        }

        if(isset($params['size'])) {
            $class .= ' btn-'.$params['size'];
        }

        $class .= (isset($params['class'])) ? ' '.$params['class']:'';

        $params['class'] = $class;

        return Php2Html::input_submit (
           $params
        );
    } // bs_button ()

    public static function bs_button_input_reset($params) {
        $class = 'btn';

        if(isset($params['color'])) {
            $class .= ' btn-'.$params['color'];
        }

        if(isset($params['size'])) {
            $class .= ' btn-'.$params['size'];
        }

        $class .= (isset($params['class'])) ? ' '.$params['class']:'';

        $params['class'] = $class;

        return Php2Html::input_reset (
           $params
        );
    } // bs_button ()

    /**
     * Collapse link
     *
     * A link that has a linked element which it will show and hide when clicked
     *
     * @param  array    $params     Settings
     * @return string   <a data-toggle="collapse" data-target="xxx">
     */
    public static function bs_collapse_link ($params) {

        $params['data_attr'] = [
            'toggle' => 'collapse',
            'target' => '#'.$params['target'],
        ];

        $params['aria'] = [
            'controls' => $params['target'],
            'expanded' => 'false',
            'label' => $params['label'],
        ];

        $params['content'] = Php2Html::span ([
                'content' => '',
                'class' => 'navbar-toggler-icon'
        ]);

        unset($params['target']);
        unset($params['label']);

        return Php2Html::a (
           $params
        );
    } // bs_collapse_link ()


    /**
     * Navbar dropdown menu Link
     *
     * A link to be shown in a dropdown menu on the navbar. These will be passed
     * into the dropdown (bs_nav_dropdown) as 'menu'
     *
     * Available parameters
     * 'href'
     * The link to go to, generally as a relative path from the site root (/Admin/Users).
     *
     * @param  array    $params     Settings
     * @return string   <a class="dropdown-item">
     */
    public static function bs_dropdown_item($params) {

        $params['class'] = (isset($params['class'])) ? 'dropdown-item ' . $params['class'] : 'dropdown-item';

        return Php2Html::a (
            $params
        );
    } // bs_dropdown_item

    /**
     * Checkbox with label
     *
     * Shows a Bootstrap checkbox and label combination. We build it all in
     * one go so pass the settings in as an array of three different arrays.
     *
     * 'label' refers the label of the checkbox. By default, this will already have 'input-group' as a class.
     *
     * 'prepend' sets the element prepended to the start of the input. This is
     * controlled by the bs_input_group_prepend () function.
     *
     * 'input' relates to anything to do with the input itself and is controlled
     * by the various bs_input_xxx() functions.
     *
     * Available parameters
     * 'href'
     * The link to go to, generally as a relative path from the site root (/Admin/Users).
     *
     * @param  array    $params     Settings
     * @return string   <div class="bs_form_check">
     */
    public static function bs_form_check($params) {

        //nicePrint_r($params, 'bs_form_check');
        $params['class'] = (isset($params['outer']['class'])) ? 'form-check ' . $params['outer']['class'] : 'form-check';

        $params['content'] = self::bs_form_check_input ($params['checkbox'])
        .self::bs_form_check_label ($params['label']);

        unset($params['checkbox']);
        unset($params['label']);

        return Php2Html::div (
            $params
        );
    }

    /**
     * Checkbox
     *
     * Shows a Bootstrap checkbox.
     *
     * Accepts all standard parameters but also sets a default class of
     * 'form-check-input' by default.
     *
     * @param  array    $params     Settings
     * @return string   <input type="checkbox" class="form-check-input">
     */
    public static function bs_form_check_input($params) {
        //nicePrint_r($params, 'bs_form_check_input');

        $params['class'] = (isset($params['class'])) ? 'form-check-input ' . $params['class'] : 'form-check-input';

        return Php2Html::checkbox (
            $params
        );
    } // bs_form_check_input ()

    /**
     * Checkbox label
     *
     * Shows a Bootstrap checkbox label.
     *
     * Accepts all standard parameters but also sets a default class of
     * 'form-check-label' by default.
     *
     * @param  array    $params     Settings
     * @return string   <div class="form-check-label">
     */
    public static function bs_form_check_label($params) {
        //nicePrint_r($params, 'bs_form_check_label');
        $params['class'] = (isset($params['class'])) ? 'form-check-label ' . $params['class'] : 'form-check-label';

        return Php2Html::div (
            $params
        );
    } // bs_form_check_label ()

    /**
     * Input group
     *
     * Single function to create an input with an element prepended to the start
     * of it.
     *
     * As this creates the everything in one go, we pass the settings in as an
     * array of three different arrays.
     *
     * 'group' refers the entire object so would generally only have classes
     * passed in. By default, this will already have 'input-group' as a class.
     *
     * 'prepend' sets the element prepended to the start of the input. This is
     * controlled by the bs_input_group_prepend () function.
     *
     * 'input' relates to anything to do with the input itself and is controlled
     * by the various bs_input_xxx() functions.
     *
     * @param  array    $params     Settings
     * @return string   <div class="input-group"><div class="input-group-prepend"><span class="input-group-text">
     */
    public static function bs_input_group($params) {
        $params['group']['class'] = (isset($params['group']['class'])) ? 'input-group ' . $params['group']['class'] : 'input-group';

        $params['group']['content'] = self::bs_input_group_prepend (
            $params['prepend']
        );

        $input_type = 'bs_input_'.$params['input']['type'];
        unset($params['input']['type']);

        $params['group']['content'] .= self::$input_type (
            $params['input']
        );

        return Php2Html::div (
            $params['group']
        );
    } // bs_input_group

    /**
     * Input group prepend
     *
     * Creates an element to prepended to the start of an input.
     *
     * A prepend consists of two different parts. Externally it is a div, but,
     * whatever it needs to display is placed inside a span. With that in mind,
     * we pass the settings in as an array of three different arrays.
     *
     * 'class' refers to classes that effect the entire object.
     *
     * 'outer' relates to the div that wraps it all. This will already have a
     * default class of 'input-group-prepend'.
     *
     * 'inner' relates to the span that will actually contain the text or symbol
     * to display. This will already have a default class of 'input-group-text'.
     *
     * @param  array    $params     Settings
     * @return string   <div class="input-group-prepend"><span class="input-group-text">
     */
    public static function bs_input_group_prepend($params) {
        $params['outer']['class'] = (isset($params['class'])) ? 'input-group-prepend ' . $params['class'] : 'input-group-prepend';

        $params['inner']['class'] = 'input-group-text';
        $params['inner']['content'] = $params['content'];

        if(isset($params['id'])) {
            $params['inner']['id'] = $params['id'];
        }

        $params['outer']['content'] = Php2Html::span (
            $params['inner']
        );


        return Php2Html::div (
            $params['outer']
        );
    } // bs_input_group_prepend

    /**
     * Collapsing navbar section
     *
     * Accepts all standard parameters but also sets a default class of 'collapse navbar-collapse'.
     *
     * @param  array    $params     Settings
     * @return string   <div class="collapse navbar-collapse">
     */
    public static function bs_navbar_collapse ($params) {
        $params['class'] = (isset($params['class'])) ? 'collapse navbar-collapse ' . $params['class'] : 'collapse navbar-collapse ';
        return Php2Html::div (
            $params
        );
    } // bs_navbar_collapse

    /**
     * List Group
     *
     * Creates a list group from an array of links.
     *
     * Accepts all standard parameters but also sets a default class of 'list-group'
     * to the parent <ul> and creates the list items using bs_list_group_item (). If
     * the array has a 'href' parameter, the items will become <a>'s, otherwise
     * they will be <li>'s.
     *
     * The array of items should be passed in as content.
     *
     * @param  array    $params     Settings
     * @return string   <ul class="list-group"><li class="list-group-item">
     * @return string   <ul class="list-group"><a class="list-group-item">
     */
    public static function bs_list_group ($params) {

        $params['class'] = (isset($params['class'])) ? 'list-group ' . $params['class'] : 'list-group';

        $list_items = '';

        foreach ($params['content'] as $items => $item) {

            if(isset($item['href'])) {
                $item['tag'] = 'a';
                $item['class'] = (isset($item['link_class'])) ? $item['link_class'] : '';
                $item['content'] = $items;
            } else {
                $item['content'] = $items;
            }

            $list_items .= self::bs_list_group_item (
                $item
            );
        }

        $params['content'] = $list_items;

        return Php2Html::ul (
            $params
        );
    } // bs_list_group ()

    /**
     * List Group Item
     *
     * Creates a list group item as either an <a> or a <li>. To set an <a> pass
     * in a 'tag' parameter of 'a'.
     *
     * Accepts all standard parameters but also sets a default class of
     * 'list-group-item' by default.
     *
     *
     * @param  array    $params     Settings
     * @return string   <li class="list-group-item">
     * @return string   <a class="list-group-item">
     */
    public static function bs_list_group_item ($params) {
        $params['class'] = (isset($params['class'])) ? 'list-group-item ' . $params['class'] : 'list-group-item';

        if(isset($params['tag'])) {

            if($params['tag'] == 'a') {
                $params['class'] .= ' list-group-item-action';
            }

            return Php2Html::$params['tag'] (
                $params
            );
        } else {
            return Php2Html::li (
                $params
            );
        }
    } // bs_list_group_item ()

    /**
     * Navbar
     *
     * Creates the outer most parts of a navbar ready to place the navigation in.
     *
     * Accepts all standard parameters but also sets a default class of 'navbar'.
     *
     * @param  array    $params     Settings
     * @return string   <nav class="navbar">
     */
    public static function bs_navbar($params) {
        $params['class'] = (isset($params['class'])) ? 'navbar ' . $params['class'] : 'navbar ';
        return Php2Html::nav (
            $params
        );
    } // bs_navbar

    /**
     * Navbar section
     *
     * Accepts all standard parameters but also sets a default class of 'navbar-nav'.
     *
     * @param  array    $params     Settings
     * @return string   <ul class="navbar-nav">
     */
    public static function bs_navbar_nav ($params) {
        $params['class'] = (isset($params['class'])) ? 'navbar-nav ' . $params['class'] : 'navbar-nav ';
        return Php2Html::ul (
            $params
        );
    } // bs_navbar_nav

    /**
     * Navbar toggle button
     *
     * Available parameters
     * 'button_class'
     * Adds additional classes to the button itself.
     * 'navbar-toggler' will already be added by default.
     *
     * 'target'
     * This will be the id of the element that the toggle button is showing and
     * hiding so populates the 'data-target' parameter. This will also populate
     * the 'aria-controls' parameter.
     *
     * 'label'
     * Sets the content of the 'aria-label' parameter.
     *
     * @param  array    $params     Settings
     * @return string   <button type="button" class="navbar-toggler">
     */
    public static function bs_navbar_toggler ($params) {

        $params['class'] = (isset($params['button_class'])) ? 'navbar-toggler '.$params['button_class']:'navbar-toggler';

        $params['data_attr'] = [
            'toggle' => 'collapse',
            'target' => '#'.$params['target'],
        ];

        $params['aria'] = [
            'controls' => $params['target'],
            'expanded' => 'false',
            'label' => $params['label'],
        ];

        $params['content'] = Php2Html::span ([
                'content' => '',
                'class' => 'navbar-toggler-icon'
        ]);

        unset($params['target']);
        unset($params['label']);

        return Php2Html::button (
           $params
        );
    } // bs_navbar_toggler ()

    /**
     * Full navbar dropdown menu
     *
     * As this creates the button, dropdown and all links in one go, we pass the
     * settings in as an array of three different arrays.
     *
     * 'li' refers to the trigger button shown on the menu and should only have
     * non-displaying parameters. The content itself will be the 'a' set in the
     * next part.
     *
     * 'a' controls the visible menu link itself and can take most standard
     * parameters. It also needs a 'id' parameter that will link the button and
     * menu.
     *
     * 'menu' simply contains the links to go into the sub menu as 'content'. You
     * can also add the usual parameters.
     *
     * @param  array    $params     Settings
     * @return string   <li class="nav-item dropdown"><a><div class="dropdown-menu>{links}
     */
    public static function bs_nav_dropdown($params) {

        $params['li']['class'] = (isset($params['li']['class'])) ? 'nav-item dropdown ' . $params['li']['class'] : 'nav-item dropdown';

        $params['a']['class'] = (isset($params['a']['class'])) ? 'nav-link dropdown-toggle ' . $params['a']['class'] : 'nav-link dropdown-toggle';

        $params['a']['link'] = '#';

        $params['a']['aria']['expanded'] = 'false';
        $params['a']['aria']['haspopup'] = 'true';
        $params['a']['data_attr']['toggle'] = 'dropdown';
        $params['menu']['aria']['labelledby'] = $params['a']['id'];

        $params['li']['content'] = Php2Html::a (
                $params['a']
                ).
                self::bs_dropdown_menu (
                    $params['menu']
            );
        return Php2Html::li (
            $params['li']
        );
    } // bs_nav_dropdown ()

    /**
     * Navbar Item
     *
     * A <li> to sit within a nav bar, generally containing a link.
     *
     * @param  array    $params     Settings
     * @return string   <li class="nav-item">
     */
    public static function bs_nav_item ($params) {
        $params['class'] = (isset($params['class'])) ? 'nav-item ' . $params['class'] : 'nav-item';
        return Php2Html::li (
            $params
        );
    } // bs_nav_item()

    /**
     * Navbar Link
     *
     * A link to be shown on the navbar, generally inside a nav item (bs_nav_item).
     *
     * Available parameters
     * 'href'
     * The link to go to, generally as a relative path from the site root (/Admin/Users).
     *
     * @param  array    $params     Settings
     * @return string   <a class="nav-link">
     */
    public static function bs_nav_link ($params) {
        $params['class'] = (isset($params['class'])) ? 'nav-link ' . $params['class'] : 'nav-link';
        return Php2Html::a (
            $params
        );
    } // bs_nav_link ()


    /**
     * Nav Tabs
     *
     * Creates a set of navs with separate content showing each time one is clicked.
     *
     * Accepts all standard parameters but also sets a default class of 'list-group'
     * to the parent <ul> and creates the list items using bs_list_group_item (). If
     * the array has a 'href' parameter, the items will become <a>'s, otherwise
     * they will be <li>'s.
     *
     * The array of items should be passed in as content.
     *
     * @param  array    $params     Settings
     * @return string   xxx
     * @return string   xxx
     * @link https://getbootstrap.com/docs/4.0/components/navs/#javascript-behavior
     */

    public static function bs_nav_tabs ($params) {

        // Details of the tab row wrapper
        if(isset($params['tab_row']['id'])) {
            $tab_row['id'] = $params['tab_row']['id'];
        }

        $tab_row['class'] = (isset($params['tab_row']['class'])) ? 'nav-tabs ' . $params['tab_row']['class'] : 'nav-tabs ';

        $tab_row['role'] = 'tablist';

        $tab_row['content'] ='';


        // Details of the content row wrapper
        if(isset($params['content_row']['id'])) {
            $content_row['id'] = $params['content_row']['id'];
        }

        $content_row['class'] = (isset($params['content_row']['class'])) ? $params['content_row']['class'] : ' ';

        $content_row['content'] ='';


        $i=0;
        foreach ($params['tabs'] as $key => $value) {

            // Tab row content
            $tab_params ['content'] = $key;
            $tab_params ['id'] = str_replace(" ", "-", (strtolower($key))).'-tab';
            $tab_params ['href'] = '#'.str_replace(" ", "-", (strtolower($key))).'-content';
            $tab_params ['role'] = 'tab';
            $tab_params ['data_attr']['toggle'] = 'tab';
            $tab_params ['aria']['controls'] = str_replace(" ", "-", (strtolower($key))).'_content';
            $tab_params ['aria']['selected'] = ($i) ? 'false': 'true';
            $tab_params ['class'] = (!$i) ? 'active': '';
            $tab_params ['class'] .= ($value['tab_class']) ? ' ' . $value['tab_class']: '';

            // Content row content
            $content_params ['id'] = str_replace(" ", "-", (strtolower($key))).'-content';
            $content_params ['content'] = $value['content'];
            $content_params ['role'] = 'tabpanel';
            $content_params ['aria']['labelledby'] = slugify(strtolower($key)).'_tab';

            $content_params['class'] = (isset($params['content_row']['class'])) ? 'fade ' . $params['content_row']['class'] : 'fade';
            $content_params ['class'] .= ($value['content_class']) ? ' ' . $value['content_class']: '';

            $tab_row['content'] .= Php2Bs::bs_nav_item ([
                'content' => Php2Bs::bs_nav_link (
                    $tab_params
                )
            ]);


            $content_params ['class'] .= (!$i) ? ' show active': '';

            $content_row['content'] .= Php2Bs::bs_tab_pane ($content_params);

            $i++;
        }
        $out = self::bs_nav ($tab_row);

        if(isset($params['content_row']['id'])) {
            $content_row['id'] = $params['content_row']['id'];
        }

        $out .= Php2Bs::bs_tab_content ($content_row);

        return $out;
    }

    public static function bs_tab_content ($params) {
        $params['class'] = (isset($params['class'])) ? 'tab-content ' . $params['class'] : 'tab-content ';
        return Php2Html::div (
            $params
        );
    }

    public static function bs_tab_pane ($params) {
        $params['class'] = (isset($params['class'])) ? 'tab-pane ' . $params['class'] : 'tab-pane ';
        return Php2Html::div (
            $params
        );
    }


















    public static function bs_col_form_label ($params)
    {
        $default_class = (isset($params['size'])) ? 'col-form-label-'.$params['size'].' ' : 'col-form-label ';
        $params['class'] = (isset($params['class'])) ? $default_class . $params['class'] : $default_class;
        return Php2Html::label (
            $params
        );
    }


    public static function bs_footer ($params) {
        $params['class'] = (isset($params['class'])) ? 'footer ' . $params['class'] : 'footer ';
        return Php2Html::footer (
            $params
        );
    }



    public static function bs_form_row($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-row ' . $params['class'] : 'form-row';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_group($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-group ' . $params['class'] : 'form-group';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_text($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-text ' . $params['class'] : 'form-text';

        return Php2Html::small (
            $params
        );
    }




    public static function bs_outline_btn($params)
    {

        $params['class'] = 'btn btn-outline-' . $params['class'];


        return Php2Html::button (
           $content,
           $params
        );

    }





    public static function bs_custom_radio_wrapper($params)
    {
        $params['class'] = (isset($params['class'])) ? 'custom-control custom-radio ' . $params['class'] : 'custom-control custom-radio';

        return Php2Html::div (
            $params
        );
    }
    public static function custom_control_label($params)
    {
        $params['class'] = (isset($params['class'])) ? 'custom-control-label ' . $params['class'] : 'custom-control-label';

        return Php2Html::label (
            $params
        );
    }

    public static function bs_custom_radio($params)
    {
        $params['class'] = (isset($params['class'])) ? 'custom-control-input ' . $params['class'] : 'custom-control-input';

        return Php2Html::radio (
            $params
        );
    }


    public static function bs_input_text($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        if(isset($params['size'])) {
            $params['class'] .= ' form-control-'.$params['size'];
        }
        return Php2Html::input_text (
            $params
        );
    }

    public static function bs_textarea($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::textarea (
            $params
        );
    }
    public static function bs_input_password($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::input_password (
            $params
        );
    }

    public static function bs_input_email($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::input_email (
            $params
        );
    }



    public static function bs_dropdown_menu ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'dropdown-menu ' . $params['class'] : 'dropdown-menu ';
        return Php2Html::div (
            $params
        );
    }




    public static function bs_nav ($params) {
        $params['class'] = (isset($params['class'])) ? 'nav ' . $params['class'] : 'nav ';
        return Php2Html::ul (
            $params
        );
    }



    public static function bs_select($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::select (
            $params
        );
    }

    public static function bs_card($array)
    {
        $header = '';
        $body = '';
        $footer = '';


        if(isset($array['header']))
        {
            $array['header']['class'] = (isset($array['header']['class'])) ? 'card-header ' . $array['header']['class'] : 'card-header';

            $header = Php2Html::div (
                $array['header']
            );
        }

        if(isset($array['body']))
        {
            $array['body']['class'] = (isset($array['body']['class'])) ? 'card-body ' . $array['body']['class'] : 'card-body';

            $body = Php2Html::div (
                $array['body']
            );
        }

        if(isset($array['footer']))
        {
            $array['footer']['class'] = (isset($array['footer']['class'])) ? 'card-footer ' . $array['footer']['class'] : 'card-footer';

            $footer = Php2Html::div (
                $array['footer']
            );
        }

        $array['class'] = (isset($array['class'])) ? 'card ' . $array['class'] : 'card';

        $array['content'] = $header.$body.$footer;

        return  Php2Html::div (
            $array
        );


    }




	/**
	 * Alert
	 *
	 * @param  string 			$color       danger/info/warning/alert
	 * @param  string/null 		$heading     Optional text to display in 'alert-heading'
	 * @param  string 			$body        The body text for the alert
	 * @param  boolean 			$dismissible Whether to make the alert dismissible
	 * @example 	https://v4-alpha.getbootstrap.com/components/alerts/
	 *
	 * @return string           Bootstrap Alert
	 */




    public static function makeAlert($color = 'info', $heading=null, $body, $dismissible=false)
	{
		// Create the opening alert tage with the correct colour
        $out = '<div class="alert alert-'.$color.'">';

		// If $dismissible=true add the dismiss button
		if($dismissible)
		{
		    $out .= '	<button type="button" class="close" data-dismiss="alert" aria-label="Close">';
        	$out .= '		<span aria-hidden="true">&times;</span>';
    		$out .= '	</button>';
		}
		// If $heading is not empty, add it
        if($heading)
		{
            $out .= '<h4 class="alert-heading">'.$heading.'</h4>';
        }

		// Add the body text
        $out .= $body;

		// Close the alert tag
        $out .= '</div><!-- alert-'.$color. '-->';

        return $out;
    } // makeAlert



	/**
	 * Make a Bootstrap 4 Grid
	 *
	 *	We have two functions to simplify make a Bootstrap grid layout.
	 *
	 *	row ()		Makes a <div class="row">
	 *	column 		Makes a <div class="col-xx-xx">
	 *
	 * These can be used in conjuction with each other in an unlimited amount
	 * of nesting. Each function has a parameter called $inc which will contain
	 * an array of anything to be displayed within.
	 *
	 * To make a row with an id of 'content' and within it a small column with a
	 * class of col-sm-4 and a larger column with a class of col-sm-8, you would use
	 *
	 *
	 * Php2Bs::row (
	 * 		$id = 'content',
	 * 		$class = null,
	 * 		$inc = array (
	 * 			Php2Bs::column (
	 *				$id = null,
	 * 				$class = 'col-sm-4',
	 * 				$inc = array (
	 * 					...
	 * 				)
	 * 			),
	 * 			Php2Bs::column (
	 *				$id = null,
	 * 				$class = 'col-sm-8',
	 * 				$inc = array (
	 * 					...
	 * 				)
	 * 			),
	 * 			Php2Bs::column (
	 *
	 * 			),
	 *
	 * 		)
	 * )
	 *
	 * The $inc within the column sections can be an array of any elements that
	 * you want and can be a mixture of several types including more row() and
	 * column() functions.
	 * Although you can use plain text as an array element, it is recommended to put
	 * anything you need into indivudal functions and call them.
	 *
	 */



	/**
	 * Make a Bootstrap 4 Grid Column
	 *
	 * Creates a <div class="col-xx-xx"></div> with any attributes and content as well as
	 * a formatted end html comment
	 *
	 * @param  string/null 		$id    The id attribute of the column if required
	 * @param  string/null 		$class The class attribute of the column if required
	 * @param  array  			$inc   An array of content to show
	 * @return string        	Boostrap Column
	 */

     // public static function column (
     //     $id = null,
     //     $class = null,
     //     $inc = array ()
     // )




    public static function quickCollapse ($params = array ())
	{
        $out = '';

        $out .= '<p';
        if (isset($params['wrap_class'])) {
            $out .= ' class="'.$params['wrap_class'].'"';
        }
        $out .= '>';

        $out .= '<a class="btn ';
        if (isset($params['button']['size'])) {
            $out .= 'btn-'.$params['button']['size'].' ';
        }

        if (isset($params['button']['type'])) {
            $out .= 'btn-'.$params['button']['type'].'-'.$params['button']['color'].'';
        }
        else
        {
            $out .= 'btn-'.$params['button']['color'].'';
        }
        if (isset($params['button']['class'])) {
            $out .= '  '.$params['button']['class'];
        }
        $out .= '"';
        $out .= ' data-toggle="collapse" href="#'.$params['key'].'" aria-expanded="false" aria-controls="'.$params['key'].'e">';
        $out .= $params['text'];
        $out .= '</a>';

        $out .= '</p>';

        $out .= '<div class="collapse" id="'.$params['key'].'">';

        $out .= $params['content'];

        $out .= '</div>';

        return $out;
    }

}















<?php

/**
 * Main Template Base
 *
 * This file contains the core structure and functions for building the main
 * template all bar the actual page content, which is called using new
 * T_Main_Template which extends this class.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */
class T_Admin {

    /**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$params        Additional parameters
	 */
    public function __construct($content, $params=array()) {

        /*
            Before we attempt to do anything, we need to ensure that the
            user logged in and authorised to view the admin area.

            If they are not logged in, the get directed to the admin login page
            otherwise they get sent to the unathorised page.
         */

        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            Redirect::to('/Admin/Login/');
        } else {
            if(!$user->hasPermission('admin')) {
                Redirect::to('/Admin/Unauthorised/');
            }
        }

		// Set the displayed content to $this->content
		$this->content = $content;

		/*
            If a 'page_title' has been passed set it to $this->page_title,
            otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle,
            if required .

            These variables get checked in the content() function and then
            added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT
            show, even if it has been set.
         */
		$this->page_title = (isset($params['page_title'])) ? $params['page_title'] : null;
        $this->page_subtitle = (isset($params['page_subtitle'])) ? $params['page_subtitle'] : null;

		/**
		 * Set the layout version
		 *
		 * If a layout has been passed from the view via $params['layout'] set $this->layout
		 * to it otherwise use 'default'.
		 *
		 * These variables get checked in the layout_switcher() function within this file
		 * and will return a layout based on that is set here.
		 *
		 * To see the demo layout versions and instructions on how to edit them or create a
		 *  new one, see layout_switcher() and its comments.
		 *
		 * @var string
		 */
        if(isset($params['layout'])) {
            $this->layout = $params['layout'];
        } else {
            $this->layout = 'default';
        }

        /**
         * Set any page specific meta tags. These will be set in the view as a
         * key/value pairing and will override the defaults set in
         * /app/core/Settings.php->meta_tags()
         * @var [type]
         */
        if(isset($params['meta'])) {$this->meta =$params['meta'];}

        /**
         * Set any page specific css. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['css'])) {$this->css =$params['css'];}

        /**
         * Set any page specific js. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['js'])) {$this->js =$params['js'];}

        if(isset($params['alert'])) {$this->content = $params['alert'].$this->content;}


        $this->menu_category = (isset($params['menu_category'])) ? $params['menu_category'] : null;
        $this->menu_item = (isset($params['menu_item'])) ? $params['menu_item'] : null;

		// Call the template function
        self::Template();

    } // __construct

    /**
     * Build the entire template
     *
     * We build this up gradually via functions contained eihter in this file or in
     * the Base_Template file it extends
     * @return 	HTML page
     */
    private function Template () {
        // Build the start of the page up to the opening body tag, including the <head>
        self::bodyStart ();

        // Build top navigation bar
        self::topNav ();

        self::dropMenus ();

        // Show the actual content for the page
        self::content ();

        self::footer ();

        // Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()





	/**
	 * Build the HTML down to the opening body tag and include extra css
	 *
	 * @return string 					Template to the opening <body> tag
	 */
    public function bodyStart ()
	{

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';


        /**
         * Include the <head> section
         *
         * If a page needs any extra css apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out .= self::head ();

        // Open the body tag
        $out .= '<body class="bdy">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

	/**
	 * Finish the HTML
	 *
	 * @return string 					Template for the end of the HTML
	 */
    public function bodyEnd ()
	{

		/**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new T_Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

    private function content () {

        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $params['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $params['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title)
        {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);


        }



        /*
            Call the correct layout of the page

            The main content could be called into one of several different
            layouts. The reason for this is you may want a slightly
            different layout for certain content such as some pages having
            a content specific sidebar.

            This is fully controlled by the layout_switcher () function in
            this file (a separate function has been created as there is an
            infinite number of combinations that you can use) controls all of it so we simply add that to the $content variable.

            See the comments for that function for a list of available ones and how to create a new one.
         */
        $content .= Php2Bs::bs_row ([
            'content' => self::left_Column ()
                        .self::main_column_medium (),
            'class' => 'flex-xl-nowrap',
        ]);


        /*
            We now have the entire content of the page, in the required layout
            version, contained within $content.

            In this template, the entire content area is wrapped in the Bootstrap
            container within a Bootstrap fluid-container.

            Tp make this, we echo out a bs_container_fluid() function from the
            Php2Bs class. It is in the 'content' for this that we actually pass
            the completed $content.
         */
        echo Php2Bs::bs_container_fluid ([
            'content' => $content
        ]); // container-fluid

    } // content()

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {


        /*
            Now $title will contain everything required in the page_title
            div so we add it to $content using the div() function in the
            Php2Html class.
         */
        $title = Php2Html::h([
            'size' => '2',
            'class' => 'page_title',
            'content' => $this->page_title
        ]);

        /*
            If a subtitle has been set, add it to $title as a paragraph
            using the p() function in the Php2Html class with a class of 'lead-description'.
         */
        if($this->page_subtitle)
        {
            $title .=  Php2Html::p([
                'class' => 'lead description',
                'content' => $this->page_subtitle
            ]);
        }

        $this->content = $title.$this->content;

        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9 col-xl-10'
        ]);
    } // main_column_medium ()

    /*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        demo_user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
    private function left_Column () {

        $links = array (
            'Dashboard' => array (
                'type' => 'link',
                'href' => '/home',
            ),
            'Users' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Overview' => '/Users',
                    'List' => '/Users/Listing',
                    'Add' => '/Users/Add',
                    'Usergroups' => '/Usergroups',
                    'Activity Types' => '/ActivityType',
                )
            ),
            'Settings' => array (
                'type' => 'link',
                'href' => '/Settings',
            ),
            'Faults' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Overview' => '/Faults',
                    'List' => '/Faults/Listing',
                    'Add' => '/Faults/Add',
                    'Rag Status' => '/Faults/RagStatus',
                )
            ),
            'Systems' => array (
                'type' => 'link',
                'href' => '/Systems',
            ),
            'Categories' => array (
                'type' => 'link',
                'href' => '/Categories',
            ),
            'Utilities' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Blend' => 'Blend',
                    'Borders' => 'Borders',
                    'Colors' => 'Colors',
                    'Contrast' => 'Contrast',
                    'Complement' => 'Complement',
                    'Invert' => 'Invert',
                    'Sizing' => 'Sizing',
                )
            )

        );


        $content = '';

        foreach ($links as $key => $value) {

            $nav_button = '';
            $nav_content = '';


            $params = [
                'content' => $key,
                'class' => 'text-light border-bottom border-light',
            ];

            if($key == $this->menu_category) {
                $params['class'] = 'bg-dark ' . $params['class'];
            }
            if($value['type']=='link') {
                $params['href'] = '/Admin'.$value['href'];
                $content .= Php2Bs::bs_nav_item ([
                    'content' => Php2Bs::bs_nav_link (
                        $params
                    )
                ]);

            }

            if($value['type']=='menu') {
                $params['href'] = '#';
                $params['data_attr'] = [
                    'toggle' => 'collapse',
                    'target' => '#nav-'.$key
                ];
                $params['aria'] = [
                    'controls' => 'nav-'.$key,
                    'expanded' => 'false',
                    'label' => 'Toggle '.$key.' navigation'
                ];


                $children = '';
                foreach ($value['children'] as $menu => $link) {
                    // Remove Link from active
                    $menu_class = ($key == $this->menu_category && $menu == $this->menu_item) ? 'list-group-item-info' : 'list-group-item-action list-group-item-light';
                    $children .= Php2Bs::bs_nav_item ([
                        'content' => Php2Bs::bs_nav_link ([
                            'href' => '/Admin'.$link,
                            'content' => $menu,
                            'class' => $menu_class. ' border-bottom border-dark pl-4'

                        ])
                    ]);
                }

                $menu_class = ($key == $this->menu_category) ? 'show' : '';
                $nav_content .= Php2Html::div ([
                    'id' => 'nav-'.$key,
                    'content' => Php2Bs::bs_nav ([
                        'content' => $children,
                        'class' => 'flex-column'
                    ]),
                    'class' => 'collapse ' . $menu_class

                ]);

                $nav_button = Php2Bs::bs_nav_item ([
                    'content' => Php2Bs::bs_nav_link (
                        $params
                    ).$nav_content
                ]);
                $content .= $nav_button;
            }




        }




        return Php2Bs::bs_column ([
			'content' => Php2Html::div ([
                'id' => 'left-nav',
                'class' => 'collapse docs-menu',
                'content' => Php2Bs::bs_nav ([
                    'content' => $content,
                    'class' => 'flex-column',


                ]),
            ]),
			'id' => 'left',
            'class' => 'col-12 col-md-3 col-xl-2 left-menu bg-secondary',

        ]);
    } // left_Column ()

	/**
	 * Build the <head> section
	 *
	 * Builds the entire <head> tag and includes any global or
	 * page specific css and meta tags.
	 *
	 * @return     string      <head> section
	 */
    private function head ()
	{
		/*
            We build the contents of the <head> gradually so we create a $out
            variable containing the opening tag and concatenate to it as we go along.
         */
		$out = '<head>';

		/*
            Include the <meta> tags

            Each of the meta tags should initially be stored in the meta_tags()
            function in /app/core/Settings.php with a default content to be used
            if an alternative is not set.

            For page specific meta tags, set a key/pairing array in the view as
            $params['meta'] with the name and content of each once you want to
            overwrite.

            You can also set global meta tags manually and this is required for any
            that do not use a name and content combination.
         */
        $out .=  ' <meta charset="utf-8">';

        /*
            As there may be overrides for some of the meta tags set in the page/view, we initially store the default meta tags in a $tags variable so it can be easily manipulated.
         */
        $tags = SiteSettings::meta_tags();

        /*
            If any page-specific meta tags have been passed in, they would have
            been set to $this->meta in the called template file (by default
            /app/core/Templates/Main.php).
            We loop though these and for each one, overwrite the matching tag
            name in $tags.
         */
        if(isset($this->meta))
        {
            foreach ($this->meta as $name => $content) {

                $tags[$name] = $content;
            }
        }

        /*
            Finally, we loop through the tags array and create a meta tag for each one, adding it to the $out variable.
         */
        foreach ($tags as $name => $content) {
            $out .= Php2Html::meta([
                    'name' => $name,
                    'content' => $content
            ])."\n";
        }

		/*
            Set the Page Title

            If the page title has been passed in from the view, show the site name as set in Settings.php followed by a colon and then the page title.
            Otherwise, it just shows the site name.

            You can change this to suit your needs.
         */
		$title = isset($this->page_title) ? SiteSettings::get('site_name') .': '.$this->page_title: SiteSettings::get('site_name');
		$out .=  '<title>' . $title. '</title>';

		// Link the Favicon
		$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

		/*
            Call in the stylesheets

            Again, you can have global style sheets as well as page, specific ones. Wherever they are set, they are called from the css() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full stylesheet link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['css'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/site' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
		$out .= SiteSettings::css('remote/bootstrap/v4');


        // Loop through the page specific styles
        if(isset($this->css))
        {
            foreach ($this->css as $stylesheet) {
                $out .= SiteSettings::css($stylesheet);
            }
        }


        $out .= SiteSettings::css('local/admin');

        // Close the head tag
        $out .=  '</head>';

        // Echo the $out variable
		echo $out;

    } // head()

	/**
	 * Build the required scripts
	 *
	 * Builds the js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts ()
	{
        $out = '';

        /*
            Call in the any scripts

            Again, you can have global scripts as well as page, specific ones. Wherever they are set, they are called from the js() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full script link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['js'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/default' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
         $out .= SiteSettings::js('remote/jquery');
         $out .= SiteSettings::js('remote/popper');
         $out .= SiteSettings::js('remote/bootstrap/v4');
         $out .= SiteSettings::js('remote/font-awesome-5');

        // Loop through the page specific styles
        if(isset($this->js))
        {
            foreach ($this->js as $script) {
                $out .= SiteSettings::js($script);
            }
        }

        $out .= SiteSettings::js('local/default');

        // Echo the $out variable
        echo $out;

    } // scripts()


    public function dropMenus() {
        $out = '';

        $out .= Php2Bs::bs_container_fluid ([
            'content' => 'Search',
            'class' => 'collapse py-2 bg-secondary text-light border-bottom border-dark',
            'id' => 'nav-search'
        ]);

       $out .= Php2Bs::bs_container_fluid ([
           'content' => 'User',
           'class' => 'collapse py-2 bg-secondary text-light border-bottom border-dark',
           'id' => 'nav-user'
       ]);

       echo $out;
    }

	/**
	 * Build the top navigation menu
	 *
	 * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
	 * in the required links and dropdowns
	 *
	 * @return string 	nav
	 */
    public function topNav ()
 	{

        $brand = Php2Html::a ([
            'class' => 'navbar-brand',
            'href' => '#',
            'content' => 'UATHUB ADMIN'
        ]);

        $home_button = Php2Html::a ([
            'content' => '<i class="fas fa-home"></i>',
            'id' => 'left',
            'href' => '/',
            'class' => 'text-light p-0 pr-2',
        ]);

        $toggle_button = Php2Html::a ([
            'content' => '<i class="fas fa-search mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#nav-search'
            ],
            'aria' => [
                'controls' => 'nav-search',
                'expanded' => 'false',
                'label' => 'Toggle search navigation'
            ]
        ]);


        $search_button = Php2Html::a ([
            'content' => '<i class="fas fa-bars mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  d-md-none p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#left-nav'
            ],
            'aria' => [
                 'controls' => 'left-nav',
                 'expanded' => 'false',
                 'label' => 'Toggle left navigation'
            ]
        ]);

        $user_button = Php2Html::a ([
            'content' => '<i class="fas fa-user mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#nav-user'
            ],
            'aria' => [
                 'controls' => 'nav-user',
                 'expanded' => 'false',
                 'label' => 'Toggle user navigation'
            ]
        ]);


        $left_buttons = Php2Html::span([
            'content' => $home_button.$search_button.$toggle_button,
            'class' => 'fa-lg mr-auto',
        ]);

        $right_buttons = Php2Html::span([
            'content' => $user_button,
            'class' => 'fa-lg',
        ]);




         $out = Php2Bs::bs_navbar ([
             // Navbar content
                'content' => $brand . $left_buttons . $right_buttons,
                'class' => 'navbar-expand-lg navbar-dark bg-dark text-light invert sticky-top justify-content-start'


         ]);



 		echo $out;
     } // topNav()

	/**
	 * Build footer
	 *
	 * Sets the page footer
	 *
	 * @return string 	footer
	 */
    public function footer ()
	{
        echo Php2Bs::bs_footer ([
            'content' => Php2Bs::bs_container_fluid ([
                'content' =>  'Place sticky footer content here.',
                'class' => 'text-white',
            ]),
            'class' => 'bg-dark',
        ]);

    } // footer()


}









































<?php

/**
 * Main Template
 *
 * The front end template is built using two files. This one deals with any of the
 * page-specific content but it exends '/app/core/Templates/T_Base.php', which
 * contains any shared content such as the nav bar and footer.
 *
 * As everything is done within the __construct() we only ever need to call the
 * class itself and no functions, so look at that for a full explanation of the process.
 *
 * We call the template from a view and pass in two arguments. The first is the
 * main content to show for the page  while the second is an array of other page
 * settings such as the page title and required layout specifics.
 *
 * The following can be passed in as part of the array for the second argument.
 * 'page_title'     - Sets the title to be shown at the top of the page and in <head>
 * 'page_subtitle'  - Sets a subtitle to be showm just below the title at the top of the page
 * 'layout'         - Sets the layout type. We can add unlimited layouts within the laoyout function in this file.
 * 'meta'           - Adds extra, page-specific, meta tags to <head>
 * 'css'            - An array of page-specific css styles
 * 'js'             - An array of page-specific js scripts
 * 'sidebar'        - Sets the function to be called when using a layout with a sidebar.
 * 'hide_banner     - Allows you to hide the banner at the top of the page.
 * 'body_class'     - Sets any global styles for the whole page.
 *
 * All of these are described in full in '/app/views/home/index.php', where there
 * is a full example of how to build the template from within a view.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	new T_Main($content, $args)
 * @return 		string     Entire HTML page
 */
class T_Main extends T_Base {

	/**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and at the end of it, called the Template() function
     * to create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$args          Additional arguments
	 */
    public function __construct($content, $args=array()) {

		// Set the displayed content to $this->content
        /*
            As this is a class file that relies on some of the functions within itself, we set whatever we can to $this to allow it to be called from anywhere.

            $content will always be a string of the innermost content, ready formatted, and should never need any manipulation from within this file, other than adding a couple of bits where necessary (seuch as breadcrumbs). With that in mind, we set it to $this->content before we do anything else.
         */
		$this->content = $content;

		/*
            Next we work through the second arugument - $args. This will be an array and we check for each part that may exist individually, adding them to $this where required.

            We start of with the page title and subtitle, to show above the content.

            If a 'page_title' has been passed set it to $this->page_title, otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle, if required.

            These variables get checked in the content() function and then added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT show, even if it has been set.
         */
		$this->page_title = (isset($args['page_title'])) ? $args['page_title'] : null;
        $this->page_subtitle = (isset($args['page_subtitle'])) ? $args['page_subtitle'] : null;

		/*
           Set the layout version

           If a layout has been passed from the view via $args['layout'] set $this->layout to it otherwise use 'default'.

           These variables get checked in the layout() function within this file and will return a layout based on that is set here. The comments around the layout() function explains which layouts are available to use and how to add new ones..
		 */
        if(isset($args['layout'])) {
            $this->layout = $args['layout'];
        } else {
            $this->layout = 'default';
        }

        /*
            Set any page specific meta tags. These will be set in the view as a key/value pairing and will override the defaults set in /app/core/Settings.php->meta_tags()
         */
        if(isset($args['meta'])) {$this->meta = $args['meta'];}

        /*
            Set any page specific css. These will be set in the view as an array of path strings.

            We set the available css files into an array in SiteSettings.php in a static function called css(). This allows us to pass in a reference to return the correct css file.

         */
        if(isset($args['css'])) {$this->css =$args['css'];}

        /*
            Set any page specific js. These works exactly the same as the css one above other than it returns a js script from the js() function in SiteSettings.php.
         */
        if(isset($args['js'])) {$this->js =$args['js'];}

        /*
            On layouts that have sidebars, we can specifiy what is shown in it via $args['sidebar'].

            Each sidebar will have its own function within this file and all of these will end with '_sidebar', so to include the users_sidebar() function, we simply pass in $args['sidebar']='user'.

            If no sidebar is specified, it will use the default_sidebar() function.

            An example is shown in the right_Column() function.
         */
        $this->sidebar = (isset($args['sidebar'])) ? $args['sidebar'].'_sidebar' : 'default_sidebar';

        /*
            We also have the option to hide the top banner from the page, which we do by passing in $args['hide_banner'] = true. If it is false or not set, the banner will be show.

            This is used in '/app/views/home/index.php' where the nav bar now shows at the very top of the page.
         */
        $this->show_banner = (isset($args['hide_banner']) && $args['hide_banner']) ? false : true;

        /*
            We can also set a class for the entire body using $args['body_class'].

            Again, this is used in '/app/views/home/index.php' to give the whole page a dark background and light text.
         */
        $this->body_class = (isset($args['body_class'])) ? $args['body_class'] : 'bg-light';

        /*
            We have now set everything we require to $this so it can be used anywhere within the class so can build the template.

            We do this by calling the Template() function (right below the end of this function), which calls all of the functions required and then returns the entire page display.
         */
        self::Template();

    } // __construct


	/**
	 * Build the entire template
	 *
	 * We build this up gradually via functions contained either in this file or
     * in the T_Base file it extends. It simple calls the required functions,
     * each of which echo out a specific part of the page.
     *
	 * @return 	HTML page
	 */
    private function Template () {
		/*
            Create the <!doctype> and <head> sections, along with the opening <html> and <body> tags.

            Stored in T_Base.
         */
        self::bodyStart ();

        // Build banner
        if($this->show_banner) {
            self::banner ();
        }


        // Build top navigation bar
        self::topNav ();

		// Show the actual content for the page
        self::content ();

		// Show the footer
        self::footer ();

		// Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()

    /**
     * Page banner
     *
     * Simply creates the banner that shows at the top of the page.
     *
     * Theoretically, this could be placed in the T_Base file but, if you are
     * running multiple sites based around the same template, having it in the
     * specific template files means it can be styled independently.
     *
     * The output of this is a fluid bootstrap container (to force it full width
     * ensuring any background colour stretches across the screen), inside which
     * we place a standard container so the content matches the width of the rest
     * of the page. Inside that inner container, we place a <h1> with the title.
     *
     * To simplify the construction, we build them individually, innermost first,
     * and pass each into it's parent.
     *
     * @return string 					Banner
     */
    public function banner () {

        // Build the H! tag as $title
        $title = Php2Html::h ([
            'size' => '1',
            'class' => 'title',
            'content' => 'Main Template',
        ]); // $title

        // Build the inner container as $inner_container, passing in $title as the content
        $inner_container = Php2Bs::bs_container ([
            'content' => $title
        ]); // $inner_container

        // Echo out the outer container, passing in $inner_container as the content and include some formatting
        echo Php2Bs::bs_container_fluid ([
            'class' => 'bg-info text-light pb-2',
            'content' => $inner_container
        ]); // container

    } // banner()

	/**
	 * Show the actual page content
	 *
	 * We show the actual content of the page using a pre-defined layout that has
     * either been set when calling the template from the view or as a default.
	 *
	 * This function returns the entire content, aside from the wrapper created with
     * the base file this extends and the content is built before being passed into a
     * 'bs_container' function from the Php2Bs (Bootstrap) class to create the entire
     * content area.
	 *
	 * @return     string  	   Page content
	 */
    private function content () {
        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $args['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $args['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title) {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);

            /*
                If a subtitle has been set, add it to $title as a paragraph
                using the p() function in the Php2Html class with a class of 'lead-description'.
             */
            if($this->page_subtitle) {
                $title .=  Php2Html::p([
                    'class' => 'lead description',
                    'content' => $this->page_subtitle
                ]);
            }

            /*
                Now $title will contain everything required in the page_title
                div so we add it to $content using the div() function in the
                Php2Html class.
             */

             $this->content = Php2Bs::bs_column ([
                 'content' => Php2Html::h([
                     'class' => 'col-12',
                     'size' => '4',
                     'content' => $title
                 ]).breadcrumbs().$this->content
             ]);
        } // $this->page_title

        /*
            Now we just need to call the function that builds the page content, including all columns that may have been requested. The content could be called into one of several different layouts. The reason for this is you may want a slightly different layout for certain content such as some pages having a content specific sidebar.We do this by simply passing the layout() function into a Bootstrap container function.

            layout() will generate the required columns, which will have already been populated with the $this->content variable created in the construct and any data that is specified in the indicidual column functions.
         */
        echo Php2Bs::bs_container ([
            'content' => $this->layout()
        ]); // container

    } // content()

    /**
     * Set the correct layout
     *
     * Each of the different available layouts are created using the 'bs_row'
     * and 'bs_column' functions from the Php2Bs (Bootstrap) class.
     * The layouts that are available by default are
     * 'full-width' - single column layout
     * 'left-col'  - two column layout with left sidebar and content to the right
     * 'right-col' - two column layout with right sidebar and content to the left
     * 'three-col' - three column layout with both sidebars and content in the middle
     * 'test' - a playground for testing styles.
     *
     * The required layout is set to $this->layout in the __construct of
     * this file. If it has been passed in from the view as $args['layout']
     * that is what it will be set to, otherwise it will be set to 'default'.
     *
     * We run a switch on $this->layout and return a row (bs_row). As well
     * as setting any attributes, such as id's and classes, we pass in a
     * parameter called 'content'. This will be be any number of functions
     * that create columns using specific functions.
     *
     * The columns themselves could have multiple functions included and
     * these are explained at the start of the columns functions below. Note
     * that any classes applied to the rows will be inherited by the
     * columns unless they have overriding classes.
     *
     * To add a new layout, create a new case in the switch statement,
     * matching the format of the existing ones and create any new columns
     * that are required.
     *
     * @return  string  Page Layout
     */
    protected function layout () {

        switch ($this->layout) {
            /*
                Full Width

                This is a single column layout using the main_column_full()
                function, with an id of main_content and a class of bg-light
             */
            case 'full-width':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_full (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Left column

                This is a two column layout using the left_Column () and
                main_column() functions concatenated, with an id of main_content and a class of bg-dark text-info
             */
            case 'left-col':
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                    'class' => 'bg-dark text-info',
                ]);
            break;

            /*
                Right column

                This is a two column layout using the main_column() and
                right_Column () functions concatenated, with an id of main_content and a class of text-danger
            */
            case 'right-col':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_medium ()
								.self::right_Column (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Three column

                This is a three column layout using the left_Column (),
                main_column() and right_Column () functions concatenated,
                with an id of multi_column.
            */
            case 'three-col':
                return Php2Bs::bs_row ([
                	'content' => self::left_Column ()
								.self::main_column_small ()
								.self::right_Column (),
                	'id' => 'multi_column',
                ]);
            break;

            /*
                Test layout

                This is here as a simple way of testing new things or
                playing around with layouts and contains a few more attributes.
            */
            case 'test':
                return Php2Bs::bs_row ([
					'content' => self::main_column_full (),
                    'class' => 'bg-info',
                    'id' => 'main_content',
                    'data_attr' => [
                        'ref' => 'refdata',
                        'cat' => 'news'
                    ]
                ]);
            break;

            /*
                Default layout

                If no layout has been specified in the view, we default to
                the left column one.
            */
            default:
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                ]);
            break;
        } // Layout switch
    }

    /**
     * Layout column functions
     *
     * These are the functions that are called in to the rows created in
     * layout() and are all created using the 'bs_column' function
     * from the Php2Bs (Bootstrap) class.
     *
     * As when creating the rows we can set any attributes, such as id's and
     * classes, with the actual required output being passed as 'content'.
     *
     */

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {
        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9'
        ]);
    } // main_column_medium ()

    /*
        Full Main Column

        Used in the 'full-width' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with at all breakpoints.
     */
    private function main_column_full () {
        return $this->content;
    } // main_column_full ()

    /*
        Small Main Column

        Used in the 'three-col' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        However, this time we also concatenate the function demo_extra_box() to give extra content to the column.

        Using the Bootstrap grid sizes it is full with, changing to 6/12
        width at the medium breakpoint.
     */
	private function main_column_small () {
        return Php2Bs::bs_column ([
			'content' => $this->content
						.$this->demo_extra_box (),
			'id' => 'main_small_column',
			'class' => 'col-md-6'
        ]);

    } // main_column_small ()

	/*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.

        TODO: Put something more useful in here
     */
    private function left_Column () {
        return Php2Bs::bs_column ([
			'content' => 'Left Hand Box',
			'id' => 'left',
			'class' => 'col-12 col-md-3 left-col bg-warning pt-2'
        ]);
    } // left_Column ()

    /*
        Left Column

        Used in the 'default', 'right-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        side_menu () and user_box () functions (the same as we did in left_column () but in a different order. Also, in this one we concatenate them into a variable first, rather than straight into the bs_column function.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.

        TODO: Check if this content is required and tidy up
     */
	private function right_Column () {

        return Php2Bs::bs_column ([
			'content' => $this->{$this->sidebar}(),
			'id' => 'right',
			'class' => 'col-12 col-md-3 right-col bg-info pt-2 mt-4 mt-md-0'
        ]);
    } // right_Column ()

    private function calls_sidebar() {
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Call Log Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Call',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/CallLog/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Today',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Today'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Week',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Week'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Month',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Month'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Year',
                        'class' => 'list-group-item',
                        'href' => '/CallLog/Listing/Year'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    private function ideas_sidebar() {
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Ideas Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Idea',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/Ideas/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/Ideas/'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    private function faults_sidebar() {
        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Faults Menu'
            ),
            'body' => array (
                'content' =>  Php2Html::a ([
                    'content' => 'Add New Fault',
                    'class' => 'btn btn-success btn-sm btn-block mb-1',
                    'href' => '/Faults/Add'
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Listing',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'Today',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Today'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Week',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Week'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Month',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Month'
                    ]),
                ]).
                Php2Html::ul ([
                    'class' => 'list-group',
                    'content' => Php2Html::a([
                        'content' => 'This Year',
                        'class' => 'list-group-item',
                        'href' => '/Faults/Listing/Year'
                    ]),
                ]),
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    private function default_sidebar() {
        $model = new M_Users();
        $latestuser = $model->mostRecent();
        $latest_user_date = new DateTime($latestuser->joined);

        $n = $latestuser->username;
        $d = $latest_user_date->format('d/m/Y g:ia');
        $userbox_content = Php2Html::p ([
            'content' => 'Total : '.$model->count(),
        ]);
        $userbox_content .= Php2Html::p ([
            'content' => "Most recent <br> $n joined<br>$d",
        ]);

        return Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Members'
            ),
            'body' => array (
                'content' => $userbox_content,
                'class' => 'p-2',
            ),
        ]);// bs_card
    }

    /*
        Demo Box

        This is purely to show how extra content can be tacked on to any of the columns. It is only used in main_column_small(), which is the content area on the 'three-col' version.
    */
    private function demo_extra_box () {

        return Php2Bs::bs_alert([
            'heading' => 'Alert Example',
            'content' => Php2Html::p([
                'content' => 'Stuff can go here.'
            ]),
            'dismissible' => false,
            'color' => 'warning',
        ]);
    } // demo_extra_box ()

}













































<?php

/**
 * Users Model
 *
 * Contains the standard functions for data manipulation, as well as the CRUD
 * forms and displays.
 *
 * This model also contains functions relating to subsidiary user functions such
 * as usergroups and permission.
 *
 * Note that Users have a lot more functionality than moss sections so there is
 * a lot more to this one than most models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'src/init.php';

class M_Users
{
    private
        $_data,
        $_db_table = 'users',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the database as well as the Logs
     * core class (/app/core/Logs.php) used to record activity.
     */
    public function __construct() {
        $this->db = DB::dbConnect();
        $this->_logs = new Logs();
    } //__construct ()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
     * Check the user cookie
     *
     * Checks to see if there is a login cookie stored, based on the 'user_cookie'
     * record in the `settings` database table.
     *
     * If a cookie exists, it checks for a matching record in the `login_cookie`
     * table and if one is found, sets the $_SESSION to log the user in. If a
     * cookie exists but no match is found, the cookie is just deleted.
     *
     * @param string $hash The hash value stored in the login cookie table
     */
    public function checkCookie() {

        /*
            We only need to do anything if a cookie exists so we first check that using exists() in /'app/core/Cookie.php' passing the the 'user_cookie' value from the `settings` database table.
         */
        if (Cookie::exists(SiteSettings::get('user_cookie'))) {
            /*
                There is a cookie do we check the `login_cookie` table for any records where the 'hash' column matches the hash in the cookie.
             */
            $hashCheck = $this->db->get('login_cookie', array('hash', '=', Cookie::get(SiteSettings::get('user_cookie'))));

            /*
                If there is a matching record, we can now log the user in.

                We first use the find() function within this class, using the value of the user_id column in the `login_cookie` table as the user reference.
                This will store the users details in $this->data() and we then create two $_SESSION variables, based on names set in the `settings` table in the database, to store the users id as the login reference, and their user group.
                The reason we also store the user group as a $_SESSION is so we do not have to queery the database each time we need to access it.

                If there is no matching record, we simply delete the cookie.
             */
            if ($hashCheck->count()) {
                if ($this->find($hashCheck->first()->user_id)) {
                    Session::put(SiteSettings::get('session_user_id'), $this->data()->id);
                    Session::put(SiteSettings::get('session_user_group'), $this->data()->group);
                }
            } else {
                Cookie::delete(SiteSettings::get('user_cookie'));
            }
        }
    } // checkCookie()

    /**
     * Check the user hash
     *
     * Checks an email/hash combination for a matching value in the user_hash
     * table, returning the true or false depending on whether a match was found.
     *
     * @param  email 	$email 	Users Email address
     * @param  sha256 	$hash  	Stored hash
     * @return int        		Count of returned results
     *
     */
    public function checkUserHash ($email, $hash) {
        if($this->db->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash))->count()) {
            return true;
        }
        return false;
    } // checkUserHash()

    /**
     * Creates a record in the user_hash table
     *
     * Whenever a user has to verify by email, the link they are sent will
     * contain their email address and a hash string that matches a row in the
     * `user_hash` table.
     *
     * This is to ensure a valid request has been used.
     *
     * @param  array 	$_fields 	Email and Hash
     */
    public function createUserHash($_fields) {
        /*
            The fields passed in will be the email address and hash. We also want to enter the time the record was inserted in the 'stamp' column so we create that first.
         */
        $_fields['stamp'] = SiteSettings::current_datetime()->format('Y-m-d H:i:s');

        // Insert into the `user_hash` table
        if (!$this->db->insert('user_hash', $_fields)) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->createUserHash()';
            }
        }
    } // createUserHash()

    /**
     * Create a new user
     *
     * Attempts to create a new user in the 'users' table based on validated
     * $_POST data. Validation should be run before calling this function.

     * Before insertion, we create a new salt to add and then use this to
     * make the posted password more secure. We also add the current date
     * and time as 'joined'.
     *
     * It also sets the id of the inserted record to $this->_insertId a
     * public function that can be called to show the id after insertion.
     *
     * @param  array    $_postdata  $_POST data
     * @return bool                 Success status
     */
    public function create ($_postdata=[]) {
        $_postdata['salt'] = Hash::salt(32);
        $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);
        $_postdata['joined'] = date('Y-m-d H:i:s');

        if (!$this->db->insert($this->_db_table, $_postdata)){
            // The insert was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->create()';
            }
            return false;
        }
        $this->_insertId = $this->db->insertId();
        return true;

    } // create()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
     * Delete a record
     *
     *  Deletes the specified record from $this->_db_table
     *
     * @param  int  $record  Record ID
     */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
		if(!$this->db->delete($this->_db_table, array('id', '=', $record))) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->delete()';
            }

			return false;
		}

        return true;

	} // delete()

    /**
     * Delete record form
     *
     * Simply shows a button to delete the current record. We do not need to pass
     * in any parameters as the user is set in the url.
     *
     */
    public function deleteForm () {

        $content = '';

        $bottom_row = Php2Bs::bs_form_group ([
            'class' => '',
            'content' => Php2Bs::bs_button ([
                'button_type' => 'submit',
                'color' => 'danger',
                'size' => 'sm',
                'class' => 'float-right',
                'content' => 'Delete',
                'name' => 'delete_user'
            ])
        ]); // $bottom_row

        // Wrap whatever we have in $bottom_row in a form row
        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row,
        ]); // Php2Bs::bs_form_row


        // Compile the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

        return $content;
    } // deleteForm ()

    /**
     * Delete the user cookie
     *
     * Deletes the remember me cookie and also removes the record from the
     * `login_cookie` table. The cookie name is based on the name set in
     * 'user_cookie' in the `settings` database table
     *
     * @param  int 	$user 	User ID
     */
    public function deleteCookie() {
        /*
            Delete the record from the `login_cookie` table where the hash column matches the hash in the coookie.
         */
        $this->db->delete('login_cookie', array('hash', '=', Cookie::get(SiteSettings::get('user_cookie'))));

        /*
            Delete the cookie.
         */
        Cookie::delete(SiteSettings::get('user_cookie'));
    } // deleteCookie()

    /**
     * Delete user hash
     *
     * Deletes any records from the 'user_hash' table that match the passed in
     * email address.
     *
     * @param  email  $_email  Email address
     */
    public function deleteUserHash ($_email) {

        if(!self::db ()->delete('user_hash', array('email', '=', $_email))) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->deleteUserHash()';
            }

            return false;
        }
    } // deleteUserHash ()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     * @param  string/email/int 	$group  	User identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record) {
            /*
                A record has been passed in so we now need to check what parameter
                has been used to determine which field we are going to check it
                against in the table.

                For Users, the $_record will either be the id, username or email
                so we do not have to manipulate it at all. There will be some
                occasions where we have to tweak $_record to suit what is stored
                in the database compared to what we can use in a url. Ideally in
                these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as
                usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record) {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = (filter_var($_record, FILTER_VALIDATE_EMAIL)) ? 'email' :   'username';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = $this->db->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    /**
	 * Check if a remember me cookie exists
	 *
	 * Simply checks if a cookie, based on the 'user_cookie' record in the
	 * `settings` database table is stored on the users device, returning a true
	 * or false, using exists() in /'app/core/Cookie.php.
     *
	 * @return boolean Cookie existence
	 */
	public function hasCookie() {
        return (Cookie::exists(SiteSettings::get('user_cookie'))) ? true : false ;
    } // hasCookie()

    /**
     * Check a user has the required permission
     *
     * Each user group can have multiple permissions and these are stored as a
     * json string in the 'permissions' column of the usergroups table. If the
     * required permission is there, it returns true, otherwise it reurns false.
     *
     * For example, if a groups permissions were as follows
     * {"super_admin":0, "admin": 1,"mod":1}
     *
     * hasPermission('super_admin') would return false
     * hasPermission('admin') would return true
     * hasPermission('mod') would return true
     *
     * @param  string  $key The permission name
     * @return boolean      Permission status
     * @example hasPermission('admin')
     */
    public function hasPermission ($key) {
        // Get the user group details for the current user
        $usergroup = $this->db->get(
            'user_groups',
            ['id', '=', Session::get(SiteSettings::get('session_user_group'))]
        );

        // As long as the user group is set, check if that group has the requested permission
        if($usergroup->count()) {
            // Set the permissions of the users group to $permissions array
            $permissions = json_decode($usergroup->first()->permissions, true);

            // Check if the requested permission exists in the array
            if ($permissions[$key] == true) {
                // The permission exists so return true
                return true;
            }
        }
        return false;
    } // hasPermission()

    /**
     * Check if a user is logged in
     *
     * Simply checks for existance of the login $_SESSION variable deined by the
     * 'session_user_id' in the `settings` table in the database.
     * @return boolean Login Status
     */
    public function isLoggedIn() {
        return (Session::exists(SiteSettings::get('session_user_id'))) ? true : false ;
    } // isLoggedIn()

    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing() {
        // Select all records from the database
        $list = $this->db->query('SELECT
        *
        FROM `' . $this->_db_table . '`'
        );

        // Return the results as an array
        return $list->results();
    } // listing()

    /**
     * Show the login form
     *
     * Displays the login form that is both shown from the user box on every page
     * but also the login page at http://yoursite/Login and the admin login page
     * http://yoursite/Admin/Login.
     *
     * One of the things that can be shown on the form is a link to the full
     * login page for help. We do not need this if we are already on that page
     * or in the admin area so we can use the $_params to pass in
     * 'hide_help'=>true if we do not need it.
     *
     * @param  array    $_params    Settings
     * @return 	string 	Login Form
     */
    public function loginForm($_params=null){

        /*
            To start the form , we create an empty variable to hold the content and then add
            to it as we go along. As it is a small form, we simply build it in a linear fashion.

            For the username and password, we use the input groups from Bootstrap, with the contents set as FontAwesome icons.
         */

        $content = '';
        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],
            'prepend' => [
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],
            'input' => [
                //'class' => 'bg-info',
                'type' => 'text',
                'id' => 'Username',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],
        ]); // #Username


        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],
            'prepend' => [
                'content' => '<i class="fas fa-key fa-sm"></i>',
                'id' => 'password_field'
            ],
            'input' => [
                'type' => 'password',
                'id' => 'Password',
                'name' => 'password',
                'placeholder' => 'Password',
                'aria' => [
                    'label' => 'Password',
                    'describedby' => 'password_field',
                ]
            ],
        ]); // #Password

        /*
            Next we add a checkbox to allow the user to specify whether wants to remain logged in, even when the browser is closed.

            When this is selected, a cookie is stored on the users machine/device that allows the system to recognise them on future visits.
         */
        $content .= Php2Bs::bs_form_check ([
            'label' => [
                'for' => 'Remember',
                'content' => 'Remember Login?',
                'class' => 'mb-0',
            ],
            'checkbox' => [
                'id' => 'Remember',
                'name' => 'remember',
                'class' => 'form-check-input',
            ],
            'outer' => [

            ]
        ]); // #Remember

        /*
            If we are not in the admin area and have not specifed that we want the link to the full login/help page to be show, we add it to $content.
         */
        if(!isset($_form_data['admin']) && !isset($_form_data['hide_help'])) {
            $content .= Php2Html::a ([
                'content' => 'Login Help',
                'href' => '/Login/'
            ]);
        }

        /*
            The last thing that we add to content is the submit button.
         */
        $content .= Php2Bs::bs_button ([
            'button_type' => 'submit',
            'color' => 'primary',
            'size' => 'sm',
            'class' => 'float-right',
            'content' => 'Login',
            'name' => 'login'
        ]);

        /*
            Finally, we pass whatever is stored in $content, into a form, along with a method of post. There is no need to set action as we are posting back to the same page.

            We simply return the form.
         */
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

    } // loginForm()

    /**
     * Show the logout form
     *
     * Displays the logout form that is both shown from the user box on every page
     * when a user is logged in and is simply a single button, created in the
     * same way as the submit button for the login form.
     *
     * @return 	string 	Logout Form
     */
    public function logoutForm() {

        /*
            Create the button.
         */
        $content = Php2Bs::bs_button ([
            'button_type' => 'submit',
            'color' => 'primary',
            'size' => 'sm',
            'class' => 'btn-block',
            'content' => 'Logout',
            'name' => 'logout'
        ]);

        /*
            Return the form with the button passed in. There is no need to set action as we are posting back to the same page.
         */
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

    } // loginForm()

    /**
     * Set messages to be displayed
     *
     * An array of messages relating to the model that will be shown as a Bootstrap
     * alert following form posts or to show errors. This can either be retieved
     * as the entire array (by ommitting the $msg parameter), or individually by
     * passing in a key such as messages('already_verified').
     *
     * For an explanation on how the messages work, please refer to
     * '/src/functions/show_page_alerts.php'.
     *
     * @param  string $msg  Optional key to retreive a single message
     * @return array        Either a single element or all
     */
    public function messages ($msg=null) {
        $array = [
            'account_update_no_change' => [
                'title' => 'Account Not Updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.',
            ],
            'account_update_success' => [
                'title' => 'Account Updated',
                'alert_color' => 'success',
                'content' => 'Your account has been updated.',
            ],
            'already_verified' => [
                'title' => 'Account Already Verified',
                'alert_color' => 'info',
                'content' => 'The account associated with that email address has already bee verified.',
                'dismissible' => false,
            ],
            'incorrect_hash' => [
                'title' => 'Incorrect Link',
                'alert_color' => 'danger',
                'content' => 'The details provided did not match that account.<br>Please use the link provided in your registration email or click the link below to send another.<br>{{alert_link}}',
            ],
            'login_banned' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you are banned.',
                'alert_color' => 'info',
            ],
            'login_empty_fields' => [
                'title' => 'Login failed',
                'content' => 'Both fields must be filled in.',
                'alert_color' => 'danger',
            ],
            'login_not_found' => [
                'title' => 'Login failed',
                'content' => 'The user was not found.',
                'alert_color' => 'info',
            ],
            'login_not_pw' => [
                'title' => 'Login failed',
                'content' => 'The password was incorrect.',
                'alert_color' => 'danger',
            ],
            'login_unverified' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you have not verified your account. Please check your email for the verification link.',
                'alert_color' => 'info',
            ],
            'not_found' => [
                'title' => 'User not found',
                'content' => 'The User could not be found. ',
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'register_success_auto' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and you can now log in. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_success_email' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created. You will receive an email containing a link to complete the registration. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_success_manual' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and is awaiting authorisation. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_validation' => [
                'title' => 'Registration unsuccesful',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],
            'resend_email' => [
                'title' => 'Email sent',
                'content' => 'A new link to verify your account has been sent.',
                'dismissible' => false,
            ],
            'update_validation_failed' => [
                'title' => 'Update unsuccesful',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],








            'admin_not_found' => [
                'title' => 'User not found',
                'content' => 'The User could not be found. '
                . Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Users/Listing']),
                'alert_color' => 'info',
                'dismissible' => false,
            ],







            'send_link_fail' => [
                'title' => 'Link not sent',
                'alert_color' => 'danger',
                'content' => 'Please enter something to search for.'
            ],
            'pw_email_sent' => [
                'title' => 'Email sent',
                'alert_color' => 'success',
                'content' => [
                    'The email has been sent to the account matching the details. Please click on the link in it to reset your password.',
                    ' If you do do receive it, check your spam or junk folders. Otherwise, <a class="alert-link" href="/Members/ResetPassword">try again</a>..']
            ],
            'hash_fail' => [
                'title' => 'Incorrect Parameters',
                'alert_color' => 'warning',
                'content' => 'We could not recognise the details. Please use the link from the email you received or enter your username, email or user id below to send another.'
            ],

            'admin_create_success' => [
                'title' => 'Account Created',
                'alert_color' => 'success',
                'content' => 'The account has been created.',
            ],

            'pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'Your password has been updated.',
            ],
            'admin_pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'The password has been updated.',
            ],


            'admin_account_delete_success' => [
                'title' => 'Account Deleted',
                'alert_color' => 'success',
                'content' => 'The account has been deleted.',
                'dismissible' => false,
            ],
            'admin_account_update_success' => [
                'title' => 'Account Updated',
                'alert_color' => 'success',
                'content' => 'The account has been updated.',
            ],

            'incorrect_verify_link' => [
                'title' => 'Incorrect Link',
                'alert_color' => 'success',
                'content' => ['The details provided did not match any accounts.','Please use the link provided in your registration email.'],
            ],
            'account_verified' => [
                'title' => 'Account Verified',
                'alert_color' => 'success',
                'content' => ['content'=>'Your account has been verified.','You can now log in using the details you used to register.',Php2Html::a(['content'=>'Home', 'href'=>'/'])],
                'dismissible' => false,
            ],
            'admin_user_unverified' => [
                'title' => 'Account not verified',
                'alert_color' => 'warning',
                'content' => '',
                'dismissible' => false,
            ],
            'admin_user_banned' => [
                'title' => 'Account banned',
                'alert_color' => 'danger',
                'content' => '',
                'dismissible' => false,
            ]
        ];

        /*
            If a message key has been passed in, just return that element, otherwise return the whole array.
         */
        if($msg) {
            return $array[$msg];
        } else {
            return $array;
        }
    } // messages()

    /**
     * Get the total most recent record
     *
     * To get the latest record, we run a select query on $this->_db_table,
     * ordering by the most recent joined date and limiting to just the first
     * (most recent) record.
     *
     * @return int 	    Count of rows
     */
    public function mostRecent() {
        // Select the most recent record from the database
        $_qry  =  $this->db->query('SELECT * FROM '.$this->_db_table .' ORDER BY `joined` DESC LIMIT 1');

        // Return details of the record
        return $_qry->first();
    } // mostRecent()

    /**
     * Set the user cookie
     *
     * Sets a cookie when a user selects 'Remember me' on the login form.
     *
     * The cookie is stored with the name set in 'user_cookie' in the `settings`
     * database table and contains a unique hash with an expiry based on what is
     * set as 'cookie_expiry in the `settings` database table.
     *
     * A corresponding record is placed in the `login_cookie` database table with
     * the hash and the users id.
     *
     * @param string $hash The hash value stored in the login cookie table
     */
    public function setCookie() {
        /*
            Create a new hash to store in the cookie using the unique() function in '/app/core/Hash.php'.
         */
        $_hash = Hash::unique();

        /*
            Check to see if this user already has a login hash. If there is, something is wrong with logouts, but all we will do is just re-use those details.
         */
        $hashCheck = $this->db->get('login_cookie', array('user_id', '=', $this->data()->id));

        /*
            If there is no existing record, we add a new one to the `login_cookie` table, otherwise we simply use the hash already stored for that user in the `login_cookie` table.
         */
        if (!$hashCheck->count()) {
            $this->db->insert('login_cookie', array(
                'user_id' => $this->data()->id,
                'hash' => $_hash
            ));
        } else {
            $_hash = $hashCheck->first()->hash;
        }

        /*
            Set the cookie using the put() function in '/app/core/Cookie.php'.
         */
        Cookie::put(SiteSettings::get('user_cookie'), $_hash, SiteSettings::get('cookie_expiry'));
    } // setCookie()

    /**
     * Attempt a login
     *
     * Takes the $_POST data from the login form and checks the information
     * against the `users` table in the database.
     *
     * If a login attempt fails, it also stores the url the request was made
     * from before redirrecting to the full login page. On successful login from
     * there, the user is return to the page from which they made the original
     * request.
     *
     * If a login is succesful it enters a record into the activity table using
     * logout_success() function in the Logs core class.
     *
     * @return Session/Cookie Login status and attempt information
     */
    public function tryLogin() {

        /*
            If we have a failed attempt at a login, followed by a succesfule one
            from the full login page, we want to take the user back to the page
            that they made the original attempt.

            To do this, when a login is attempted, if $_SESSION['refer_page']
            does not already exist and we are NOT on the full login page, we
            we set it with the current URL to redirect back to.
         */
        if (!Session::exists('refer_page') && $_SERVER['REQUEST_URI'] !== '/Login/') {
            Session::put('refer_page', $_SERVER['REQUEST_URI']);
        }

        /*
            We check the login attempt in stages as there are certain things that will mean a failure so we check those before we attempt to process anything.

            As soon as anything fails, we set the failure details as a session and redirect to the full login page. We also set a login failed record to the activity table via login_fail() in the Logs core class, set in the __construct() of this file to $this->_logs.
         */

        // Check if both fields have been filled
        if (!Input::get('username')|| !Input::get('password')) {
            // At least one field is empty so fail
            $this->_logs->login_fail([
                'user' => (!empty(Input::get('username'))) ? Input::get('username') : 'unknown',
                'reason' => 'empty_field'
            ]);
            Session::put('message',$this->messages('login_empty_fields'));
            Redirect::to('/Login/');
        } else {
            // Both fields have been filled so check that the username exists
            if (!$this->find (Input::get('username'))) {
                // The username does not exist so fail
                $this->_logs->login_fail([
                    'user' => Input::get('username'),
                    'reason' => 'user_not_found'
                ]);
                Session::put('message',$this->messages('login_not_found'));
                Redirect::to('/Login/');
            } else {
                // The username does exist check they are allowed to login
                if($this->data()->status == '0') {
                    // The user has not verified so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_unverified'
                    ]);
                    Session::put('message',$this->messages('login_unverified'));
                    Redirect::to('/Login/');
                }

                if($this->data()->status == '-1') {
                    // The user is banned so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_banned'
                    ]);
                    Session::put('message',$this->messages('login_banned'));
                    Redirect::to('/Login/');
                }

                /*
                    If we have got this far, the user exists, is verified and is not banned, so are allowed to login.

                    We check the users password from the database against a string created using the posted password and the users salt from the database, via the make() function in core/Hash.php.
                 */
                if ($this->data()->password === Hash::make(Input::get('password'), $this->data()->salt)) {
                    /*
                        The password is correct for the user so log them in by
                        setting their id to the login session, as set in members()
                        in core/Settings.php
                     */
                    Session::put(SiteSettings::get('session_user_id'), $this->data()->id);
                    Session::put(SiteSettings::get('session_user_group'), $this->data()->group);

                    // Enter the login success record into the 'activity' table.
                    $this->_logs->login_success();

                    // If the user has ticked the 'Remember Me' box, store a login cookie.
                    if (Input::exists(['name'=>'remember'])) {
                        $this->setCookie();
                    }

                    /*
                        If we are on the full login page and the original request
                        came from any page another page, send them back there.

                        If they started on the full login page, send them to the
                        home page.
                     */
                    if($_SERVER['REQUEST_URI'] == '/Login/') {
                        if(Session::exists('refer_page')) {
                            Redirect::to(Session::get('refer_page'));
                        } else {
                            Redirect::to('/home');
                        }
                    }
                } else {
                    // The password is incorrect so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'incorrect_pw'
                    ]);
                    Session::put('message',$this->messages('login_not_pw'));
                    Redirect::to('/Login/');
                } // password check
            } // user exists
        } // username and password filled
    }// tryLogin()

    /**
     * Attempt a logout
     *
     * Simply deletes all existing $_SESSION variables and cookies relating to
     * the current user and and enters it into the activity table using
     * logout_success() function in the Logs core class. We call this first as
     * we need the $_SESSION data to create the record.
     *
     * @return Session/Cookie Login deletion
     */
    public function tryLogout() {

        // Enter a record in the activity table
        $this->_logs->logout_success();

        // Delete the users $_SESSION data
        Session::delete(SiteSettings::get('session_user_id'));
        Session::delete(SiteSettings::get('session_user_group'));

        // If a login cookie is set, delete that as well
        if($this->hasCookie()) {
            $this->deleteCookie();
        }
    } // tryLogout()

    /**
     * Update a user
     *
     * Updates a users details in the 'users' table based on validated
     * $_POST data. Validation should be run before calling this function.
     * @param  int      $record     User ID
     * @param  array    $_postdata  $_POST data
     * @return bool                 Success status
     */
    public function update($_record, $_postdata) {
        if (!$this->db->update($this->_db_table, $_record, $_postdata)) {
            // The update was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->update()';
            }
            return false;
        }
        return true;
    } // update

    /**
     * User form
     *
     * Single function to control both the registration and edit user forms in
     * the front end and admin area.
     *
     * Several parts of this form get hidden depending on parameters passed in.
     *
     * The parameters that can be used are
     * 'errors' an array errored field names and error messagesfollowing a failed
     * post attempt.
     * 'version' whether we are in create mode or edit mode.
     * 'area' shows which part of the site we are on where 'user' refers to front
     * end and 'admin' refers to backend.
     * 'data' will contain the user information in edit mode.
     *
     * @param  array    $_params    Version, area and error details
     * @return string               User create/edit form
     */
    public function userForm ($_params) {

        /*
            After a failed post, want to repopulate the form with
            the posted data so the user does not have to fill it all in again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'username', 'email', 'firstname', 'lastname'
        ];

        /*
            If we are in create mode we need the password fields so add those to $_form_fields. If we are in the front end, we also need the terms added.
         */
        if($_params['version'] == 'create') {
            $_form_fields[] = 'password';
            $_form_fields[] = 'confirm_password';

            if($_params['area'] == 'user') {
                $_form_fields[] = 'terms';
            }
        }

        /*
            We now loop through the form fields array to check for validation
            and data.

            First we check to see if there is a matching value in the 'errors'
            parameter passed in to the function. If there is we set the class
            for that field in $_field_data to 'is-invalid'. If there is no
            matching value, if there is any post data, we assume it must have
            been succesful so set the class to 'is-valid', otherwise we just
            leave it blank.

            Then we check for any posted data, from a failed form submit. If
            there is a match, we set it to the 'val' for that field in
            $_field_data. If there is no match, we check to see if a record has been passed in via the 'data' parameter passed in to the function (create mode).
            Again, if there is a match, we add that to 'val', otherwise we are left
            with nothing to use as 'val' so leave it blank.

            When creating the actual input for the field, we add anything in 'class'
            to the input class="" and the 'val' to the value="".
        */
        foreach ($_form_fields as $value) {
            // Check for errors
            if (isset($_params['errors'][$value])) {
                // Errors found for the field so add invalid class
                $_field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data if an account update has been attempted
            if (Input::exists($value) && trim(Input::get($value)) !== false) {

                // There is posted data so set that as the value
                $_field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$value]['val'] = $_params['data']->$value;
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$value]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        /*
            We now have everything we need so can start building the form.

            We create the content first and then pass it into the form once we have
            all of the fields created.

            To start, we create an empty variable to hold the content and then add
            to it as we go along.
         */
        $content = '';

        // Add the Username and Email form row
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            # Username
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Username',
                    'content' => 'Username',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Username',
                    'name' => 'username',
                    'placeholder' => 'Username',
                    'class' => $_field_data['username']['class'],
                    'value' => $_field_data['username']['val'],
                    'aria' => [
                        'describedby' => 'Username'
                    ],
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Email
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Email',
                    'content' => 'Email',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_email ([
                    'id' => 'Email',
                    'name' => 'email',
                    'placeholder' => 'Email',
                    'class' => $_field_data['email']['class'],
                    'value' => $_field_data['email']['val'],
                    'aria' => [
                        'describedby' => 'Email'
                    ],
                ]) // Php2Bs::bs_input_email
            ]) // Php2Bs::bs_form_group
        ]); // Username and password row

        // First and Last Names Row
        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Firstname
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Firstname',
                    'content' => 'Firstname',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Firstname',
                    'name' => 'firstname',
                    'placeholder' => 'Firstname',
                    'class' => $_field_data['firstname']['class'],
                    'value' => $_field_data['firstname']['val'],
                    'aria' => array (
                        'describedby' => 'Firstname'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Lastname
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Lastname',
                    'content' => 'Lastname',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Lastname',
                    'name' => 'lastname',
                    'placeholder' => 'Lastname',
                    'class' => $_field_data['lastname']['class'],
                    'value' => $_field_data['lastname']['val'],
                    'aria' => array (
                        'describedby' => 'Lastname'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
        ]); // First and last names row

        // Password Row - only if we are in create mode
        if($_params['version'] == 'create') {
            // Password Row
            $content .= Php2Bs::bs_form_row ([
                //'class' => '',
                'content' =>
                # Password
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Password',
                        'content' => 'Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .Php2Bs::bs_input_password ([
                        'id' => 'Passsword',
                        'name' => 'password',
                        'placeholder' => 'Passsword',
                        'class' => $_field_data['password']['class'],
                        'value' => $_field_data['password']['val'],
                        'aria' => [
                            'describedby' => 'Password'
                        ],
                    ]) // password
                ]) // Php2Html::div.form-group
                # Confirm_Password
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Confirm_Password',
                        'content' => 'Confirm Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                        'id' => 'Confirm_Password',
                        'name' => 'confirm_password',
                        'placeholder' => 'Confirm Password',
                        'class' => $_field_data['confirm_password']['class'],
                        'value' => $_field_data['confirm_password']['val'],
                        'aria' => [
                            'describedby' => 'Confirm_Password'
                        ],
                    ]) // Php2Bs::bs_input_password
                ]) // Php2Bs::bs_form_group
            ]); // Php2Bs::bs_form_row
        } // Password row

        /*
            If we are in edit mode in the admin area, we can also change the
            usergroup and the users status (active, banned, unverified) from
            the same form so we have to add them to $content.

            We create them individually as  $group_select and $status_select
            before passing them into the form.
         */
        if($_params['version'] == 'edit' && $_params['area'] == 'admin') {

            // Open up the Usergroups model
            $groups = new M_Usergroups ();

            /*
                Create an empty $options variable to hold the contents of the
                select menu that we will use to choose a group.
             */
            $options = '';

            /*
                Loop through the list of usergroups and for each one, create
                and <option> tag to go inside the select menu and add it
                to $content.
             */
            foreach ($groups->listing() as $key => $value) {
                $options .= Php2Html::option ([
                    'content' => $value->group_name,
                    'value' => $value->id,
                    'is_selected' => ($value->id == $_params['data']->group) ? true: false,
                ]);
            }

            /*
                Create the select menu, using the $options variable and
                assign it to $group_select.
             */
            $group_select = Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'GroupName',
                'name' => 'group'
            ]);

            /*
                We now do exactly the same for the $status_select, except
                that the listing is a hand built array that we create
                directly in the foreach
             */
            $options = '';
            foreach (['-1' =>'Banned', '0' => 'Unverified', '1' => 'Active'] as $key => $value) {

                $options .= Php2Html::option ([
                    'content' => $value,
                    'value' => $key,
                    'is_selected' => ($key == $_params['data']->status) ? true: false,
                ]);
            }

            $status_select =  Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'StatusName',
                'name' => 'status'
            ]);

            // Now add both dropdowns to the form
            $content .= Php2Bs::bs_form_row ([
                'content' =>
                # User Group
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'GroupName',
                        'content' => 'User Group',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .$group_select
                ]) // Php2Html::div.form-group

                # Status
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'StatusName',
                        'content' => 'Status',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .$status_select
                ]) // Php2Bs::bs_form_group
            ]); // Php2Bs::bs_form_row
        } // Password row

        /*
            If we are in front end create mode, we require both the Accept Terms
            checkbox as well as the submit button, otherwise we just need the
            submit button.

            As we do not know if we will need both, we create an empty $bottom_row
            variable and add what it requires, before passing it into a form row.
         */
        $bottom_row = '';

        /*
            If we are in front end create mode, we need to create a 'terms' checkbox an its parameters.
         */
        if(in_array("terms", $_form_fields)) {
            // Create the parameters for the checkbox
            $checkbox_array = [
                'id' => 'Terms',
                'name' => 'terms',
                'class' => $_field_data['terms']['class'],
                'aria' => [
                    'describedby' => 'Terms'
                ],
            ];

            // If it was checked on a previous post attempt, re-check it
            if($_field_data['terms']['val']) {
                $checkbox_array['checked'] = '';
            } // if($_field_data['terms']['val'])

            // Create the terms form group with the parameters set above
            $bottom_row .= Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' =>
                # Terms
                Php2Bs::bs_form_check ([
                    'label' => [
                        'for' => 'Terms',
                        'content' => 'Accept Terms Below',
                    ],
                    'checkbox' => $checkbox_array,
                    'outer' => [

                    ]
                ])
            ]); // Php2Bs::bs_form_group
        } // if(in_array("terms", $_form_fields))

        /*
            The submit button also comes in a form-group but as we always want it to
            appear on the right, we give it a class of 'col-md-6' when the terms
            form-group is also required (that also uses 'col-md-6'), and 'col-12'
            when we are showing just the button.

            We set this to $button_group_size, based on whether or not 'terms'
            has been added to the $_form_fields array.
         */
        $button_group_size = (in_array("terms", $_form_fields)) ? 'col-md-6': 'col-12';

        // Set the details for the submit button based on the version
        if($_params['version'] == 'create') {
            $button_name = 'register';
            $button_text = 'Register';

        } else {
            $button_name = 'update_user';
            $button_text = 'Update';
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row.Php2Bs::bs_form_group ([
                'class' => $button_group_size,
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'color' => 'primary',
                    'size' => 'sm',
                    'class' => 'float-right',
                    'content' => $button_text,
                    'name' => $button_name
                ]) // Php2Bs::bs_button
            ])// Php2Bs::bs_form_group
        ]); // Bottom row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

    } // userForm ()

    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being processed.
     *
     * See the '/app/core/Validate.php' class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'username' => [
                'required' => true,
                'min' => 6,
                'max' => 20,
                'preg_match' => '/^[a-zA-Z]\w*[a-zA-Z0-9_]$/',
                'unique' => 'users',
                'error_text' => 'Usernames must be between 6 and 20 characters, only using letters, numbers and underscores.'
            ],
            'email' => [
                'required' => true,
                'filter' => "email",
                'unique' => 'users',
                'error_text' => 'You must use a valid and accesible email address.'
            ],
            'firstname' => [
                'required' => true,
            ],
            'lastname' => [
                'required' => true,
            ],
            'password' => [
                'required' => true,
                'min' => 6
            ],
            'confirm_password' => [
                'required' => true,
                'matches' => 'password',
                'error_text' => 'Confirm must match'
            ],
            'terms' => [
                'required' => true,
                'error_text' => 'You must read and accept the terms and conditions'
            ]
        ];
    } // validation_rules()



####################################################



    /**
	 *	Change a users password
	 *
	 *	Creates a new salt and hashed password and updates a users
	 *	record with them.
	 *
	 *	@param 	int		$user		User ID
	 **/
	public function changePassword ($user) {
		// We always use validation as an object so we do this for constency
		$_validate = (object)array();

		// Place the $_POST data into a variable that will get manipulated.
		$_postdata = $_POST;

		/*
			The forms all have .req-token to prevent double-posting on page
			refresh. This generates a new $_SESSSION['token'] value and also
			adds a hidden form element containing the $_SESSSION['token'].

			We need to check that the posted token matches the current $_SESSSION['token']
			and only proceed if it does.
		 */
		if(!Token::check(Input::get('token'))) {
    		// The token check failed so set the errors to 'token'
    		$_validate->error = 'token';

    	} else {
			/*
				The token check is succesful, so we again unset that from the $_postdata array, along with the
				submit button, to ensure we only have insert data left.
			*/
			unset($_postdata->token);
			unset($_postdata->reset_password_submit);

			/*
				We now attempt to validate the contents of $_postdata.

				The validation for this form is passed directly into Form_Functions::postValidate(), along with the $_postdata and
				this checks each field in $_postdata against it's relevant validation if it exists.

				The function returns a boolean 'status' as to  whether validation was passed. If validation failed, it will also contain any
				validation errors that have been generated.
			 */
			$_validate = Form_Functions::postValidate($_postdata,
			array (
			    'password' => [
					'validation' => [
					    'required' => true,
					    'min' => 6
					],
				],
			    'confirm_password' => array(
				'type' => 'password',
				'error' => 'You must enter a confirmation password that matches the password',
				'validation' => array(
				    'required' => true,
				    'matches' => 'password'
				),
			    ))
			);

			if($_validate->status)
			{
				// Create a new salt
				$salt = Hash::salt(32);

				/*
					The original $_postdata -> password cannot be entered as it is a raw string of readable data.

					We replace this with a hashed password, generated using the salt we just created and also create
					a new element in $_postdata with the salt as when logging in, we will need the updated salt to match
					the stored, hashed, password.
				*/
				$_postdata = array(
				'password' => Hash::make(Input::get('password'), $salt),
				'salt' => $salt
				);

				// Now we have the correct $_postdata so use quickUpdate() to process it.
				$this->quickUpdate($user, $_postdata);
			}
		}

		// Return any errors
		return (isset($_validate->error)) ? $_validate->error : false ;
    } // changePassword()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordForm($_form_data=[]){

        /*
            After a failed post, want to repopulate the form with
            the posted data so the user does not have to fill it all in again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'password', 'confirm_password'
        ];

        foreach ($_form_fields as $value) {
            // Check for errors
            if (isset($_form_data['errors'][$value])) {
                // Errors found for the field so add invalid class
                $_field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data
            if (Input::exists($value)) {
                // There is posted data so set that as the value
                $_field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_form_data['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$value]['val'] = $_form_data['data']->$value;
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$value]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)


        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Password
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Password',
                    'content' => 'Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                    'id' => 'Passsword',
                    'name' => 'password',
                    'placeholder' => 'Passsword',
                    'class' => $_field_data['password']['class'],
                    'value' => $_field_data['password']['val'],
                    'aria' => [
                        'describedby' => 'Password'
                    ],
                ]) // password
            ]) // Php2Html::div.form-group
            # Confirm_Password
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Confirm_Password',
                    'content' => 'Confirm Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
            .Php2Bs::bs_input_password ([
                    'id' => 'Confirm_Password',
                    'name' => 'confirm_password',
                    'placeholder' => 'Confirm Password',
                    'class' => $_field_data['confirm_password']['class'],
                    'value' => $_field_data['confirm_password']['val'],
                    'aria' => [
                        'describedby' => 'Confirm_Password'
                    ],
                ]) // Php2Bs::bs_input_password
            ]) // Php2Bs::bs_form_group
        ]); // Php2Bs::bs_form_row

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Reset',
            'name' => 'reset_password'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordLinkForm($_form_data=[]){
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-2'
            ],

            'prepend' => [
                'class' => '',
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],

            'input' => [
                'class' => '',
                'type' => 'text',
                'id' => 'Username',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],

        ]); // Php2Html::div.form-group

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Send Email',
            'name' => 'send_reset_email'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()


    public function sendPasswordLinkMail ($email, $hash) {
        // Insert the email and has as a record in user_hash
        try {
            SendMail::sendPasswordLink($email, $hash);
        } catch(Exception $e) {
        die();
        }

    } // sendVerifyMail()



}































