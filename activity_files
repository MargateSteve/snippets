<?php

/**
 * Main Template Base
 *
 * This file contains the core structure and functions for building the main
 * template all bar the actual page content, which is called using new Main_Template
 * which extends this class.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */
class Admin {

    /**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$params        Additional parameters
	 */
    public function __construct($content, $params=array()) {

        /*
            Before we attempt to do anything, we need to ensure that the
            user logged in and authorised to view the admin area.

            If they are not logged in, the get directed to the admin login page
            otherwise they get sent to the unathorised page.
         */

        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            Redirect::to('/Admin/Login/');
        } else {
            if(!$user->hasPermission('admin')) {
                Redirect::to('/Admin/Unauthorised/');
            }
        }

		// Set the displayed content to $this->content
		$this->content = $content;

		/*
            If a 'page_title' has been passed set it to $this->page_title,
            otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle,
            if required .

            These variables get checked in the content() function and then
            added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT
            show, even if it has been set.
         */
		$this->page_title = (isset($params['page_title'])) ? $params['page_title'] : null;
        $this->page_subtitle = (isset($params['page_subtitle'])) ? $params['page_subtitle'] : null;

		/**
		 * Set the layout version
		 *
		 * If a layout has been passed from the view via $params['layout'] set $this->layout
		 * to it otherwise use 'default'.
		 *
		 * These variables get checked in the layout_switcher() function within this file
		 * and will return a layout based on that is set here.
		 *
		 * To see the demo layout versions and instructions on how to edit them or create a
		 *  new one, see layout_switcher() and its comments.
		 *
		 * @var string
		 */
        if(isset($params['layout'])) {
            $this->layout = $params['layout'];
        } else {
            $this->layout = 'default';
        }

        /**
         * Set any page specific meta tags. These will be set in the view as a
         * key/value pairing and will override the defaults set in
         * /app/core/Settings.php->meta_tags()
         * @var [type]
         */
        if(isset($params['meta'])) {$this->meta =$params['meta'];}

        /**
         * Set any page specific css. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['css'])) {$this->css =$params['css'];}

        /**
         * Set any page specific js. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['js'])) {$this->js =$params['js'];}

        if(isset($params['alert'])) {$this->content = $params['alert'].$this->content;}


        $this->menu_category = (isset($params['menu_category'])) ? $params['menu_category'] : null;
        $this->menu_item = (isset($params['menu_item'])) ? $params['menu_item'] : null;

		// Call the template function
        self::Template();

    } // __construct

    /**
     * Build the entire template
     *
     * We build this up gradually via functions contained eihter in this file or in
     * the Base_Template file it extends
     * @return 	HTML page
     */
    private function Template () {
        // Build the start of the page up to the opening body tag, including the <head>
        self::bodyStart ();

        // Build top navigation bar
        self::topNav ();

        self::dropMenus ();

        // Show the actual content for the page
        self::content ();

        self::footer ();

        // Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()





	/**
	 * Build the HTML down to the opening body tag and include extra css
	 *
	 * @return string 					Template to the opening <body> tag
	 */
    public function bodyStart ()
	{

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';


        /**
         * Include the <head> section
         *
         * If a page needs any extra css apart from the default, this will
         * have been specified using an $include array when calling new Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out .= self::head ();

        // Open the body tag
        $out .= '<body class="bdy">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

	/**
	 * Finish the HTML
	 *
	 * @return string 					Template for the end of the HTML
	 */
    public function bodyEnd ()
	{

		/**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

    private function content () {

        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $params['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $params['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title)
        {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);


        }



        /*
            Call the correct layout of the page

            The main content could be called into one of several different
            layouts. The reason for this is you may want a slightly
            different layout for certain content such as some pages having
            a content specific sidebar.

            This is fully controlled by the layout_switcher () function in
            this file (a separate function has been created as there is an
            infinite number of combinations that you can use) controls all of it so we simply add that to the $content variable.

            See the comments for that function for a list of available ones and how to create a new one.
         */
        $content .= Php2Bs::bs_row ([
            'content' => self::left_Column ()
                        .self::main_column_medium (),
            'class' => 'flex-xl-nowrap',
        ]);


        /*
            We now have the entire content of the page, in the required layout
            version, contained within $content.

            In this template, the entire content area is wrapped in the Bootstrap container within a Bootstrap fluid-container.

            Tp make this, we echo out a bs_container() function from the Php2Bs
            class, with 'container_type' set to fluid.

            Inside this, we set it's 'content' as another bs_container(), but this time without the 'fluid' request. It is in the 'content' for
            this that we actually pass the completed $content.
         */
        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => $content
        ]); // container-fluid

    } // content()

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {


        /*
            Now $title will contain everything required in the page_title
            div so we add it to $content using the div() function in the
            Php2Html class.
         */
        $title = Php2Html::h([
            'size' => '2',
            'class' => 'page_title',
            'content' => $this->page_title
        ]);

        /*
            If a subtitle has been set, add it to $title as a paragraph
            using the p() function in the Php2Html class with a class of 'lead-description'.
         */
        if($this->page_subtitle)
        {
            $title .=  Php2Html::p([
                'class' => 'lead description',
                'content' => $this->page_subtitle
            ]);
        }

        $this->content = $title.$this->content;

        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9 col-xl-10'
        ]);
    } // main_column_medium ()

    /*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        demo_user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
    private function left_Column () {

        $links = array (
            'Dashboard' => array (
                'type' => 'link',
                'href' => '/home',
            ),
            'Users' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Overview' => '/Users',
                    'List' => '/Users/Listing',
                    'Add' => '/Users/Add',
                    'Usergroups' => '/Usergroups',
                    'Activity Types' => '/ActivityType',
                )
            ),
            'Faults' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Overview' => '/Faults',
                    'List' => '/Faults/Listing',
                    'Add' => '/Faults/Add',
                    'Rag Status' => '/Faults/RagStatus',
                )
            ),
            'Systems' => array (
                'type' => 'link',
                'href' => '/Systems',
            ),
            'Categories' => array (
                'type' => 'link',
                'href' => '/Categories',
            ),
            'Utilities' => array (
                'type' => 'menu',
                'children' => array
                (
                    'Blend' => 'Blend',
                    'Borders' => 'Borders',
                    'Colors' => 'Colors',
                    'Contrast' => 'Contrast',
                    'Complement' => 'Complement',
                    'Invert' => 'Invert',
                    'Sizing' => 'Sizing',
                )
            )

        );


        $content = '';

        foreach ($links as $key => $value) {

            $nav_button = '';
            $nav_content = '';


            $params = [
                'content' => $key,
                'class' => 'text-light border-bottom border-light',
            ];

            if($key == $this->menu_category) {
                $params['class'] = 'bg-dark ' . $params['class'];
            }
            if($value['type']=='link') {
                $params['href'] = '/Admin'.$value['href'];
                $content .= Php2Bs::bs_nav_item ([
                    'content' => Php2Bs::bs_nav_link (
                        $params
                    )
                ]);

            }

            if($value['type']=='menu') {
                $params['href'] = '#';
                $params['data_attr'] = [
                    'toggle' => 'collapse',
                    'target' => '#nav-'.$key
                ];
                $params['aria'] = [
                    'controls' => 'nav-'.$key,
                    'expanded' => 'false',
                    'label' => 'Toggle '.$key.' navigation'
                ];


                $children = '';
                foreach ($value['children'] as $menu => $link) {
                    // Remove Link from active
                    $menu_class = ($key == $this->menu_category && $menu == $this->menu_item) ? 'list-group-item-info' : 'list-group-item-action list-group-item-light';
                    $children .= Php2Bs::bs_nav_item ([
                        'content' => Php2Bs::bs_nav_link ([
                            'href' => '/Admin'.$link,
                            'content' => $menu,
                            'class' => $menu_class. ' border-bottom border-dark pl-4'

                        ])
                    ]);
                }

                $menu_class = ($key == $this->menu_category) ? 'show' : '';
                $nav_content .= Php2Html::div ([
                    'id' => 'nav-'.$key,
                    'content' => Php2Bs::bs_nav ([
                        'content' => $children,
                        'class' => 'flex-column'
                    ]),
                    'class' => 'collapse ' . $menu_class

                ]);

                $nav_button = Php2Bs::bs_nav_item ([
                    'content' => Php2Bs::bs_nav_link (
                        $params
                    ).$nav_content
                ]);
                $content .= $nav_button;
            }




        }




        return Php2Bs::bs_column ([
			'content' => Php2Html::div ([
                'id' => 'left-nav',
                'class' => 'collapse docs-menu',
                'content' => Php2Bs::bs_nav ([
                    'content' => $content,
                    'class' => 'flex-column',


                ]),
            ]),
			'id' => 'left',
            'class' => 'col-12 col-md-3 col-xl-2 left-menu bg-secondary',

        ]);
    } // left_Column ()

	/**
	 * Build the <head> section
	 *
	 * Builds the entire <head> tag and includes any global or
	 * page specific css and meta tags.
	 *
	 * @return     string      <head> section
	 */
    private function head ()
	{
		/*
            We build the contents of the <head> gradually so we create a $out
            variable containing the opening tag and concatenate to it as we go along.
         */
		$out = '<head>';

		/*
            Include the <meta> tags

            Each of the meta tags should initially be stored in the meta_tags()
            function in /app/core/Settings.php with a default content to be used
            if an alternative is not set.

            For page specific meta tags, set a key/pairing array in the view as
            $params['meta'] with the name and content of each once you want to
            overwrite.

            You can also set global meta tags manually and this is required for any
            that do not use a name and content combination.
         */
        $out .=  ' <meta charset="utf-8">';

        /*
            As there may be overrides for some of the meta tags set in the page/view, we initially store the default meta tags in a $tags variable so it can be easily manipulated.
         */
        $tags = Settings::meta_tags();

        /*
            If any page-specific meta tags have been passed in, they would have
            been set to $this->meta in the called template file (by default
            /app/core/Templates/Main.php).
            We loop though these and for each one, overwrite the matching tag
            name in $tags.
         */
        if(isset($this->meta))
        {
            foreach ($this->meta as $name => $content) {

                $tags[$name] = $content;
            }
        }

        /*
            Finally, we loop through the tags array and create a meta tag for each one, adding it to the $out variable.
         */
        foreach ($tags as $name => $content) {
            $out .= Php2Html::meta([
                    'name' => $name,
                    'content' => $content
            ])."\n";
        }

		/*
            Set the Page Title

            If the page title has been passed in from the view, show the site name as set in Settings.php followed by a colon and then the page title.
            Otherwise, it just shows the site name.

            You can change this to suit your needs.
         */
		$title = isset($this->page_title) ? Settings::site_details('site_name') .': '.$this->page_title: Settings::site_details('site_name');
		$out .=  '<title>' . $title. '</title>';

		// Link the Favicon
		$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

		/*
            Call in the stylesheets

            Again, you can have global style sheets as well as page, specific ones. Wherever they are set, they are called from the css() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full stylesheet link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['css'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/site' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
		$out .= Settings::css('remote/bootstrap/v4');


        // Loop through the page specific styles
        if(isset($this->css))
        {
            foreach ($this->css as $stylesheet) {
                $out .= Settings::css($stylesheet);
            }
        }


        $out .= Settings::css('local/admin');

        // Close the head tag
        $out .=  '</head>';

        // Echo the $out variable
		echo $out;

    } // head()

	/**
	 * Build the required scripts
	 *
	 * Builds the js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts ()
	{
        $out = '';

        /*
            Call in the any scripts

            Again, you can have global scripts as well as page, specific ones. Wherever they are set, they are called from the js() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full script link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['js'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/default' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
         $out .= Settings::js('remote/jquery');
         $out .= Settings::js('remote/popper');
         $out .= Settings::js('remote/bootstrap/v4');
         $out .= Settings::js('remote/font-awesome-5');

        // Loop through the page specific styles
        if(isset($this->js))
        {
            foreach ($this->js as $script) {
                $out .= Settings::js($script);
            }
        }

        $out .= Settings::js('local/default');

        // Echo the $out variable
        echo $out;

    } // scripts()


    public function dropMenus()
 	{
        $out = '';

        $out .= Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => 'Search',
            'class' => 'collapse py-2 bg-secondary text-light border-bottom border-dark',
            'id' => 'nav-search'
       ]);

       $out .= Php2Bs::bs_container ([
           'container_type' => 'fluid',
           'content' => 'User',
           'class' => 'collapse py-2 bg-secondary text-light border-bottom border-dark',
           'id' => 'nav-user'
      ]);

       echo $out;
    }

	/**
	 * Build the top navigation menu
	 *
	 * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
	 * in the required links and dropdowns
	 *
	 * @return string 	nav
	 */
    public function topNav ()
 	{

        $brand = Php2Html::a ([
            'class' => 'navbar-brand',
            'href' => '#',
            'content' => 'BSADMIN'
        ]);

        $home_button = Php2Html::a ([
            'content' => '<i class="fas fa-home"></i>',
            'id' => 'left',
            'href' => '/home',
            'class' => 'text-light p-0 pr-2',
        ]);

        $toggle_button = Php2Html::a ([
            'content' => '<i class="fas fa-search mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#nav-search'
            ],
            'aria' => [
                'controls' => 'nav-search',
                'expanded' => 'false',
                'label' => 'Toggle search navigation'
            ]
        ]);


        $search_button = Php2Html::a ([
            'content' => '<i class="fas fa-bars mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  d-md-none p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#left-nav'
            ],
            'aria' => [
                 'controls' => 'left-nav',
                 'expanded' => 'false',
                 'label' => 'Toggle left navigation'
            ]
        ]);

        $user_button = Php2Html::a ([
            'content' => '<i class="fas fa-user mr-2"></i>',
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#nav-user'
            ],
            'aria' => [
                 'controls' => 'nav-user',
                 'expanded' => 'false',
                 'label' => 'Toggle user navigation'
            ]
        ]);


        $left_buttons = Php2Html::span([
            'content' => $home_button.$search_button.$toggle_button,
            'class' => 'fa-lg mr-auto',
        ]);

        $right_buttons = Php2Html::span([
            'content' => $user_button,
            'class' => 'fa-lg',
        ]);




         $out = Php2Bs::bs_navbar ([
             // Navbar content
                'content' => $brand . $left_buttons . $right_buttons,
                'class' => 'navbar-expand-lg navbar-dark bg-dark text-light invert sticky-top justify-content-start'


         ]);



 		echo $out;
     } // topNav()

	/**
	 * Build footer
	 *
	 * Sets the page footer
	 *
	 * @return string 	footer
	 */
    public function footer ()
	{
        echo Php2Bs::bs_footer ([
            'content' => Php2Bs::bs_container ([
                'container_type' => 'fluid',
                'content' =>  'Place sticky footer content here.',
                'class' => 'text-white',
            ]),
            'class' => 'bg-dark',
        ]);

    } // footer()


}





-----------------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Main Template Base
 *
 * This file contains the core structure and functions for building the main
 * template all bar the actual page content, which is called using new Main_Template
 * which extends this class.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */
class Base {

	/**
	 * Build the HTML down to the opening body tag and include extra css
	 *
	 * @return string 					Template to the opening <body> tag
	 */
    public function bodyStart ()
	{

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';


        /**
         * Include the <head> section
         *
         * If a page needs any extra css apart from the default, this will
         * have been specified using an $include array when calling new Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out .= self::head ();

        // Open the body tag
        $out .= '<body class="bdy">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

	/**
	 * Finish the HTML
	 *
	 * @return string 					Template for the end of the HTML
	 */
    public function bodyEnd ()
	{

		/**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

	/**
	 * Build the <head> section
	 *
	 * Builds the entire <head> tag and includes any global or
	 * page specific css and meta tags.
	 *
	 * @return     string      <head> section
	 */
    private function head ()
	{
		/*
            We build the contents of the <head> gradually so we create a $out
            variable containing the opening tag and concatenate to it as we go along.
         */
		$out = '<head>';

		/*
            Include the <meta> tags

            Each of the meta tags should initially be stored in the meta_tags()
            function in /app/core/Settings.php with a default content to be used
            if an alternative is not set.

            For page specific meta tags, set a key/pairing array in the view as
            $params['meta'] with the name and content of each once you want to
            overwrite.

            You can also set global meta tags manually and this is required for any
            that do not use a name and content combination.
         */
        $out .=  ' <meta charset="utf-8">';

        /*
            As there may be overrides for some of the meta tags set in the page/view, we initially store the default meta tags in a $tags variable so it can be easily manipulated.
         */
        $tags = Settings::meta_tags();

        /*
            If any page-specific meta tags have been passed in, they would have
            been set to $this->meta in the called template file (by default
            /app/core/Templates/Main.php).
            We loop though these and for each one, overwrite the matching tag
            name in $tags.
         */
        if(isset($this->meta))
        {
            foreach ($this->meta as $name => $content) {

                $tags[$name] = $content;
            }
        }

        /*
            Finally, we loop through the tags array and create a meta tag for each one, adding it to the $out variable.
         */
        foreach ($tags as $name => $content) {
            $out .= Php2Html::meta([
                    'name' => $name,
                    'content' => $content
            ])."\n";
        }

		/*
            Set the Page Title

            If the page title has been passed in from the view, show the site name as set in Settings.php followed by a colon and then the page title.
            Otherwise, it just shows the site name.

            You can change this to suit your needs.
         */
		$title = isset($this->page_title) ? Settings::site_details('site_name') .': '.$this->page_title: Settings::site_details('site_name');
		$out .=  '<title>' . $title. '</title>';

		// Link the Favicon
		$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

		/*
            Call in the stylesheets

            Again, you can have global style sheets as well as page, specific ones. Wherever they are set, they are called from the css() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full stylesheet link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['css'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/site' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
		$out .= Settings::css('remote/bootstrap/v4');

        // Loop through the page specific styles
        if(isset($this->css))
        {
            foreach ($this->css as $stylesheet) {
                $out .= Settings::css($stylesheet);
            }
        }


        $out .= Settings::css('local/site');

        // Close the head tag
        $out .=  '</head>';

        // Echo the $out variable
		echo $out;

    } // head()

	/**
	 * Build the required scripts
	 *
	 * Builds the js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts ()
	{
        $out = '';

        /*
            Call in the any scripts

            Again, you can have global scripts as well as page, specific ones. Wherever they are set, they are called from the js() function in /app/core/Settings.php.
            These are set in a multidimensional array and return the full script link
            as a string.
            When setting, simply set the path to the stylesheet separated by slashes so
            'remote/bootstrap/v4_beta' would return the string at
            'remote' => 'bootstrap' => 'v4_beta'.

            To include any globally, simply concatenate them to the $out variable.

            To include any page specific, pass them in via a $params['js'] array, simply
            using the string.

            Note that you will need to be careful with the order of these to ensure there are
            no class name conflicts. As you can see, here we have set 'local/default' after
            everything else to ensure it is the last one called and therefore takes priority.
         */
         $out .= Settings::js('remote/jquery');
         $out .= Settings::js('remote/popper');
         $out .= Settings::js('remote/bootstrap/v4');
         $out .= Settings::js('remote/font-awesome-5');

        // Loop through the page specific styles
        if(isset($this->js))
        {
            foreach ($this->js as $script) {
                $out .= Settings::js($script);
            }
        }

        $out .= Settings::js('local/default');

        // Echo the $out variable
        echo $out;

    } // scripts()

	/**
	 * Build the top navigation menu
	 *
	 * Sets the static parts of the menu and turns Globals::get('menus/main_top_nav')
	 * in the required links and dropdowns
	 *
	 * @return string 	nav
	 */
    public function topNav () {
        // Main Site Top Navigation Menu
        $nav_items = [
            'Home' => ['link', '/'],
            'Users' => ['link', '/Users/'],
            'News' => ['link', '/News/'],

        ]; // $nav_items


        $brand = Php2Html::a ([
            'content' => 'UAT Hub',
            'href' => '#',
            'class' => 'navbar-brand'
        ]);

        $out = '';

        $toggle_button = Php2Html::button ([
            'content' => Php2Html::span ([
                    'content' => '',
                    'class' => 'navbar-toggler-icon'
            ]),
            'class' => 'navbar-toggler navbar-toggler-right',
            'data_attr' => [
                'toggle' => 'collapse',
                'target' => '#main-nav',
            ],
            'aria' => [
                'controls' => 'main-nav',
                'expanded' => 'false',
                'label' => 'Toggle navigation',

            ],
        ]);

         $menu = '';
         foreach ($nav_items as $key => $value)
 		{
 			// 'type' is set as 'link'
            if($value[0] == 'link') {
 				/*
 					Build a <li> with the class of .nav-item
 					Inside this put an <a> with a value of $value[1] (the link)
 					and a display of $key (the link name)
 				 */
                 $params['href'] = $value[1];
                 $params['class'] = 'text-light';
                 $params['content'] = $key;
                 $menu .= Php2Bs::bs_nav_item ([
                     'content' => Php2Bs::bs_nav_link (
                         $params
                     )
                 ]);
            }

 			// 'type' is set as 'dropdown'
             if($value[0] == 'dropdown') {
 				/*
 					Build a <li> with the class of .nav-item dropdown .

 					Inside this, build an <a> with a class of dropdown-toggle. This
 					will then use the Bootstap toggle class.
 					Set the id to the $key (the link name) appended with '_menu'. This
 					will be to target the correct dropdown menu. Also set the display to $key.

 					Build a <div> with the class of .dropdown-menu. Give it an
 					aria-labelledby of $key appended with '_menu' so it matches
 					the <a> that triggers it.

 					Finally, inside the div, loop through the links (stored in $value[1]) and creat an <a> for each one.
 				 */
                  $links = '';
                  foreach ($value[1] as $items => $item)
                  {


                      $links .= Php2Bs::bs_dropdown_item([
							'content' => $items,
                            'href' => $item[1]
                      ]);

                       //$out .= '  <a class="dropdown-item" href="'.$item[1].'">'.$menu.'</a>';
                  }

                 $menu .= Php2Bs::bs_nav_dropdown([

                         'li' => [
                             //'class' => 'nav-item dropdown',
                         ],
                         'a' => [
                             'content' => $key,
                             'id' => $key.'_menu',
                             'class' => 'text-info-100',
                             'data_attr' => [
                                 'toggle' => 'dropdown',

                             ],
                             'aria' => [
                                 'haspopup' => 'main-nav',
                                 'expanded' => 'true',
                                 'expanded' => 'false',

                             ],
                         ],
                         'menu' => [
                             'content' => $links,
                         ]

                 ]);
             }
         }


        $nav_params['content'] = Php2Bs::bs_navbar_nav ([
			'content' => $menu
        ]);
        $nav_params['class'] = 'mr-auto';
        $nav_params['id'] = 'main-nav';

        $navbar_collapse = Php2Bs::bs_navbar_collapse (
            $nav_params
        );

        $user = new M_Users();

        if(!$user->isLoggedIn()) {
            $user_button_text = 'Login';
        } else {
            $user_button_text = 'Logout / Profile';
        }

        $user_button = Php2Html::a ([
            'content' => $user_button_text,
            'id' => 'left',
            'class' => 'text-light  p-0',
            'data_attr' => [
                 'toggle' => 'collapse',
                 'target' => '#nav-user'
            ],
            'aria' => [
                 'controls' => 'nav-user',
                 'expanded' => 'false',
                 'label' => 'Toggle user navigation'
            ]
        ]);


         $out = Php2Bs::bs_navbar ([
            // Navbar content
            'content' => Php2Bs::bs_container ([
                'content' =>  $brand.$toggle_button . $navbar_collapse.$user_button,
                'class' => 'text-white',
                //'type' => 'fluid'
            ]),
            'class' => 'navbar-expand-lg navbar-dark bg-dark invert sticky-top h-1 pl-2 p-md-0'


        ]);
        $out .= Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => Php2Bs::bs_container ([
                'content' => $this->user_box (),


            ]),
            'class' => 'collapse py-2 bg-light text-dark border-bottom border-dark',
            'id' => 'nav-user'
        ]);


 		echo $out;
     } // topNav()
     /**
      * Basic outputs for test
      *
      * These are just temporary functions to show something in the
      * left and right columns.
      *
      * All will be replaced with something more useful.
      */
     protected function user_box () {
         $model = new M_Users();

         if($model->isLoggedIn()) {

             $model->find(Session::get(Settings::members()['login_session']));

             $link_array = [
                 'Profile' => [
                     'href' => '/Users/'.$model->data()->username,
                 ],
                 'Edit Details' => [
                     'href' => '/Users/Edit',
                 ]
             ];

             if($model->hasPermission('admin')) {
                 $link_array['Admin Area'] = ['href' => '/Admin'];
             }


             $content = '';
             $content .= Php2Bs::bs_list_group ([
                 'content' => $link_array,
                 'group_type' => 'a',
                 'class' => ' mb-2'
             ]);

             $content .= $model->logoutForm();
         } else {
             $content = $model->loginForm();
         }

         return $content;

     }

	/**
	 * Build footer
	 *
	 * Sets the page footer
	 *
	 * @return string 	footer
	 */
    public function footer ()
	{


        $out = Php2Bs::bs_footer ([
            'content' => Php2Bs::bs_container ([
                'content' =>  'Place sticky footer content here.',
                'class' => 'text-white',
            ]),
            'class' => 'bg-dark',
        ]);

		echo $out;
    } // footer()


}





---------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Main Template
 *
 * This file contains actual content of the page and buiilds the template
 * using the functions in Base_Template.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	new Main($content, $params)
 * @return 		string     Entire HTML page
 */
class Main extends Base {

    // To allow for multiple versions of the same template, we can pass in a version. Check content() in this Class to see how it is used

	/**
	 * Construct the Page
	 *
	 * The entire page is built as soon as it is called so we set everything
	 * we need in the __construct and create the whole page on the fly.
	 *
	 * @param string 		$content       Page Content
	 * @param array        	$params        Additional parameters
	 */
    public function __construct($content, $params=array()) {

		// Set the displayed content to $this->content
		$this->content = $content;

		/*
            If a 'page_title' has been passed set it to $this->page_title,
            otherwise set it to null.

            Do the same with 'page_subtitle', setting it to $this->page_subtitle,
            if required .

            These variables get checked in the content() function and then
            added to the content as required.

            Note that if $this->page_title is null, $this->page_subtitle WILL NOT
            show, even if it has been set.
         */
		$this->page_title = (isset($params['page_title'])) ? $params['page_title'] : null;
        $this->page_subtitle = (isset($params['page_subtitle'])) ? $params['page_subtitle'] : null;

		/**
		 * Set the layout version
		 *
		 * If a layout has been passed from the view via $params['layout'] set $this->layout
		 * to it otherwise use 'default'.
		 *
		 * These variables get checked in the layout_switcher() function within this file
		 * and will return a layout based on that is set here.
		 *
		 * To see the demo layout versions and instructions on how to edit them or create a
		 *  new one, see layout_switcher() and its comments.
		 *
		 * @var string
		 */
        if(isset($params['layout'])) {
            $this->layout = $params['layout'];
        } else {
            $this->layout = 'default';
        }

        /**
         * Set any page specific meta tags. These will be set in the view as a
         * key/value pairing and will override the defaults set in
         * /app/core/Settings.php->meta_tags()
         * @var [type]
         */
        if(isset($params['meta'])) {$this->meta =$params['meta'];}

        /**
         * Set any page specific css. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['css'])) {$this->css =$params['css'];}

        /**
         * Set any page specific js. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['js'])) {$this->js =$params['js'];}

        if(isset($params['alert'])) {
            $this->content = Php2Bs::bs_row ([
                'content' => Php2Bs::bs_container ([
                    'content' => Php2Bs::bs_column ([
                        'content' => $params['alert'],
                        'class' => 'col p-0'
                    ]),
                ])
            ]).$this->content;
        }




		// Call the template function
        self::Template();

    } // __construct


	/**
	 * Build the entire template
	 *
	 * We build this up gradually via functions contained eihter in this file or in
	 * the Base_Template file it extends
	 * @return 	HTML page
	 */
    private function Template () {
		// Build the start of the page up to the opening body tag, including the <head>
        self::bodyStart ();

        // Build banner
        self::banner ();

        // Build top navigation bar
        self::topNav ();

		// Show the actual content for the page
        self::content ();

		// Show the footer
        self::footer ();

		// Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()

    /**
     * Create the top banner
     *
     * @return string 					Banner
     */
    public function banner () {

        $title = Php2Html::h ([
            'size' => '1',
            'class' => 'title',
            'content' => 'Main Template',
        ]); // $title

        $inner_container = Php2Bs::bs_container ([
            'content' => $title
        ]); // $inner_container

        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'class' => 'bg-info text-light pb-2',
            'content' => $inner_container
        ]); // container

    } // banner()

	/**
	 * Show the actual page content
	 *
	 * We show the actual content of the page using a pre-defined
	 * layout that has either been set when calling the template
	 * from the view or as a default.
	 *
	 * This function returns the entire content, aside from the
	 * wrapper created with the base file this extends and the
	 * content is built before being passed into a 'bs_container'
	 * function from the Php2Bs (Bootstrap) class to create the
	 * entire content area.
	 *
	 * @return     string  	   Page content
	 */
    private function content () {

        // Create an empty content tag
        $content = '';

        /*
            Set the page title and subtitle

            If a page title has been set in the view using the
            $params['page_title'] parameter it will have been set to
            $this->page_title in the __construct and will be the first
            thing that we add to $content.
            The entire title area (including the subtitle if required, set to
            $this->page_subtitle from $params['page_subtitle']) is shown in a
            div with a class of 'page_title' so we build what is required
            against a $variable of $title and then pass it in.
         */
        if($this->page_title)
        {
            /*
                Create the title itself as a <h1> using the h() function
                in the Php2Html class.
             */
            $title = Php2Html::h([
                'content' => $this->page_title,
                'size' => '1'
            ]);

            /*
                If a subtitle has been set, add it to $title as a paragraph
                using the p() function in the Php2Html class with a class of 'lead-description'.
             */
            if($this->page_subtitle)
            {
                $title .=  Php2Html::p([
                    'class' => 'lead description',
                    'content' => $this->page_subtitle
                ]);
            }

            /*
                Now $title will contain everything required in the page_title
                div so we add it to $content using the div() function in the
                Php2Html class.
             */

             $this->content = Php2Bs::bs_column ([

                     'content' => Php2Html::h([
                         'class' => 'col-12',
                         'size' => '4',
                         'content' => $title
                     ]).$this->content
             ]);
            /*
                Show title above both columns instead

            $content .= Php2Html::div([
                'class' => 'page_title',
                'content' => $title
            ]);

             */
        }



        /*
            Call the correct layout of the page

            The main content could be called into one of several different
            layouts. The reason for this is you may want a slightly
            different layout for certain content such as some pages having
            a content specific sidebar.

            This is fully controlled by the layout_switcher () function in
            this file (a separate function has been created as there is an
            infinite number of combinations that you can use) controls all of it so we simply add that to the $content variable.

            See the comments for that function for a list of available ones and how to create a new one.
         */
        $content .= $this->layout_switcher ();


        /*
            We now have the entire content of the page, in the required layout
            version, contained within $content.

            In this template, the entire content area is wrapped in the Bootstrap container within a Bootstrap fluid-container.

            Tp make this, we echo out a bs_container() function from the Php2Bs
            class, with 'container_type' set to fluid.

            Inside this, we set it's 'content' as another bs_container(), but this time without the 'fluid' request. It is in the 'content' for
            this that we actually pass the completed $content.
         */
        echo Php2Bs::bs_container ([
            'container_type' => 'fluid',
            'content' => Php2Bs::bs_container ([
                'content' => $content
            ]) // container
        ]); // container-fluid

    } // content()


    /**
     * Set the correct layout
     *
     * Each of the different available layouts are created using the 'bs_row'
     * and 'bs_column' functions from the Php2Bs (Bootstrap) class.
     *
     * The required layout is set to $this->layout in the __construct of
     * this file. If it has been passed in from the view as $params['layout']
     * that is what it will be set to, otherwise it will be set to 'default'.
     *
     * We run a switch on $this->layout and return a row (bs_row). As well
     * as setting any attributes, such as id's and classes, we pass in a
     * parameter called 'content'. This will be be any number of functions
     * that create columns using specific functions.
     *
     * The columns themselves could have multiple functions included and
     * these are explained at the start of the columns functions below. Note
     * that any classes applied to the rows will be inherited by the
     * columns unless they have overriding classes.
     *
     * To add a new layout, create a new case in the switch statement,
     * matching the format of the existing ones and create any new columns
     * that are required.
     *
     * @return  string  Page Layout
     */
    protected function layout_switcher () {

        switch ($this->layout) {
            /*
                Full Width

                This is a single column layout using the main_column_full()
                function, with an id of main_content and a class of bg-light
             */
            case 'full-width':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_full (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Left column

                This is a two column layout using the left_Column () and
                main_column() functions concatenated, with an id of main_content and a class of bg-dark text-info
             */
            case 'left-col':
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                    'class' => 'bg-dark text-info',
                ]);
            break;

            /*
                Right column

                This is a two column layout using the main_column() and
                right_Column () functions concatenated, with an id of main_content and a class of text-danger
            */
            case 'right-col':
                return Php2Bs::bs_row ([
                    'content' => self::main_column_medium ()
								.self::right_Column (),
                    'id' => 'main_content',
                    'class' => '',
                ]);
            break;

            /*
                Three column

                This is a three column layout using the left_Column (),
                main_column() and right_Column () functions concatenated,
                with an id of multi_column.
            */
            case 'three-col':
                return Php2Bs::bs_row ([
                	'content' => self::left_Column ()
								.self::main_column_small ()
								.self::right_Column (),
                	'id' => 'multi_column',
                ]);
            break;

            /*
                Test layout

                This is here as a simple way of testing new things or
                playing around with layouts and contains a few more attributes.
            */
            case 'test':
                return Php2Bs::bs_row ([
					'content' => self::main_column_full (),
                    'class' => 'bg-info',
                    'id' => 'main_content',
                    'data_attr' => [
                        'ref' => 'refdata',
                        'cat' => 'news'
                    ]
                ]);
            break;

            /*
                Default layout

                If no layout has been specified in the view, we default to
                the left column one.
            */
            default:
                return Php2Bs::bs_row ([
                    'content' => self::left_Column ()
								.self::main_column_medium (),
                    'id' => 'main_content',
                ]);
            break;
        } // Layout switch
    }


    /**
     * Layout column functions
     *
     * These are the functions that are called in to the rows created in
     * layout_switcher() and are all created using the 'bs_column' function
     * from the Php2Bs (Bootstrap) class.
     *
     * As when creating the rows we can set any attributes, such as id's and
     * classes, with the actual required output being passed as 'content'.
     *
     */

    /*
        Medium Main Column

        Used in the 'left-col' and 'right-col' versions.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with, changing to 9/12
        width at the medium breakpoint.
     */
    private function main_column_medium () {
        return Php2Bs::bs_column ([
            'content' => $this->content,
            'id' => 'main_content_standard',
            'class' => 'col-12 col-md-9'
        ]);
    } // main_column_medium ()

    /*
        Full Main Column

        Used in the 'full-width' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        Using the Bootstrap grid sizes it is full with at all breakpoints.
     */
    private function main_column_full () {
        return $this->content;
    } // main_column_full ()

    /*
        Small Main Column

        Used in the 'three-col' version.

        As this is a main content column, the 'content' comes directly from
        $this->content (the $content passes in from the view).

        However, this time we also concatenate the function demo_extra_box() to give extra content to the column.

        Using the Bootstrap grid sizes it is full with, changing to 6/12
        width at the medium breakpoint.
     */
	private function main_column_small () {
        return Php2Bs::bs_column ([
			'content' => $this->content
						.$this->demo_extra_box (),
			'id' => 'main_small_column',
			'class' => 'col-md-6'
        ]);

    } // main_column_small ()

	/*
        Left Column

        Used in the 'default', 'left-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        user_box () and side_menu () functions.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
    private function left_Column () {
        return Php2Bs::bs_column ([
			'content' => self::user_box ()
						.self::side_menu (),
			'id' => 'left',
			'class' => 'col-12 col-md-3 left-col bg-warning pt-2'
        ]);
    } // left_Column ()

    /*
        Left Column

        Used in the 'default', 'right-col' and 'three-col' version.

        This is not a main content column so we build the entire column
        content within the function. For this one we simply concatente the
        side_menu () and user_box () functions (the same as we did in left_column () but in a different order. Also, in this one we concatenate them into a variable first, rather than straight into the bs_column function.

        Using the Bootstrap grid sizes it is full with, changing to 3/12
        width at the medium breakpoint. We have also added some other class
        values.
     */
	private function right_Column () {
        $model = new M_Users();
        $latestuser = $model->mostRecent();
        $latest_user_date = new DateTime($latestuser->joined);

        $n = $latestuser->username;
        $d = $latest_user_date->format('d/m/Y g:ia');
        $userbox_content = Php2Html::p (
            array(
                'content' => 'Total : '.$model->count(),

            )
        );
        $userbox_content .= Php2Html::p (
            array(
                'content' => "Most recent <br> $n joined<br>$d",

            )
        );
        //$userbox_content .= $latestuser->username;
        //$userbox_content .= $latest_user_date->format('d/m/Y g:ia');

        $content = Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1 ',
            'header' => array (
                'content' => 'Members'
            ),
            'body' => array (
                'content' => $userbox_content,
                'class' => 'p-2',
            ),
        ]);// bs_card


		return Php2Bs::bs_column ([
			'content' => $content,
			'id' => 'right',
			'class' => 'col-12 col-md-3 right-col bg-info pt-2 mt-4 mt-md-0'
        ]);
    } // right_Column ()



    private function demo_extra_box () {

        $out = '<div class="alert alert-info">';
        $out .= '   <h4>Extra Content</h4>';

        $out .=  '<p>Stuff can go here</p>';

        $out .= '</div>';

        return $out;
    }


}





--------------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Main Template
 *
 * This file contains actual content of the page and builds the template
 * using the functions in Base_Template.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	new Main_Template($params)
 * @return 		Entire HTML page
 */
class Host_Template Extends Base {
    // To allow for multiple versions of the same template, we can pass in a version. Check content() in this Class to see how it is used

	/**
	 * Construct the Page
	 * @param string 		$main       Page Content
	 * @param string 		$version    Which version of the template to show
	 * @param string 		$page_title The page title to send to the <head> and title
	 * @param array/null 	$include    Additional css and js for the page
	 */
    public function __construct($content, $params=array())
	{
		// Set the displayed content to $this->content
		$this->content = $content;

        /**
         * Set any page specific css. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['css'])) {$this->css =$params['css'];}

        /**
         * Set any page specific js. These will be set in the view as an
         * array of path strings.
         * @var [type]
         */
        if(isset($params['js'])) {$this->js =$params['js'];}

		// If a Page Title has been passed set $this->page_title to it
		// otherwise use 'Untitled'
        $this->page_title = (isset($params['page_title'])) ? $params['page_title'] : null;


		// Call the template function, including any extra required css or js
        self::Template();

    } // __construct


	/**
	 * Build the entire template
	 *
	 * We build this up gradually via functions contained eihter in this file or in
	 * the Base_Template file it extends
	 * @return 	HTML page
	 */
    private function Template () {
		// Build the start of the page up to the opening body tag, including the <head>
		self::bodyStart ();

        self::topNav ();

		// Build the container that holds the content and set the Page Title
        self::contentStart ();

		// Show the actual content for the page
        self::content ();

		// Close the container that holds the content
        self::contentEnd ();

		// Show any requested scripts and close of the <body> and <html> tags
        self::bodyEnd ();

    } // Template()




    	/**
    	 * Build the <head> section
    	 *
    	 * Builds the entire <head> tag and includes any specified
    	 * page specific css
    	 *
    	 * @return string          			<head> section
    	 */
        private function head ()
    	{
    		$title = isset($this->page_title) ? $this->page_title: Globals::get('settings/site_name');
    		// Open the <head> tag
    		$out = '<head>';
    			// Include the <meta> tags
                $out .=  ' <meta charset="utf-8">';

                // Include the <meta> tags
                $out .=  '<meta name="description" content="Admin Login">';
                $out .=  '<meta name="author" content="Steve Ball">';
    			$out .=  '<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">';
    			$out .=  '<meta name="description" content="Framework - Front End">';
    			$out .=  '<meta name="keyword" content="Bootstrap,Admin,Template,PHP,MVC,Framework,jQuery,CSS,HTML,Dashboard">';
                $out .=  '<style>body {
                          padding-top: 3.5rem;
                        }</style>';
    			// Set the Page Title
    			$out .=  '<title>' . $title. '</title>';

    			// Link the Favicon
    			$out .=  '<link rel="shortcut icon" href="/favicon.ico">';

    			// Call in the stylesheets
                $out .= Settings::css('remote/bootstrap/v4');
    			$out .= Settings::css('local/site');

    			// Include any page-specific css files
                if(isset($this->css))
                {
                    foreach ($this->css as $stylesheet) {
                        $out .= Settings::css($stylesheet);
                    }
                }

             	$out .=  '<!--[if lt IE 9]>';
            	$out .=  '   <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js"></script>';
            	$out .=  '  <![endif]-->';
            $out .=  '</head>';

    		echo $out;

        } // head()

    /**
     * Build the HTML down to the opening body tag and include extra css
     *
     * @return string 					Template to the opening <body> tag
     */
    public function bodyStart ()
    {

        // Start off by specifying the doctype
        $out = ' <!doctype html>';

        // Open the html tag
        $out .= '<html lang="en">';


        /**
         * Include the <head> section
         *
         * If a page needs any extra css apart from the default, this will
         * have been specified using an $include array when calling new Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out .= self::head ();

        // Open the body tag
        $out .= '<body class="bg-dark text-light">';

        // Echo out everything created in the function
        echo $out;
    } // bodyStart()

    /**
     * Finish the HTML
     *
     * @return string 					Template for the end of the HTML
     */
    public function bodyEnd ()
    {

        /**
         * Include any extra js
         *
         * If a page needs any extra js apart from the default, this will
         * have been specified using an $include array when calling new Main_Template.
         *
         * These will be set using their Globals::get() reference
         *
         * @var array/null
         */
        $out = self::scripts ();

        // Close the body tag
        $out .= '</body>';

        // Close the html tag
        $out .= '</html>';

        // Echo out everything created in the function
        echo $out;

    } // bodyEnd()

    /**
	 * Build the required scripts
	 *
	 * Builds the js and third party scripts
	 *
	 * @return string          			<head> section
	 */
    private function scripts ()
	{
		// Include any common js files
        $out = Settings::js('remote/jquery');
        $out .= Settings::js('remote/popper');
        $out .= Settings::js('remote/bootstrap/v4');

        // Loop through the page specific scripts
        if(isset($this->js))
        {
            foreach ($this->js as $script) {
                $out .= Settings::js($script);
            }
        }

        $out .= Settings::js('local/shared');
        $out .= Settings::js('local/site');

        return $out;

    } // scripts()


	/**
	 * Show the actual page content
	 *
	 * We show the actual content of the page using a pre-defined layout version passed
	 * in when calling the template.
	 *
	 * Each layout is created using makeRow() and makeColumn() functions in the
	 * Bootstrap class.
	 *
	 * We start by making a row with an id of 'main_content'.
	 * Inside that we place an array ($inc) of each seperate column builder
	 * function we require.
	 *
	 * The available columns are
	 * 	mainColumn_full ()		col-sm-12
	 * 		Outputs $this->content
	 *
	 * 	mainColumn ()			col-sm-9
	 * 		Outputs $this->content
	 *
	 * 	mainColumn_small() 		col-sm-6
	 * 		Outputs $this->content
	 *
	 * 	left_Column() 		col-sm-6
	 * 		Outputs specified data
	 *
	 * 	right_Column() 		col-sm-6
	 * 		Outputs specified data
	 *
	 * @return string  	Page content
	 */
    private function content ()
	{


        echo Php2Bs::bs_row ([
            'id' => 'main_content',
            'content' => Php2Bs::bs_container ([
                'content' => Php2Bs::bs_column ([
                    'content' => $this->content,
                    'class' => 'col p-0'
                ]),
            ])
        ]);

    } // content()


	/**
	 * Start the content
	 *
	 * @return string 	Start of the content section up to the masthead
	 */
    private function contentStart ()
    {
        echo  '<div class="container">';
        echo  '<div class="masthead mb-2 pb-2">';

        echo  ' <h2 class="display-2">'.$this->page_title.'</h1>';
        echo  ' </div>';

    } // contentStart()

	/**
	 * End the content
	 *
	 * @return string 	Closes the container
	 */
    private function contentEnd ()
    {
        echo  '</div> <!-- container -->';
    } // contentEnd()




}





------------------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Settings Model
 *
 * Two different types. If you frequesntly need to take only one element
 * out of a function then the path is put in. If not we will simply set the
 * function to a variable and take the required path from there.
 *
 * REMOVE ALL $path requirements
 * You can get a single element from any function with...
 * Settings::members()['verification']
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 * TODO: Sort out the 404 etc
 */

// Include the initiation file
require_once 'app/init.php';

class Messages
{

    public static function alert ($params) {
        //nicePrint_r($params);
        $alert_content = [
            'heading' => 'Errors',
            'content' => 'Please correct the following errors..',
            'dismissible' => true,
            'alert_color' => 'danger',
            'class' => 'mb-4'
        ];

        $model = new $params['model'];

        if(isset($model->messages()[$params['name']])) {

            $data = $model->messages()[$params['name']];

            if(isset($data['title'])) {
                if ($data['title']) {
                    $alert_content['heading'] = $data['title'];
                } else {
                    $alert_content['heading'] = null;
                }
            }

            if(isset($data['content'])) {
                if(is_array($data['content'])) {

                    $alert_content['content'] = '';
                    foreach ($data['content'] as $value) {
                        $alert_content['content'] .= Php2Html::p([
                            'content' => $value
                        ]);
                    }
                } else {
                    $alert_content['content'] = Php2Html::p([
                        'content' => $data['content']
                    ]);
                }
            }

            if(isset($data['alert_color'])) {
                $alert_content['alert_color'] = $data['alert_color'];
            }


            if(isset($params['errors'])) {
                $alert_content['content'] .=  Php2Html::p([
                    'content' => $params['errors']
                ]);
            }

            if(isset($params['insert_id']) && $params['insert_id']) {
                $alert_content['content'] .=  Php2Html::p([
                    'content' => 'The id of the new record is ' . $params['insert_id'] . '.'
                ]);
            }

            if(isset($data['dismissible'])) {
                $alert_content['dismissible'] = $data['dismissible'];
            }


            return Php2Bs::bs_alert([
                'heading' => $alert_content['heading'],
                'content' => $alert_content['content'],
                'dismissible' => $alert_content['dismissible'],
                'color' => $alert_content['alert_color'],
            ]);
        } else {
            return Php2Bs::bs_alert([
                'heading' => 'Message Alert Error',
                'content' => 'The ' . $params['name'] . ' element was not found in the ' . $params['type'] . ' function.',
                'dismissible' => false,
                'color' => 'dark',
            ]);
        }

    }

}






----------------------------------------------------------------------------------------------------------------




<?php

/**
 * Bootstrap class
 *
 * Turns various Bootstrap 4 components into re-usable functions.
 *
 * Extends Html to incorporate the quick tag building functions
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */
class Php2Bs extends Php2Html {


    public static function bs_footer ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'footer ' . $params['class'] : 'footer ';
        return Php2Html::footer (
            $params
        );
    }


    public static function bs_container($params)
    {
        $params['container_type'] = isset($params['container_type']) ? 'container-'.$params['container_type'] : 'container' ;
        $params['class'] = (isset($params['class'])) ? $params['container_type'] . ' ' . $params['class'] : $params['container_type'];
        return Php2Html::div (
            $params
        );

    }

    public static function bs_form_row($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-row ' . $params['class'] : 'form-row';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_group($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-group ' . $params['class'] : 'form-group';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_navbar($params)
    {
        $params['class'] = (isset($params['class'])) ? 'navbar ' . $params['class'] : 'navbar ';
        return Php2Html::nav (
            $params
        );

    }

    public static function bs_button($params)
    {
        $class = 'btn';

        if(isset($params['color'])) {
            $class .= ' btn-'.$params['color'];
        }

        if(isset($params['size'])) {
            $class .= ' btn-'.$params['size'];
        }

        $class .= (isset($params['class'])) ? ' '.$params['class']:'';

        $params['class'] = $class;


        return Php2Html::button (
           $params
        );

    }

    public static function bs_outline_btn($params)
    {

        $params['class'] = 'btn btn-outline-' . $params['class'];


        return Php2Html::button (
           $content,
           $params
        );

    }

    public static function bs_dropdown_item($params)
    {

        $params['class'] = (isset($params['class'])) ? 'dropdown-item ' . $params['class'] : 'dropdown-item';

        return Php2Html::a (
            $params
        );

    }

    public static function bs_form_check($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-check ' . $params['class'] : 'form-check';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_check_label($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-check-label ' . $params['class'] : 'form-check-label';

        return Php2Html::div (
            $params
        );
    }

    public static function bs_form_check_input($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-check-input ' . $params['class'] : 'form-check-input';

        return Php2Html::checkbox (
            $params
        );
    }

    public static function bs_input_text($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::input_text (
            $params
        );
    }

    public static function bs_textarea($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::textarea (
            $params
        );
    }
    public static function bs_input_password($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::input_password (
            $params
        );
    }

    public static function bs_input_email($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::input_email (
            $params
        );
    }

    public static function bs_input_group_prepend($params)
    {
        $params['outer']['class'] = (isset($params['class'])) ? 'input-group-prepend ' . $params['class'] : 'input-group-prepend';

        $params['inner']['class'] = 'input-group-text';
        $params['inner']['content'] = $params['content'];

        if(isset($params['id'])) {
            $params['inner']['id'] = $params['id'];
        }

        $params['outer']['content'] = Php2Html::span (
            $params['inner']
        );


        return Php2Html::div (
            $params['outer']
        );
    }

    public static function bs_input_group($params)
    {
        # group class
        # prepend class
        # input class
        $params['group']['class'] = (isset($params['group']['class'])) ? 'input-group ' . $params['group']['class'] : 'input-group';

        $input_type = 'bs_input_'.$params['input']['type'];

        unset($params['input']['type']);

        $params['group']['content'] = self::bs_input_group_prepend (
            $params['prepend']
        );

        $params['group']['content'] .= self::$input_type (
            $params['input']
        );

        return Php2Html::div (
            $params['group']
        );
    }

    public static function bs_nav_dropdown($params)
    {

        $params['li']['class'] = (isset($params['li']['class'])) ? 'nav-item dropdown ' . $params['li']['class'] : 'nav-item dropdown';

        $params['a']['class'] = (isset($params['a']['class'])) ? 'nav-link dropdown-toggle ' . $params['a']['class'] : 'nav-link dropdown-toggle';

        $params['a']['link'] = '#';

        $params['li']['content'] = Php2Html::a (
                $params['a']
                ).
                self::bs_dropdown_menu (
                    $params['menu']
            );
        return Php2Html::li (
            $params['li']
        );
    }

    public static function bs_dropdown_menu ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'dropdown-menu ' . $params['class'] : 'dropdown-menu ';
        return Php2Html::div (
            $params
        );
    }

    public static function bs_navbar_collapse ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'collapse navbar-collapse ' . $params['class'] : 'collapse navbar-collapse ';
        return Php2Html::div (
            $params
        );
    }


    public static function bs_navbar_nav ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'navbar-nav ' . $params['class'] : 'collapse navbar-nav ';
        return Php2Html::ul (
            $params
        );
    }

    public static function bs_nav ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'nav ' . $params['class'] : 'nav ';
        return Php2Html::ul (
            $params
        );
    }

    public static function bs_nav_item ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'nav-item ' . $params['class'] : 'nav-item ';
        return Php2Html::li (
            $params
        );
    }

    public static function bs_nav_link ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'nav-link ' . $params['class'] : 'nav-link';
        return Php2Html::a (
            $params
        );
    }

    public static function bs_list_group_item ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'list-group-item ' . $params['class'] : 'list-group-item';

        if(isset($params['tag'])) {

            if($params['tag'] == 'a') {
                $params['class'] .= ' list-group-item-action';
            }

            return Php2Html::$params['tag'] (
                $params
            );
        } else {
            return Php2Html::li (
                $params
            );
        }

    }

    public static function bs_list_group ($params)
    {
        $params['class'] = (isset($params['class'])) ? 'list-group ' . $params['class'] : 'list-group';

        $list_items = '';

        foreach ($params['content'] as $items => $item) {


            if(isset($item['href'])) {
                $item['tag'] = 'a';
                $item['class'] = (isset($item['link_class'])) ? $item['link_class'] : '';
                $item['content'] = $items;
            } else {
                $item['content'] = $items;
            }



            $list_items .= self::bs_list_group_item (
                $item
            );
        }

        $params['content'] = $list_items;

        return Php2Html::ul (
            $params
        );
    }

    public static function bs_select($params)
    {
        $params['class'] = (isset($params['class'])) ? 'form-control ' . $params['class'] : 'form-control';

        return Php2Html::select (
            $params
        );
    }

    public static function bs_card($array)
    {
        $header = '';
        $body = '';
        $footer = '';


        if(isset($array['header']))
        {
            $array['header']['class'] = (isset($array['header']['class'])) ? 'card-header ' . $array['header']['class'] : 'card-header';

            $header = Php2Html::div (
                $array['header']
            );
        }

        if(isset($array['body']))
        {
            $array['body']['class'] = (isset($array['body']['class'])) ? 'card-body ' . $array['body']['class'] : 'card-body';

            $body = Php2Html::div (
                $array['body']
            );
        }

        if(isset($array['footer']))
        {
            $array['footer']['class'] = (isset($array['footer']['class'])) ? 'card-footer ' . $array['footer']['class'] : 'card-footer';

            $footer = Php2Html::div (
                $array['footer']
            );
        }

        $array['class'] = (isset($array['class'])) ? 'card ' . $array['class'] : 'card';

        $array['content'] = $header.$body.$footer;

        return  Php2Html::div (
            $array
        );


    }


    public static function bs_alert($array)
    {
        $core_class = 'alert alert-';
        $core_class .=(isset($array['color'])) ? $array['color'].' ': 'info ';

        $array['class'] = (!isset($array['class'])) ? $core_class : $core_class.$array['class'];

        $content = $array['content'];
        $array['content'] ='';

        if($array['heading'])
		{
		    $array['content'] .= Php2Html::h([
                'size' => '4',
                'class' => 'alert-heading',
                'content' => $array['heading']
            ]);
		}
        $array['content'] .= $content;
        if($array['dismissible'])
		{
            $array['class'] .= ' alert-dismissible';
		    $array['content'] .= '	<button type="button" class="close" data-dismiss="alert" aria-label="Close">';
        	$array['content'] .= '		<span aria-hidden="true">&times;</span>';
    		$array['content'] .= '	</button>';
		}

        $array['role'] = 'alert';

        return  Php2Html::div (
            $array
        );
    }


	/**
	 * Alert
	 *
	 * @param  string 			$color       danger/info/warning/alert
	 * @param  string/null 		$heading     Optional text to display in 'alert-heading'
	 * @param  string 			$body        The body text for the alert
	 * @param  boolean 			$dismissible Whether to make the alert dismissible
	 * @example 	https://v4-alpha.getbootstrap.com/components/alerts/
	 *
	 * @return string           Bootstrap Alert
	 */




    public static function makeAlert($color = 'info', $heading=null, $body, $dismissible=false)
	{
		// Create the opening alert tage with the correct colour
        $out = '<div class="alert alert-'.$color.'">';

		// If $dismissible=true add the dismiss button
		if($dismissible)
		{
		    $out .= '	<button type="button" class="close" data-dismiss="alert" aria-label="Close">';
        	$out .= '		<span aria-hidden="true">&times;</span>';
    		$out .= '	</button>';
		}
		// If $heading is not empty, add it
        if($heading)
		{
            $out .= '<h4 class="alert-heading">'.$heading.'</h4>';
        }

		// Add the body text
        $out .= $body;

		// Close the alert tag
        $out .= '</div><!-- alert-'.$color. '-->';

        return $out;
    } // makeAlert



	/**
	 * Make a Bootstrap 4 Grid
	 *
	 *	We have two functions to simplify make a Bootstrap grid layout.
	 *
	 *	row ()		Makes a <div class="row">
	 *	column 		Makes a <div class="col-xx-xx">
	 *
	 * These can be used in conjuction with each other in an unlimited amount
	 * of nesting. Each function has a parameter called $inc which will contain
	 * an array of anything to be displayed within.
	 *
	 * To make a row with an id of 'content' and within it a small column with a
	 * class of col-sm-4 and a larger column with a class of col-sm-8, you would use
	 *
	 *
	 * Php2Bs::row (
	 * 		$id = 'content',
	 * 		$class = null,
	 * 		$inc = array (
	 * 			Php2Bs::column (
	 *				$id = null,
	 * 				$class = 'col-sm-4',
	 * 				$inc = array (
	 * 					...
	 * 				)
	 * 			),
	 * 			Php2Bs::column (
	 *				$id = null,
	 * 				$class = 'col-sm-8',
	 * 				$inc = array (
	 * 					...
	 * 				)
	 * 			),
	 * 			Php2Bs::column (
	 *
	 * 			),
	 *
	 * 		)
	 * )
	 *
	 * The $inc within the column sections can be an array of any elements that
	 * you want and can be a mixture of several types including more row() and
	 * column() functions.
	 * Although you can use plain text as an array element, it is recommended to put
	 * anything you need into indivudal functions and call them.
	 *
	 */

	/**
	 * Make a Bootstrap 4 Grid Row
	 *
	 * Creates a <div class="row"></div> with any attributes and content as well as
	 * a formatted end html comment
	 *
	 * @param  string/null 		$id    The id attribute of the row if required
	 * @param  string/null 		$class The class attribute of the row if required
	 * @param  array  			$inc   An array of columns to show
	 * @return string        	Boostrap Row
	 */

     public static function bs_row($params)
 	{
        $params['class'] = (isset($params['class'])) ? 'row ' . $params['class'] : 'row';


        return Php2Html::div(
            $params
        );

    }


	/**
	 * Make a Bootstrap 4 Grid Column
	 *
	 * Creates a <div class="col-xx-xx"></div> with any attributes and content as well as
	 * a formatted end html comment
	 *
	 * @param  string/null 		$id    The id attribute of the column if required
	 * @param  string/null 		$class The class attribute of the column if required
	 * @param  array  			$inc   An array of content to show
	 * @return string        	Boostrap Column
	 */

     // public static function column (
     //     $id = null,
     //     $class = null,
     //     $inc = array ()
     // )

    public static function bs_column($params)
   {
        $params['class'] = (isset($params['class'])) ?  $params['class'] : 'col';


        $content = Php2Html::div(
            $params
        );

        return $content;
    }


    public static function quickCollapse ($params = array ())
	{
        $out = '';

        $out .= '<p';
        if (isset($params['wrap_class'])) {
            $out .= ' class="'.$params['wrap_class'].'"';
        }
        $out .= '>';

        $out .= '<a class="btn ';
        if (isset($params['button']['size'])) {
            $out .= 'btn-'.$params['button']['size'].' ';
        }

        if (isset($params['button']['type'])) {
            $out .= 'btn-'.$params['button']['type'].'-'.$params['button']['color'].'';
        }
        else
        {
            $out .= 'btn-'.$params['button']['color'].'';
        }
        if (isset($params['button']['class'])) {
            $out .= '  '.$params['button']['class'];
        }
        $out .= '"';
        $out .= ' data-toggle="collapse" href="#'.$params['key'].'" aria-expanded="false" aria-controls="'.$params['key'].'e">';
        $out .= $params['text'];
        $out .= '</a>';

        $out .= '</p>';

        $out .= '<div class="collapse" id="'.$params['key'].'">';

        $out .= $params['content'];

        $out .= '</div>';

        return $out;
    }
    public static function breadcrumb ($array)
	{

        $home = (isset($array['site'])) ? '/' . $array['site'] : '/';
        $output = '<nav aria-label="breadcrumb" class="mb-1 " role="navigation">';
        $output .= '<ol class="breadcrumb m-0 p-1">';

        $output .= '<li class="breadcrumb-item"><a href="'.$home.'">Home</a></li>';

        if(isset($array['path']))
        {
            foreach ($array['path'] as $key => $value) {
                $output .= '<li class="breadcrumb-item"><a href="'.$home.$key.'">'.$value.'</a></li>';
            }
        }

        $output .= '<li class="breadcrumb-item active" aria-current="page">'.$array['current'].'</li>';

        $output .= '</ol>';
        $output .= '</nav>';

        return $output . self::htmlComment('breadcrumb');
    }
}





--------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Validation
 *
 * Contains functions for validation of form fields
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

class Validate {

    private $_passed = false,
            $_errors = array(),
            $_db = null;

    public function __construct() {
        $this->db = DB::dbConnect();
    }

    /**
     * Check the validation rules against an item
     *
     * Takes an array of data passed in the source (usually $_POST) and
     * checks each one against it's list of criteria.
     *
     * Example use for 'username' and 'email'
     *
     *    $validation = $validate->check(
     *         $_POST,
     *         [
     *            'username' => Globals::get('forms/user/username'),
     *            'email' => Globals::get('forms/user/username', 'email'),
     *         ]
     *    );
     *
     * Example validation for 'username' and 'email'
     *
     *    'username' => [
     *      'type' => 'text',
     *      'help' => 'You ....',
     *      'error' => 'You.....',
     *      'validation' => [
     *          'required' => true,
     *          'min' => 6,
     *          'max' => 20,
     *          'preg_match' => 'username',
     *          'unique' => 'users',
     *      ],
     *    ],
     *    'email' => [
     *      'type' => 'text',
     *      'error' => 'You ...',
     *      'validation' => [
     *          'required' => true,
     *          'filter' => "email",
     *          'unique' => 'users',
     *      ],
     *    ],
     *
     *  We then loop through the 'validation' element and check them against what has been posted
     *
     * @param  array    $source     Array of data to check
     * @param  array    $items      Validation rules
     * @return array
     */
    public function check ($source, $items = array()) {

        /**
         *  Loop through the items
         *
         *    Using the 'username' example above, this would give us
         *
         *    $item = 'username'    $rule = 'info'
         *    $item = 'username'    $rule = 'help'
         *    $item = 'username'    $rule = 'error'
         *    $item = 'username'    $rule = 'validation'
         *
        **/
        foreach ($items as $item => $rules) {


            /**
             * Loop through validation rules
             *
             *    Using the 'username' example above, this would give us
             *
             *    $rule = 'field_name'     $rule_value = 'username'
             *    $rule = 'required'       $rule_value = 'true'
             *    $rule = 'min'            $rule_value = 6
             *    $rule = 'max'            $rule_value = 20
             *    $rule = 'max'            $rule_value = 20
             *    $rule = 'preg_match'     $rule_value = 'username'
             *    $rule = 'unique'         $rule_value = 'users'
             *
            **/
    	    if(isset($rules)){
    		    foreach ($rules as $rule => $rule_value) {
    			/**
    			 * Check if the field has been posted
    			 *
    			 * Using the 'username' example
    			 * $source was set to $_POST when the function was called
    			 * $item has been set to 'username' in the first foreach
    			 *
    			 * So $source[$item] = $_POST['username']
    			 *
    			 * If it is set, we set it to $value, trimming any whitespace
    			 * so if the posted 'username' was 'Deadpool', we would now have
    			 *
    			 * $value = 'Deadpool'
    			 * If there is no matching post data set, we set $value to null
    			 *
    			**/
    			if(isset($source[$item])) {
    			    $value = trim($source[$item]);
    			} else {
    			    $value = null;
    			}

    			// Convert $item to HTML entities
    			$item = escape($item);



                /*
                    Run the rules

                    We now check the current value against it's rules. If it does not match
                    then the relevant error message will added to $this->_errors.

                    The rules available are

                    required        The field must me filled
                    min             The field must contain at least this many characters
                    max             The field must contain no more than this many characters
                    matches         Must match a specifed other input (confirm password/password)
                    unique          There must not already be a record with the same details in the specified column
                    preg_match      Much match the specified rule stored in /app/core/config_files/validation_rules.php
                    filter          Much match the specified filter


                 */
    			if ($rule === 'required' && (!isset($value) || empty($value)))
                {
    			    if(isset($rules['error_text']))
                    {
    				    $this->addError($rules['error_text'], $item);
    			    }
                    else
                    {
    				    $this->addError(ucfirst($item) . " is required", $item);
    			    }

    			}
                else if(!empty($value))
                {
    			    switch ($rule)
                    {
    				    case 'min':
    				        if (strlen($value) < $rule_value) {
    					         $this->addError("The {$item} must be a minimum of {$rule_value} characters", $item);
    				        }
    				        break;

    				    case 'max':
    				        if (strlen($value) > $rule_value) {
    					        $this->addError("The {$item} must be a maximum of {$rule_value} characters", $item);
    				        }
    				        break;

    				    case 'matches':
    				        if ($value != $source[$rule_value]) {
    				            if(isset($rules['error']))
                                {
    					            $this->addError($rules['error'], $item);
    					        }
                                else
                                {
    					            $this->addError("{$rule_value} must match {$item}", $item);
    					        }

    				        }
    				        break;

    				    case 'unique':
    				        $check = $this->db->get($rule_value, array($item, "=", $value));
    				        if ($check->count()) {
    					        $this->addError(ucfirst($item) . " already exists", $item);
    				        }
    			            break;


    				    case 'preg_match':
    				        if (!preg_match($rule_value, $value)) {

    				            if(isset($rules['error_text'])) {
    				        	    $this->addError($rules['error_text'], $item);
    			        	    }
                                else
                                {
    			        		    $this->addError("{$rule_value} must preg match {$item}", $item);
    				            }
    			        	}
    				        break;

    			    	case 'filter':
    			    	    if($rule_value == 'email') {
    				        	if (!filter_var($value, FILTER_VALIDATE_EMAIL)) {
    				        	    if(isset($rules['error_text'])) {
    				            		$this->addError($rules['error_text'], $item);
    				        	    }
                                    else
                                    {
    				        	    	$this->addError("The {$rule_value} did not match the required filter.", $item);
    				        	    }
    			        		}
    			        	}
    			        	break;

    				    default:
    				        # code...
    				        break;
    			        }

    			    }
    		    }
    	    }
        }

        // If there are no errors, the validation was successful
        if (empty($this->_errors)) {
           $this->_passed = true;
        }

        return $this;
    }

    // Adds an error to the array
    private function addError($error, $field) {
        $this->_errors[$field] = $error;
    }

    // Public functions to show private variables
    public function errors() {
        return $this->_errors;
    }

    public function passed() {
        return $this->_passed;
    }
}





-----------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Database class
 *
 * Controls all database CRUD functions as well as opening up an instance
 * of this class.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the inititisation file
require_once 'app/init.php';

class DB
{
	// Set any private variables
    private static $_instance = null;
    private $_pdo,
            $_query,
            $_error = false,
            $_results,
            $_count = 0;

	/**
	 * Construct the database connection
	 *
	 *	Opens up a connection to the database and assigns it to
	 *	$this->_pdo to make it re-usable.
	 *
	 * The connection parameters are called using Globals on values held
	 * in /app/core/config_files/db.php
	 *
	 * @return 	Database connection
	 */
    private function __construct()
	{
        $db = Settings::db();

        try
		{
            $this->_pdo = new PDO('mysql:host=' . $db['host'] . ';dbname=' . $db['dbname'],  $db['username'], $db['password']);

        } catch(PDOException $e) {
            die($e->getMessage());
        }
    } //__construct ()

	/**
	 * Create a new Database instance
	 *
	 * Creates a new instance of the database class that can be assigned to a
	 * variable and re-used.
	 *
	 * @return Database connection
	 * @example $this->db = DB::dbConnect();
	 */
    public static function dbConnect()
	{
		// If an instance has not already been set, set it
        if(!isset(self::$_instance)) {
            self::$_instance = new DB();
        }
		// Return the instance
        return self::$_instance;
    } // dbConnect()

	/**
	 * Perform a query on an SQL statement
	 *
	 * All of the variables created are private so cannot be called
	 * externally, but each has it's own public function.
	 *
	 * If you are using parameters, you need to replace the position where
	 * their values would be with ?
	 *
	 * self::db()->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash));
	 *
	 * @param  string 	$sql    SQL statement
	 * @param  array  	$params Paremeters to add to the string
	 * @return array         	Query results, errors and count
	 */
    public function query ($sql, $params = array())
	{

		// Set error to false by default
        $this->error = false;

		/*
			We attempt to prepare the query and if it is succesful,
			we bind the parameters and execute it.
		 */
        if ($this->_query = $this->_pdo->prepare($sql))
		{
			/*
				The query is prepared so we have to check to see if
				there are any parameters.

				If there are we loop through them annd then bind them
				to the query
			 */

			// Set the counter to one
            $x = 1;

			// Check to see if there are any parameters
            if(count($params))
			{
				/*
					There are parameters so we loop through them and
					bind each
				 */
                foreach($params as $param) {
					// Bind the parameter with it's counter position
                    $this->_query->bindValue($x, $param);

					// Increment the counter
                    $x++;
                }
            }


			/*
				Now that the parameters have been bound, we try to execute
				the query.
				If succesful we set the results and row count, otherwise we
				set the error.
			 */
            if($this->_query->execute())
			{
				// The query executed succesfully so set the results and count
                $this->_results = $this->_query->fetchAll(PDO::FETCH_OBJ);
                $this->_count = $this->_query->rowCount();
            } else
			{
				// The query failed so set error to true
                $this->_error = true;
            }
        } // prepare

		// Return anything that has been set as a result of the wquery attempt
        return $this;

    } // query ()


	/**
	 * Perfom a simple action on a table
	 *
	 * Allows you to perform a quick SELECT or DELETE on a table when
	 * only one parameter needs to be set.
	 *
	 * @param  string $action SELECT/DELETE
	 * @param  string $table  The name of the table
	 * @param  array  $where  An array of parameters - field, operator, value
	 * @return array          The output from the query() function in this class
	 */
    public function action ($action, $table, $where = array())
	{
		/*
			A $where array MUST contain exactly three paramenters for this to
			work so the first thing to do is check that.

		 */
        if (count($where) === 3)
		{
			// There are three parameters so set the available operators
            $operators = array('=', '>', '<', '>=', '<=');

			/*
				As the $where array is set as field, operator, value we can easily set them to named variables
			 */
            $field = $where[0];
            $operator = $where[1];
            $value = $where[2];

			/*
				The next check is to make sure that the supplied operator is
				one of the ones set in $operators
			 */
            if (in_array($operator, $operators))
			{
				// The operator matches so create the SQL statement
                $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";

				// Try to execute the query using the query() function.
                if(!$this->query($sql, array($value))->error()) {

					// Return anything returned from the query
                    return $this;
                }
            } // Operator check
        }// count check

        return false;
    } // action ()

	/**
	 * Perform a quick select on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example get('users', array('joined', '>', '2017-01-01'))
	 */
    public function get ($table, $where)
	{
        return $this->action('SELECT *', $table, $where);
    } // get ()

	/**
	 * Perform a quick delete on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example delete('users', array('joined', '>', '2017-01-01'))
	 */
    public function delete ($table, $where)
	{
        return $this->action('DELETE', $table, $where);
    } // delete ()


	/**
	 * Insert a row into a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example insert('users', array('username' => 'SteveB', 'active' => '1'))
	 */
    public function insert ($table, $fields = array())
	{
		/*
			The $fields array will have a $key => $value pairing for
			each field having data inserted. The $key will matche the
			table field name and the $value will be the value to insert.

			We use array_keys extract the keys from the $fields array
			and assigned them to $keys.
		 */
        $keys = array_keys($fields);

		// Create a default $values variable
        $values = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create a ? to
			place in the fields section of the insert statement
		 */
        foreach($fields as $field)
		{
			// Add a placeholder to $values
            $values .= '?';

			// If we are not on the last pairing, add a comma to $values
            if ($x < count($fields))
			{
                $values .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach

		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the fields and values.

			Using the example at the top of this function, the statement would be
			INSERT INTO `users` (`username`, `active`) VALUES (?, ?)

			We then pass the statement into the query() function
		 */
        $sql = "INSERT INTO `{$table}` (`" . implode('`,`', $keys) . "`) VALUES ({$values})";
echo $sql; nicePrint_r($fields);
		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error())
		{
			// Return anything returned from the query
			return true;
        }

        return false;

    } // insert()


	/**
	 * Update a row in a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param   int 	$id     The id of the row to update
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example update('users', 1, array('username' => 'SteveBNew', 'active' => '0'))
	 */
    public function update ($table, $id, $fields = array())
	{
		// Create a default $set variable to hold the values and fields
        $set = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create an x=? to
			place in the values section of the update statement
		 */
        foreach ($fields as $name => $value)
		{
			// Add a field = ?
            $set .= "`{$name}` = ?";

			// If we are not on the last pairing, add a comma to $set
            if ($x < count($fields)) {
                $set .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach


		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the values in $set.

			Using the example at the top of this function, the statement would be
			UPDATE `users` SET `username`='SteveBNew',`active`='0' WHERE id=1

			We then pass the statement into the query() function
		 */
        $sql = "UPDATE `{$table}` SET {$set} WHERE id = {$id}";

		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error())
		{
			// Return anything returned from the query
			return true;
        }

        return false;

    } // update ()

	//////////////////////////////////////////////////
	// Public functions to call private variables  //
	//////////////////////////////////////////////////

	// Allow a single row of results data to be called publically
    public function first ()
	{
        return $this->results()[0];
    }

	// Allow a results set data to be called publically
    public function results ()
	{
        return $this->_results;
    }

	// Return a row count
    public function count ()
	{
        return $this->_count;
    }

	// Return an error
    public function error ()
	{
        return $this->_error;
    }

     //  Get the id of the last inserted row
    public function insertId () {
       return $this->_pdo->lastInsertId();
    } // insertId ()

}





------------------------------------------------------------------------------------------------------------------



<?php

/**
 * Settings Model
 *
 * Two different types. If you frequesntly need to take only one element
 * out of a function then the path is put in. If not we will simply set the
 * function to a variable and take the required path from there.
 *
 * REMOVE ALL $path requirements
 * You can get a single element from any function with...
 * Settings::members()['verification']
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 * TODO: Sort out the 404 etc
 */

// Include the initiation file
require_once 'app/init.php';

class Settings
{
    public static function current_datetime ()
    {
        return new DateTime();
    }

    public static function db ()
    {
        return [
            // The database host. Usually 'localhost' or '127.0.0.1'
            'host' => 'localhost',
            // The Username for the database
            'username' => 'root',
            // The Password for the database
            'password' => 'notyou',
            // The Name of the database
            'dbname' => 'hub',
        ];
    }

    public static function members ()
    {
        return [
            'login_session' => 'uid',
            'user_cookie' => 'user',
            'cookie_expiry' => 604800,
            'verification' => 'manual',// auto/manual/email
            'user_login_group' => 'userGroup'

        ];
    }

    public static function site_details ($path)
    {
        $array = array (
            'site_name' => 'Php Framework',
            'home_page' => 'http://framework/',
            'admin_email' => 'srball72@gmail.com',
            'debug_mode' => true,
        );

        return self::set_path($array, $path);
    }

    /**
     * Meta Tags
     *
     * Returns an array of meta tags as a $key=>$value pairing
     * where the key is the 'name' and the value is the 'content'.
     *
     * These get processed in a foreach loop in the head() function
     * in the base template (by default /app/core/Templates/Base.php).
     *
     * @return  array   Key/Value pairing
     */
    public static function meta_tags ()
    {
        return [
            'description' => 'Enter a description',
            'author' => 'Your Name',
            'viewport' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
            'keyword' => 'Bootstrap,Admin,Template,PHP,MVC,Framework,jQuery,CSS,HTML,Dashboard'
        ];
    }

    public static function registration_terms ()
    {
        // Default terms taken from https://www.nibusinessinfo.co.uk/content/sample-website-terms-and-conditions-use
        // Change this to suit your needs.
        return '<h3>Terms and conditions</h3>

                <p>Welcome to our website. If you continue to browse and use this website, you are agreeing to comply with and be bound by the following terms and conditions of use, which together with our privacy policy govern '.self::site_details ('site_name').'\'s relationship with you in relation to this website. If you disagree with any part of these terms and conditions, please do not use our website.</p>

                <p>The term '.self::site_details ('site_name').' or \'us\' or \'we\' refers to the owner of the website whose registered office is [address]. Our company registration number is [company registration number and place of registration]. The term \'you\' refers to the user or viewer of our website.</p>

                <p>The use of this website is subject to the following terms of use:</p>

                <ul>
                    <li>The content of the pages of this website is for your general information and use only. It is subject to change without notice.</li>
                	<li>This website uses cookies to monitor browsing preferences. If you do allow cookies to be used, the following personal information may be stored by us for use by third parties: [insert list of information].</li>
                	<li>Neither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law.</li>
                	<li>Your use of any information or materials on this website is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through this website meet your specific requirements.</li>
                	<li>This website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions.</li>
                	<li>All trade marks reproduced in this website which are not the property of, or licensed to, the operator are acknowledged on the website.</li>
                	<li>Unauthorised use of this website may give rise to a claim for damages and/or be a criminal offence.</li>
                	<li>From time to time this website may also include links to other websites. These links are provided for your convenience to provide further information. They do not signify that we endorse the website(s). We have no responsibility for the content of the linked website(s).</li>
                	<li>Your use of this website and any dispute arising out of such use of the website is subject to the laws of England, Northern Ireland, Scotland and Wales.</li>
                </ul>';
    }

    public static function css ($path)
    {
        $array = [
            'local' => [
                // Main Site Styles
                'site' => '<link rel="stylesheet" href="/includes/css/site.css">',
                'admin' => '<link rel="stylesheet" href="/includes/css/admin.css">',
            ],
            'remote' => [
                // Font Awesome
                'font-awesome' => '<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">',




        		// Simple Line Icons
                'simple-line-icons' => '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/simple-line-icons/2.4.1/css/simple-line-icons.css" />',

        		/*
        			Bootstrap
        			We have both versions 3 and 4 just in case 3 is still needed
        		 */
                'bootstrap' => [
        			// Version 3.3.7
                    'v3' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">',

                    // Version 4 beta 3
                    'v4_beta' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy" crossorigin="anonymous">',

                    'v4' => '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">',

                ]
            ]
        ];

        return self::set_path($array, $path);

    } // css

    public static function js ($path)
    {
        $array = [
            'local' => [
                // Main Site Styles
                'default' => '<script src="default.js"></script>',
            ],
            'remote' => [
                // JQuery
        		'jquery' => '<script src="https://code.jquery.com/jquery-3.1.1.js" integrity="sha256-16cdPddA6VdVInumRGo6IbivbERE8p7CQR3HzTBuELA=" crossorigin="anonymous"></script>',
                'jquery_ui' => '<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js" integrity="sha256-T0Vest3yCU7pafRw9r+settMBX6JkKN06dqBnpQ8d30=" crossorigin="anonymous"></script>',
                'font-awesome-5' => '<script defer src="https://use.fontawesome.com/releases/v5.0.4/js/all.js"></script>',

                /*
                    Bootstrap
                    We have both versions 3 and 4 just in case 3 is still needed
                 */
                'bootstrap' => [
                    // Version 3.3.7
                    'v3' => '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>',

                    // Version 4
                    'v4' => '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>',
                ],
                'popper' => '<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>',
            ]
        ];

        return self::set_path($array, $path);

    } // js


    private static function set_path ($array, $path)
    {
        $path = explode('/', $path);

        $result = $array[$path[0]];
        unset($path[0]);

        foreach ($path as $bit) {
            if(isset($result[$bit])) {

                // If the path does exist, append the path to the $GLOBALS[] type
                $result = $result[$bit];

            }
        }
        return $result;
    }
}





------------------------------------------------------------------------------------------------------------




<?php

/**
 * Logs class
 *
 * Manages the activity logs. Still only a concept at the moment.
 *
 * Places details of updates in an 'activity' table in the database,
 * along with any other relevant tables such as reasons for login
 * failures.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the inititisation file
require_once 'app/init.php';

class Logs
{
	// Set any private variables
    private static  $_instance = null,
                    $db;
    private         $_pdo,
                    $_query,
                    $_error = false,
                    $_results,
                    $_count = 0;

	/**
	 * Construct the database connection
	 *
	 *	Opens up a connection to the database and assigns it to
	 *	$this->_pdo to make it re-usable.
	 *
	 * The connection parameters are called using Globals on values held
	 * in /app/core/config_files/db.php
	 *
	 * @return 	Database connection
	 */
    public function __construct()
	{
        $db = DB::dbConnect();

    } //__construct ()

    private static function insert_activity ($params) {

        $db = DB::dbConnect();
        $db->insert(
            'activity',
            $params
        );

        return $db->insertId();
    }


    public static function insert_table_success ($params) {
        $params['type'] = 1;
        $params['status'] = 'p';
        $params['user'] = Session::get(Settings::members()['login_session']);
        $params['stamp'] = date('Y-m-d H:i:s');

        self::insert_activity ($params);
    }

    public function insert_table_fail ($params, $errors, $post) {
        $params['type'] = 1;
        $params['status'] = 'f';
        $params['user'] = Session::get(Settings::members()['login_session']);
        $params['stamp'] = date('Y-m-d H:i:s');

        $id = self::insert_activity ($params);

        $_data = [];
        foreach ($errors as $key => $value) {
            $_data[$key] = $post[$key];
            if (empty($_data[$key])) {
                $_data[$key] = 'null';
            } else {
                $_data[$key] = $value;
            }
        }

        foreach ($_data as $key => $value) {
            $data[] = [
                $id, $key,$value
            ];
        }


        $values = array();
        foreach($data as $key => $value){
          $_value = "(".$value[0].",'".$value[1]."','".$value[2]."')";
          array_push($values,$_value);
        }
        $values_ = implode(",",$values);

        $sql = 'INSERT INTO `activity_table_updates`(`ref`, `field`, `value`) VALUES ' . $values_;

        $db = DB::dbConnect();

        $db->query($sql);
    //    nicePrint_r($_data);
    }

    private function insert_failed_register ($data, $id) {

        foreach ($data as $key => $value) {
            $_data[] = [
                $id, $key,$value
            ];
        }



        $values = array();
        foreach($_data as $key => $value){
          $_value = "(".$value[0].",'".$value[1]."','".$value[2]."')";
          array_push($values,$_value);
        }
        $values_ = implode(",",$values);

        $sql = 'INSERT INTO `activity_failed_registrations`(`ref`, `field`, `value`) VALUES ' . $values_;
        $db = DB::dbConnect();

        $db->query($sql);
    }

    private function insert_failed_login ($data) {

        $db = DB::dbConnect();
        $db->insert(
            'activity_failed_logins',
            $data
        );
    }


    public static function register_success ($id) {
        $params['type'] = 6;
        $params['status'] = 'p';
        $params['user'] = $id;
        $params['area'] = 'f';
        $params['stamp'] = date('Y-m-d H:i:s');

        self::insert_activity ($params);
    }


    public static function register_fail ($errors, $post) {
        // TODO: put password length and username lengths in settings
        nicePrint_r($errors, 'Errors');
        nicePrint_r($post, 'Post');

        $_data = [];
        foreach ($errors as $key => $value) {
            $_data[$key] = $post[$key];

            if (empty($_data[$key])) {
                $_data[$key] = 'null';
            } else if ($key == 'password' || $key == 'confirm_password') {
                if(strlen($_data[$key]) < 6){
                    $_data[$key] = 'min_length';
                } else {
                    if ($key == 'confirm_password') {
                        $_data[$key] = 'no_match';
                    }
                }
            } else if ($key == 'username') {
                if($value == 'Username already exists') {
                    $_data[$key] = 'exists';
                } else if (strlen($_data[$key]) < 6){
                    $_data[$key] = 'min_length';
                } else if (strlen($_data[$key]) > 20){
                    $_data[$key] = 'max_length';
                } else {
                    $_data[$key] = 'preg_match';
                }
            } else if ($key == 'email') {
                if($value == 'Email already exists') {
                    $_data[$key] = 'exists';
                } else {
                    $_data[$key] = 'preg_match';
                }
            }


        }

        $params['type'] = 6;
        $params['status'] = 'f';
        $params['area'] = 'f';
        $params['stamp'] = date('Y-m-d H:i:s');

        $id = self::insert_activity ($params);

        self::insert_failed_register ($_data, $id);
    }


    public static function login_fail ($data) {
        $params['type'] = 4;
        $params['status'] = 'f';
        $params['area'] = '0';
        $params['stamp'] = date('Y-m-d H:i:s');

        $id = self::insert_activity ($params);

        $data['ref'] = $id;

        self::insert_failed_login ($data);
    }

    public static function login_success () {
        $params['type'] = 4;
        $params['status'] = 'p';
        $params['user'] = Session::get(Settings::members()['login_session']);
        $params['area'] = '0';
        $params['stamp'] = date('Y-m-d H:i:s');

        self::insert_activity ($params);
    }

    public static function logout_success () {
        $params['type'] = 5;
        $params['user'] = Session::get(Settings::members()['login_session']);
        $params['area'] = '0';
        $params['stamp'] = date('Y-m-d H:i:s');

        self::insert_activity ($params);
    }

}




--------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Front End Members Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Members.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Users
 * @link 	http://yoursite/Users/{User}
 * @link 	http://yoursite/Users/Edit
 * @link 	http://yoursite/Users/Listing
 * @link 	http://yoursite/Users/Profile
 * @link 	http://yoursite/Users/ResetPassword
 * @link 	http://yoursite/Users/Verify

 */
class Users extends Controller
{

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Users');

	} // __construct ()


    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($params=null) {
		// Initianate any models that we will be using to pass data.
		$user = $this->model('M_Users');
        $groups = $this->model('M_Usergroups');

        if ($params) {
            if (!$user->find($params)) {
                $array = array (
                    'page_name' => 'User not found',
                    'page_type' => 'profile',
                    'status' => 'not_found',
                );
            } else {

                $user_data = $user->data();

                $user_group = $groups->find($user_data->group);

                $user_data->group = $groups->data()->name;

                $array = array (
                    'page_name' => $user_data->username.'\'s Profile',
                    'page_type' => 'profile',
                    'userdata' => $user_data,
                    /*
                        Users are called 'Users' backend and 'Members' front end so we need to overwrite the default here
                     */
                    'path' => 'Members',
                );
            }

        } else {
            $array = array (
                'page_name' => 'Members Overview',
                'page_type' => 'overview',
                'usercount' => $user->count(),
				'latestuser' => $user->mostRecent(),
                /*
                    Users are called 'Users' backend and 'Members' front end so we need to overwrite the default here
                 */
                'path' => 'Members',
            );
        }




		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'home/users',
            $array
        );
  	} // index()


	/** 	Show a listing of all Batches
	 *
	 *	Shows a list of all existing batches
	 *
	 *	$name is not used, it is just a reminder that we can pass variables in.
	 *
	 * 	One function from the 'Batches_Model' is used...
	 *	listing() returns an array containing the details of all batches in the database
	**/
	public function listing($params=null) {
        /*
            If we have parameters at a controller root there has
            been a url error so send to the 404 page
         */
        if($params) {Redirect::to('404');}

        // Initianate any models that we will be using to pass data.
        $user = $this->model('M_Users');

		// Pass the details to the page via showview()
		$this->view(
			// Select the View to use
			'home/users',
			// Pass the data to the view. These will be available as $data.
			[
				'page_name' => 'Members List',
                'page_type' => 'listing',
                'list' => $user->listing()
			]

		) ;
	} // list

    public function resetpassword ($email=null, $hash=null) {
        $model = $this->model('M_Users');

        if ($model->isLoggedIn()) {
            Redirect::to('/');
        }


        $params = [
            'page_name' => 'Reset Password',
            'page_type' => 'reset_password',
        ];



        if($email) {
            if($model->find($email)) {
                if ($model->checkUserHash($email, $hash)) {

                    if(Input::exists(['name'=>'reset_password'])) {
                        unset($_POST['reset_password']);

                        $_postdata = stripPostData ($_POST, $model->data());

                        if($_postdata) {
                            $_rules = $model->validation_rules();
                            $_rules = stripValidateRules ($_postdata, $_rules);

                            $validate = new Validate();

                            // Check the posted data against the validation rules
                            $validation = $validate->check(
                                $_postdata,
                                $_rules
                            );


                            if ($validation->passed()) {
                                unset($_postdata['confirm_password']);
                                $_postdata['salt'] = Hash::salt(32);
                                $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

                                if($model->update($model->data()->id, $_postdata)) {
                                    $params['status'] = 'pw_update_success';
                                    $params['form'] = null;
                                } else {
                                    $params['status'] = 'pw_update_failed_unspecified';
                                }
                            } else {
                                $params['status'] = 'validation_failed';
                                $params['errors'] = $validation->errors();
                                $params['form'] = $model->resetPasswordForm(['errors'=>$validation->errors()]);
                            }
                        } else {
                            $params['status'] = 'no_change';
                        }



                    } else {
                        $params['form'] =$model->resetPasswordForm(['errors'=>null]);
                    }
                } else {
                    $params['status'] = 'hash_fail';
                    $params['form'] = $model->resetPasswordLinkForm();
                }
            } else {
                $params['status'] = 'not_found';
                $params['form'] = $model->resetPasswordLinkForm();
            }

        } else {

            if(Input::exists('send_reset_email')) {
                $params['form'] = $model->resetPasswordLinkForm();
                if(!Input::get('username')) {
                    $params['errors'] = ['username'=> 'You must enter something to search for.'];
                    $params['status'] = 'send_link_fail';
                } else {

                    if($model->find(Input::get('username'))) {
                        $_postdata['salt'] = Hash::unique();
                        $model->createUserHash(['email'=>$model->data()->email, 'hash'=>$_postdata['salt']]);
                        $model->sendPasswordLinkMail ($model->data()->email,$_postdata['salt']);
                        $params['status'] = 'pw_email_sent';
                        $params['form'] = null;
                    } else {
                        $params['status'] = 'not_found';
                    }
                }

            } else {
                $params['form'] = $model->resetPasswordLinkForm();
            }


        }



        $this->view(
            'home/users',
            $params
        );
    }

    /**
	 * Verify a users account
	 *
	 * This is generally accessed via a url sent in the registration email.
	 *
	 * Both email and hash must exist in the url otherwise nothing
	 * will be processed.
	 * Also, if the email and hash do not match a row in the 'user_hash'
	 * table, nothing will be processed.
	 *
	 * If there is an email and hash in the url and they do match a
	 * row in the 'user_hash' table, the user is activated by setting
	 * their status to 1.
	 *
	 * Nothing is passed to the view other than the page name. everything
	 * else is handled with Session::flash messages.
	 *
	 * @param  	email 		$email 		Users Email address
	 * @param  	sha256 		$hash  		Stored hash
	 * @return 	view
	 * @link 	http://site.com/Members/Verify/{$email}/{$hash}
	 */
  	public function verify($email=null, $hash=null) {
        $errors = null;

        $model = $this->model('M_Users');

        if ($model->isLoggedIn()) {
            Redirect::to('/');
        }

		// Check that the email and hash variables exist
		if(isset($email) && isset($hash))
		{
			// They both exist so continue with the verification attempt



			// Check the email and hash match a row. checkUserHash() returns true or false
		  	if ($model->checkUserHash($email, $hash))
			{
                $user = $model->find($email);

				// checkUserHash() was succesful so activate the account
			  	$model->update($model->data()->id, array('status' => '1'));

                $model->deleteUserHash($hash);

                $status = 'account_verified';

		 	} else
			{
                $status = 'incorrect_verify_link';
	  	    }
        }
        else
        {
            $status = 'incorrect_verify_link';
	  	}

		/**
		 * Pass the data to the view
		 * we only need the page name as everything else is
		 * in a flashAlert()
		 *
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
		$this->view(
            'home/users',
			[
				'page_name' => 'Verify Account',
				'page_type' => 'verify',
				'status' => $status
			]
		);
  	} // verify ()


    public function edit($params=null) {

        /*
            If we have parameters there has been a url error so send to
            the 404 page
         */
        if($params){Redirect::to('404');}

        $model = $this->model('M_Users');


        $params = [
            'page_name' => 'Edit Profile',
            'page_type' => 'edit',
        ];

        if(!$model->isLoggedIn()) {
            $params['errors'] = true;
            $params['status'] = 'not_logged_in';
        } else {
            $update_errors = '';
            $pw_errors = '';
            if($model->find(Session::get(Settings::members()['login_session']))) {

                if (Input::exists(['name'=>'update_user'])) {
                    unset($_POST['update_user']);

                    $_postdata = stripPostData ($_POST, $model->data());

                    if($_postdata) {
                        $_rules = $model->validation_rules();
                        $_rules = stripValidateRules ($_postdata, $_rules);

                        $validate = new Validate();

                        // Check the posted data against the validation rules
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );


                        if ($validation->passed()) {
                            if($model->update($model->data()->id, $_postdata)) {
                                $params['status'] = 'account_update_success';
                            } else {
                                $params['status'] = 'update_failed_unspecified';
                            }
                        } else {
                            $params['status'] = 'validation_failed';
                            $params['errors'] = $validation->errors();
                        }
                    } else {
                        $params['status'] = 'account_update_no_change';
                    }
                } // End profile form post

                if (Input::exists(['name'=>'reset_password'])) {
                    unset($_POST['reset_password']);

                    $_postdata = stripPostData ($_POST, $model->data());

                    if($_postdata) {
                        $_rules = $model->validation_rules();
                        $_rules = stripValidateRules ($_postdata, $_rules);

                        $validate = new Validate();

                        // Check the posted data against the validation rules
                        $validation = $validate->check(
                            $_postdata,
                            $_rules
                        );


                        if ($validation->passed()) {
                            unset($_postdata['confirm_password']);
                            $_postdata['salt'] = Hash::salt(32);
                            $_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

                            if($model->update($model->data()->id, $_postdata)) {
                                $params['status'] = 'pw_update_success';
                            } else {
                                $params['status'] = 'pw_update_failed_unspecified';
                            }
                        } else {
                            $params['status'] = 'validation_failed';
                            $params['errors'] = $validation->errors();
                        }
                    } else {
                        $params['status'] = 'no_change';
                    }

                }

                $params['edit_form'] = $model->userForm([
                    'errors' => (isset($params['errors'])) ? $params['errors'] : '',
                    'version' => 'edit',
                    'area' => 'user',
                    'data' => $model->data()
                ]);

                $params['password_form'] = $model->resetPasswordForm([
                    'errors' => (isset($params['errors'])) ? $params['errors'] : '',
                ]);
            }
        }

        $this->view(
            'home/users',
			$params
		);

    }



    /**
     * Shows either the users profile page or an update form
     *
     * We do two things here. Firstly we check to see if
     * an update form has been posted and if so, process it
     * using profile_update() in the User Model, returning any
     * errors to $update. These errors are used to put error
     * validation on the form fields.
     *
     * We then use profile() in the User Model to check if a user
     * has been passed in and if so search for them and return the
     * results.
     *
     * All onscreen messages are handled with Session::flash in the
     * relevant classes.
     * @param  int/string/email 	$user 	Username, User ID or User Email
     * @return view
     * @link 	http://site.com/Members/Profile/{username}/
     * @link 	http://site.com/Members/Profile/{user id}/
     * @link 	http://site.com/Members/Profile/{user email}/
     */
    public function profile($user=null)
    {
        /**
         * Set the model
         *
         * All functions used here are held in the user model.
         *
         * @return Class
         */
        $model = $this->model('M_Users');

        /**
         * 	Create default variables
         *
         *	During this function, we use $errors to store any errors, $posted to show whether any
         *	form data has been posted and $method to show whether we are in view or edit mode
         *	as well as situations where no user has been found or non logged-in users try to edit
         *	a profile.
         */
        $errors = null;
        $posted = false;
        $method = null;

        /**
         * 	Check if the user has been passed in
         *
         *	If a user has been passed in, we have two options. If the user actually exists, we need to show
         *	their profile, otherwise we need to show a message that the user does not exists.
         *
         *	If a user has not been passed in, we also have two options. If the view is logged in, we then need to
         *	show the form to update their details, otherwise we show an unathorised message.
         *
         * 	@var int/string/email 	$user 	Username, User ID or User Email
         */
        if(!$user)
        {
            /*
                No user has been passed in so we need to check if is being viewed by a logged in person.

                If it is, we set $status to  'show_form'  otherwise we set it to  'unauthorised'.
            */
            $status = ($model->isLoggedIn()) ? 'show_form' : 'unauthorised';

            /*
                If the viewer is logged in (meaning $status = 'show_form') we are in edit mode so we have to
                check to see if either the profile or password update forms have been posted.

                If either have, we attempt the update and set $method to a relevant string
             */
            if($status == 'show_form')
            {

                $user = $model->getData(Session::get('user'));

                 // Check if a profile update has been posted and if so, process it
                if (Input::get('user_submit'))
                {
                    $posted = true;
                    $method = 'profile';
                    $errors = $model->update($user, $admin=false);
                }
                                // Check if a password update has been posted and if so, process it
                if (Input::get('reset_password_submit')) {
                    $posted = true;
                    $method = 'password';
                    $errors = $model->changePassword($user->id);
                }



            } // If 'show_form'

        }
        else
        {
            /*
                A user has been passed in so we need to check if they exist.

                If they do, we set $status to  'show_profile'  otherwise we set it to  'no_user'.
            */
            $status = ($model->getData($user)) ? 'show_profile' : 'no_user';
            if($status == 'show_profile')
            {
                $user = $model->getData($user);
            } else
            {
                $errors = 'nouser';
            }
        }


        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'users/index',
            [
                'page_name' => 'View Member',
                'user' => $user,
                'errors' => $errors,
                'type' => 'profile',
                'status' => $status,
                'posted' => $posted,
                'method' => $method
            ]
        );
    } // profile()


}





----------------------------------------------------------------------------------------------------------------------------



<?php

/**
 * Front End Home Controller
 *
 * Controller for any functions/views called from the site root as well
 * as the home page itself. These are the site home page, the login page
 * and the registration page.
 *
 * This file cannot contain any functions with the same name as a any files
 * or level 1 directories in /app/controllers/
 *
 * This files also acts as a reference to how all controllers (both front-end)
 * and admin, collate the information and pass this to the relevant view.
 *
 * This controller will be activated when the first parameter in the url does
 * not  match any files or folders within the controllers folder.
 *
 * The examples at the end of this opening comment show the urls that call
 * this controller and each of them cause a function within this file to
 * be executed.
 *
 * http://yoursite/Login will execute the login() function (the url parameter
 * and the function do not have to match case)
 *
 * http://yoursite/ will execute the index() function as if no function matches
 * the parameter in the url, it will always fall back to index()
 *
 * Given the file structure of
 *
 * app/
 * ├── controllers/
 * ├── ├── Admin/
 * ├── ├── ├── home.php
 * ├── ├── ├── Users.php
 * ├── ├── ├── Usergroups.php
 * ├── ├── home.php
 * ├── ├── Members.php
 *
 * http://yoursite/ will go to controllers/home.php as no first parameter is
 * passed in.
 *
 * http://yoursite/Registration will go to controllers/home.php as the first
 * parameter does not match any folders or files and it will cause the
 * registration () function in this file to be executed.
 *
 * http://yoursite/SignUp will go to controllers/home.php as the first
 * parameter does not match any folders or files but as it does not match
 * any functions in this file, it will default to the index() function.
 * In some files we used this as a parameter in the index () function but in
 * this file, we check if it is set from within index () an if so, throw a 404
 * error.
 * For an example of using a parameter within an index function, see
 * app/controllers/Members.php
 *
 * http://yoursite/Members will go to controllers/Members.php as the first
 * parameter matches a file name and as there are no further parameters, will
 * execute the index () function.
 *
 * http://yoursite/Members/Listing will go to controllers/Members.php as the
 * first parameter matches a file name and as the next parameter, matches the
 * listing () function.
 *
 * The following will also use the indicated files and functions
 * http://yoursite/Members/Show
 * controllers/Members.php->index() as show() does not exist
 *
 * http://yoursite/Admin/
 * controllers/Admin/home.php->index()
 *
 * http://yoursite/Admin/Users
 * controllers/Admin/Users.php->index()
 *
 * http://yoursite/Admin/Listing
 * controllers/Admin/Users.php->listing()
 *
 * Note that although functions are not case senstive, files and folders are
 * so THEY MUST match the case of the parameter in the URL
 *
 * In each function we gradually build the different parts required by the view
 * and collect them in an array called $params[].
 * The view
 *
 * Any messages that are required in the view, such as post succss or failure
 * and errors are passed in as $params['status'] with a reference to look up
 * in the models messages () function.
 *
 * @package     Core
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/
 * @link 	http://yoursite/Login
 * @link 	http://yoursite/Register
 */
nicePrint_r($_SESSION);
class Home extends Controller
{

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Users');
        $this->_logs = new Logs();

	} // __construct ()

	/**
	 * Site Home Page
	 *
	 * This is the page that will be seen when viewing the site root.
	 *
	 * This will generally show latest updates as the primary focus
	 * but for now, we will just return some basic details from the
	 * various sections.
	 *
	 * @return 	view
	 * @link 	http://site.com/
	 */
	public function index($params=null) {
        /*
            If we have parameters at a controller root there has
            been a url error so send to the 404 page
         */
        if($params){Redirect::to('404');}

		/*
			Pass the required data through to the view

            For now we are just passing a few counts of various sections
		*/
	    $this->view(
	        'home/index',
	        [
	            // Pass the page title
	            'page_name' => 'Home Page',
                'page_subtitle' => 'Subtitle stuff',
				'content' => 'test'
	        ]
	    );

  	} // index()

    /**
     * Login page
     *
     * Contains the full login form and help.
     *
     * @return 	view
     * @param   null         Only present to enforce 404 errors
     */
    public function login($params=null) {
        /*
        If we have parameters there has been a url error so send to
        the 404 page
         */
        if($params){Redirect::to('404');}

        /*
            Pass the required data through to the view

            For now we are just passing a few counts of various sections
        */
        $this->view(
            'home/login',
            [
                // Pass the page title
                'page_name' => 'Login',
                'page_subtitle' => 'Subtitle stuff',
                'content' => 'test'
            ]
        );

    } // index()

    /**
     * Registration page
     *
     * Contains the registration form and checks for any registration
     * attempts.
     *
     * @return 	view
     * @param   null         Only present to enforce 404 errors
     */
    public function register($params=null) {
        /*
            If we have parameters there has been a url error so send to
            the 404 page
         */
        if($params){Redirect::to('404');}

        $_params = [
            'page_name' => 'Register new account',
            'page_type' => 'register',
			'errors' => null,

        ];

        // Open the M_Users() model to access required functions
        $model = $this->model('M_Users');

        // If the user is already logged in, redirect them to the home page
        if($model->isLoggedIn()){Redirect::to('/');}

        // Check to see if a registration attempt has been made
        if (Input::exists(['name'=>'register'])) {

            unset($_POST['register']);

            /*
                We now create a variable called $_postdata and set $_POST to it to preserve the original data in case we need it again.

                We also run another function to unset unrequired validation rules to avoid them firing on unset fields.
             */
            $_postdata = $_POST;

            $_postdata['terms'] = (isset($_POST['terms'])) ? $_POST['terms'] : 0;

            $_rules = stripValidateRules (
                $_postdata,
                $this->_default_model->validation_rules()
            );

            // Open a new instance of the validation class
            $validate = new Validate();

            /*
                Check the posted data against the validation
                rules using the check () function from the
                Validate () class.
                If successful, the $validation->passed()
                function will return true.
             */
            $validation = $validate->check(
                $_postdata,
                $_rules
            );

            /*
                If validation has passed, we unset the 'confirm_password' and 'terms' from the $_postdata as they were only for validation purposes.
                We then set the 'status' to 1 as we want all users created in the admin area to be instantly verified, before we attempt to create a new record using the create () function in the model.
             */
             if ($validation->passed()) {
                 // Validation passed so unset unrequired fields
                 unset($_postdata['confirm_password']);
                 unset($_postdata['terms']);

                 // Automatically verify the user
                 if(Settings::members()['verification'] == 'auto' || isset($_params['auto_verify'])) {
                     $_postdata['status'] = 1;
                 }

                 if($this->_default_model->create($_postdata)) {
                     switch (Settings::members()['verification']) {
                         case 'auto':
                             $_params['status'] = 'register_success_auto';
                             break;
                         case 'email':
                             $_params['status'] = 'register_success_email';
                             break;

                         case 'manual':
                             $_params['status'] = 'register_success_manual';
                             break;
                     }
                     $_params['page_name'] = 'Registration Succesful';
                     $_params['verification'] = Settings::members()['verification'];
                     $_params['insert_id'] = $this->_default_model->_insertId;
                     $this->_logs->register_success(
                         $_params['insert_id']
                     );

                 } else {
                     // The create was unsuccessful
                     $_params['status'] = 'create_failed_unspecified';
                 }
             } else {
                 // The validation failed so set the status and errors
                 $_params['status'] = 'validation_failed';
                 $_params['errors'] = $validation->errors();
                 $this->_logs->register_fail(
                     $_params['errors'],
                     $_postdata
                 );


                 $_params['form'] = $model->userForm([
                     'errors' => $params['errors'],
                     'version' => 'create',
                     'area' => 'user',
                 ]);
             }

        } else {
            // There has been no registration attempt so simply show the form
            $_params['form'] = $model->userForm([
                'errors' => null,
                'version' => 'create',
                'area' => 'user',
            ]);
        }

        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'home/users',
            $_params
        );

    } // index()

}





-------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Admin Categories Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Admin/Categories.
 *
 * Only contains one function, index(), which powers two different pages.
 *
 * If a parameter has been passed in the URL, we assume to be on the edit
 * page for a category, with that parameter presumed to be a slugified version
 * of the category name. This page will contain both edit and delete forms.
 *
 * If no parameter has been passed, we default to the Category overview page
 * containing the form to add a new group and a list of existing groups.
 *
 * An explanation of how controllers work and how we pass the information to
 * the view can be found in app/controllers/home.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Admin/Categories
 * @link 	http://yoursite/Admin/Categories/{Category}
 *
 */
class Categories extends Controller
{
    // Set the access rights for the variables, including any defaults
    private $_category,
            $_default_model,
            $_params,
            $_postdata,
            $_rules;

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Categories');

	} // __construct ()


    /**
	 * Admin Category View
	 *
	 * This is the only view on the page so if a parameter has been passed
	 * in the URL, we assume to be on the edit page, otherwise we are on
	 * the overview page.
	 *
	 * @param  id/string   $_category  Category ID or sluified name
	 * @return view
     * @link 	http://yoursite/Admin/Categories
     * @link 	http://yoursite/Admin/Categories/{Category}
	 *
	 */
  	public function index($_category=null) {
        /*
            Set any data that will either not change, or will be the most
            prominent version of that parameter, to $_params.
         */
        $_params = [
            'page_name' => 'Categories',
            'page_type' => 'overview',
            'form' => $this->_default_model->form(),

        ];

        /**
         * 	Check if the category has been passed in
         *
         *	If a category has been passed in, we have two options. If the
         *	category actually exists, we need to show the edit form,
         *	otherwise we need to show a message that the category does
         *	not exist.
         *
         *	If a category has not been passed in, we assume that we are
         *	on the category overview page so show the add for and
         *	a listing of existing categorys.
         *
         * 	@var int/string/email 	$user 	Group name or Id
         */
        if($_category) {
            /*
                There is a category parameter so we set relevant default
                paramaters to send to the view.
             */
            $_params = [
                'page_name' => 'Edit Category',
                'page_type' => 'edit',
                'form' => null,
                'data'=> null,
                'delete_form' => null,
            ];

            /*
                Next we check if the passed in category actually exists.

                If it does, we show the form, otherwise we set a 'status'
                parameter to give a category not found message in the view.
            */
            if($this->_default_model->find($_category)) {
                /*
                    The category exists so add both the edit and delete forms
                    to the $_params, passing the data from the specified category
                    to the edit one.
                 */

                $_params['form'] = $this->_default_model->form(['type'=>'edit', 'data'=>$this->_default_model->data()->category_name]);
                $_params['delete_form'] = $this->_default_model->deleteForm();

                /*
                    We now need to check if either the update or delete forms
                    have been posted.

                    If they have, we run any required validation and attempt
                    to process them.
                 */
                if (Input::exists(['name'=>'update_category'])) {
                    // Update form posted so unset the submit button from $_POST
                    unset($_POST['update_category']);

                    /*
                        Check any posted data against the existing data to
                        strip it down to only fields that have changed.
                     */
                    $_postdata = stripPostData (
                        $_POST,
                        $this->_default_model->data());

                    /*
                        $_postdata now contains any remaining $_POST data so,
                        if it is not empty, we start to process it.
                     */
                    if($_postdata) {
                        /*
                            There is some remaining $_POST data so we now need
                            to attempt to validate it.

                            As we will probably have unset some of the $_POST
                            data, we run another function, this time unsetting
                            any unrequired validation rules to avoid them firing
                            on unset fields.
                         */
						$_rules = stripValidateRules (
                            $_postdata,
                            $this->_default_model->validation_rules()
                        );

                        // Open a new instance of the validation class
						$validate = new Validate();

                        /*
                            Check the posted data against the validation
                            rules using the check () function from the
                            Validate () class.
                            If successful, the $validation->passed()
                            function will return true.
                         */
						$validation = $validate->check(
							$_postdata,
							$_rules
						);

                        /*
                            If validation has passed, we attempt to update the table using
                            the update () function in the model.

                            As we use the category name as the reference in
                            the url, if that is updated, the current link will be incorrect. In this case, we redirect to the edit page of the new name.

                            If it has not passed, we set a 'status' of
                            'update_fail' to $_params, and also 'errors' containing
                            the validation errors.
                         */
                        if ($validation->passed()) {
                            // Validation passed so attempt the update
                            if($this->_default_model->update(
                                $this->_default_model->data()->id, $_postdata)
                            ) {
                                // The update was successful, so see if 'category_name' has changed
                                if(isset($_postdata['category_name']) && $this->_default_model->data()->category_name !== $_postdata['category_name']) {
                                    /*
                                        'category_name' has changed so set the status
                                        message to a $_SESSION and redirect to
                                        the new name.
                                     */
									Session::put('status', 'update_success');
									Redirect::to('/Admin/Categories/'.slugify($_postdata['category_name']));
								} else {
                                    /*
                                        'category_name' has not changed so simply set the
                                        status message to $_params.
                                     */
									$_params['status'] = 'update_success';
								} // Redirect
                                // Re-find the category to pass updated details to the view
                                $this->_default_model->find($this->_default_model->data()->id);

                                $_params['status'] = 'update_success';
                            } else {
                                /*
                                    The update failed for an unspecified reson so
                                    simply set the status
                                 */
                                $_params['status'] = 'update_fail';
                            } // update ()
                        } else {
                            // The validation failed so set the status and errors
                            $_params['status'] = 'update_fail';
                            $_params['errors'] = $validation->errors();
                        } // $validation->

                    } else {
                        // No data had changed so just set the status
                        $_params['status'] = 'no_change';
                    }
                } // Update form Posted

                /*
                    Now we move onto a delete request.

                    This is far simpler than the update one as we do not perform
                    any checks or validation. We already have the info we need to
                    delete the record so we simply attempt it and set a 'status',
                    as well as setting both forms to null.
                 */
                if (Input::exists(['name'=>'delete_category'])) {
                    if($this->_default_model->delete($this->_default_model->data()->id)) {
                        $_params['form'] = null;
                        $_params['delete_form'] = null;
                        $_params['status'] = 'delete_success';
                    }
                } // Delete form Posted

            } else {
                /*
                    The category was not found so we assume it is an incorrect
                    parameter. We set 'form' to null as we have nothing to edit
                    and set the 'status'.
                 */
                $_params['form'] = null;
                $_params['status'] = 'admin_not_found';
            }
        } else {
            /*
                There is no category parameter so we default to the overview
                version of the page showing the add form and the listing.

                First we check to see if the add form has been
                posted.
             */
            if (Input::exists(['name'=>'add_category'])) {
                // Update form posted so unset the submit button from $_POST
                unset($_POST['add_category']);

                /*
                    We now create a variable called $_postdata and set $_POST
                    to it to preserve the original data in case we need it
                    again.

                    We also run another function to unset unrequired validation rules to avoid them firing on unset fields.
                 */
                $_postdata = $_POST;

                $_rules = stripValidateRules (
                    $_postdata,
                    $this->_default_model->validation_rules()
                );

                // Open a new instance of the validation class
                $validate = new Validate();

                /*
                    Check the posted data against the validation
                    rules using the check () function from the
                    Validate () class.
                    If successful, the $validation->passed()
                    function will return true.
                 */
                $validation = $validate->check(
                    $_postdata,
                    $_rules
                );

                /*
                    If validation has passed, we attempt to create a new record
                    using the create () function in the model.
                 */
                if ($validation->passed()) {
                    // Validation passed so attempt the update
                    if($this->_default_model->create($_postdata)) {
                        // The create was successful
                        $_params['status'] = 'create_success';
                        $_params['insert_id'] = $this->_default_model->_insertId;
                    } else {
                        // The create was unsuccessful
                        $_params['status'] = 'create_fail';
                    }
                } else {
                    // The validation failed so set the status and errors
                    $_params['status'] = 'create_fail';
                    $_params['errors'] = $validation->errors();
                }

            }

            // Include the listing of records using listing() in the model.
            $_params['listing'] = $this->_default_model->listing ();
        } // Category exists?

		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'admin/categories',
            $_params
        );
  	} // index()
}





---------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Admin Users Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Admin/Users.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Users
 * @example 	http://yoursite/Admin/Users/{User}
 * @example 	http://yoursite/Admin/Users/Add
 * @example 	http://yoursite/Admin/Users/Listing
 * @example 	http://yoursite/Admin/Users/Edit/{User}
 * @example 	http://yoursite/Admin/Users/Delete/{User}
 * @example 	http://yoursite/Admin/Users/ResetPassword/{Email}/{Hash}
 * @example 	http://yoursite/Admin/Users/Verify/{Email}/{Hash}
 *
 *
 */
class Users extends Controller
{
    private $_default_model,
            $_postdata,
            $_rules,
            $_user;
    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Users');

	} // __construct ()

    /**
     * Registration page
     *
     * Contains the registration form and checks for any registration
     * attempts.
     *
     * @return 	view
     * @param   null         Only present to enforce 404 errors
     */
    public function add($_params=null) {
        /*
            If we have parameters there has been a url error so send to
            the 404 page
         */
        if($_params){Redirect::to('404');}

        /*
            Set any data that will either not change, or will be the most
            prominent version of that parameter, to $_params.
         */
		$_params = [
            'page_name' => 'Create new account',
            'page_type' => 'register',
            'errors' => null,
        ];


        /*
            Before anything else, we check to see if there has already been an attempt to register a user.
         */
		if (Input::exists(['name'=>'register'])) {
            // Form posted so unset the submit button from $_POST
            unset($_POST['register']);

            /*
                We now create a variable called $_postdata and set $_POST to it to preserve the original data in case we need it again.

                We also run another function to unset unrequired validation rules to avoid them firing on unset fields.
             */
            $_postdata = $_POST;

            $_rules = stripValidateRules (
                $_postdata,
                $this->_default_model->validation_rules()
            );

            // Open a new instance of the validation class
            $validate = new Validate();

            /*
                Check the posted data against the validation
                rules using the check () function from the
                Validate () class.
                If successful, the $validation->passed()
                function will return true.
             */
            $validation = $validate->check(
                $_postdata,
                $_rules
            );

            /*
                If validation has passed, we unset the 'confirm_password' and 'terms' from the $_postdata as they were only for validation purposes.
                We then set the 'status' to 1 as we want all users created in the admin area to be instantly verified, before we attempt to create a new record using the create () function in the model.
             */
            if ($validation->passed()) {
                // Validation passed so unset unrequired fields
                unset($_postdata['confirm_password']);
                unset($_postdata['terms']);

                // Automatically verify the user
                $_postdata['status'] = 1;

                if($this->_default_model->create($_postdata)) {
                    $_params['status'] = 'admin_create_success';
                    $_params['page_name'] = 'Registration Succesful';
                    $_params['insert_id'] = $this->_default_model->_insertId;

                } else {
                    // The create was unsuccessful
                    $_params['status'] = 'create_failed_unspecified';
                }
            } else {
                // The validation failed so set the status and errors
                $_params['status'] = 'validation_failed';
                $_params['errors'] = $validation->errors();
            }

        } // Form Posted

        /*
            All we need to do now is pass in the form with any errors from a previous post.
         */
		$_params['form'] = $this->_default_model->userForm([
			'errors' => $_params['errors'],
			'version' => 'create',
			'area' => 'admin',
		]);

        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'admin/users',
            $_params
        );

    } // index()

    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($_params=null) {

		// Initianate any models that we will be using to pass data.
		$user = $this->model('M_Users');
        $groups = $this->model('M_Usergroups');

        if ($_params) {
            if (!$user->find($_params)) {
                $array = array (
                    'page_name' => 'User not found',
                    'page_type' => 'profile',
                    'status' => 'admin_not_found',
                );
            } else {
                $user_data = $user->data();

                $user_group = $groups->find($user_data->group);

                $user_data->group = $groups->data()->group_name;


                $array = array (
                    'page_name' => $user_data->username.'\'s Profile',
                    'page_type' => 'profile',
                    'user' => $user_data,
                    /*
                        Users are called 'Users' backend and 'Members' front end so we need to overwrite the default here
                     */
                    'path' => 'Members',
                );

                switch ($user_data->status) {
                    case '-1':
                        $array['status'] = 'admin_user_banned';
                        break;

                    case '0':
                        $array['status'] = 'admin_user_unverified';
                        break;
                }
            }



        } else {
            $array = array (
                'page_name' => 'Members Overview',
                'page_type' => 'overview',
                'usercount' => $user->count(),
				'latestuser' => $user->mostRecent(),
                /*
                    Users are called 'Users' backend and 'Members' front end so we need to overwrite the default here
                 */
                'path' => 'Members',
            );
        }




		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'admin/users',
            $array
        );
  	} // index()


	/** 	Show a listing of all Batches
	 *
	 *	Shows a list of all existing batches
	 *
	 *	$name is not used, it is just a reminder that we can pass variables in.
	 *
	 * 	One function from the 'Batches_Model' is used...
	 *	listing() returns an array containing the details of all batches in the database
	**/
	public function listing($_params=null)
	{
        /*
            If we have parameters at a controller root there has
            been a url error so send to the 404 page
         */
        if($_params) {Redirect::to('404');}

        // Initianate any models that we will be using to pass data.
        $user = $this->model('M_Users');

		// Pass the details to the page via showview()
		$this->view(
			// Select the View to use
			'admin/users',
			// Pass the data to the view. These will be available as $data.
			[
				'page_name' => 'Members List',
                'page_type' => 'listing',
                'list' => $user->listing()
			]

		) ;
	} // list

    public function edit($_user=null) {
        /*
            When we pass the information to the view at the end of the function,
            it requires two parameters, the path to the view and all of the data
            that we need to display.

            We pass this second part as an array called $_params so we create it
            and set any data that will either not change, or will be the most
            prmonient version of that parameter.
         */
		$_params = [
            'page_name' => 'Edit User',
            'page_type' => 'edit',
        ];

        /**
         * 	Check if the user has been passed in
         *
         *	If a user has been passed in, we have two options. If the
         *	user actually exists, we need to show the edit form,
         *	otherwise we need to show a message that the user does
         *	not exist.
         *
         *	If a user has not been passed in, we redirect to the 404 page.
         *
         * 	@var int/string/email 	$_user 	Username, User ID or User Email
         */
        if(!$_user) {
            Redirect::to('404');
        } else {
            /*
                Next we check if the passed in user actually exists.

                If it does, we show the form, otherwise we set a 'status' parameter to give a group not found message
                in the view.
            */
            if($this->_default_model->find($_user)) {
                /*
                    The user exists so we now need to check if either the
                    update or change password forms have been posted.

                    If they have, we run any required validation and attempt
                    to process them.
                 */
				if (Input::exists(['name'=>'update_user'])) {
                    // Unset the submit button from the post
					unset($_POST['update_user']);

                    /*
                        Check any posted data against the existing data to
                        strip it down to only fields that have changed.
                     */
					$_postdata = stripPostData (
                        $_POST, $this->_default_model->data()
                    );
                    /*
                        $_postdata now contains any remaining $_POST data so,
                        if it is not empty, we start to process it.
                     */
					if($_postdata) {
                        /*
                            There is some remaining $_POST data so we now need
                            to attempt to validate it.

                            As we will probably have unset some of the $_POST
                            data, we run another function, this time unsetting
                            any unrequired validation rules to avoid them firing
                            on unset fields.
                         */
                        $_rules = stripValidateRules (
                            $_postdata, $this->_default_model->validation_rules()
                        );

                        // Open a new instance of the validation class
						$validate = new Validate();

                        /*
                            Check the posted data against the validation
                            rules using the check () function from the
                            Validate () class.
                            If successful, the $validation->passed()
                            function will return true.
                         */
						$validation = $validate->check(
							$_postdata,
							$_rules
						);

                        /*
                            If validation has passed, we attempt to update the table using the update () function in the
                            model.

                            As we use the username as the reference in
                            the url, if that is updated, the current link will be incorrect. In this case, we redirect to the edit page of the new name.

                            If it has not passed, we set a 'status' of
                            'update_fail' to $_params, and also 'errors' containing
                            the validation errors.
                         */
						if ($validation->passed()) {
                            // Validation passed so attempt the update
							if($this->_default_model->update(
                                $this->_default_model->data()->id, $_postdata)
                            ) {
                                // The update was successful, so see if 'username' has changed
								if(isset($_postdata['username']) && $this->_default_model->data()->username !== $_postdata['username']) {
                                    /*
                                        'username' has changed so set the status
                                        message to a $_SESSION and redirect to
                                        the new name.
                                     */
									Session::put('status', 'admin_account_update_success');
									Redirect::to('/Admin/Users/Edit/'.$_postdata['username']);
								} else {
                                    /*
                                        'username' has not changed so set the status message to $_params.
                                     */
									$_params['status'] = 'admin_account_update_success';
								}
                                // Re-find the user to pass updated details to the view
                                $this->_default_model->find($this->_default_model->data()->id);

							} else {
                                /*
                                    The update failed for an unspecified reson so
                                    simply set the status
                                 */
								$_params['status'] = 'update_failed_unspecified';
							}
						} else {
                            /*
                                The validation failed so set the status and errors
                             */
							$_params['status'] = 'validation_failed';
							$_params['errors'] = $validation->errors();
						}
					} else {
                        // No data had changed so just set the status
						$_params['status'] = 'account_update_no_change';
					}
				} // End profile form post

				if (Input::exists(['name'=>'reset_password'])) {
                    // Unset the submit button from the post
					unset($_POST['reset_password']);

					$_postdata = stripPostData ($_POST, $this->_default_model->data());

					if($_postdata) {
						$_rules = $this->_default_model->validation_rules();
						$_rules = stripValidateRules ($_postdata, $_rules);

						$validate = new Validate();

						// Check the posted data against the validation rules
						$validation = $validate->check(
							$_postdata,
							$_rules
						);

                        /*
                            Validation has passed so continue with the password update.
                         */
						if ($validation->passed()) {
							unset($_postdata['confirm_password']);
							$_postdata['salt'] = Hash::salt(32);
							$_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

							if($this->_default_model->update($this->_default_model->data()->id, $_postdata)) {
								$_params['status'] = 'admin_pw_update_success';

							} else {
								$_params['status'] = 'pw_update_failed_unspecified';
							}
						} else {
							$_params['status'] = 'validation_failed';
							$_params['errors'] = $validation->errors();

						}
					} else {
						$_params['status'] = 'no_change';
					}

				}

                /*
                    Set the forms

                    We add each of the forms independently with their own
                    parameters. We can set the errors for both from
                    $_params['errors'] if it is set as their will only ever be
                    errors from one of these forms at a time.
                 */
				$_params['edit_form'] = $this->_default_model->userForm([
					'errors' => (isset($_params['errors'])) ? $_params['errors'] : '',
					'version' => 'edit',
					'area' => 'admin',
					'data' => $this->_default_model->data()
				]);

				$_params['password_form'] = $this->_default_model->resetPasswordForm([
					'errors' => (isset($_params['errors'])) ? $_params['errors'] : '',
				]);
            }

            /*
                We pass the user status to the view so we can show an alert if
                the user is unverified or banned.
             */
            $_params['user_status'] = $this->_default_model->data()->status;
        }


        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'admin/users',
            $_params
        );
    } // edit ()

    /**
     * Delete a user from the database
     * @param  int      $data   User id
     * @return boolean          Delete status
     */
    public function delete($user=null) {
        // Set the model
        $this->_default_model = $this->model('M_Users');

        // Set the basic parameters for the page
        $_params = [
            'page_name' => 'Delete User',
            'page_type' => 'delete',
        ];

        /**
         * 	Check if the user has been passed in
         *
         *	If a user has been passed in, we have two options. If the user
         *	actually exists, process the delete form if submitted, otherwise simply
         *	show the form.
         *
         *	If a user has not been passed in, we simply redirect to the 404 page.
         *
         * 	@var int/string/email 	$user 	Username, User ID or User Email
         */
        if(!$user) {
            if($_params) {Redirect::to('404');}
        } else {
            /*
                A user has been passed in so we need to check if it exists.

                If it does, we process any delete requests that exist, otherwise
                we show the delete form.
            */
            if($this->_default_model->find($user)) {
                // Check if the delete form has been posted
                if (Input::exists(['name'=>'delete_user'])) {

                    // The delete form has been posted so unset the form button
                    unset($_POST['delete_user']);

                    // Attempt to delete the user
                    if($this->_default_model->delete($this->_default_model->data()->id)) {
                        $_params['status'] = 'admin_account_delete_success';
                    }
                } else {
                    // The delete form has not been posted so show it
                    $_params['delete_form'] = $this->_default_model->deleteForm([
                        'version' => 'delete',
                        'area' => 'admin',
                    ]);
                }
            } else {
                // No user found so show a message
                $_params['status'] = 'admin_not_found';
            }

        } // if $user


        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'admin/users',
            $_params
        );
    } // delete()









    /**
     * Reset a users password page
     *
     * This page should only be accessed via a link in an email sent.
     *
     * @param  email    $email  Email address
     * @param  sha256   $hash   Matching hash from the database row
     * @link 	http://site.com/Members/ResetPassword/{email}/{Hash}
     */
    public function resetpassword ($email=null, $hash=null)
    {
        $errors = null;
        /**
         * Set the model
         *
         * All functions used here are held in the user model.
         *
         * @return Class
         */
        $this->_default_model = $this->model('M_Users');

        if ($this->_default_model->isLoggedIn()) {
            Redirect::to('/');
        }

        /*
            We need both parameters for this to work so first of we check for the
            email.

            If there is nothing there we know then we know that we are still at the
            inital stage of the process and the reset email has not yet been requested..
         */
        if($email)
        {
            /*
                Next up we use the checkUserHash() function to see it there is a row in
                the table with a matching username and hash.

                If there is, we will send the email, show the form when the link is clicked
                and also try to process it when posted.
             */
            if ($this->_default_model->checkUserHash($email, $hash))
            {


                if (Input::get('reset_password_submit'))
                {
                    $errors =$this->_default_model->changePassword($this->_default_model->getData($email)->id);

                    if(!$errors)
                    {
                        $this->_default_model->deleteUserHash($email, $hash);
                        $status = 'updated';
                    } else {
                        $status = 'errors';
                    }

                } else
                {
                    $status = 'reset_form';
                }

            }  else
            {

                $status = 'hash_fail';


            }
        }
        else
        {
            /*
                As there is no parameters, we are at the initial stage so we need to see if an email
                has been posted to request a rest password email.
             */
            if (Input::get('reset_password_user'))
            {
                if(!Token::check(Input::get('token')))
                {
                    $status = 'token_fail';
                } else
                {


                    /*
                        The form has been posted so get the users details via the username input.

                        Although the input is called 'username' it can be a username, password or id.
                     */
                    $_user = $this->_default_model->find (Input::get('username'));

                    /*
                        If the user has been found, create a new hash and pass it into the createUserHash()
                        function in User_Functions to insert it into the table.

                        Once this is done, we send the email using SendMail::sendPasswordUpdateMail()
                     */
                    if($_user)
                    {
                        // The user exists so collect the data and create the hash
                        $_user = $this->_default_model->data();
                        $display = 'Send the email';
                        $hash = Hash::unique();

                        // Insert into the user_hash table
                        try {
                            $this->_default_model->createUserHash(array(
                                'email' => $this->_default_model->data ()->email,
                                'hash' => $hash,
                                'stamp' => date('Y-m-d H:i:s')
                            ));
                            // Send the registration email

                        } catch(Exception $e) {
                            die();
                        }

                        // Send the email
                        SendMail::sendPasswordUpdateMail($this->_default_model->data ()->email, $hash);

                        $status = 'email_sent';

                    } else
                    {
                        // The user was not found so flash an alert stating this and show the form again
                        $status = 'no_user';
                    }
                }

            } else
            {
                // The form has not been posted so just show it!
                $status = 'initial';
            }
        }

        /**
         * Pass the data to the view
         *
         * We only send the page name and what type of display we need to show.
         *
         * Everything else is handled by the view and flash alerts.
         *
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'users/index',
            [
                'page_name' => 'Reset Password',
                'type' => 'reset_password',
                'class' => 'Users',
                'status' => $status,
                'errors' => $errors
            ]

        );
    } // resetpassword ()

	/**
	 * Verify a users account
	 *
	 * This is generally accessed via a url sent in the registration email.
	 *
	 * Both email and hash must exist in the url otherwise nothing
	 * will be processed.
	 * Also, if the email and hash do not match a row in the 'user_hash'
	 * table, nothing will be processed.
	 *
	 * If there is an email and hash in the url and they do match a
	 * row in the 'user_hash' table, the user is activated by setting
	 * their status to 1.
	 *
	 * Nothing is passed to the view other than the page name. everything
	 * else is handled with Session::flash messages.
	 *
	 * @param  	email 		$email 		Users Email address
	 * @param  	sha256 		$hash  		Stored hash
	 * @return 	view
	 * @link 	http://site.com/Members/Verify/{$email}/{$hash}
	 */
  	public function verify($email=null, $hash=null)
  	{
        $errors = null;

        $this->_default_model = $this->model('M_Users');

        if ($this->_default_model->isLoggedIn()) {
            Redirect::to('/');
        }

		// Check that the email and hash variables exist
		if(isset($email) && isset($hash))
		{
			// They both exist so continue with the verification attempt



			// Check the email and hash match a row. checkUserHash() returns true or false
		  	if ($this->_default_model->checkUserHash($email, $hash))
			{
				// checkUserHash() was succesful so activate the account
			  	$this->_default_model->quickUpdate($this->_default_model->getData($email)->id, array('status' => '1'));

                $hash_model = $this->model('Userhash_Model');
                $hash_model->delete($hash);

                $status = 'verified';

		 	} else
			{
                $status = 'no_record';
	  	    }
        }
        else
        {
            $status = 'incorrect_link';
	  	}

		/**
		 * Pass the data to the view
		 * we only need the page name as everything else is
		 * in a flashAlert()
		 *
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
		$this->view(
            'users/index',
			[
				'page_name' => 'Verify Account',
				'type' => 'verify',
                'class' => 'Users',
				'status' => $status,
				'errors' => $errors
			]
		);
  	} // verify ()

}





-----------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Admin Usergroups Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Admin/Usergroups.
 *
 * Only contains one function, index(), which powers two different pages.
 *
 * If a parameter has been passed in the URL, we assume to be on the edit
 * page for a group, with that parameter presumed to be a slugified version
 * of the group name. This page will contain both edit and delete forms.
 *
 * If no parameter has been passed, we default to the Usergroup overview page
 * containing the form to add a new group and a list of existing groups.
 *
 * An explanation of how controllers work and how we pass the information to
 * the view can be found in app/controllers/home.
 *
 * @package     Core
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Admin/Usergroups
 * @link 	http://yoursite/Admin/Usergroups/{Groupname}
 */
class Usergroups extends Controller
{
    // Set the access rights for the variables, including any defaults
    private $_default_model,
            $_group,
            $_params,
            $_postdata,
            $_rules;

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Usergroups');
        $this->_logs = new Logs();

	} // __construct ()


    /**
	 * Admin Usergroups View
	 *
	 * This is the only view on the page so if a parameter has been passed
	 * in the URL, we assume to be on the edit page, otherwise we are on
	 * the overview page.
	 *
	 * @param  id/string   $_category  Category ID or sluified name
	 * @return view
     * @example 	http://yoursite/Admin/Usergroups
     * @example 	http://yoursite/Admin/Usergroups/{Group}
	 *
	 */
  	public function index($_group=null) {
        /*
            Set any data that will either not change, or will be the most
            prominent version of that parameter, to $_params.
         */
        $_params = [
            'page_name' => 'Usergroups',
            'page_type' => 'overview',
            'form' => $this->_default_model->form(['version' => 'create']),

        ];

        /**
         * 	Check if the group has been passed in
         *
         *	If a group has been passed in, we have two options. If the
         *	group actually exists, we need to show the edit form,
         *	otherwise we need to show a message that the group does
         *	not exist.
         *
         *	If a group has not been passed in, we assume that we are
         *	on the user group overview page so show the add for and
         *	a listing of existing groups.
         *
         * 	@var int/string 	$user 	Group name or Id
         */
        if($_group) {
            /*
                There is a group parameter so we set relevant default
                paramaters to send to the view.
             */
			$_params = [
				'page_name' => 'Edit Usergroup',
				'page_type' => 'edit',
                'form' => null,
                'data'=> null,
				'delete_form' => $this->_default_model->deleteForm(),
			];

            /*
                Next we check if the passed in group actually exists.

                If it does, we show the form, otherwise we set a 'status'
                parameter to give a group not found message in the view.
            */
            if($this->_default_model->find($_group)) {
                /*
                    The group exists so add both the edit and delete forms
                    to the $_params, passing the data from the specified group
                    to the edit one.
                 */
                $_params['form'] =  $this->_default_model->form([
                    'version'=>'edit',
                    'data'=> objectToArray($this->_default_model->data())
                ]);

                $_params['delete_form'] =  $this->_default_model->deleteForm();

                /*
                    We now need to check if either the update or delete forms
                    have been posted.

                    If they have, we run any required validation and attempt
                    to process them.
                 */
                if (Input::exists(['name'=>'update_usergroup'])) {
                    // Update form posted so unset the submit button from $_POST
                    unset($_POST['update_usergroup']);

                    /*
                        Check any posted data against the existing data to
                        strip it down to only fields that have changed.
                     */
                    $_postdata = stripPostData (
                        $_POST,
                        $this->_default_model->data()
                    );

                    /*
                        $_postdata now contains any remaining $_POST data so,
                        if it is not empty, we start to process it.
                     */
                    if($_postdata) {
                        /*
                            There is some remaining $_POST data so we now need
                            to attempt to validate it.

                            As we will probably have unset some of the $_POST
                            data, we run another function, this time unsetting
                            any unrequired validation rules to avoid them firing
                            on unset fields.
                         */
						$_rules = stripValidateRules (
                            $_postdata,
                            $this->_default_model->validation_rules()
                        );

                        // Open a new instance of the validation class
						$validate = new Validate();

						/*
                            Check the posted data against the validation
                            rules using the check () function from the
                            Validate () class.
                            If successful, the $validation->passed()
                            function will return true.
                         */
						$validation = $validate->check(
							$_postdata,
							$_rules
						);

                        /*
                            If validation has passed, we attempt to update the table using the update () function in the
                            model.

                            As we use the group name as the reference in
                            the url, if that is updated, the current link will be incorrect. In this case, we redirect to the edit page of the new name.

                            If it has not passed, we set a 'status' of
                            'update_fail' to $_params, and also 'errors' containing
                            the validation errors.
                         */
                        if ($validation->passed()) {
                            // Validation passed so attempt the update
                            if($this->_default_model->update(
                                $this->_default_model->data()->id, $_postdata)
                            ) {
                                // The update was successful, so see if 'group_name' has changed
                                if(isset($_postdata['group_name']) && $this->_default_model->data()->group_name !== $_postdata['group_name']) {
                                    /*
                                        'group_name' has changed so set the status
                                        message to a $_SESSION and redirect to
                                        the new name.
                                     */
                                    Session::put('status', 'update_success');
									Redirect::to('/Admin/Usergroups/'.slugify($_postdata['group_name']));
								} else {
                                    /*
                                        'username' has not changed so simply set the
                                        status message to $_params.
                                     */
									$_params['status'] = 'update_success';
								} // Redirect

                                // Re-find the group to pass updated details to the view
                                $this->_default_model->find($this->_default_model->data()->id);

                            } else {
                                /*
                                    The update failed for an unspecified reson so
                                    simply set the status
                                 */
                                $_params['status'] = 'update_fail';
                            } // update ()
                        } else {
                            /*
                                The validation failed so set the status and errors
                             */
                            $_params['status'] = 'update_fail';
                            $_params['errors'] = $validation->errors();
                        } // $validation->
                    } else {
                        // No data had changed so just set the status
                        $_params['status'] = 'no_change';
                    }
                } // Update form Posted

                /*
                    Now we move onto a delete request.

                    This is far simpler than the update one as we do not perform
                    any checks or validation. We already have the info we need to
                    delete the record so we simply attempt it and set a 'status'.
                 */
                if (Input::exists(['name'=>'delete_usergroup'])) {
                    if($this->_default_model->delete($this->_default_model->data()->id)) {
                        $_params['form'] = null;
                        $_params['delete_form'] = null;
                        $_params['status'] = 'delete_success';
                    }
                } // Delete form Posted

            } else {
                /*
                    The group was not found so we assume it is an incorrect
                    parameter. We set 'form' to null as we have nothing to edit
                    and set the 'status'.
                 */
                $_params['form'] = null;
                $_params['status'] = 'admin_not_found';
            }
        } else {
            /*
                There is no group parameter so we default to the overview version of the page showing the add form and the listing.

                First we check to see if the add form has been
                posted.
             */
            if (Input::exists(['name'=>'add_usergroup'])) {
                // Update form posted so unset the submit button from $_POST
                unset($_POST['add_usergroup']);

                    /*
                        We now create a variable called $_postdata and set $_POST to it to preserve the original data in case we need it again.

                        We also run another function to unset unrequired validation rules to avoid them firing on unset fields.
                     */
                    $_postdata = $_POST;

                    $_rules = stripValidateRules (
                        $_postdata,
                        $this->_default_model->validation_rules()
                    );

                    // Open a new instance of the validation class
                    $validate = new Validate();

                    /*
                        Check the posted data against the validation
                        rules using the check () function from the
                        Validate () class.
                        If successful, the $validation->passed()
                        function will return true.
                     */
                    $validation = $validate->check(
                        $_postdata,
                        $_rules
                    );

                    /*
                        If validation has passed, we attempt to create a new record
                        using the create () function in the model.
                     */
                    if ($validation->passed()) {
                        // Validation passed so attempt the update
                        if($this->_default_model->create($_postdata)) {
                            // The create was successful
                            $_params['status'] = 'create_success';
                            $_params['insert_id'] = $this->_default_model->_insertId;

                            $this->_logs->insert_table_success([
                                'record' => $_params['insert_id'],
                                'area' => 'f',
                                'target' => 'user_groups'
                            ]);
                        } else {
                            $_params['status'] = 'create_fail';
                        }
                    } else {
                        // The validation failed so set the status and errors
                        $_params['status'] = 'create_fail';
                        $_params['errors'] = $validation->errors();
                        $this->_logs->insert_table_fail(
                            ['target' => 'user_groups', 'area' => 'a'],
                            $_params['errors'],
                            $_postdata
                        );
                    }

            }
            // Include the listing of records using listing() in the model.
            $_params['listing'] = $this->_default_model->listing ();
        }  // Category exists?

		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'admin/usergroups',
            $_params
        );
  	} // index()
}





-----------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Admin Home Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Admin/.
 *
 * This file cannot contain any functions with the same name as any
 * any files or level 1 directories in /app/controllers/Admin.
 *
 * Use this file sparingly and only for items that only have one variant.
 * For anything that may have several pages, create a new controller file
 * or if there will be many or complex pages, a new folder.
 *
 * An explanation of how we pass the information to the view can be found in
 * app/controllers/home.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Admin
 * @link 	http://yoursite/Admin/Login
 * @link 	http://yoursite/Admin/Unauthorised
 *
 */

class Home extends Controller
{
	/**
	 * Site Home Page
	 *
	 * This is the page that will be seen when viewing the site root.
	 *
	 * This will generally show latest updates as the primary focus
	 * but for now, we will just return some basic details from the
	 * various sections.
	 *
	 * @return 	view
	 * @link 	http://site.com/
	 */
	public function index($params=null)
	{
        /*
            If we have parameters at a controller root there has
            been a url error so send to the 404 page
         */
        if($params){Redirect::to('404');}

		/*
			Pass the required data through to the view

            For now we are just passing a few counts of various sections
		*/
	    $this->view(
	        'admin/index',
	        [
	            // Pass the page title
	            'page_name' => 'Home Page',
                'page_subtitle' => 'Subtitle stuff',
				'content' => 'test'
	        ]
	    );

  	} // index()

    /**
     * Login page
     *
     * Contains the full login form and help.
     *
     * @return 	view
     * @param   null         Only present to enforce 404 errors
     */
    public function login($params=null)
    {
        $user = new M_Users();
        if($user->isLoggedIn()){Redirect::to('/Admin/');}

        /*
            Pass the required data through to the view

            For now we are just passing a few counts of various sections
        */
        $this->view(
            'admin/login',
            [
                // Pass the page title
                'page_name' => 'Login',
                'page_type' => 'loginform',
                'content' => 'test'
            ]
        );

    } // index()

    public function unauthorised($params=null)
    {
        $user = new M_Users();
        if(!$user->isLoggedIn()){Redirect::to('/Admin/Login');}

        /*
            Pass the required data through to the view

            For now we are just passing a few counts of various sections
        */
        $this->view(
            'admin/login',
            [
                // Pass the page title
                'page_name' => 'Not Permitted',
                'page_type' => 'unauthorised',
                'content' => 'test'
            ]
        );

    } // index()


}





----------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Admin Users Controller
 *
 * xxxx
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 *
 */
class ActivityType extends Controller
{
    private $_default_model,
            $_postdata,
            $_rules,
            $_user;
    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_ActivityType');

	} // __construct ()

    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($record=null) {

        $params = [
            'page_name' => 'Activity Types',
            'page_type' => 'overview',
            'form' => $this->_default_model->form(),
        ];

        if ($record) {
            if($this->_default_model->find($record)) {

                $params = [
                    'page_name' => 'Edit Activity Type',
                    'page_type' => 'edit',
                    'form' => $this->_default_model->form(['type'=>'edit', 'data'=>$this->_default_model->data()->type_name]),
                ];

                if (Input::exists(['name'=>'update_activity_type'])) {

                    unset($_POST['update_activity_type']);

                    $_postdata = stripPostData ($_POST, $this->_default_model->data());

                    if($_postdata) {
                        $validate = new Validate();

 						// Check the posted data against the validation rules
 						$validation = $validate->check(
 							$_postdata,
 							$this->_default_model->validation_rules()
 						);


 						if ($validation->passed()) {
                            if($this->_default_model->update($this->_default_model->data()->id, $_postdata)) {
 								$params['status'] = 'update_success';
                                Session::put('status','update_success');
                                Redirect::to(slugify($_POST['type_name']));
 							} else {
 								$params['status'] = 'update_failed';
 							}
                        } else {
 							$params['status'] = 'validation_failed';
 							$params['errors'] = $validation->errors();
 						}

                    } else {
 						$params['status'] = 'no_change';
 					}
                }
            } else {
                $params['form'] =  null;
                $params['status'] = 'not_found';
            }
        } else {
            if (Input::exists(['name'=>'add_activity_type'])) {
                unset($_POST['add_activity_type']);

                $_rules = $this->_default_model->validation_rules();
                $_rules = stripValidateRules ($_POST, $_rules);

                $validate = new Validate();

                // Check the posted data against the validation rules
                $validation = $validate->check(
                    $_POST,
                    $_rules
                );

                if ($validation->passed()) {
                    if($this->_default_model->create($_POST)) {
                        $params['status'] = 'create_success';
                    } else {
                        $params['status'] = 'create_failed_unspecified';
                    }
                } else {
                    $params['status'] = 'validation_failed';
                    $params['errors'] = $validation->errors();
                }

            }

            $params['listing'] = $this->_default_model->listing ();
        }


		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'admin/activity',
            $params
        );
  	} // index()


}





------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Admin Systems Controller
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 *
 */
class Systems extends Controller
{

    /**
     * Construct the class
     *
     * Simply creates a re-usable instance of the default model
     */
	public function __construct () {
		// Model
		$this->_default_model = $this->model('M_Systems');

	} // __construct ()


    /**
	 * Member Section Overview Page
	 *
	 * @param  None at the mo but there will be
	 * @return view
	 * @link 	http://site.com/Members/
	 *
	 */
  	public function index($_params=null) {

		// Initianate any models that we will be using to pass data.

        $params = [
            'page_name' => 'Systems',
            'page_type' => 'overview',
            'form' => $this->_default_model->form(),
        ];

        if($_params) {
            if($this->_default_model->find($_params)) {

                $params = [
                    'page_name' => 'Edit System',
                    'page_type' => 'edit',
                    'form' => $this->_default_model->form(['type'=>'edit', 'data'=>$this->_default_model->data()->system_name]),
                ];

                if (Input::exists(['name'=>'update_system'])) {

                    unset($_POST['update_system']);

                    $_postdata = stripPostData ($_POST, $this->_default_model->data());

                    if($_postdata) {
                        $validate = new Validate();

 						// Check the posted data against the validation rules
 						$validation = $validate->check(
 							$_postdata,
 							$this->_default_model->validation_rules()
 						);


 						if ($validation->passed()) {
                            if($this->_default_model->update($this->_default_model->data()->id, $_postdata)) {
 								$params['status'] = 'update_success';
                                Session::put('status','update_success');
                                Redirect::to(slugify($_POST['system_name']));
 							} else {
 								$params['status'] = 'update_failed';
 							}
                        } else {
 							$params['status'] = 'validation_failed';
 							$params['errors'] = $validation->errors();
 						}

                    } else {
 						$params['status'] = 'no_change';
 					}
                }

            } else {
                $params['form'] =  null;
                $params['status'] = 'not_found';
            }
        } else {
            if (Input::exists(['name'=>'add_system'])) {
                unset($_POST['add_system']);

                $_rules = $this->_default_model->validation_rules();
                $_rules = stripValidateRules ($_POST, $_rules);

                $validate = new Validate();

                // Check the posted data against the validation rules
                $validation = $validate->check(
                    $_POST,
                    $_rules
                );

                if ($validation->passed()) {
                    if($this->_default_model->create($_POST)) {
                        $params['status'] = 'create_success';
                    } else {
                        $params['status'] = 'create_failed_unspecified';
                    }
                } else {
                    $params['status'] = 'validation_failed';
                    $params['errors'] = $validation->errors();
                }
            }

            $params['listing'] = $this->_default_model->listing ();
        }




		/**
		 * Pass the data to the view
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
        $this->view(
            'admin/systems',
            $params
        );
  	} // index()


	/** 	Show a listing of all Batches
	 *
	 *	Shows a list of all existing batches
	 *
	 *	$name is not used, it is just a reminder that we can pass variables in.
	 *
	 * 	One function from the 'Batches_Model' is used...
	 *	listing() returns an array containing the details of all batches in the database
	**/
	public function listing($params=null)
	{
        /*
            If we have parameters at a controller root there has
            been a url error so send to the 404 page
         */
        if($params) {Redirect::to('404');}

        // Initianate any models that we will be using to pass data.
        $user = $this->model('M_Users');

		// Pass the details to the page via showview()
		$this->view(
			// Select the View to use
			'admin/users',
			// Pass the data to the view. These will be available as $data.
			[
				'page_name' => 'Members List',
                'page_type' => 'listing',
                'list' => $user->listing()
			]

		) ;
	} // list

    public function edit($user=null)
    {
        /**
         * Set the model
         *
         * All functions used here are held in the user model.
         *
         * @return Class
         */
        $model = $this->model('M_Users');


		$params = [
            'page_name' => 'Edit User',
            'page_type' => 'edit',
        ];

        /**
         * 	Check if the user has been passed in
         *
         *	If a user has been passed in, we have two options. If the user actually exists, we need to show
         *	their profile, otherwise we need to show a message that the user does not exists.
         *
         *	If a user has not been passed in, we also have two options. If the view is logged in, we then need to
         *	show the form to update their details, otherwise we show an unathorised message.
         *
         * 	@var int/string/email 	$user 	Username, User ID or User Email
         */
        if(!$user) {
            if($params) {Redirect::to('404');}

        } else {
            /*
                A user has been passed in so we need to check if they exist.

                If they do, we set $status to  'show_profile'  otherwise we set it to  'no_user'.
            */
            if($model->find($user)) {
				if (Input::exists(['name'=>'update_user'])) {
					unset($_POST['update_user']);

					$_postdata = stripPostData ($_POST, $model->data());

					if($_postdata) {
						$_rules = $model->validation_rules();
						$_rules = stripValidateRules ($_postdata, $_rules);


						$validate = new Validate();

						// Check the posted data against the validation rules
						$validation = $validate->check(
							$_postdata,
							$_rules
						);


						if ($validation->passed()) {
							if($model->update($model->data()->id, $_postdata)) {
								if(isset($_postdata['username']) && $model->data()->username !== $_postdata['username']) {
									Session::put('status', 'update_success');
									Redirect::to('/Admin/Users/Edit/'.$_postdata['username']);
								} else {
									$params['status'] = 'update_success';
								}

							} else {
								$params['status'] = 'update_failed_unspecified';
							}
						} else {
							$params['status'] = 'validation_failed';
							$params['errors'] = $validation->errors();
						}
					} else {
						$params['status'] = 'no_change';
					}
				} // End profile form post

				if (Input::exists(['name'=>'reset_password'])) {
					unset($_POST['reset_password']);

					$_postdata = stripPostData ($_POST, $model->data());

					if($_postdata) {
						$_rules = $model->validation_rules();
						$_rules = stripValidateRules ($_postdata, $_rules);

						$validate = new Validate();

						// Check the posted data against the validation rules
						$validation = $validate->check(
							$_postdata,
							$_rules
						);


						if ($validation->passed()) {
							unset($_postdata['confirm_password']);
							$_postdata['salt'] = Hash::salt(32);
							$_postdata['password'] = Hash::make(Input::get('password'), $_postdata['salt']);

							if($model->update($model->data()->id, $_postdata)) {
								$params['status'] = 'pw_update_success';
							} else {
								$params['status'] = 'pw_update_failed_unspecified';
							}
						} else {
							$params['status'] = 'validation_failed';
							$params['errors'] = $validation->errors();
						}
					} else {
						$params['status'] = 'no_change';
					}

				}

				$params['edit_form'] = $model->userForm([
					'errors' => (isset($params['errors'])) ? $params['errors'] : '',
					'version' => 'edit',
					'area' => 'user',
					'data' => $model->data()
				]);

				$params['password_form'] = $model->resetPasswordForm([
					'errors' => (isset($params['errors'])) ? $params['errors'] : '',
				]);
            }
        }


        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'admin/users',
            $params
        );
    } // profile()


    public function delete($user=null)
    {
        /**
         * Set the model
         *
         * All functions used here are held in the user model.
         *
         * @return Class
         */
        $model = $this->model('M_Users');


        $params = [
            'page_name' => 'Delete User',
            'page_type' => 'delete',
        ];

        /**
         * 	Check if the user has been passed in
         *
         *	If a user has been passed in, we have two options. If the user actually exists, we need to show
         *	their profile, otherwise we need to show a message that the user does not exists.
         *
         *	If a user has not been passed in, we also have two options. If the view is logged in, we then need to
         *	show the form to update their details, otherwise we show an unathorised message.
         *
         * 	@var int/string/email 	$user 	Username, User ID or User Email
         */
        if(!$user) {
            if($params) {Redirect::to('404');}

        } else {
            /*
                A user has been passed in so we need to check if they exist.

                If they do, we set $status to  'show_profile'  otherwise we set it to  'no_user'.
            */
            if($model->find($user)) {
                if (Input::exists(['name'=>'delete_user'])) {
                    unset($_POST['delete_user']);

                    if($model->delete($model->data()->id)) {
                        $params['status'] = 'delete_success';
                    }
                } else {
                    $params['delete_form'] = $model->deleteForm([
                        'version' => 'delete',
                        'area' => 'admin',
                    ]);
                }



            } else {
                if($params) {Redirect::to('404');}
            }
        }


        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'admin/users',
            $params
        );
    } // profile()









    /**
     * Reset a users password page
     *
     * This page should only be accessed via a link in an email sent.
     *
     * @param  email    $email  Email address
     * @param  sha256   $hash   Matching hash from the database row
     * @link 	http://site.com/Members/ResetPassword/{email}/{Hash}
     */
    public function resetpassword ($email=null, $hash=null)
    {
        $errors = null;
        /**
         * Set the model
         *
         * All functions used here are held in the user model.
         *
         * @return Class
         */
        $model = $this->model('M_Users');

        if ($model->isLoggedIn()) {
            Redirect::to('/');
        }

        /*
            We need both parameters for this to work so first of we check for the
            email.

            If there is nothing there we know then we know that we are still at the
            inital stage of the process and the reset email has not yet been requested..
         */
        if($email)
        {
            /*
                Next up we use the checkUserHash() function to see it there is a row in
                the table with a matching username and hash.

                If there is, we will send the email, show the form when the link is clicked
                and also try to process it when posted.
             */
            if ($model->checkUserHash($email, $hash))
            {


                if (Input::get('reset_password_submit'))
                {
                    $errors =$model->changePassword($model->getData($email)->id);

                    if(!$errors)
                    {
                        $model->deleteUserHash($email, $hash);
                        $status = 'updated';
                    } else {
                        $status = 'errors';
                    }

                } else
                {
                    $status = 'reset_form';
                }

            }  else
            {

                $status = 'hash_fail';


            }
        }
        else
        {
            /*
                As there is no parameters, we are at the initial stage so we need to see if an email
                has been posted to request a rest password email.
             */
            if (Input::get('reset_password_user'))
            {
                if(!Token::check(Input::get('token')))
                {
                    $status = 'token_fail';
                } else
                {


                    /*
                        The form has been posted so get the users details via the username input.

                        Although the input is called 'username' it can be a username, password or id.
                     */
                    $_user = $model->find (Input::get('username'));

                    /*
                        If the user has been found, create a new hash and pass it into the createUserHash()
                        function in User_Functions to insert it into the table.

                        Once this is done, we send the email using SendMail::sendPasswordUpdateMail()
                     */
                    if($_user)
                    {
                        // The user exists so collect the data and create the hash
                        $_user = $model->data();
                        $display = 'Send the email';
                        $hash = Hash::unique();

                        // Insert into the user_hash table
                        try {
                            $model->createUserHash(array(
                                'email' => $model->data ()->email,
                                'hash' => $hash,
                                'stamp' => date('Y-m-d H:i:s')
                            ));
                            // Send the registration email

                        } catch(Exception $e) {
                            die();
                        }

                        // Send the email
                        SendMail::sendPasswordUpdateMail($model->data ()->email, $hash);

                        $status = 'email_sent';

                    } else
                    {
                        // The user was not found so flash an alert stating this and show the form again
                        $status = 'no_user';
                    }
                }

            } else
            {
                // The form has not been posted so just show it!
                $status = 'initial';
            }
        }

        /**
         * Pass the data to the view
         *
         * We only send the page name and what type of display we need to show.
         *
         * Everything else is handled by the view and flash alerts.
         *
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'users/index',
            [
                'page_name' => 'Reset Password',
                'type' => 'reset_password',
                'class' => 'Users',
                'status' => $status,
                'errors' => $errors
            ]

        );
    } // resetpassword ()

	/**
	 * Verify a users account
	 *
	 * This is generally accessed via a url sent in the registration email.
	 *
	 * Both email and hash must exist in the url otherwise nothing
	 * will be processed.
	 * Also, if the email and hash do not match a row in the 'user_hash'
	 * table, nothing will be processed.
	 *
	 * If there is an email and hash in the url and they do match a
	 * row in the 'user_hash' table, the user is activated by setting
	 * their status to 1.
	 *
	 * Nothing is passed to the view other than the page name. everything
	 * else is handled with Session::flash messages.
	 *
	 * @param  	email 		$email 		Users Email address
	 * @param  	sha256 		$hash  		Stored hash
	 * @return 	view
	 * @link 	http://site.com/Members/Verify/{$email}/{$hash}
	 */
  	public function verify($email=null, $hash=null)
  	{
        $errors = null;

        $model = $this->model('M_Users');

        if ($model->isLoggedIn()) {
            Redirect::to('/');
        }

		// Check that the email and hash variables exist
		if(isset($email) && isset($hash))
		{
			// They both exist so continue with the verification attempt



			// Check the email and hash match a row. checkUserHash() returns true or false
		  	if ($model->checkUserHash($email, $hash))
			{
				// checkUserHash() was succesful so activate the account
			  	$model->quickUpdate($model->getData($email)->id, array('status' => '1'));

                $hash_model = $this->model('Userhash_Model');
                $hash_model->delete($hash);

                $status = 'verified';

		 	} else
			{
                $status = 'no_record';
	  	    }
        }
        else
        {
            $status = 'incorrect_link';
	  	}

		/**
		 * Pass the data to the view
		 * we only need the page name as everything else is
		 * in a flashAlert()
		 *
		 * @var 	string 	View Path
		 * @var 	array 	Data being passed to the view
		 */
		$this->view(
            'users/index',
			[
				'page_name' => 'Verify Account',
				'type' => 'verify',
                'class' => 'Users',
				'status' => $status,
				'errors' => $errors
			]
		);
  	} // verify ()

}





-------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Global functions
 *
 * Functions that can be used anywhere within the site, both front end and backend
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */


//  Call in the seperate autoload class
include_once 'autoload_class.php';

/**
 * Sanitise html string
 *
 * Sanitizes html before passing to the browser or inserting into a database
 * @param  string $string The string to sanitise
 * @return string         Sanitised string
 */
function escape($string) {

    return htmlentities($string, ENT_QUOTES, 'ISO-8859-15');
} // escape

/**
 * Prettify an array
 *
 * Shows and array in a more easy-to-read format.
 *
 * @param  array        $array  The array to prettify
 * @param  string/null  $title  Optional title to show (useful when used multiple times)
 * @return string        Formatted array
 */
function nicePrint_r ($array, $title = null) {
    echo '<pre>';
    echo (isset($title)) ? '<h1>'.$title.'</h1>': '';
    print_r($array);
    echo '</pre>';

} // nicePrint_r ()

/**
 * Include files into the template
 *
 * Reads the extra required css/js files called from a view when calling the
 * templates and returns them based on the reference in config_files/css.php or
 * config_files/js.php.
 *
 * These are only called in the template files and will be used when a view requires
 * a one-off include of a css or js file - forexample a datepicker or WYSIWIG.
 *
 * @param  string   $include    Path to the and value in the config file
 * @param  string   $type       Type of request (css/js)
 * @return string         File includes
 */
function getIncludeFiles ($include, $type) {
    if(isset($include[$type])) {
        foreach ($include[$type] as $value) {
            echo Globals::get($value);
        }
    }
} // getIncludeFiles ()

/**
 * Slug or deslug a string
 *
 * Replaces all spaces in a string with underscores in forward mode and replaces
 * all underscores with spaces in reverse mode.
 *
 * Example
 *
 * $string = 'This is a string';
 * $newstring = slugify ($string)
 *
 * $newstring now equals 'This_is_a_string'
 *
 * $reversestring = slugify ($string, $direction = 'reverse')
 *
 * $reversestring now equals 'This is a string'
 *
 * @param  string   $string    The string to slug/deslug
 * @param  string   $direction Optional direction
 * @return string         Slugged/deslugged string
 */
function slugify ($string, $direction = 'forward') {
	if ($direction == 'forward')
	{
		return str_replace(" ", "_", $string);
	} else {
		return str_replace("_", " ", $string);
	}
} // slugify ()

/*
    Change an object to an array
 */
function objectToArray($d) {
    if (is_object($d)) {
        // Gets the properties of the given object
        // with get_object_vars function
        $d = get_object_vars($d);
    }

    if (is_array($d)) {
        /*
        * Return array converted to object
        * Using __FUNCTION__ (Magic constant)
        * for recursive call
        */
        return array_map(__FUNCTION__, $d);
    } else {
        // Return array
        return $d;
    }
} // objectToArray()

function listErrors ($errors) {

    $output = '';

    foreach ($errors as $key => $value) {
        $output .= Php2Html::li(['content' => $value]);
    }

    return Php2Html::ul(['content' => $output]);
}

/**
 * Unset posted data that matches the existing database data
 *
 * After a form is posted, we only want to attempt to validate
 * and update any fields that have changed.
 *
 * This function takes a set of $_POST data and matches it
 * against the table record being updated. It unsets any fields
 * that are not different from the existing data.
 *
 * @param  array    $post    Form $_POST data
 * @param  array    $records Existing database record data
 * @return array             $_POST data that is different from existing
 */
function stripPostData ($post, $records) {
    /*
        Set an array of field names that you do not want checked. These
        will generally be fields that do not actually have a corresponding
        database column.
     */
    $ignore = [
        'confirm_password', 'terms'
    ];

    // Loop through the posted data
    foreach($post as $key => $value) {

        /*
            If the field is not in the $ignore list, check it against
            the corresponding database column record. If they match,
            unset it.
         */
        if(!in_array($key, $ignore)) {
            if($post[$key] === $records->$key) {
                unset($post[$key]);
            }
        }

    } // foreach

    // Return the remaining post data
    return $post;
} // stripPostData ()

/**
 * Unset unrequired rules
 *
 * After a form is posted, we only want to attempt to validate
 * and update any fields that have changed.
 *
 * This function takes a set of $_POST data and matches it
 * against the validation rules for the table being updated. It
 * unsets any rules that are not required due to unchanged form
 * field data.
 *
 * @param  array    $post    Form $_POST data
 * @param  array    $_rules  Table validation rules
 * @return array             Rules that are still required
 */
function stripValidateRules ($_postdata, $_rules) {

    // Loop through the posted data
    foreach($_postdata as $key => $value) {
        // Loop through the rules
        foreach ($_rules as $key => $value) {
            /*
                If the field does not exist unset the matching rule.
             */
            if(!isset($_postdata[$key])) {
                unset($_rules[$key]);
            }
        }
    } // foreach

    return $_rules;
} // stripValidateRules

function showPageAlerts ($data, $model) {
	if(isset($data->errors) && $data->errors) {
	    $list_errors = (is_array($data->errors)) ? listErrors ($data->errors) : '';
	}

	if(Session::exists('status')) {
		$data->status = Session::get('status');
		Session::delete('status');
	}

	if(isset($data->status)) {
	    $list_errors = (isset($data->errors) && is_array($data->errors)) ? listErrors($data->errors) : '';

        $insert_id = (isset($data->insert_id)) ? $data->insert_id : '';

	    return Messages::alert ([
	        'model' => $model,
	        'name' => $data->status,
	        'errors' => $list_errors,
	        'insert_id' => $insert_id
	    ]);
	}
}

/*
public static function breadcrumb ($array)
{

    $home = (isset($array['site'])) ? '/' . $array['site'] : '/';
    $output = '<nav aria-label="breadcrumb" class="mb-1 " role="navigation">';
    $output .= '<ol class="breadcrumb m-0 p-1">';

    $output .= '<li class="breadcrumb-item"><a href="'.$home.'">Home</a></li>';

    if(isset($array['path']))
    {
        foreach ($array['path'] as $key => $value) {
            $output .= '<li class="breadcrumb-item"><a href="'.$home.$key.'">'.$value.'</a></li>';
        }
    }

    $output .= '<li class="breadcrumb-item active" aria-current="page">'.$array['current'].'</li>';

    $output .= '</ol>';
    $output .= '</nav>';

    return $output . self::htmlComment('breadcrumb');
}
*/





----------------------------------------------------------------------------------------------------------------------------




<?php

/**
 *  Categories Model
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';


class M_Systems
{
    private
        $_data,
        $_db_table = 'systems',
        $_default_var = 'system',
        $_key_column = 'system_name',
        $_field,
        $_record,
        $_qry;

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db()
    {
        return  DB::dbConnect();
    } // db()

    /**
     * Show the add system form
     *
     * @return 	string System Form
     */
    public function form($_params=null){
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        if(isset($_params['type']) && $_params['type']=='edit') {
            $val = $_params['data'];
            $button_text = 'Update';
            $button_name = 'update_'.$this->_default_var;
        } else {
            $val = '';
            $button_text = 'Add';
            $button_name = 'add_'.$this->_default_var;
        }
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            # category_name
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Bs::bs_input_text ([
                    'class' => '',
                    'type' => 'text',
                    'id' => ucfirst($this->_default_var),
                    'value' => $val,
                    'name' => $this->_key_column,
                    'placeholder' => 'Add '.ucfirst($this->_default_var).' Name',
                    'aria' => [
                        'label' => ucfirst($this->_default_var),
                    ],
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Button
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => '',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' => $button_text,
                    'name' => $button_name
                ]) // Php2Bs::bs_input_email
            ]) // Php2Bs::bs_form_group
        ]); // Username and password row


        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()

    public function create ($_params=[]) {
        $_params['created_date'] = date('Y-m-d H:i:s');
        $_params['created_by'] = Session::get(Settings::members()['login_session']);

        if (!self::db()->insert($this->_db_table, $_params)){
            // The insert was unsuccesful
            throw new Exception('There was a problem creating an account!');

            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;

    } // create()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data ()
    {
        return $this->_data;
    } // data ()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {
        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = $this->_key_column;
                $_record = slugify ($_record, $direction = 'reverse');
            }


            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find ()


    public function messages () {
        return [

            'not_found' => [
                'title' => 'System not found',
                'content' => 'The System could not be found. '. Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Systems']),
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'validation_failed' => [

            ],
            'no_change' => [
                'title' => 'System Not Updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.',
            ],
            'delete_success' => [
                'title' => 'System Deleted',
                'alert_color' => 'success',
                'content' => 'The system has been deleted.',
                'dismissible' => false,
            ],
            'create_success' => [
                'title' => 'System Added',
                'alert_color' => 'success',
                'content' => 'The system has been created.',
                'dismissible' => false,
            ],
            'update_success' => [
                'title' => 'System Updated',
                'alert_color' => 'success',
                'content' => 'The system has been updated.',
            ],
            'update_failed' => [
                'title' => 'System Not Updated',
                'alert_color' => 'danger',
                'content' => 'The system has been updated.',
            ],
        ];
    }


    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing ()
    {
        // Select all records from the database
        $list = self::db ()->query('SELECT
        *
        FROM `' . $this->_db_table . '`'
        );

        // Return the results as an array
        return $list->results();
    } // listing ()

    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }


    public function validation_rules() {
        return[
            'system_name' => [
                'required' => true,
                'min' => 2,
                'unique' => $this->_db_table,
            ],

        ];
    }

}





-------------------------------------------------------------------------------------------------------------------




<?php

/**
 *  Categories Model
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';


class M_ActivityType
{
    private
        $_data,
        $_db_table = 'activity_types',
        $_default_var = 'activity_type',
        $_key_column = 'type_name',
        $_field,
        $_record,
        $_qry;

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db()
    {
        return  DB::dbConnect();
    } // db()

    /**
     * Show the add system form
     *
     * @return 	string System Form
     */
    public function form($_params=null){
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        if(isset($_params['type']) && $_params['type']=='edit') {
            $val = $_params['data'];
            $button_text = 'Update';
            $button_name = 'update_'.$this->_default_var;
        } else {
            $val = '';
            $button_text = 'Add';
            $button_name = 'add_'.$this->_default_var;
        }
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            # category_name
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Bs::bs_input_text ([
                    'class' => '',
                    'type' => 'text',
                    'id' => ucfirst($this->_default_var),
                    'value' => $val,
                    'name' => $this->_key_column,
                    'placeholder' => 'Add '.ucfirst(str_replace("_", " ", $this->_default_var)).' Name',
                    'aria' => [
                        'label' => ucfirst($this->_default_var),
                    ],
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Button
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => '',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' => $button_text,
                    'name' => $button_name
                ]) // Php2Bs::bs_input_email
            ]) // Php2Bs::bs_form_group
        ]); // Username and password row


        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()

    public function create ($_params=[]) {
        $_params['created_date'] = date('Y-m-d H:i:s');
        $_params['created_by'] = Session::get(Settings::members()['login_session']);

        if (!self::db()->insert($this->_db_table, $_params)){
            // The insert was unsuccesful
            throw new Exception('There was a problem creating an account!');

            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;

    } // create()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data ()
    {
        return $this->_data;
    } // data ()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {
        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = $this->_key_column;
                $_record = slugify ($_record, $direction = 'reverse');
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find ()


    public function messages () {
        return [

            'not_found' => [
                'title' => 'Activity Type not found',
                'content' => 'The activity type could not be found. '. Php2Html::a(['content' => 'View List', 'href'=>'/Admin/ActivityType']),
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'validation_failed' => [

            ],
            'no_change' => [
                'title' => 'Activity Type Not Updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.',
            ],
            'delete_success' => [
                'title' => 'Activity Type Deleted',
                'alert_color' => 'success',
                'content' => 'The activity type has been deleted.',
                'dismissible' => false,
            ],
            'create_success' => [
                'title' => 'Activity Type Added',
                'alert_color' => 'success',
                'content' => 'The activity type has been created.',
                'dismissible' => false,
            ],
            'update_success' => [
                'title' => 'Activity Type Updated',
                'alert_color' => 'success',
                'content' => 'The activity type has been updated.',
            ],
            'update_failed' => [
                'title' => 'Activity Type Not Updated',
                'alert_color' => 'danger',
                'content' => 'The activity type has been updated.',
            ],
        ];
    }


    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing ()
    {
        // Select all records from the database
        $list = self::db ()->query('SELECT
        *
        FROM `' . $this->_db_table . '`'
        );

        // Return the results as an array
        return $list->results();
    } // listing ()

    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }


    public function validation_rules() {
        return[
            'type_name' => [
                'required' => true,
                'min' => 2,
                'unique' => $this->_db_table,
            ],

        ];
    }

}




----------------------------------------------------------------------------------------------------------------------




<?php

/**
 *  Categories Model
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';


class M_Categories
{
    private
        $_data,
        $_db_table = 'categories',
        $_field,
        $_record,
        $_qry;

    public $_insertID;

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db()
    {
        return  DB::dbConnect();
    } // db()

    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function form($_params=null){
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        if(isset($_params['type']) && $_params['type']=='edit') {
            $val = $_params['data'];
            $button_text = 'Update';
            $button_name = 'update_category';
        } else {
            $val = '';
            $button_text = 'Add';
            $button_name = 'add_category';
        }
        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Username
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Bs::bs_input_text ([
                    'class' => '',
                    'type' => 'text',
                    'id' => 'Category',
                    'value' => $val,
                    'name' => 'category_name',
                    'placeholder' => 'Add Category Name',
                    'aria' => [
                        'label' => 'Category',
                    ],
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Email
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => '',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' => $button_text,
                    'name' => $button_name
                ]) // Php2Bs::bs_input_email
            ]) // Php2Bs::bs_form_group
        ]); // Username and password row


        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()

    public function create ($_params=[]) {


        if (!self::db()->insert($this->_db_table, $_params)){
            // The insert was unsuccesful
            throw new Exception('There was a problem creating an account!');

            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }
        $this->_insertId = $this->db()->insertId();
        return true;

    } // create()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data () {
        return $this->_data;
    } // data ()

    public function delete ($record) {

        // We do not have to unset, add or amend anything so purely run the delete
    	if(!self::db()->delete($this->_db_table, array('id', '=', $record)))
    	{
    		// The update was unsuccesful
    		throw new Exception('There was a problem updating the account!');
    		// Flash a generic error message
    		$this->crudFlash ('generic_error');

    		return false;
    	}
        return true;
	} // delete()

    public function deleteForm () {


        $content = '';


        $bottom_row = Php2Bs::bs_form_group ([
            'class' => '',
            'content' => Php2Bs::bs_button ([
                'button_type' => 'submit',
                'color' => 'danger',
                'size' => 'sm',
                'class' => 'float-right',
                'content' => 'Delete',
                'name' => 'delete_category'
            ])
        ]); // $bottom_row

        // Wrap whatever we have in $bottom_row in a form row
        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row,
        ]); // Php2Bs::bs_form_row


        // Compile the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

        return $content;
    } // userForm

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {
        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'category_name';
                $_record = slugify ($_record, $direction = 'reverse');
            }


            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find ()

    /**
     * Return a list of Records
     *
     * @return array  List of Records
     */
    public function listing () {
        // Select all records from the database
        $list = self::db ()->query('SELECT
        *
        FROM `' . $this->_db_table . '`'
        );

        // Return the results as an array
        return $list->results();
    } // listing ()

    public function messages () {

        // Use 'title' => false, for an alert with no title
        return [
            'admin_not_found' => [
                'title' => 'Category not found',
                'content' => 'The category could not be found. '
                . Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Categories']),
                'alert_color' => 'warning',
                'dismissible' => false,
            ],
            'create_fail' => [
                'title' => 'Category not created',
                'alert_color' => 'danger'
            ],
            'create_success' => [
                'title' => 'Category created',
                'alert_color' => 'success',
                'content' => 'The category has been created.'
            ],
            'update_fail' => [
                'title' => 'Category not updated',
                'alert_color' => 'danger'
            ],
            'update_success' => [
                'title' => 'Category updated',
                'alert_color' => 'success',
                'content' => 'The category has been updated.'
            ],
            'no_change' => [
                'title' => 'Category not updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.'
            ],
            'delete_success' => [
                'title' => 'Category deleted',
                'alert_color' => 'success',
                'content' => 'The category has been deleted.',
                'dismissible' => false,
            ]
        ];
    }

    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }

    public function validation_rules() {
        return[
            'category_name' => [
                'required' => true,
                'min' => 4,
                'unique' => $this->_db_table,
            ],

        ];
    }

}





-------------------------------------------------------------------------------------------------------------------------




<?php

/**
 *  Usergroups Model
 *
 *  Contains the standard functions for data
 *  manipulation, as well as the CRUD forms and displays.
 *
 *  Note that Users have a lot more functionality than mosts sections so there is a lot more to this one than most
 *  models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';


class M_Usergroups
{
    // Set the access rights for the variables, including any defaults
    private $_button_name,
            $_button_text,
            $_data,
            $_db_table = 'user_groups',
            $_field,
            $_field_data,
            $_form_fields,
            $_params,
            $_qry,
            $_record;

    public $_insertId;

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db() {
        return  DB::dbConnect();
    } // db()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data () {
        return $this->_data;
    } // data ()

    public function delete ($record) {

        // We do not have to unset, add or amend anything so purely run the delete
    	if(!self::db()->delete($this->_db_table, array('id', '=', $record)))
    	{
    		// The update was unsuccesful
    		throw new Exception('There was a problem updating the account!');
    		// Flash a generic error message
    		$this->crudFlash ('generic_error');

    		return false;
    	}
        return true;
	} // delete()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$_record  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {
        // We only run this if a record has been passed in so check for it
        if ($_record) {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record) {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = 'group_name';
                $_record = slugify ($_record, $direction = 'reverse');
            }


            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find ()

    /**
     * Return a list of all recordsecords
     *
     * @return array  List of Records
     */
    public function listing () {
        // Select all records from the database
        $list = self::db ()->query('SELECT * FROM `' . $this->_db_table . '`');

        // Return the results as an array
        return $list->results();
    } // listing ()

    /**
     * Add / Edit form
     *
     * Creates the form that will be used for both adding and editing a usergroup.
     * The type of form we are using is determined by a passed in parameter -
     * $_params['version'], with the options of either 'create' or 'edit'.
     *
     * This methodology is used with all forms although, in this case, all it
     * does is set the name and display text for the submit button.
     *
     * @param  array    $_params Settings, classes, validation and errors
     * @return string            Form
     */
    public function form($_params=null) {
        /*
            After a failed post, we want to repopulate the form with
            the posted data so the user does not have to fill it all in
            again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'group_name', 'permissions'
        ];


        // Set the details for the submit button based on the version
        if($_params['version'] == 'create') {
            $_button_text = 'Add';
            $_button_name = 'add_usergroup';

        } else {
            $_button_text = 'Update';
            $_button_name = 'update_usergroup';
        }
        /*
            We now loop through the form fields array to check for
            validation and data.

            For a fuller explanation on how forms are built, look at
            the userForms() function in app/models/M_Users.

        */
        foreach ($_form_fields as $value) {
            // Check for errors
            if (isset($_params['errors'][$value])) {
                // Errors found for the field so add invalid class
                $_field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data if an account update has been attempted
            if (Input::exists(['name'=>'update_usergroup']) && Input::exists($value) && trim(Input::get($value)) !== false) {

                // There is posted data so set that as the value
                $_field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$value]['val'] = $_params['data'][$value];
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$value]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        /*
            With user groups, the 'permissions' column has a specific format
            that must be used for the json lookup to work. If there is not
            value (either posted or existing) for it, we add the template.
         */
        if(!$_field_data['permissions']['val']) {
            $_field_data['permissions']['val'] = '{"god": 0, "admin": 0, "mod": 0}';
        }

        /*
            We now have everything we need so can start building the form.

            We create the content first and then pass it into the form once we have
            all of the fields created.

            To start, we create an empty variable to hold the content and then add
            to it as we go along.
         */
        $content = '';

        // Add the Group name form group
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => Php2Html::label ([
                    'for' => 'GroupName',
                    'content' => 'Group Name',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'class' => '',
                    'type' => 'text',
                    'id' => 'GroupName',
                    'value' => $_field_data['group_name']['val'],
                    'name' => 'group_name',
                    'placeholder' => 'Add Group Name',
                    'aria' => [
                        'label' => 'Group Name',
                    ],
                ]) // Php2Bs::bs_input_text
            ])// Php2Bs::bs_form_group
        ]); // Group name row

        // Add the Permissions form group
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-md-12',
                'content' => Php2Html::label ([
                    'for' => 'Permissions',
                    'content' => 'Permissions',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_textarea ([
                    'class' => '',
                    'type' => 'text',
                    'id' => 'Permissions',
                    'content' => $_field_data['permissions']['val'],
                    'name' => 'permissions',
                    'placeholder' => 'Add Permissions',
                    'aria' => [
                        'label' => 'Permissions',
                    ],
                ]) // Php2Bs::bs_input_text

            ]) // Php2Bs::bs_form_group
        ]); // Permissions row

        // Add the button form group
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            Php2Bs::bs_form_group ([
                'class' => 'col-12',
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'class' => 'float-right',
                    'color' => 'primary',
                    //'size' => 'sm',
                    'content' => $_button_text,
                    'name' => $_button_name
                ]) // Php2Bs::bs_button
            ]) // Php2Bs::bs_form_group
        ]); // Button row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]); //  Php2Html::form
    } // form()

    public function deleteForm () {


        $content = '';


        $bottom_row = Php2Bs::bs_form_group ([
            'class' => '',
            'content' => Php2Bs::bs_button ([
                'button_type' => 'submit',
                'color' => 'danger',
                'size' => 'sm',
                'class' => 'float-right',
                'content' => 'Delete',
                'name' => 'delete_usergroup'
            ])
        ]); // $bottom_row

        // Wrap whatever we have in $bottom_row in a form row
        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row,
        ]); // Php2Bs::bs_form_row


        // Compile the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

        return $content;
    } // userForm

	public function create ($_params=[]) {

		if (!$this->db()->insert($this->_db_table, $_params)){
			// The insert was unsuccesful
			throw new Exception('There was a problem creating an account!');

			// Flash a generic error message
			$this->crudFlash ('generic_error');
            return false;
		}
        $this->_insertId = $this->db()->insertId();
		return true;

	} // create()

	public function messages () {

		// Use 'title' => false, for an alert with no title
		return [
			'admin_not_found' => [
				'title' => 'User Group not found',
				'content' => 'The user group could not be found. '
				. Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Usergroups']),
				'alert_color' => 'warning',
                'dismissible' => false,
			],
			'create_fail' => [
				'title' => 'User Group not created',
				'alert_color' => 'danger'
			],
			'create_success' => [
				'title' => 'User Group created',
				'alert_color' => 'success',
				'content' => 'The user group has been created.'
			],
			'update_fail' => [
				'title' => 'User Group not updated',
				'alert_color' => 'danger'
			],
			'update_success' => [
				'title' => 'User Group updated',
				'alert_color' => 'success',
				'content' => 'The user group has been updated.'
			],
			'no_change' => [
				'title' => 'User Group not updated',
				'alert_color' => 'info',
				'content' => 'You did not change any data.'
			],
			'delete_success' => [
				'title' => 'User Group deleted',
				'alert_color' => 'success',
				'content' => 'The user group has been deleted.',
				'dismissible' => false,
			]
		];
	}

	public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }


	public function validation_rules() {
        return[
            'group_name' => [
                'required' => true,
                'unique' => $this->_db_table,
            ],
			'permissions' => [
                'required' => true,
            ],

        ];
    }

}





-------------------------------------------------------------------------------------------------------------------




<?php

/**
 *  Users Model
 *
 *  Contains the standard functions for data
 *  manipulation, as well as the CRUD forms and displays.
 *
 *  Note that Users have a lot more functionality than mosts sections so there is a lot more to this one than most
 *  models will contain.
 *
 *  @package Core
 *  @author  Steve Ball <steve@follyball.co.uk>
 *  @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 */

// Include the initiation file
require_once 'app/init.php';

class M_Users
{
    private
        $_data,
        $_db_table = 'users',
        $_field,
        $_field_data,
        $_form_data,
        $_form_fields,
        $_params,
        $_record,
        $_qry;

    public $_insertId;

    /**
     * Construct the database connection
     *
     *	Opens up a connection to the database and assigns it to
     *	$this->_pdo to make it re-usable.
     *
     * The connection parameters are called using Globals on values held
     * in /app/core/config_files/db.php
     *
     * @return 	Database connection
     */
    public function __construct()
    {
        $this->_logs = new Logs();

    } //__construct ()

    /**
     * Connect to the database
     *
     * Returns an instance of the database connection to be used
     * within the class. This is set as a function as it also needs
     * to be accessed by the model.
     *
     * @return  Database connection
     */
    protected function db() {
        return  DB::dbConnect();
    } // db()

    /**
     * Get the total number of records
     *
     * @return int 	    Count of rows
     */
    public function count() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table);

        // Return a count of the records returned
        return $_qry->count();
    } // count()

    /**
	 *	Change a users password
	 *
	 *	Creates a new salt and hashed password and updates a users
	 *	record with them.
	 *
	 *	@params 	int		$user		User ID
	 **/
	public function changePassword ($user)
    	{
		// We always use validation as an object so we do this for constency
		$_validate = (object)array();

		// Place the $_POST data into a variable that will get manipulated.
		$_postdata = $_POST;

		/*
			The forms all have .req-token to prevent double-posting on page
			refresh. This generates a new $_SESSSION['token'] value and also
			adds a hidden form element containing the $_SESSSION['token'].

			We need to check that the posted token matches the current $_SESSSION['token']
			and only proceed if it does.
		 */
		if(!Token::check(Input::get('token')))
    		{
    			// The token check failed so set the errors to 'token'
    			$_validate->error = 'token';

    		}
    		else
    		{
			/*
				The token check is succesful, so we again unset that from the $_postdata array, along with the
				submit button, to ensure we only have insert data left.
			*/
			unset($_postdata->token);
			unset($_postdata->reset_password_submit);

			/*
				We now attempt to validate the contents of $_postdata.

				The validation for this form is passed directly into Form_Functions::postValidate(), along with the $_postdata and
				this checks each field in $_postdata against it's relevant validation if it exists.

				The function returns a boolean 'status' as to  whether validation was passed. If validation failed, it will also contain any
				validation errors that have been generated.
			 */
			$_validate = Form_Functions::postValidate($_postdata,
			array (
			    'password' => [
					'validation' => [
					    'required' => true,
					    'min' => 6
					],
				],
			    'confirm_password' => array(
				'type' => 'password',
				'error' => 'You must enter a confirmation password that matches the password',
				'validation' => array(
				    'required' => true,
				    'matches' => 'password'
				),
			    ))
			);

			if($_validate->status)
			{
				// Create a new salt
				$salt = Hash::salt(32);

				/*
					The original $_postdata -> password cannot be entered as it is a raw string of readable data.

					We replace this with a hashed password, generated using the salt we just created and also create
					a new element in $_postdata with the salt as when logging in, we will need the updated salt to match
					the stored, hashed, password.
				*/
				$_postdata = array(
				'password' => Hash::make(Input::get('password'), $salt),
				'salt' => $salt
				);

				// Now we have the correct $_postdata so use quickUpdate() to process it.
				$this->quickUpdate($user, $_postdata);
			}
		}

		// Return any errors
		return (isset($_validate->error)) ? $_validate->error : false ;
    	} // changePassword()


    /**
     * Check the user cookie
     * @param string $hash The hash value stored in gthe login cookie table
     */
    public function checkCookie() {
        if (Cookie::exists(Settings::members()['user_cookie'])) {
            // Check to see if this user already has a login hash - if so, something is wrong with logouts
            $hashCheck = $this->db()->get('login_cookie', array('hash', '=', Cookie::get(Settings::members()['user_cookie'])));

            // As long as there is no existing record, add one to the login_cookie table
            if ($hashCheck->count()) {
                if ($this->find($hashCheck->first()->user_id)) {
                    Session::put(Settings::members()['login_session'], $this->data()->id);
                    Session::put(Settings::members()['user_login_group'], $this->data()->group);
                }

            } else {
                Cookie::delete(Settings::members()['user_cookie']);
            }
        }

    } // setUserCookie()

    /**
	 * Check the user hash
	 *
	 * Checks an email/hash combination for a matching
	 * value in the user_hash table, returning the count
	 *
	 * @param  email 	$email 	Users Email address
	 * @param  sha256 	$hash  	Stored hash
	 * @return int        		Count of returned results
	 * @example /controllers/users/home->verify()
	 *
	 */
	public function checkUserHash ($email, $hash) {
        if(self::db()->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash))->count()) {
            return true;
        }
        return false;
    } // checkUserHash()

    /**
	 * Create a new record
	 *
	 * Collects post data, validates it and inserts it into the database
	 *
	 */
	public function create ($_params=[]) {
        $_params['salt'] = Hash::salt(32);
        $_params['password'] = Hash::make(Input::get('password'), $_params['salt']);
        $_params['joined'] = date('Y-m-d H:i:s');

        if (!self::db()->insert($this->_db_table, $_params)){
            # maybe Redirect::to('404');
			// The insert was unsuccesful
			if (Settings::site_details('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->create()';
            }

			return false;
		}
        $this->_insertId = $this->db()->insertId();
        return true;

	} // create()

    /**
   	 * Creates a record in the user_hash table
   	 *
   	 * Whenever a user has to verify by email, the link they are
   	 * sent will contain their email address and a hash string that
   	 * matches a row in the user_hash table.
   	 *
   	 * This is to ensure a valid request has been used.
   	 *
   	 * @param  array 	$_fields 	Email and Hash
   	 */
    public function createUserHash($_fields) {
        $_fields['stamp'] = Settings::current_datetime()->format('Y-m-d H:i:s');
        if (!self::db()->insert('user_hash', $_fields)) {
            throw new Exception('There was a problem creating a user hash!');
        }
    } // createUserHash()

    /**
     * Return a records data
     *
     * Returns the private $this->_data details
     * array in a public function
     *
     * @return array 	Record data
     *
    **/
    public function data() {
        return $this->_data;
    } // data()

    /**
         * Delete a record
         *
         *  Deletes the specified record from $this->crud_table()->name
         *
         * @param  int  $record  Record ID
         */
	public function delete ($record) {
		// We do not have to unset, add or amend anything so purely run the delete
			if(!self::db()->delete($this->_db_table, array('id', '=', $record)))
			{
				// The update was unsuccesful
				throw new Exception('There was a problem updating the account!');
				// Flash a generic error message
				$this->crudFlash ('generic_error');

				return false;
			}

            return true;

	} // delete()


    /**
     * Delete the user cookie
     *
     * As well as deleting the cookie, this also removes the
     * record from then login_cookie table
     *
     * @param  int 	$user 	User ID
     */
    public function deleteCookie() {
        $hashCheck = $this->db()->delete('login_cookie', array('hash', '=', Cookie::get(Settings::members()['user_cookie'])));
        Cookie::delete(Settings::members()['user_cookie']);
    } // deleteUserCookie()

    public function deleteForm () {


        $content = '';


        $bottom_row = Php2Bs::bs_form_group ([
            'class' => '',
            'content' => Php2Bs::bs_button ([
                'button_type' => 'submit',
                'color' => 'danger',
                'size' => 'sm',
                'class' => 'float-right',
                'content' => 'Delete',
                'name' => 'delete_user'
            ])
        ]); // $bottom_row

        // Wrap whatever we have in $bottom_row in a form row
        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row,
        ]); // Php2Bs::bs_form_row


        // Compile the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

        return $content;
    } // userForm

    /**
     * Delete user hash
     *
     *  Deletes the
     *
     * @param  int  $record  Record ID
     */
    public function deleteUserHash ($_hash) {
        if(!self::db ()->delete('user_hash', array('hash', '=', $_hash)))
        {
            throw new Exception('There was a problem updating the account!');
            $this->crudFlash ('generic_error');

            return false;
        }
    } // delete ()

    /**
     *  Check if a record exists
     *
     *	Checks to see if $this->data() exists following a find()
     *
     **/
    public function exists() {
      return ($this->data()) ? true : false;
    } // exists()

    /**
     * Find a record
     *
     * Finds a record and assigns it's details from the $this->_db_table
     * table to $this->_data. This can then be accessed from other files
     * using data().
     *
     *
     * @param  string/email/int 	$group  	Group identifier
     * @return Boolean/Array
     */
    public function find($_record=null) {

        // We only run this if a record has been passed in so check for it
        if ($_record)
        {
            /*
                A record has been passed in so we now need to check what parameter has
                been used to determine which field we are going to check it against in the table.

                For Users, the $_record will either be the id or the username so we do not have
                to manipulate it at all. There will be some occasions where we have to tweak
                $_record to suit what is stored in the database compared to what we can use in a url. Ideally in these situations, we would use a slug.

                If $_record is a number, we will assume it is the id field as usernames must start with a letter, otherwise it must be the username.

             */
            if(is_numeric($_record) && (int) $_record == $_record)
            {
                // $_record is numeric so we need to look up the id field
                $_field = 'id';
            } else
            {
                // $_record is not numeric so we need to look up the username or email field depending on the data posted
                $_field = (filter_var($_record, FILTER_VALIDATE_EMAIL)) ? 'email' :   'username';
            }

            // Search the table for the passed in $_record and correct $_field
            $data = self::db()->get($this->_db_table, array($_field, '=', $_record));

            // If the query returns any rows, set the data to $this->_data and return true
            if ($data->count()) {
                $this->_data = $data->first();
                return true;
            }
        }
        return false;
    } // find()

    /**
	 * Check if a remember me cookie exists
	 * @return boolean Cookie existence
	 */
	public function hasCookie() {
        return (Cookie::exists(Settings::members()['user_cookie'])) ? true : false ;
    } // hasUserCookie()

    /**
     * Check a user has the required permission
     *
     *	Each user group can have multiple permissions and these
     *	are stored as json.
     *
     * 	If a groups permissions we as follows {"super_admin":0, "admin": 1,"mod":1}
     *
     *     hasPermission('super_admin') would return false
     *     hasPermission('admin') would return true
     *     hasPermission('mod') would return true
     *
     *   @param  string  $key The permission name
     *   @return boolean      Permission status
     *   @example hasPermission('admin')
     */
    public function hasPermission ($key) {
        // Get the user group details for the current user
        $usergroup = self::db()->get(
            'user_groups',
            array(
                'id', '=', Session::get(Settings::members()['user_login_group'])
            )
        );

        // As long as the user group is set, check if that group has the requested permission
        if($usergroup->count())
        {
            // Set the permissions of the users group to $permissions array
            $permissions = json_decode($usergroup->first()->permissions, true);

            // Check if the requested permission exists in the array
            if ($permissions[$key] == true)
            {
                // The permission exists so return true
                return true;
            }
        }
        return false;
    } // hasPermission()

    /**
	 * Check if a user is logged in
	 * @return boolean Login Status
	 */
	public function isLoggedIn() {
		return (Session::exists(Settings::members()['login_session'])) ? true : false ;
	} // isLoggedIn()

    /**
         * Return a list of Records
         *
         * @return array  List of Records
         */
    public function listing() {
        // Select all records from the database
        $list = self::db()->query('SELECT
        *
        FROM `' . $this->_db_table . '`'
        );

        // Return the results as an array
        return $list->results();
    } // listing()

    /**
     * Show the login form
     *
     * Displays the login form
     *
     * @return 	string 	Login Form
     * @example /app/core/Templates/Main_Template->left_user()
     */
    public function loginForm($_form_data=[]){
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],

            'prepend' => [
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],

            'input' => [
                //'class' => 'bg-info',
                'type' => 'text',
                'id' => 'Username',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],

        ]); // Php2Html::div.form-group


        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],

            'prepend' => [
                'content' => '<i class="fas fa-key fa-sm"></i>',
                'id' => 'password_field'
            ],

            'input' => [
                //'class' => 'bg-info',
                'type' => 'password',
                'id' => 'Password',
                'name' => 'password',
                'placeholder' => 'Password',
                'aria' => [
                    'label' => 'Password',
                    'describedby' => 'password_field',
                ]
            ],

        ]); // Php2Html::div.form-group



        $content .= Php2Html::div ([
            'class' => 'form-check',
            'content' => Php2Html::checkbox ([
                'id' => 'Remember',
                'name' => 'remember',
                'class' => 'form-check-input',
            ]) // checkbox
			.Php2Html::label ([
                'for' => 'Remember',
                'content' => 'Remember Login?',
                'class' => 'mb-0',
            ]) // label
        ]); // Php2Html::div.form-group

		if(!isset($_form_data['admin']) && !isset($_form_data['hide_help']))
        {
            $content .= Php2Html::a ([
                'content' => 'Login Help',
                'href' => '/Login/'
            ]);
        }

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Login',
            'name' => 'login'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()

    /**
     * Show the login form
     *
     * Displays the login form
     *
     * @return 	string 	Login Form
     * @example /app/core/Templates/Main_Template->left_user()
     */
    public function logoutForm() {
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-block btn-sm',
            'content' => 'Logout',
            'name' => 'logout'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()

    public function messages () {
        return [
            'admin_not_found' => [
                'title' => 'User not found',
                'content' => 'The User could not be found. '
                . Php2Html::a(['content' => 'View List', 'href'=>'/Admin/Users/Listing']),
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'not_found' => [
                'title' => 'User not found',
                'content' => 'The User could not be found. ',
                'alert_color' => 'info',
                'dismissible' => false,
            ],
            'not_logged_in' => [
                'title' => 'Not logged in',
                'content' => 'You must be logged in to view this page.',
                'alert_color' => 'warning',
                'dismissible' => false,
            ],
            'login_empty_fields' => [
                'title' => 'Login failed',
                'content' => 'Both fields must be filled in.',
                'alert_color' => 'danger',
            ],
            'login_not_found' => [
                'title' => 'Login failed',
                'content' => 'The user was not found.',
                'alert_color' => 'info',
            ],
            'login_not_pw' => [
                'title' => 'Login failed',
                'content' => 'The password was incorrect.',
                'alert_color' => 'info',
            ],
            'login_unverified' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you have not verified your account. Please check your email for the verification link.',
                'alert_color' => 'info',
            ],
            'login_banned' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you are banned.',
                'alert_color' => 'info',
            ],
            'send_link_fail' => [
                'title' => 'Link not sent',
                'alert_color' => 'danger',
                'content' => 'Please enter something to search for.'
            ],
            'pw_email_sent' => [
                'title' => 'Email sent',
                'alert_color' => 'success',
                'content' => [
                    'The email has been sent to the account matching the details. Please click on the link in it to reset your password.',
                    ' If you do do receive it, check your spam or junk folders. Otherwise, <a class="alert-link" href="/Members/ResetPassword">try again</a>..']
            ],
            'hash_fail' => [
                'title' => 'Incorrect Parameters',
                'alert_color' => 'warning',
                'content' => 'We could not recognise the details. Please use the link from the email you received or enter your username, email or user id below to send another.'
            ],
            'validation_failed' => [

            ],
            'admin_create_success' => [
                'title' => 'Account Created',
                'alert_color' => 'success',
                'content' => 'The account has been created.',
            ],

            'pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'Your password has been updated.',
            ],
            'admin_pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'The password has been updated.',
            ],

            'account_update_no_change' => [
                'title' => 'Account Not Updated',
                'alert_color' => 'info',
                'content' => 'You did not change any data.',
            ],
            'admin_account_delete_success' => [
                'title' => 'Account Deleted',
                'alert_color' => 'success',
                'content' => 'The account has been deleted.',
                'dismissible' => false,
            ],
            'admin_account_update_success' => [
                'title' => 'Account Updated',
                'alert_color' => 'success',
                'content' => 'The account has been updated.',
            ],
            'register_success_auto' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and you can now log in.',
                'dismissible' => false,
            ],
            'register_success_email' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created. You will receive an email containing a link to complete the registration.',
                'dismissible' => false,
            ],
            'register_success_manual' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and is awaiting authorisation.',
                'dismissible' => false,
            ],
            'incorrect_verify_link' => [
                'title' => 'Incorrect Link',
                'alert_color' => 'success',
                'content' => ['content'=>'The details provided did not match any accounts.','Please use the link provided in your registration email.'],
            ],
            'account_verified' => [
                'title' => 'Account Verified',
                'alert_color' => 'success',
                'content' => ['content'=>'Your account has been verified.','You can now log in using the details you used to register.',Php2Html::a(['content'=>'Home', 'href'=>'/'])],
                'dismissible' => false,
            ],
            'admin_user_unverified' => [
                'title' => 'Account not verified',
                'alert_color' => 'warning',
                'content' => '',
                'dismissible' => false,
            ],
            'admin_user_banned' => [
                'title' => 'Account banned',
                'alert_color' => 'danger',
                'content' => '',
                'dismissible' => false,
            ]
        ];
    }

    /**
     * Get the total most recent record
     *
     * @return int 	    Count of rows
     */
    public function mostRecent() {
        // Select all records from the database
        $_qry  =  $this->db()->query('SELECT * FROM '.$this->_db_table .' ORDER BY `joined` DESC LIMIT 1');

        // Return a count of the records returned
        return $_qry->first();
    } // mostRecent()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordForm($_form_data=[]){

        /*
            After a failed post, want to repopulate the form with
            the posted data so the user does not have to fill it all in again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'password', 'confirm_password'
        ];

        foreach ($_form_fields as $value) {
            // Check for errors
            if (isset($_form_data['errors'][$value])) {
                // Errors found for the field so add invalid class
                $_field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data
            if (Input::exists($value)) {
                // There is posted data so set that as the value
                $_field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_form_data['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$value]['val'] = $_form_data['data']->$value;
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$value]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)


        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Password
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Password',
                    'content' => 'Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                    'id' => 'Passsword',
                    'name' => 'password',
                    'placeholder' => 'Passsword',
                    'class' => $_field_data['password']['class'],
                    'value' => $_field_data['password']['val'],
                    'aria' => [
                        'describedby' => 'Password'
                    ],
                ]) // password
            ]) // Php2Html::div.form-group
            # Confirm_Password
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Confirm_Password',
                    'content' => 'Confirm Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
            .Php2Bs::bs_input_password ([
                    'id' => 'Confirm_Password',
                    'name' => 'confirm_password',
                    'placeholder' => 'Confirm Password',
                    'class' => $_field_data['confirm_password']['class'],
                    'value' => $_field_data['confirm_password']['val'],
                    'aria' => [
                        'describedby' => 'Confirm_Password'
                    ],
                ]) // Php2Bs::bs_input_password
            ]) // Php2Bs::bs_form_group
        ]); // Php2Bs::bs_form_row

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Reset',
            'name' => 'reset_password'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordLinkForm($_form_data=[]){
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-2'
            ],

            'prepend' => [
                'class' => '',
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],

            'input' => [
                'class' => '',
                'type' => 'text',
                'id' => 'Username',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],

        ]); // Php2Html::div.form-group

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Send Email',
            'name' => 'send_reset_email'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()

    /**
     * Set the user cookie
     * @param string $hash The hash value stored in gthe login cookie table
     */
    public function setCookie() {
        // Create a new hash to store in the cookie
        $_hash = Hash::unique();

        // Check to see if this user already has a login hash - if so, something is wrong with logouts
        $hashCheck = self::db()->get('login_cookie', array('user_id', '=', $this->data()->id));

        // As long as there is no existing record, add one to the login_cookie table
        if (!$hashCheck->count()) {

            $this->db()->insert('login_cookie', array(
                'user_id' => $this->data()->id,
                'hash' => $_hash
            ));
        }
        else
        {
            $_hash = $hashCheck->first()->hash;
        }

        Cookie::put(Settings::members()['user_cookie'], $_hash, Settings::members()['cookie_expiry']);
    } // setUserCookie()

    public function sendPasswordLinkMail ($email, $hash) {
        // Insert the email and has as a record in user_hash
        try {
            SendMail::sendPasswordLink($email, $hash);
        } catch(Exception $e) {
        die();
        }

    } // sendVerifyMail()



    /**
     * Attempt a login
     * @return Session/Cookie Login status and attempt information
     */
    public function tryLogin() {

        /*
            If we have a failed attempt at a login, followed by a succesfule one
            from the full login page, we want to take the user back to the page
            that they made the original attempt.

            To do this, when a login is attempted, if $_SESSION['refer_page']
            does not already exist and we are NOT on the full login page, we
            we set it with the current URL to redirect back to.
         */
        if (!Session::exists('refer_page') && $_SERVER['REQUEST_URI'] !== '/Login/') {
            Session::put('refer_page', $_SERVER['REQUEST_URI']);
        }

        /*
            We check the login attempt in stages as there are certain things
            that will mean a failure so we check those before we attempt to
            process anything.

            As soon as anything fails, we set the failure details as a session
            and redirect to the full login page.
         */

        // Check if both fields have been filled
        if (!Input::get('username')|| !Input::get('password')) {
            // At least one field is empty so fail
            $this->_logs->login_fail([
                'user' => (!empty(Input::get('username'))) ? Input::get('username') : 'unknown',
                'reason' => 'empty_field'
            ]);
            Session::put('status','login_empty_fields');
            Redirect::to('/Login/');
        } else {
            // Both fields have been filled so check that the username exists
            if (!$this->find (Input::get('username'))) {
                // The username does not exist so fail
                $this->_logs->login_fail([
                    'user' => Input::get('username'),
                    'reason' => 'user_not_found'
                ]);
                Session::put('status','login_not_found');
                Redirect::to('/Login/');
            } else {
                // The username does exist check they are allowed to login
                if($this->data()->status == '0') {
                    // The user has not verified so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_unverified'
                    ]);
                    Session::put('status','login_unverified');
                    Redirect::to('/Login/');
                }

                if($this->data()->status == '-1') {
                    // The user is banned so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_banned'
                    ]);
                    Session::put('status','login_banned');
                    Redirect::to('/Login/');
                }

                /*
                    If we have got this far, the user exists, is verified and
                    is not banned, so are allowed to login.

                    We check the users password from the database against a string created using the posted password and the users
                    salt from the database, via the make() function in core/Hash.php

                    If the string matches the stored password, we log the user in.
                 */
                if ($this->data()->password === Hash::make(Input::get('password'), $this->data()->salt)) {

                    /*
                        The password is correct for the user so log them in by
                        setting their id to the login session, as set in members()
                        in core/Settings.php
                     */
                    Session::put(Settings::members()['login_session'], $this->data()->id);
                    Session::put(Settings::members()['user_login_group'], $this->data()->group);

                    $this->_logs->login_success();

                    // If the user has ticked the 'Remember Me' box, store a login cookie.
                    if (Input::exists(['name'=>'remember'])) {
                        $this->setCookie();
                    }

                    /*
                        If we are on the full login page and the original request
                        came from any page another page, send them back there.

                        If they started on the full login page, send them to the
                        home page.
                     */
                    if($_SERVER['REQUEST_URI'] == '/Login/') {
                        if(Session::exists('refer_page')) {
                            Redirect::to(Session::get('refer_page'));
                        } else {
                            Redirect::to('/home');
                        }
                    }
                } else {
                    // The password is incorrect so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'incorrect_pw'
                    ]);
                    Session::put('status','login_not_pw');
                    Redirect::to('/Login/');
                }
            }
        }
    }// tryLogin()

    /**
     * Attempt a logout
     * @return Session/Cookie Login deletion
     */
    public function tryLogout() {

        $this->_logs->logout_success();
        Session::delete(Settings::members()['login_session']);
        Session::delete(Settings::members()['user_login_group']);
        // If a login cookie is set, delete that as well
        if($this->hasCookie()) {
            $this->deleteCookie();
        }
    }

    /**
     * [update description]
     * @param  [type] $record    [description]
     * @param  [type] $_postdata [description]
     * @return [type]            [description]
     */
    public function update($record, $_postdata) {
        if (!self::db()->update($this->_db_table, $record, $_postdata))
        {
            // The update was unsuccesful
            throw new Exception('There was a problem updating the account!');
            // Flash a generic error message
            $this->crudFlash ('generic_error');

            return false;
        }

        return true;
    }



    /**
     * User form
     *
     * Single function to control both the registration and edit
     * user forms in the front end and admin area.
     *
     * Several parts of this form get hidden depending on parameters
     * passed in.
     *
     * The parameters that can be used are
     * 'errors' an array errored field names and error messages
     * following a failed post attempt.
     * 'version' whether we are in create mode or edit mode.
     * 'area' shows which part of the site we are on where 'user'
     * referes to front end and 'admin' refers to backend.
     * 'data' will contain the user information in edit mode.
     *
     * @param  array    $_params    Version, area and error details
     * @return string               User create/edit form
     */
    public function userForm ($_params) {

        /*
            After a failed post, want to repopulate the form with
            the posted data so the user does not have to fill it all in again, along with any required field validation styles.

            We use an array called $_field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $_field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $_form_fields = [
            'username', 'email', 'firstname', 'lastname'
        ];

        /*
            If we are in create mode we need the password fields so add those
            to $_form_fields. If front end also need the terms added.
         */
         nicePrint_r($_params, '$_params');
        if($_params['version'] == 'create') {
            $_form_fields[] = 'password';
            $_form_fields[] = 'confirm_password';

            if($_params['area'] == 'user') {
                $_form_fields[] = 'terms';
            }
        }

        /*
            We now loop through the form fields array to check for validation
            and data.

            First we check to see if there is a matching value in the 'errors'
            parameter passed in to the function. If there is we set the class
            for that field in $_field_data to 'is-invalid'. If there is no
            matching value, if there is any post data, we assume it must have
            been succesful so set the class to 'is-valid', otherwise we just
            leave it blank.

            Then we check for any posted data, from a failed form submit. If
            there is a match, we set it to the 'val' for that field in
            $_field_data. If there is no match, we check to see if a record has been passed in via the 'data' parameter passed in to the function (create mode).
            Again, if there is a match, we add that to 'val', otherwise we are left
            with nothing to use as 'val' so leave it blank.

            When creating the actual input for the field, we add anything in 'class'
            to the input class="" and the 'val' to the value="".
        */
        foreach ($_form_fields as $value) {
            // Check for errors
            if (isset($_params['errors'][$value])) {
                // Errors found for the field so add invalid class
                $_field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $_field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data if an account update has been attempted
            if (Input::exists($value) && trim(Input::get($value)) !== false) {

                // There is posted data so set that as the value
                $_field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($_params['data'])) {
                    // There is a record passed in so set that as the value
                    $_field_data[$value]['val'] = $_params['data']->$value;
                } else {
                    // There is no record passed in so set the value as blank
                    $_field_data[$value]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($_form_fields)

        /*
            We now have everything we need so can start building the form.

            We create the content first and then pass it into the form once we have
            all of the fields created.

            To start, we create an empty variable to hold the content and then add
            to it as we go along.
         */
        $content = '';

        // Add the Username and Email form row
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            # Username
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Username',
                    'content' => 'Username',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Username',
                    'name' => 'username',
                    'placeholder' => 'Username',
                    'class' => $_field_data['username']['class'],
                    'value' => $_field_data['username']['val'],
                    'aria' => [
                        'describedby' => 'Username'
                    ],
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Email
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Email',
                    'content' => 'Email',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_email ([
                    'id' => 'Email',
                    'name' => 'email',
                    'placeholder' => 'Email',
                    'class' => $_field_data['email']['class'],
                    'value' => $_field_data['email']['val'],
                    'aria' => [
                        'describedby' => 'Email'
                    ],
                ]) // Php2Bs::bs_input_email
            ]) // Php2Bs::bs_form_group
        ]); // Username and password row

        // First and Last Names Row
        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Firstname
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Firstname',
                    'content' => 'Firstname',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Firstname',
                    'name' => 'firstname',
                    'placeholder' => 'Firstname',
                    'class' => $_field_data['firstname']['class'],
                    'value' => $_field_data['firstname']['val'],
                    'aria' => array (
                        'describedby' => 'Firstname'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Lastname
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Lastname',
                    'content' => 'Lastname',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Lastname',
                    'name' => 'lastname',
                    'placeholder' => 'Lastname',
                    'class' => $_field_data['lastname']['class'],
                    'value' => $_field_data['lastname']['val'],
                    'aria' => array (
                        'describedby' => 'Lastname'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
        ]); // First and last names row

        // Password Row - only if we are in create mode
        if($_params['version'] == 'create') {
            // Password Row
            $content .= Php2Bs::bs_form_row ([
                //'class' => '',
                'content' =>
                # Password
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Password',
                        'content' => 'Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .Php2Bs::bs_input_password ([
                        'id' => 'Passsword',
                        'name' => 'password',
                        'placeholder' => 'Passsword',
                        'class' => $_field_data['password']['class'],
                        'value' => $_field_data['password']['val'],
                        'aria' => [
                            'describedby' => 'Password'
                        ],
                    ]) // password
                ]) // Php2Html::div.form-group
                # Confirm_Password
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Confirm_Password',
                        'content' => 'Confirm Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                        'id' => 'Confirm_Password',
                        'name' => 'confirm_password',
                        'placeholder' => 'Confirm Password',
                        'class' => $_field_data['confirm_password']['class'],
                        'value' => $_field_data['confirm_password']['val'],
                        'aria' => [
                            'describedby' => 'Confirm_Password'
                        ],
                    ]) // Php2Bs::bs_input_password
                ]) // Php2Bs::bs_form_group
            ]); // Php2Bs::bs_form_row
        } // Password row

        /*
            If we are in edit mode in the admin area, we can also change the
            usergroup and the users status (active, banned, unverified) from
            the same form so we have to add them to $content.

            We create them individually as  $group_select and $status_select
            before passing them into the form.
         */
        if($_params['version'] == 'edit' && $_params['area'] == 'admin') {

            // Open up the Usergroups model
            $groups = new M_Usergroups ();

            /*
                Create an empty $options variable to hold the contents of the
                select menu that we will use to choose a group.
             */
            $options = '';

            /*
                Loop through the list of usergroups and for each one, create
                and <option> tag to go inside the select menu and add it
                to $content.
             */
            foreach ($groups->listing() as $key => $value) {
                $options .= Php2Html::option ([
                    'content' => $value->group_name,
                    'value' => $value->id,
                    'is_selected' => ($value->id == $_params['data']->group) ? true: false,
                ]);
            }

            /*
                Create the select menu, using the $options variable and
                assign it to $group_select.
             */
            $group_select = Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'GroupName',
                'name' => 'group'
            ]);

            /*
                We now so exactly the same for the $status_select, except
                that the listing is a hand built array that we create
                directly in the foreach
             */
            $options = '';
            foreach (['-1' =>'Banned', '0' => 'Unverified', '1' => 'Active'] as $key => $value) {

                $options .= Php2Html::option ([
                    'content' => $value,
                    'value' => $key,
                    'is_selected' => ($key == $_params['data']->status) ? true: false,
                ]);
            }

            $status_select =  Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'StatusName',
                'name' => 'status'
            ]);

            // Now add both dropdowns to the form
            $content .= Php2Bs::bs_form_row ([
                'content' =>
                # User Group
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'GroupName',
                        'content' => 'User Group',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .$group_select
                ]) // Php2Html::div.form-group

                # Status
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'StatusName',
                        'content' => 'Status',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .$status_select
                ]) // Php2Bs::bs_form_group
            ]); // Php2Bs::bs_form_row
        } // Password row

        /*
            If we are in front end create mode, we require both the Accept Terms
            checkbox as well as the submit button, otherwise we just need the
            submit button.

            As we do not know if we will need both, we create an empty $bottom_row
            variable and add what it requires, before passing it into a form row.
         */
        $bottom_row = '';

        /*
            If we are in front end create mode, we need to create a 'terms' checkbox an its parameters.
         */
        if(in_array("terms", $_form_fields)) {
            // Create the parameters for the checkbox
            $checkbox_array = [
                'id' => 'Terms',
                'name' => 'terms',
                'placeholder' => 'Terms',
                'class' => $_field_data['terms']['class'],
                'aria' => [
                    'describedby' => 'Terms'
                ],
            ];

            // If it was checked on a previous post attempt, re-check it
            if($_field_data['terms']['val']) {
                $checkbox_array['checked'] = '';
            } // if($_field_data['terms']['val'])

            // Create the terms form group with the parameters set above
            $bottom_row .= Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' =>
                # Terms
                Php2Bs::bs_form_check ([
                    //'class' => '',
                    'content' => Php2Bs::bs_form_check_input (
                        $checkbox_array
                    ) // Php2Bs::bs_form_check_input
                    .Php2Bs::bs_form_check_label ([
                        //'class' => '',
                        'for' => 'Terms',
                        'content' => 'Accept Terms Below',
                    ]) // Php2Bs::bs_form_check_label
                ]) // Php2Bs::bs_form_check
            ]); // Php2Bs::bs_form_group
        } // if(in_array("terms", $_form_fields))

        /*
            The submit button also comes in a form-group but as we always want it to
            appear on the right, we give it a class of 'col-md-6' when the terms
            form-group is also required (that also uses 'col-md-6'), and 'col-12'
            when we are showing just the button.

            We set this to $button_group_size, based on whether or not 'terms'
            has been added to the $_form_fields array.
         */
        $button_group_size = (in_array("terms", $_form_fields)) ? 'col-md-6': 'col-12';

        // Set the details for the submit button based on the version
        if($_params['version'] == 'create') {
            $button_name = 'register';
            $button_text = 'Register';

        } else {
            $button_name = 'update_user';
            $button_text = 'Update';
        }

        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row.Php2Bs::bs_form_group ([
                'class' => $button_group_size,
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'color' => 'primary',
                    'size' => 'sm',
                    'class' => 'float-right',
                    'content' => $button_text,
                    'name' => $button_name
                ]) // Php2Bs::bs_button
            ])// Php2Bs::bs_form_group
        ]); // Bottom row

        // Return the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form

    } // userForm ()


    public function validate () {

    }


    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being
     * processed.
     *
     * See the core/Validate.php class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'username' => [
                'required' => true,
                'min' => 6,
                'max' => 20,
                'preg_match' => '/^[a-zA-Z]\w*[a-zA-Z0-9_]$/',
                'unique' => 'users',
                'error_text' => 'Usernames must be between 6 and 20 characters, only using letters, numbers and underscores.'
            ],
            'email' => [
                'required' => true,
                'filter' => "email",
                'unique' => 'users',
                'error_text' => 'You must use a valid and accesible email address.'
            ],
            'firstname' => [
                'required' => true,
            ],
            'lastname' => [
                'required' => true,
            ],
            'password' => [
                'required' => true,
                'min' => 6
            ],
            'confirm_password' => [
                'required' => true,
                'matches' => 'password',
                'error_text' => 'Confirm must match'
            ],
            'terms' => [
                'required' => true,
                'error_text' => 'You must read and accept the temrs and conditions'
            ]
        ];
    }



}





------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Admin Users View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/admin/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Users
 * @example 	http://yoursite/Admin/Listing
 * @example 	http://yoursite/Admin/Users/{Username}
 * @example 	http://yoursite/Admin/Users/Edit/{Username}
 * @example 	http://yoursite/Admin/Users/Delete/{Username}
 *
 */

$data = (object)$data;
$model = $this->model('M_Users');

//Set the parameters for the page
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['menu_category'] = 'Users';

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

// If the user is banned or unverified, show an alert
if(isset($data->user_status) && $data->user_status !== '1') {
    switch ($data->user_status) {
        case '-1':
            $params['user_status'] = 'admin_user_banned';
            break;

        case '0':
            $params['user_status'] = 'admin_user_unverified';
            break;
    }
    $content .= Messages::alert ([
        'model' => 'M_Users',
        'name' => $params['user_status']
    ]);
} // user status alert

# Show the required data based on passed in page type
if($data->page_type == 'delete') {
    $params['menu_item'] = 'Delete';
    /*
        We only need the forms if the user is found  and we do not
        already have a delete request so, in the controller, we only
        pass the 'delete_form' parameter with the form this criteria
        is met, otherwise it is null.

        We only need to add to the content if $data->delete_form contains
        anything. If no user was found or the delete had already been
        processed, any page content is handled by the showPageAlerts()
        function above.
     */
    if(isset($data->delete_form)) {
        // Show the delete form
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Delete account'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => Php2Html::p(['content'=>'This will delete the account and cannot be undone.']).$data->delete_form,
                'class' => '',
            ],
        ]);// bs_card delete form
    } // if $data->delete_form
} // $data->page_type == 'delete'

if($data->page_type == 'register') {
    $params['menu_item'] = 'Add';
    /*
        As we want the form to show again, even after we succesfully
        create a new account, we simply add that to the content.

        Any other messages following an attempte create is handled by
        the showPageAlerts()  function above.
     */
    $content .= Php2Bs::bs_card ([
        'class' => 'border-dark bg-light mb-1',
        'body' => [
            'content' => $data->form,
            'class' => '',
        ],
    ]);// bs_card register
} // $data->page_type == 'register'

if($data->page_type == 'profile') {
    /*
        We only show the profile if the user was found in the controller
        function so we only add to the content if the status is not
        'admin_not_found'
     */
    if(!isset($data->status) || $data->status !== 'admin_not_found') {

        // The user was found so start building the output as a variable
        $profile = 'Full Name : ' . $data->user->firstname.' '.$data->user->lastname;
        $profile .= '<hr>';

        $join_date = new DateTime($data->user->joined);
        $profile .= 'Joined : ' . $join_date->format('l, jS F, Y \a\t g:ia');

        $profile .= '<hr>';
        $profile .= 'User Group : ' . $data->user->group;

        // Add to the content by passing $profile into a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-secondary bg-light mb-1',
            'body' => [
                'content' => $profile,
            ],
        ]);// bs_card profile
    } // $data->status not 'admin_not_found'
} // $data->page_type == 'profile'

if($data->page_type == 'overview') {
    $params['menu_item'] = 'Overview';
    ###################
    # Temporary content
    ###################
    $content .= Php2Html::a (
        array(
            'content' => 'Listing',
            'href' => '/Members/Listing',
        )
    );

    $latest_user_date = new DateTime($data->latestuser->joined);

    $content .= Php2Bs::bs_card (
        array(
            'class' => 'border-secondary bg-light mb-1',
            'header' => array (
                'content' => 'User Details'
            ),
            'body' => array (
                'content' => Php2Html::li (
                    array(
                        'content' => 'Total Users : ' . $data->usercount,
                        'class' => 'list-group-item border-warning'

                    )
                ).Php2Html::li (
                    array(
                        'content' => 'Latest User : ' . $data->latestuser->username . ' (' . $latest_user_date->format('d/m/Y g:ia') . ')',
                        'class' => 'list-group-item border-info'

                    )
                ),
            ),
        )
    );// bs_card
} // $data->page_type == 'overview'

if($data->page_type == 'edit') {

    /*
        We only need the forms if the user is found so, in the
        controller, we only pass the 'edit_form' parameter with the form
        attached if the user was found, otherwise it is null.

        We only need to add to the content if $data->edit_form contains
        anything. If no user was found, any page content is handled
        by the showPageAlerts() function above.
     */
	if(isset($data->edit_form)) {

        /*
            If the user is banned or unverified, show an give the card
            header a suitable background colour, otherwise just let it
            be default.
         */
        switch ($data->user_status) {
            case '-1':
                $header_style = 'bg-danger text-light';
                break;
            case '0':
                $header_style = 'bg-warning text-dark';
                break;
            default:
                $header_style = 'bg-light';
                break;
        } // card header style

        // Add the form to the content in a card
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update Profile',
                'class' => $header_style,
            ],
            'class' => 'border-dark mb-1 ',
            'body' => [
                'content' => $data->edit_form,
                'class' => '',
            ],
        ]);// bs_card edit form
    } // if $data->edit_form

    // If the password update form has been sent, add that to the content
    if(isset($data->password_form)) {
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Change Password'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data->password_form,
                'class' => '',
            ],
        ]);// bs_card passwordform
    } // if $data->password_form
} // $data->page_type == 'edit'

if($data->page_type == 'listing') {
    $params['menu_item'] = 'List';
    /*
        Loop through the list passed to the view and for each one,
        replacing the 'username' element with a link to that
        elements edit page.

        We also replace the 'joined' element with a long date
        and time using the php DateTime function.

        Finally we create a 'edit' column containing icons linking
        to the profile, edit and delete pages
     */
    foreach ($data->list as $key => $value) {

        $username = $value->username;
        $data->list[$key]->username = Php2Html::a ([
            'content' => $username,
            'href' => '/Admin/Users/'.$username
        ]);

        $data->list[$key]->full_name = $value->firstname.' '.$value->lastname;

        $join_date = new DateTime($value->joined);
        $data->list[$key]->joined = $join_date->format('d/m/Y g:ia');
        $data->list[$key]->edit = Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-search text-info mr-2'
            ]),
            'href' => '/Admin/Users/'.$username

        ])
        .Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-edit text-success mr-2'
            ]),
            'href' => '/Admin/Users/Edit/'.$username

        ])
        .Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-times-circle text-danger mr-2'
            ]),
            'href' => '/Admin/Users/Delete/'.$username

        ]);

        /*
            If the user status is '-1' (banned) or '0' unverified we
            add a background colour to the table row
         */
		switch ($value->status) {
			case -1:
				$data->list[$key]->tr_class = 'table-danger';
				break;

			case 0:
				$data->list[$key]->tr_class = 'table-warning';
				break;
		} // switch status

    } // foreach $data->list

    // Build the table
    $table = Php2Html::make_table ([
        'columns' => [
            'username' => [
                'alias' => 'Username',
                'th_class' => 'bg-dark text-light',
                'global_class' => 'text-danger'
            ],
            'full_name' => [
                'alias' => 'Full Name',
                'th_class' => 'bg-dark text-light ',
                'td_class' => 'text-info',
                'global_class' => 'd-none d-md-table-cell'
            ],
            'joined' => [
                'alias' => 'Joined',
                'th_class' => 'bg-dark text-light',
            ],
            'edit' => [
                'alias' => '',
                'th_class' => 'bg-dark text-light',
            ],
        ],
        // The listing is an object so convert it to an array
		'data' => objectToArray($data->list),
        'settings' => [
            'show_header' => true,
            //'border' =>'1',
            'class' =>'table mb-0'
        ]
	]); // make table()

    // Add the table to the content inside a card
    $content .= Php2Bs::bs_card ([
        'class' => 'border-secondary bg-light mb-1',
        'body' => [
            'content' => $table,
            'class' => 'p-0',
        ],
    ]);// bs_card
} // $data->page_type == 'listing'


// Pass the details to the template
$template = new Admin ($content,$params);



------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Users View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/admin/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Usergroups
 * @example 	http://yoursite/Admin/Usergroups/{Usergroup Name Slug}
 *
 */
 ini_set("display_errors", 1);
 error_reporting(E_ALL);
$data = (object)$data;

$model = $this->model('M_Usergroups');
$params['menu_item'] = 'Usergroups';

//Set the parameters for the page
$params['layout'] = 'right-col';
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['menu_category'] = 'Users';

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

# Show the required data based on passed in page type
if($data->page_type == 'edit') {

	/*
		If there is a data status showing that the usergroup was
		not found, we do not need to show anything other than the
		already created alert.

		In all other cases, we show both the edit and delete forms.
	 */
    if ($data->form) {

		// Edit form
		$content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update Usergroup'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data->form,
                'class' => '',
            ],
        ]);// bs_card edit form

		// Delete form
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Delete Usergroup'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => Php2Html::p(['content'=>'This will delete the usergroup and cannot be undone.']).$data->delete_form,
                'class' => '',
            ],
        ]);// bs_card delete form

    } // !isset($data->status) || $data->status !== 'admin_not_found'

} // $data->page_type == 'edit'

if($data->page_type == 'overview') {

	// Show the create form
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1',
        'body' => [
            'content' => $data->form,
            'class' => '',

        ],
        'header' => [
            'content' => 'Add user group',
        ]
    ]);// bs_card create form

	// Show the listing
    if(isset($data->listing)) {

		/*
		 	Loop through the list passed to the view and for each one,
			replacing the 'group_name' element with a link to that
			elements edit page.
		 */
        foreach ($data->listing as $key => $value) {

            $data->listing[$key]->group_name = Php2Html::a ([
                'content' => $value->group_name,
                'href' => '/Admin/Usergroups/'.slugify($value->group_name)
            ]);

        }

        // Build the table
        $table = Php2Html::make_table ([
            'columns' => [
                'group_name' => [
                    'alias' => 'Name',
                    'th_class' => 'bg-dark text-light',
                    'global_class' => 'text-danger'
                ],
                'permissions' => [
                    'alias' => 'Permissions',
                    'th_class' => 'bg-dark text-light',
                ],
            ],
            // The listing is an object so convert it to an array
            'data' => objectToArray($data->listing),
            'settings' => [
                'show_header' => true,
                //'border' =>'1',
                'class' =>'table mb-0'
            ]
        ]); // make table()


		// Add the table to the content inside a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1',
            'body' => [
                'content' => $table,
                'class' => 'p-0',
            ],
        ]);// bs_card table
    } // show listing

} // $data->page_type == 'overview'

// Pass the details to the template
$template = new Admin ($content,$params);






-------------------------------------------------------------------------------------------------------------------





<?php

/**
 * Systems View
 *
 * Full commenting in home/index
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	/app/controllers/admin/Systems.php->index()
 * @link 		http://uathub/Admin/Systems
 * @link 	    http://uathub/Admin/Systems/Listing
 * @link 	    http://uathub/Admin/Systems/{System name}
 */

 /**
  * Collect the passed in data and turn it into an object
  * @var array
  */
$data = (object)$data;

$model = $this->model('M_Systems');

# Uncomment the below to see any data passed in or any $_POST data
// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');

//Set the parameters for the page

$params['layout'] = 'right-col';
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['menu_category'] = 'Systems';
# $params['css'] = array();
# $params['js'] = array();

/**
 * Start the output string that will be passed to the template
 * @var string
 */
$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

if($data->page_type == 'edit') {
    $content .= $data->form;
}
if($data->page_type == 'overview') {

    $content .= $data->form;

    if(isset($data->listing)) {
        foreach ($data->listing as $key => $value) {
            $data->listing[$key]->system_name = Php2Html::a ([
                'content' => $value->system_name,
                'href' => 'Systems/'.slugify($value->system_name)
            ]);

            $create_date = new DateTime($value->created_date);
            $data->listing[$key]->created_date = $create_date->format('d/m/Y g:ia');
        }

        $table = Php2Html::make_table ([
                'columns' => array (
                    'system_name' => array(
                        'alias' => 'Name',
                        'th_class' => 'bg-dark text-light',
                        'global_class' => 'text-danger'
                    ),
                    'created_date' => array(
                        'alias' => 'Created',
                        'th_class' => 'bg-dark text-light',
                    ),
                ),
                'data' => objectToArray($data->listing),
                'settings' => array (
                    'show_header' => true,
                    //'border' =>'1',
                    'class' =>'table mb-0'
                )
            ]);


        $content .= Php2Bs::bs_card (
            array(
                'class' => 'border-primary bg-light mb-1',
                'body' => array (
                    'content' => $table,
                    'class' => 'p-0',
                ),
            )
        );// bs_card
    }


} // overview






/**
 * Pass the details to the template
 *
 * @var string 	Data to be shown
 * @var string 	Version on template to use
 * @var string 	Title of the page
 */
$template = new Admin ($content,$params);





-----------------------------------------------------------------------------------------------------------------





<?php

/**
 * Categories View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/admin/index.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Categories
 * @example 	http://yoursite/Admin/Categories/{Category Name Slug}
 *
 */

$data = (object)$data;

$model = $this->model('M_Categories');

//Set the parameters for the page
$params['layout'] = 'right-col';
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['menu_category'] = 'Categories';

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);

# Show the required data based on passed in page type
if($data->page_type == 'edit') {

    /*
        We only need the forms if the category is found so, in the
        controller, we only pass the 'form' parameter with the form
        attached if the category was found, otherwise it is null.

        We only need to add to the content if $data->form contains
        anything. If no category was found, any page content is
        handled by the showPageAlerts() function above.
     */
    if ($data->form) {
        // Show the update form
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update category'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data->form,
                'class' => '',
            ],
        ]);// bs_card update form

        // Show the delete form
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Delete category'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => Php2Html::p(['content'=>'This will delete the category and cannot be undone.']).$data->delete_form,
                'class' => '',
            ],
        ]);// bs_card delete form
    } // if $data->form

} // $data->page_type == 'edit'

if($data->page_type == 'overview') {

    // Show the create form
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1',
        'body' => [
            'content' => $data->form,
            'class' => '',
        ],
        'header' => [
            'content' => 'Add user group',
        ]
    ]);// bs_card create form

    // Show the listing
    if(isset($data->listing)) {

        /*
		 	Loop through the list passed to the view and for each one,
			replacing the 'category_name' element with a link to that
			elements edit page.

            We also replace the 'created_date' element with a long date
            and time using the php DateTime function.
		 */
		foreach ($data->listing as $key => $value) {
            $category_name= $value->category_name;

            $data->listing[$key]->category_name = Php2Html::a ([
                'content' => $category_name,
                'href' => '/Admin/Categories/'.slugify($category_name)
            ]);

            $create_date = new DateTime($value->created_date);
            $data->listing[$key]->created_date = $create_date->format('d/m/Y g:ia');
        }

        // Build the table
        $table = Php2Html::make_table ([
            'columns' => [
                'category_name' => [
                    'alias' => 'Name',
                    'th_class' => 'bg-dark text-light',
                    'global_class' => 'text-danger'
                ],
                'created_date' => [
                    'alias' => 'Created',
                    'th_class' => 'bg-dark text-light',
                ],
            ],
            // The listing is an object so convert it to an array
            'data' => objectToArray($data->listing),
            'settings' => [
                'show_header' => true,
                //'border' =>'1',
                'class' =>'table mb-0'
            ]
        ]); // make table()

        // Add the table to the content inside a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1',
            'body' =>[
                'content' => $table,
                'class' => 'p-0',
            ],
        ]);// bs_card table
    } // show listing

} // $data->page_type == 'overview'


// Pass the details to the template
$template = new Admin ($content,$params);





---------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Users View
 *
 * Full commenting in home/index
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	/app/controllers/home.php->index()
 * @link 		http://site.com/
 *
 */

 /**
  * Collect the passed in data and turn it into an object
  * @var array
  */
$data = (object)$data;

$model = new M_ActivityType();

# Uncomment the below to see any data passed in or any $_POST data
// nicePrint_r($data, 'Data');
//nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');

//Set the parameters for the page

#$params['layout'] = 'test';
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['menu_category'] = 'Users';
$params['menu_item'] = 'Activity Types';

/**
 * Start the output string that will be passed to the template
 * @var string
 */
$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);



if(isset($data->form)) {
    $content .= $data->form;
}

if(isset($data->listing)) {
    foreach ($data->listing as $key => $value) {

        $data->listing[$key]->type_name = Php2Html::a ([
            'content' => $value->type_name,
            'href' => '/Admin/ActivityType/'.slugify($value->type_name)
        ]);

        $create_date = new DateTime($value->created_date);
        $data->listing[$key]->created_date = $create_date->format('d/m/Y g:ia');

    }

    $table = Php2Html::make_table (
        array (
            'columns' => array (
                'type_name' => array(
                    'alias' => 'Activity Type',
                    'th_class' => 'bg-dark text-light',
                    'global_class' => ''
                ),
                'created_date' => array(
                    'alias' => 'Created',
                    'th_class' => 'bg-dark text-light',
                ),
            ),
            'data' => objectToArray($data->listing),
            'settings' => array (
                'show_header' => true,
                //'border' =>'1',
                'class' =>'table mb-0'
            )
            )
        );


    $content .= Php2Bs::bs_card (
        array(
            'class' => 'border-primary bg-light mb-1',
            'body' => array (
                'content' => $table,
                'class' => 'p-0',
            ),
        )
    );// bs_card
}

/**
 * Pass the details to the template
 *
 * @var string 	Data to be shown
 * @var string 	Version on template to use
 * @var string 	Title of the page
 */
$template = new Admin ($content,$params);



---------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Home Page View
 *
 * This only controls the view from the home page of the site.
 *
 * No formatting is carried out anywhere and all that is passed in is an
 * array. The entire layout is styled within this file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	/app/controllers/home.php->index()
 * @link 		http://site.com/
 *
 */

$data = (object)$data;

$model = $this->model('M_Users');

# Uncomment the below to see any data passed in or any $_POST data
// nicePrint_r($data, 'Data');
// nicePrint_r($_SESSION, 'Session');

/**
 * Set the parameters for the page
 **/
$params['layout'] = 'full-width';
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['meta'] = array(
    'description' => 'Description set in page',
);

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= showPageAlerts ($data, $model);


$help_text = Php2Html::p(['content'=>'You can log in using either the Username or Email address you registered with or your user id.']).Php2Html::p(['content'=>'If you cannot remember your password, <a href="/Members/ResetPassword">click here</a> to reset it.']).Php2Html::p(['content'=>'If you cannot remember your username or email use to register, <a href="/Contact">email me</a>.']);



$content .= Php2Bs::bs_row ([
    'content' => Php2Bs::bs_column ([
        'content' => Php2Bs::bs_card ([
            'class' => 'border-secondary bg-dark text-light',
            'body' => array (
                'content' => $help_text,
                'class' => '',
            ),
        ]),
        'class' => 'col-12 col-md-4 mb-1'
    ])
    .Php2Bs::bs_column ([
        'content' =>  Php2Bs::bs_card ([
            'class' => 'border-dark bg-light',
            'body' => array (
                'content' => $model->loginform($form_params=['hide_help'=>true]),
                'class' => '',
            ),
        ]),
        'class' => 'col-12 col-md-8 mb-1'
    ])
]);





/**
 * Pass the details to the template
 *
 * @var string 	Data to be shown
 * @var string 	Version on template to use
 * @var string 	Title of the page
 */
$template = new Main ($content,$params);





-------------------------------------------------------------------------------------------------------------------------------




<?php

/**
 * Home Page View
 *
 * This only controls the view from the home page of the site.
 *
 * No formatting is carried out anywhere and all that is passed in is an
 * array. The entire layout is styled within this file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	/app/controllers/home.php->index()
 * @link 		http://site.com/
 *
 */

 /**
  * Collect the passed in data and turn it into an object
  * @var array
  */
$data = (object)$data;

# Uncomment the below to see any data passed in or any $_POST data
// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');

/**
 * Set the parameters for the page
 *
 * As well as the content to display, there are some other parameters that
 * the call to the template also accepts. These are stored in an array called
 * $params and can either be set within this file, or passed in from the
 * controller.
 *
 * This example file contains all available parameters to give an explanation
 * of what can be used an how to use it, some of which are set within this file,
 * some of which are passed from the controller.
 */

/*
    Set the page version.

    The default template system provides several different layouts that can be
    used, within a standard wrapper.

    The layouts can be edited and new ones added in the layout_switcher() function
    in the called template file and the demos ones are
    'full-width' - single column layout
    'left-col'  - two column layout with left sidebar and content to the right
    'right-col' - two column layout with right sidebar and content to the left
    'three-col' - three column layout with both sidebars and content in the middle
    'test' - a playground for testing styles.

    This parameter can be ommitted and if so, the layout will default to the
    default case within the switch statement in layout_switcher().

    In this demo, the layout is set within this file, rather than passed in from the controller.
 */
$params['layout'] = 'right-col';

/*
    Set the page title and subtitle.

    To set the page title, which will be shown at the top of the page and also part of the <title> in <head> set it to $params['page_title'].

    In this demo, we are sending the title from the controller as
    'page_name' but have set it to only populate $params['page_title'] if
    it has been passed in. You can set it manually in this file.

    This parameter can be ommitted and if so, no title or subtitle will
    show and the <title> in <head> will not include anything and default
    to whatever is set as the $title variable in the head() function in
    the Base template.

    To set a subtitle for the page set a $params['page_subtitle']. This
    works in exactly the same way as the page title other than it does not
    affect the  <title> in <head> and will not show if a page title is not
    set. Again, for this demo, we are assuming it to be from the controller, this time as 'page_subtitle', and leave it empty if it does not exist.

 */
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;

/*
    Override meta tags

    You can override any of the default meta tags stored in the meta_tags()
    function in /app/core/Settings.php by including them in via $params['meta'].

    You can override as many as needed and simply created a key/value pair for
    each one that you want to override.

    It would be recommended to set this in the $data passed to this page from
    the controller, espcially if this view is being used for multiple page
    types and content.

    If you do not need to override any, you can omit the variable completely.
 */
$params['meta'] = ['description' => 'Description set in page'];

/*
    Add page specific css

    You can any page specific stylesheets stored called from the css() function in /app/core/Settings.php by including them in via $params['css'].

    These are set in a multidimensional array and return the full stylesheet link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4_beta' would return the string at
    'remote' => 'bootstrap' => 'v4_beta'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['css'] = [
    'remote/simple-line-icons',
    #'path/to/css2',
    #'path/to/css3'
];

/*
    Add page specific js

    You can any page specific stylesheets stored called from the js() function in /app/core/Settings.php by including them in via $params['js'].

    These are set in a multidimensional array and return the full script link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4_beta' would return the string at
    'remote' => 'bootstrap' => 'v4_beta'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$params['js'] = [
    'remote/jquery_ui',
    #'path/to/js2',
    #'path/to/js3'
];

/**
 * Start the output string that will be passed to the template
 * @var string
 */
 $content = '';
 $content .= '<h4>Holding area for all the new stuff!</h4>';
 $content .= '<p>As we are currently in the process of moving everything across to a new system, as well as adding the new features, we have had to create an interim area.</p>';
 $content .= '<p>Currently, for most script generation, you would use the Original Selenium folders as usual. For Pet, you can use the new, faster method in the interim site. Anything else will be going in the new hub site..</p>';
 $content .= '<div class="card mb-3 border-primary text-dark">';
 $content .= '    <h4 class="card-header bg-primary text-light">';
 $content .= '    Links';
 $content .= '    </h4>';
 $content .= '  <div class="card-body">';
 $content .= '  <b>Original Selenium Folders</b><br>';
 $content .= '    <a href="http://10.60.151.86/current/Selenium" target="_blank">Current</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/regression/Selenium" target="_blank">Regression</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting1/Selenium" target="_blank">Scripting 1</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting2/Selenium" target="_blank">Scripting 2</a>' ;

 $content .= '  <br><br><b>Interim site</b><br>';
 $content .= '    <a href="/dev/Selenium" target="_blank">Home Page</a>' ;

 $content .= '  <br><br><b>New Hub site</b><br>';
 $content .= '    <a href="/Selenium" target="_blank">Home Page</a>' ;
 $content .= '   | ';
 $content .= '    <a href="/Admin" target="_blank">Admin</a>' ;
 $content .= '  <br><br><b>Other Links</b><br>';
 $content .= '    <a href="http://10.60.151.86/phpmyadmin" target="_blank">Database</a>' ;

 $content .= '  <br><br><b>File Locations</b>';
 $content .= '    <br>WebOpts MVT list - \\\\ZEUS\\Ecommerce\\Webopt MVT folder\\Agendas\\' ;
 $content .= '    <br>Firefox 54.0.1 Installation - \\\\10.60.151.86\\files\\Firefox Installs\\' ;

 $content .= '  <br><br><b>Known Issues</b>';
 $content .= '  <br>Remember me function causes count() on boolean error in M_Users line 991(ish)' ;
 $content .= '  <br>Main template edit link goes to /Members/ instead of /Users/' ;

 $content .= '  </div>';
 $content .= '</div>';



/**
 * Pass the details to the template
 *
 * @var string 	Data to be shown
 * @var string 	Version on template to use
 * @var string 	Title of the page
 */
$template = new Host_Template ($content,$params);





-------------------------------------------------------------------------------------------------------------------------





