<?php
/**
 * Front End Users Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Users.
 *
 * This files also acts as a reference to how all controllers (both front-end
 * and admin) collate the information and pass this to the relevant view.
 *
 * All controllers extend the Controller core class and uses the two functions it
 * contains, available via $this.
 *
 * $this->model() will open an instance of the specified model.
 *
 * $this->view() passes the correct information to the correct view. This takes
 * two arguments.
 * The first is a delimated path through the '/views' directory to the required
 * view file, so 'home/index' means we are sending to the view at
 * 'app/views/home/index.php'.
 * The second argument is an array of page specific detail such as the page
 * title and any content to display. We generally build this content up gradually
 * throughou the method but there are some occassions, where we may pass it
 * directly into the view.
 *
 *
 * When a url is entered, it will correspond to a controller and a method within
 * it to use. The method will then prepare the data required before sending it to
 * the view.
 *
 * The examples at the end of this opening comment show the urls that call
 * this controller and each of them cause a function within this file to
 * be executed.
 *
 * For a full explanation of how the controllers work and get from receiving
 * the request to showing the content, check out the 'Amend and Extend'
 * section at https://github.com/MargateSteve/Framework/.
 *
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	http://yoursite/Users
 * @link 	http://yoursite/Users/{User}
 * @link 	http://yoursite/Users/Edit
 * @link 	http://yoursite/Users/Listing
 * @link 	http://yoursite/Users/Profile
 * @link 	http://yoursite/Users/ResetPassword
 * @link 	http://yoursite/Users/Verify/{Email}/{Hash}
 * @link 	http://yoursite/Users/Verify/{Email}/Resend
 */
class Users extends Controller
{
    /*
        Set the access rights for the variables, including any defaults

        See '/models/M_Users.php' for more information
     */
     // Set the access rights for the variables, including any defaults
     private $_base_model,
 			$_logs;

     // Construct the class
 	public function __construct () {
 		$this->_base_model = $this->model('M_Users');
         $this->_logs = new Logs();
     } // __construct ()

    /**
     * Member Edit page
     *
     * Shows the edit form and change password form for the currently logged in
     * user and proccesses them on submission.
     *
     * If a user tries to view this page when they are not logged in, they will
     * only be shown a message.
     *
     * TODO: User form blanks out after password post. Errors causing it?
     *
     * @param  mixed    $_args     If not null, forces a 404
     * @return 	        /app/views/home/users.php
     * @link 	        http://yoursite/Users/Edit
     */
    public function edit($_args=null) {
        /*
            As we are viewing the edit page, we are assuming that the url will be
            http://yoursite/Users/Edit with no extra parameters. If there is an
            extra parameter in the url, $_args will contain that parameter. For
            example the url http://yoursite/Users/Edit/Delete would result in
            $_args=Delete.

            The presence of this extra parameter, could indicate someone trying
            to do something they should not so we redirect the user to the 404
            page.
            When using this method the url in the browser will still be as entered,
            which we can use for logging purposes.
         */
        if($_args){Redirect::to('404');}

        /*
            As we may have different versions of the page, we set any parameters
            that we know will not or are unlikely to change. We build upon or
            amend this as we go along.

            'page_name' will be shown at the top of the content and as the meta
            title in the <head> section, so will show on the browser tab.
            We do not use it here but can also pass a 'page_subtitle' that will
            be shown just below the title in a smaller font.

            'page_type' is used to tell the view what to show. The view handles
            multiple pages so by setting this to 'edit' it knows to only display
            relating to the user edit page by wrapping the edit page content in
            if($data['page_type'] == 'xxx') {}.
         */
        $view_data = [
            'page_name' => 'Edit Profile',
            'page_type' => 'edit',
        ];

        $errors = null;
        /*
            A user has to be logged in to edit their profile so we want to ensure
            that they are before we let them do anything. The isLoggedIn()
            function returns true or false so we can use that to check.

            If the user is not logged in, we simply show a message stating that.
            Each view has got an if statement at the top to check if one of the
            parameters sent through is called 'message' and if it is, shows it
            below the page title but before any content. Each model has a function
            called userAlerts() which contains an array of related messages. In the
            view, another function will turn the contents of that message into a
            Bootstrap alert. The message that we use in this case has a key of
            'not_logged_in'.

            If they are logged in, we show the forms and check for any update
            attempts.
         */
        if(!$this->_base_model->isLoggedIn()) {
            // User not logged in
            $this->_base_model->userAlerts([
                'msg' => 'not_logged_in',
            ]);
        } else {
            /*
                The user is logged in so we start by retrieving their details
                using M_Users->find(). We pass the users login $_SESSION
                variable, defined by 'session_user_id' in the `settings` table.
             */
            if(
                $this->_base_model->find(
                    $this->_base_model->currentUser()
                )
            ) {
                $user_data = $this->_base_model->data();

                /*
                    At this point, we check to see if a either of the forms have
                    been posted. If they have, we attempt to process them.

                    As only one of these forms can be posted at any one time, we
                    check them individually, starting with the details update form.
                 */
                if (Input::exists(['name'=>'update_'.strtolower($this->_base_model->_single_name)])) {
                    /*
                        A update attempt has been made so we need to take the
                        $_POST data and attempt to validate it before we insert it.

                        We do not need to run validation against the name of the
                        forms submit button so the first thing we do is unset that.
                     */
                    unset($_POST['update_'.strtolower($this->_base_model->_single_name)]);

                    /*
                        Now, all we have left is the actual data from the form
                        fields, almost ready to validate. As there may be a future
                        requirement to preserve the original $_POST data, we create
                        a variable called $post_data and set $_POST to it.

                        At the same time, we check it against the existing data
                        for the record and unset any fields that are not different
                        from the existing data.

                        The function we use for this stripPostData() in '/src/functions/strip_post_data.php'.
                     */
                    $post_data = stripPostData (
                        $_POST, $user_data
                    );

                    /*
                        If $post_data still contains anything, it means that fields
                        have been changed, so we attempt to validate and process it.

                        If $post_data is empty, we show a message to state that no
                        fields have changed.
                     */
                    if($post_data) {
                        $validation = $this->_base_model->validate($post_data, $type='update', $user_data->user_id);

                        /*
                            If validation has passed, we attempt to update the
                            users record with M_Users->update() and set an
                            appropriate message to show.

                            If validation has failed, we simply set a message
                            showing what went wrong as well as passing through
                            the errors.
                         */
                        if ($validation->passed()) {
                            // Validation passed so attempt the update
                            if(
                                $this->_base_model->update(
                                    $user_data, $post_data
                                )
                            ) {
                                // Update successful
                                $this->_base_model->userAlerts([
                                    'msg' => 'update_success',
                                ]);
                            } else {
                                // Update failed
                                $this->_base_model->userAlerts([
                                    'msg' => 'update_fail',
                                    'errors' => ['unspecified', '']
                                ]);
                            } // attempt update
                        } else {
                            // Validation failed so send the message and errors
                            $this->_base_model->userAlerts([
                                'msg' => 'update_fail',
                                'errors' => $validation->errors()
                            ]);
                        } // check validation
                    } else {
                        /*
                            The posted fields are no different from the existing
                            record so we simply show a message stating that.
                         */
                        $this->_base_model->userAlerts([
                            'msg' => 'no_change'
                        ]);
                        Logs::update_table_no_change([
                            'record' =>  $user_data->user_id,
                            'target' => $this->_base_model->_db_table
                        ]);
                    } // check
                } // edit profile form posted



                /*
                    Next we do exactly the same with the reset password form. We
                    will not comment everything again here, only that which is
                    different from the details form.
                 */
                if (Input::exists(['name'=>'reset_password'])) {

                    unset($_POST['reset_password']);

                    $post_data = stripPostData (
                        $_POST,
                        $user_data
                    );

                    if($post_data) {
                        $validation = $this->_base_model->validate($post_data, $type='update', $user_data->user_id);

                        /*
                            If validation has passed, we unset the 'confirm_password'
                            from the $post_data as it was only for validation purposes
                            and does not get inserted into the database.

                            We then have to create a secure password from the one
                            posted and we do this by created a 32 character hash and
                            then rewriting entered password with that as a salt. We
                            do this using two functions in the Has core file.

                            We then attempt to update the password, using
                            M_Users->update() and create any messages that we need
                            to show.

                            If validation has failed, we simply show a message
                            showing what went wrong.
                         */
                        if ($validation->passed()) {
                            unset($post_data['confirm_password']);
                            $post_data['salt'] = Hash::salt(32);
                            $post_data['password'] = Hash::make(Input::get('password'), $post_data['salt']);

                            if(
                                $this->_base_model->update(
                                    $user_data, $post_data
                                )
                            ) {
                                $this->_base_model->userAlerts([
                                    'msg' => 'pw_update_success',
                                ]);

                            } else {
                                $this->_base_model->userAlerts([
                                    'msg' => 'update_fail',
                                    'errors' => ['unspecified', '']
                                ]);

                            } // attempt update
                        } else {
                            $this->_base_model->userAlerts([
                                'msg' => 'update_fail',
                                'errors' => $validation->errors()
                            ]);
                            $errors = $validation->errors();
                        } // check validation
                    } else {
                        $this->_base_model->userAlerts([
                            'msg' => 'no_change'
                        ]);
                        Logs::update_table_no_change([
                            'record' =>  $user_data->user_id,
                            'target' => $this->_base_model->_db_table
                        ]);
                    } // data changed
                } // reset password form posted

                /*
                    We send both the forms to the view with the any errors included
                    to show validation on the fields. We also pass the users data
                    into the main edit form.

                    As there may have been updates, we find the user again before
                    calling the forms.
                  */
                $this->_base_model->find(
                    $this->_base_model->currentUser()
                );
                /*
                    The edit form is stored in M_Users->defaultForm() so we pass that
                    through.

                    The user form takes several parameters..
                    'errors' and array of any errors from a previous post attempt
                    to allow validation on the fields
                    'version' set to edit, to prevent the 'Accept Terms' field showing
                    'area' set to user, to to prevent the change user group field showing
                    'data' an array of the users data to populate the fields
                 */
                $view_data['edit_form'] = $this->_base_model->defaultForm([
                    'errors' => $errors,
                    'version' => 'edit',
                    'area' => 'user',
                    'data' => $this->_base_model->data()
                ]);

                /*
                    The password form is stored in M_Users->resetPasswordForm()
                    so we also pass that through. The only parameter it takes is
                    any errors.
                 */
                $view_data['password_form'] = $this->_base_model->resetPasswordForm([
                    'errors' => (isset($view_data['errors'])) ? $view_data['errors'] : '',
                ]);

            } // check user exists
        } // check user logged in

        /**
 		 * Pass the data to the view
 		 * @var 	string 	View Path
 		 * @var 	array 	Data being passed to the view
 		 */
        $this->view('home/users', $view_data);

    } // edit ()

    /**
 	 * Member Overview and User Profile Page
 	 *
 	 * We actually power two different pages from this method. If no  arguments
 	 * are passed in, we are on the Users overview page. If  an argument has
 	 * been passed in, it is assumed to be a username so we will attempt to show
 	 * a user profile.
 	 *
 	 * @param  string  $_args  User reference if in profile mode
 	 * @return 	       /app/views/home/users.php
 	 * @link 	       http://site.com/Users/
 	 * @link 	       http://site.com/Users/{Username}
 	 *
 	 */
   	public function index($_args=null) {
        /*
            If there is anything in $_args, we are assuming that we are looking
            at a users profile page, otherwise, we are on the Users overview
            page.
         */
        if ($_args) {
            /*
                As we are attempting to show a users profile, we need to first
                make sure that the user exists. If they do not, we simply pass
                the page name and page type, along with a message.

                If they do exist, then we replaced the usergroup id that has
                been stored with the actual group name.
             */
            if (!$this->_base_model->find($_args)) {
                // User does not exist
                $view_data = [
                    'page_name' => 'User not found',
                    'page_type' => 'profile',
                    'message' => $this->_base_model->userAlerts('not_found'),
                ];
            } else {
                /*
                    The user exists so store their data against a variable
                    called $_user_data.
                 */
                $_user_data = $this->_base_model->data();

                /*
                    As we want to replace the user group id with the actual name,
                    we set the M_Usergroups model to $_groups and then run the
                    find() function to get the details from the users group id.

                    We then overwrite the group in $_user_data with the name of
                    the group.
                 */
                $_groups = $this->model('M_Usergroups');
                $_groups->find($this->_base_model->data()->group);
                $_user_data->group = $_groups->data()->group_name;

                /*
                    Set the page name as a freindly one including the users
                    username, as well as passing in the data as 'userdata'. This
                    is what will be checked in the view to decide whether or not
                    there is a record to show.
                 */
                $view_data = [
                    'page_name' => $_user_data->username.'\'s Profile',
                    'page_type' => 'profile',
                    'userdata' => $_user_data,
                ];
            } // Find User

        } else {
            /*
                No arguments have been passed in so we are on the overview page.

                As well as the page name, we pass in the count of users, the
                details of the latest user and a listing of all users via various
                functions in M_Users.
             */
            $view_data = [
                'page_name' => 'Users',
                'page_type' => 'overview',
                'usercount' => $this->_base_model->count(),
 				'latestuser' => $this->_base_model->mostRecent(),
                'list' => $this->_base_model->listing(),
            ];
        }

 		// Pass the data to the view
        $this->view('home/users',$view_data);
   	} // index()

    /**
 	 * Show a listing of all users
 	 *
 	 * Shows retreives a list of all users from the 'users' table, using
 	 * M_Users->listing(), and passes it to the view along with a page type of
 	 * 'listing'.
 	 * The view itself does any manipulation required (in this case turning the
 	 * username into a link to that users profile and formatting the joined date)
 	 * before passing it into the Php2Html::make_table () function.
 	 *
 	 * The manipulation could be done in this file before passing to the view,
 	 * and that is the way we do it elsewhere, but this one passes the listing
 	 * through raw as an example.
 	 *
 	 * @param  	null    $_args 	  404 page trigger for bad url
     * @return 	        /app/views/home/users.php
     * @link 	        http://yoursite/Users/Listing
 	 **/
 	public function listing($_args=null) {
        // 404 page if we have any url parameters
        if($_args) {Redirect::to('404');}

        /**
 		 * Pass the data to the view
 		 *
 		 * As we only ever need the same things on this, we pass it directly into
 		 * the view as opposed to setting it separately.
 		 *
 		 * Along with the page name and type, we pass the array of all users, set
 		 * by M_Users->listing().
 		 *
 		 * @var 	string 	View Path
 		 * @var 	array 	Data being passed to the view
 		 */
 		$this->view(
            'home/users',
            [
                'page_name' => 'Users List',
                'page_type' => 'listing',
                'list' => $this->_base_model->listing()
            ]
        );
 	} // listing ()

    /**
     * Reset Password Page
     *
     * Allows a user to request an email to reset a forgotten password as well
     * as handling the link from the email, showing the new password form and
     * processing it when posted.
     *
     * A lot of what has already been covered in the change password section of
     * edit() in this file is used here, so it is only the initial email request
     * and checking the link within it that is different from what we have used
     * before. These, themselves, are similar to the processes used with the
     * registration email in '/app/controllers/home.php->register()' and
     * edit() and verify() within this file.
     *
     * @param  	email          $email 		Users Email address
     * @param  	sha256         $hash  	    Stored hash
     * @return 	               /app/views/home/users.php
     * @link 	               http://yoursite/Users/ResetPassword
     */
    public function resetpassword ($_email=null, $_hash=null) {
        // If the user is already logged in, redirect them to the home page
        if ($this->_base_model->isLoggedIn()) {Redirect::to('/');}

        // Default view data
        $view_data = [
            'page_name' => 'Reset Password',
            'page_type' => 'reset_password',
        ];

        /*
            As we use the the same method for both the initial password reset
            request form and the actual password reset itself, we can assume that
            if there are any parameters in the url, the user has followed the
            link from the email.

            As the first argument is $_email, we check to see if that exists, if
            if does, we check to see if $_email matches a user and if so, show the
            change password form and process it when posted.

            If $_email does not exist, we show the password change email form and process that if posted.
         */
        if($_email) {
            /*
                As $_email exists, it would appear that the user has followed the
                link from the reset email so we need to check if the email address
                matches a user.
             */
            if($this->_base_model->find($_email)) {
                /*
                    The email matches the user so now we need to check if there is
                    a record in the 'user_hash' table that matches that email and
                    the hash passed in as the second parameter.
                 */
                if ($this->_base_model->checkUserHash($_email, $_hash)) {
                    /*
                        There is an existing record so now we check to see if
                        they have already posted the reset password form.

                        This is exactly the same as already covered in edit() in
                        this file. Only anything that differs from there will be
                        commented.
                     */
                    if(Input::exists(['name'=>'reset_password'])) {
                        unset($_POST['reset_password']);
                        $post_data = stripPostData ($_POST, $this->_base_model->data());

                        if($post_data) {
                            $_rules = stripValidateRules (
                                $post_data,
                                $this->_base_model->validation_rules()
                            );

                            $_validate = new Validate();
                            $validation = $_validate->check(
                                $post_data,
                                $_rules
                            );

                            if ($validation->passed()) {
                                unset($post_data['confirm_password']);
                                $post_data['salt'] = Hash::salt(32);
                                $post_data['password'] = Hash::make(Input::get('password'), $post_data['salt']);

                                if($this->_base_model->update(
                                        $this->_base_model->data()->id,
                                        $post_data
                                    )
                                ) {
                                    $view_data['message'] = $this->_base_model->userAlerts('pw_update_success');

                                    /*
                                        The password reset is complete so we do
                                        not need to show the form
                                     */
                                    $view_data['form'] = null;
                                } else {
                                    $view_data['message'] = $this->_base_model->userAlerts('pw_update_failed_unspecified');
                                }
                            } else {
                                $view_data['message'] = $this->_base_model->userAlerts('update_validation_failed');
                                $view_data['errors'] = $validation->errors();

                                // Show the form with validation error formatting
                                $view_data['form'] = $this->_base_model->resetPasswordForm(['errors'=>$validation->errors()]);
                            }
                        } else {
                            $view_data['message'] = $this->_base_model->userAlerts('no_change');
                        }
                    } else {
                        /*
                            No form post has been attemped so show it. There will
                            be no errors so pass them in as null.
                         */
                        $view_data['form'] =$this->_base_model->resetPasswordForm(['errors'=>null]);
                    }
                } else {
                    /*
                        There is no existing record in the 'user_hash' table so
                        the url must be incorrect. We show a message to explain
                        that but also show the original email request form so they
                        can have a new one sent.
                     */
                    $view_data['message'] = $this->_base_model->userAlerts('hash_fail');
                    $view_data['form'] = $this->_base_model->resetPasswordLinkForm();
                }
            } else {
                /*
                    There email address did not match any users. We show a message to explain
                    that but also show the original email request form so they
                    can have a new one sent.
                 */
                $view_data['message'] = $this->_base_model->userAlerts('not_found');
                $view_data['form'] = $this->_base_model->resetPasswordLinkForm();
            }

        } else {
            /*
                There are no parameters in the url so we are at the stage where
                the user is wanting to have the password reset request email sent.

                We check to see if the form has already been posted and if so, attempt to process it, otherwise, we simply show the form.
             */
            if(Input::exists('send_reset_email')) {
                /*
                    The form to request a password reset email has been posted
                    so we need to make sure it has something to search for.
                    Although the field is called 'username', it can actually be
                    a username, email address of user id.
                 */
                if(!Input::get('username')) {
                    /*
                        There was nothing in the user field so manually set an error, along with a message.
                     */
                    $view_data['errors'] = ['username'=> 'You must enter something to search for.'];
                    $view_data['message'] = $this->_base_model->userAlerts('send_link_fail');
                } else {
                    /*
                        The user does exist so we need to send the email and
                        place a record in the 'user_hash' table using M_Users->createUserHash, passing in the email along with
                        newly created hash.

                        If the user is not found, we simply set a message to show.
                     */
                    if($this->_base_model->find(Input::get('username'))) {

                        $_hash = Hash::unique();
                        $this->_base_model->createUserHash([
                            'email'=>$this->_base_model->data()->email,
                            'hash'=>$_hash
                        ]);

                        /*
                            Send the email useing M_Users->sendPasswordLinkMail()
                            passing in the users email and $_hash. These will be
                            used to form the link in the email.
                         */
                        $this->_base_model->sendPasswordLinkMail (
                            $this->_base_model->data()->email,
                            $_hash
                        );

                        // Set a message to say the email has been sent
                        $view_data['message'] = $this->_base_model->userAlerts('pw_email_sent');

                        // We no longer need the form so set it to null.
                        $view_data['form'] = null;
                    } else {
                        // The user was not found to set a message
                        $view_data['message'] = $this->_base_model->userAlerts('not_found');
                    } // check user exists
                } // check empty field
            } else {
                // The form has not been posted so show it
                $view_data['form'] = $this->_base_model->resetPasswordLinkForm();
            } // check form posted
        }

        // Pass the data to the view
        $this->view('home/users', $view_data );
    } // resetpassword

    /**
 	 * Verify a users account
 	 *
 	 * This is the most complicated controller function to give an example
 	 * of using many calls to models and dealing with multiple page types,
 	 * checking for posted form data and dealing with a number of different
 	 * page names and status messages. It would be advisible to break some of
 	 * the repetitive bits into smaller functions but as it is, it is a good
 	 * example of one function working with several differently formatted urls.
 	 *
 	 * This covers two different versions of the verification page - one
 	 * that activates the account via a url sent in the registration email
 	 * and one to resend the registration email if the user requests it.
 	 *
 	 * The second parameter ($_param) can work as either the hash stored in
 	 * the database against the users email in the 'user_hash' table in
 	 * verification mode or a static value of 'Resend' when the resend
 	 * form has been sent.
 	 *
 	 * In verification mode both email and hash must exist in the url
 	 * otherwise nothing will be  processed. Also, if the email and hash
 	 * do not match a row in the 'user_hash' table, nothing will be
 	 * processed and an error message show with the option to resend.
 	 *
 	 * If there is an email and hash in the url and they do match a
 	 * row in the 'user_hash' table, the user is activated by setting
 	 * their status to 1.
 	 *
 	 * In resend mode, we simply check the email passed in the url and if
 	 * there is already a record in the 'user_hash' table we resend with the
 	 * original hash. If there is no record in the table we create a new
 	 * hash, insert it into the table and send a new email.
 	 *
 	 * Nothing is passed to the view other than the page name, the page_type
 	 * (although that currently does nothing) and the status of the process.
 	 * The 'status' is all that determines what is shown on the page as we
 	 * are only ever have that to show.
 	 *
 	 * @param  	email          $email 		Users Email address
 	 * @param  	mixed          $_param  	Stored hash or Resend Variable
 	 * @return 	               /app/views/home/users.php
 	 * @link 	               http://yoursite/Users/Verify/{Email}/{Hash}
 	 * @link 	               http://yoursite/Users/Verify/{Email}/Resend
 	 */
   	public function verify($_email=null, $_param=null) {
        // TODO: Remove email and hash from Breadcrumb

        // If the user is already logged in, redirect them to the home page
        if ($this->_base_model->isLoggedIn()) {Redirect::to('/');}

        // Default view data
        $view_data = [
            'page_name' => 'Verify Account',
            'page_type' => 'verify',
        ];

 		// Check that the email and $param variables exist
 		if($_email && $_param) {
            /*
                The first thing we do is check the 'users' table to see if
                the email matches an existing user as if not, there are no
                further checks that we need to do.
             */
            if ($this->_base_model->find($_email)) {
                /*
                    There is an account with that email address so we check to
                    see if it has already been verified.
                 */
                if ($this->_base_model->data()->status !== '0') {
                    /*
                        The account with that email address has already been
                        verified, we set a message but also use the opportunity
                        to delete any current records in the 'user_hash' table
                        using M_Users->deleteUserHash for that email just for housekeeping purposes.
                     */
                    $this->_base_model->userAlerts([
                        'msg' => 'already_verified',
                    ]);

                    $this->_base_model->deleteUserHash($_email);
                } else {
                    /*
                        So now we know that we have the correct email address of
                        an unverified member but the has was incorrect. At that
                        point, the user will have been given a link to resend the
                        email. If they have clicked it, the url will now have
                        'Resend' as the second parameter. If that is they case,
                        we simply delete any current records in the 'user_hash'
                        table for that email and send another.

                        Otherwise, we will attempt to verify the user.
                     */
                    if($_param == 'Resend') {
                        $this->_base_model->deleteUserHash($_email);

                        // create the hash record - see resetPassword()
                        $_hash = Hash::unique();
                        $this->_base_model->createUserHash([
                            'email'=>$_email,
                            'hash'=>$_hash]
                        );

                        // Send the validation email
                        $this->_base_model->sendRegistrationMail($_email,$_hash);

                        $this->_base_model->userAlerts([
                            'msg' => 'resend_email',
                        ]);
                    } else {
                        // Check the user hash. See resetPassword() for info.
                        if ($this->_base_model->checkUserHash($_email, $_param)) {
                            /*
                                The record exists in 'user_hash' so set their
                                status to 1 using M_Users->update() and delete the record from the 'user_hash' table, using
                                M_Users->deleteUserHash().

                                We also set a message to say the account has been verified.
                             */
                            $this->_base_model->update(
                                $this->_base_model->data()->id, array('status' => '1')
                            );

                            $this->_base_model->deleteUserHash($_email);
                            $this->_base_model->userAlerts([
                                'msg' => 'account_verified',
                                'alert_link' => Php2Html::a([
                                    'content' => 'Home',
                                    'class' => 'alert_link',
                                    'href' => '/'
                                ])
                            ]);
              		 	} else {
                            /*
                                The url does not match any in the 'user_hash'
                                table but as we know that the email is correct,
                                we simply offer a link to resend it.
                              */
                              $this->_base_model->userAlerts([
                                  'msg' => 'incorrect_hash',
                                  'alert_link' => Php2Html::a([
                                      'content' => 'Resend now',
                                      'class' => 'alert_link',
                                      'href' => '/Users/Verify/'.$_email.'/Resend'
                                  ])
                              ]);
              	  	    } // check hash exists
                    } // Resend mode
                } // Not verified

            } else {
                // Check if reset email form posted - see resetPassword() for info
                if (Input::exists('send_reset_email')) {
                    // Check the user exists
                    if ($this->_base_model->find(Input::get('username'))) {
                        /*
                            There is an account with that email address so we
                            check to see if it has already been verified.
                         */
                        if ($this->_base_model->data()->status !== '0') {
                            /*
                                The account with that email address has already
                                been verified, we set a status but also use the
                                opportunity to delete any current records in the
                                'user_hash' table for that email just for
                                housekeeping purposes.
                             */
                            $this->_base_model->userAlerts([
                                'msg' => 'already_verified',
                            ]);

                            $this->_base_model->deleteUserHash($_email);
                        } else {
                            /*
                                The account with that email address has not been
                                verified so we resend the email and enter the
                                record in 'user_hash'.
                                First we delete any current records in the
                                'user_hash' table for that email.
                             */
                            $this->_base_model->deleteUserHash($_email);

                            // Create a new salt to use
                            $_hash = Hash::unique();

                            /*
                                Insert the users email and the created salt into the 'user_hash' table via M_Users->createUserHash().
                             */
                            $this->_base_model->createUserHash([
                                'email'=>$_email, 'hash'=>$_hash
                            ]);

                            /*
                                Send the validation email via the core file Sendmail::registration (), passing in the
                                email and the created salt. Also set the status
                                to show the email has been sent.
                             */
                            SendMail::registration($_email,$_hash);
                            $this->_base_model->userAlerts([
                                'msg' => 'resend_email',
                            ]);
                        } // Not verified
                    } else {
                        /*
                            The user was not found so show the reset form as well
                            as a sutiable status message.
                         */
                        $this->_base_model->userAlerts([
                            'msg' => 'verify_not_found',
                            'form' => $this->_base_model->resetPasswordLinkForm()
                        ]);

                    } // User found
                } else {
                    $this->_base_model->userAlerts([
                        'msg' => 'incorrect_verify_link',
                        'form' => $this->_base_model->resetPasswordLinkForm()
                    ]);

                } // Send reset email
            } // User exists
        } else {
            /*
                The url does not have enough parameters so we simply set the
                message to show that the link was incorrect.
             */
            $this->_base_model->userAlerts([
                'msg' => 'incorrect_verify_link',
                'form' => $this->_base_model->resetPasswordLinkForm()
            ]);
 	  	} // isset email and hash

        // Pass the data to the view
 		$this->view('home/users', $view_data );
   	} // verify ()
}










=================================================================================================================









<?php
/**
* Front End Home Controller
*
* Controller for any functions/views called from the site root as well
* as the home page itself. These are the site home page, the login page
* and the registration page. This controller will be activated when the first
* parameter in the url does not match any files or folders within the
* controllers folder.
*
* A full explanation of how front end controllers work  and how we pass the
* information to the view can be found in '/controllers/Members.php'.
*
* @author      Steve Ball <steve@follyball.co.uk>
* @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
* @link 	   http://yoursite/
* @link    	   http://yoursite/Login
* @link 	   http://yoursite/Register
*/
class Home extends Controller
{
    // Set the access rights for the variables, including any defaults
    private $_base_model,
            $_logs;

    // Construct the class
    public function __construct () {
        $this->_base_model = $this->model('M_Users');
        $this->_logs = new Logs();
    } // __construct ()

    /**
	 * Site Home Page
	 *
	 * This is the page that will be seen when viewing the site root.
	 *
     * @param   mixed    $params     If not null, forces a 404
     * @return 	         /app/views/home/index.php
	 * @link 	         http://yoursite/
	 */
	public function index($params=null) {
        // 404 page if we have any url parameters
        if($params){Redirect::to('404');}

        // Pass the data to the view
	    $this->view(
	        'home/index',
	        [
                'page_name' => 'UAT HUB',
                'page_subtitle' => 'Home page for the UAT area',
	        ]
	    );

  	} // index()

    /**
     * Login page
     *
     * Contains the full login form along with information and help with
     * login problems. This can be accessed via the 'Login Help' link the the
     * menus but the user will also end up here upon a failed login attempt.
     *
     * Unlike the home page above, as well as passing the page title and subtitle
     * to the view, we also pass in the login form as 'form'. It is easier to set
     * this in here as we already have an open connection to model that holds it.
     * Any processing of login attempts are done via the init.php file to allow
     * logging in from any page.
     *
     * Again, we should not have any extra url parts when viewing the login page
     * so if any exist, we throw a 404 error.
     *
     * @param   mixed    $params     If not null, forces a 404
     * @return 	         /app/views/home/login.php
	 * @link 	         http://yoursite/Login
     */
    public function login($params=null) {
        // If we have parameters send to the 404 page
        if($params){Redirect::to('404');}

        /*
            If the user is already logged in, we redirect them to the home page, using the same method in Members->resetPassword().

            As we are on the full login page, when we call the form, we pass in a parameter of 'hide_help'=>true as we do not need to show the link to this page.
         */
        if($this->_base_model->isLoggedIn()){Redirect::to('/');}

        /**
         * Pass the data to the view
         * @var 	string 	View Path
         * @var 	array 	Data being passed to the view
         */
        $this->view(
            'home/login',
            [
                'page_name' => 'Login',
                'page_subtitle' => 'Login to the site or get help if you are having trouble',
                'form' => $this->_base_model->loginform(['hide_help'=>true])
            ]
        );

    } // login()

    /**
     * Registration page
     *
     * Contains the registration form and checks for any registration attempts.
     *
     * This is far more complex than either of the other methods in this file as
     * not only does it show the required data to the user but also handles any
     * registration attempts, showing a message and adding validation classes to
     * the form as well as redirecting a user away from the page if they are
     * already logged in.
     *
     * Because this method powers several different versions of the page - initial,
     * succesful post, unsuccesful post - each with their own page titles, we
     * build up the second part of the view() function as we go along, as
     * $view_dataand then pass that into the function at the end.
     *
     * Also, as we are passing it to a view that also powers other pages, we set
     * a 'page_type' so the view knows which version we are on.
     *
     * @param   mixed    $params     If not null, forces a 404
     * @return 	         /app/views/home/users.php
	 * @link 	         http://yoursite/register
     */
    public function register($params=null) {
        // 404 page if we have any url parameters
        if($params){Redirect::to('404');}

        /*
            When calling the registration page, there should be no parameters set in the url. If there are we redirect to the 404 page.

            We also need to do this if the 'allow_registration' table setting is set to off, so check both in the same if statement.
         */
        if(!SiteSettings::get('allow_registration')){Redirect::to('404'); }

        // Set the default view data.
        $view_data = [
            'page_name' => 'Register new account',
            'page_type' => 'register',
			'errors' => null,
        ];

        // If the user is already logged in, redirect them to the home page
        if($this->_base_model->isLoggedIn()){Redirect::to('/');}

        // If the form has been posted, attempt to process it
        if (Input::exists(['name'=>'register'])) {
            unset($_POST['register']);

            /*
                We no clean the $_POST data and attempt to validate it the
                same way we did in Members->edit(). However, as there is no
                existing data to check against, we do not clean the $_POST data
                or, as a result, check anything is left after cleaning.

                The only difference here is that in the registration form, the
                'Accept Terms' field is a checkbox. As a result, if it IS NOT
                checked, it will not show up in the posted data and therefore not validate correctly.

                To prevent this, we overwrite $post_data['terms'] with the value
                if it has been posted, else we create it with a value of '0' if
                it has not.
             */


            $post_data = $_POST;

            $post_data['terms'] = (isset($post_data['terms'])) ? $post_data['terms'] : null;

            $validation = $this->_base_model->validate($post_data, $type='register');

            if ($validation->passed()) {
                // Validation passed so unset unrequired fields
                unset($post_data['confirm_password']);
                unset($post_data['terms']);

                // If we are on automatic verification, set the 'status' to 1
                if(SiteSettings::get('user_verification') == 'a' || isset($params['auto_verify'])) {
                    $post_data['status'] = 1;
                }

                // Attempt the insert
                if($this->_base_model->create($post_data)) {

                    /*
                        The insert has been succesful so we run a switch statement based on the verification method that has been set.
                     */
                    switch (SiteSettings::get('user_verification')) {
                        case 'a':
                            $this->_base_model->userAlerts([
                                'msg' => 'register_success_auto',
                                'insert_id' =>  $this->_base_model->_insertId
                            ]);
                            break;
                        case 'e':
                            $this->_base_model->userAlerts([
                                'msg' => 'register_success_email',
                                'insert_id' =>  $this->_base_model->_insertId
                            ]);
                            break;
                        case 'm':
                            $this->_base_model->userAlerts([
                                'msg' => 'register_success_manual',
                                'insert_id' =>  $this->_base_model->_insertId
                            ]);
                            break;
                    }
                    /*
                        Change the page name to show that registration has been a success.
                     */
                    $view_data['page_name'] = 'Registration Succesful';

                    /*
                        If we are set to email verification, we need to send the email containing the veirfy link and place a matching record in the database to check against when the link is clicked.
                     */
                    if(SiteSettings::get('user_verification') == 'e') {
                        // Create the secure salt to use as the reference
                        $_hash = Hash::unique();

                        /*
                            Insert the users email and the created salt into the 'user_hash' table via the createUserHash() function in the model.
                         */
                        $this->_base_model->createUserHash(['email'=>$post_data['email'], 'hash'=>$_hash]);
                        /*
                            Send the validation email.
                         */
                        $this->_base_model->sendRegistrationMail($post_data['email'],$_hash);
                    }
                    /*
                        Pass the id of the inserted record to the view. This allows us to show the user their id.
                     */
                    $view_data['insert_id'] =$this->_base_model->_insertId;

                    /*
                        Enter a registration success record to the activity log
                     */
                    $this->_logs->register_success(
                        $view_data['insert_id']
                    );

                } else {
                    $this->_base_model->userAlerts([
                        'msg' => 'create_fail',
                        'errors' => ['unspecified', '']
                    ]);
                } // attempt insert
            } else {
                $this->_base_model->userAlerts([
                    'msg' => 'create_fail',
                    'errors' => $validation->errors()
                ]);


                /*
                    Send the form to the view with the errors included to show validation on the fields.
                 */
                $view_data['form'] =$this->_base_model->defaultForm([
                    'errors' => $validation->errors(),
                    'version' => 'create',
                    'area' => 'user',
                    'data' => $post_data,
                ]);
            } // check validation
        } else {
            /*
                There has been no registration attempt so simply show the form
                in it's initial state.
             */
            $view_data['form'] = $this->_base_model->defaultForm([
                'errors' => null,
                'version' => 'create',
                'area' => 'user',
            ]);
        } // if registration attempt

        // Pass the data to the view
        $this->view('home/users', $view_data);

    } // register()
}











=================================================================================================================











<?php

/**
 * Admin Users Controller
 *
 * Controller for any functions called from any urls starting with
 * http://yoursite/Admin/Users.
 *
 * A full explanation of how front end controllers work  and how we pass the
 * information to the view can be found in '/controllers/Members.php'.
 *
 * @author      Steve Ball <steve@follyball.co.uk>
 * @copyright   Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link        http://yoursite/Admin/Users
 * @link        http://yoursite/Admin/Users/{User}
 * @link        http://yoursite/Admin/Users/Add
 * @link        http://yoursite/Admin/Users/Listing
 * @link        http://yoursite/Admin/Users/Edit/{User}
 * @link        http://yoursite/Admin/Users/Delete/{User}
 */
class Users extends Controller
{
    // Set the access rights for the variables, including any defaults
    private $_base_model,
			$_logs;

    // Construct the class
	public function __construct () {
		$this->_base_model = $this->model('M_Users');
        $this->_logs = new Logs();
    } // __construct ()


    /**
     * Add User page
     *
     * Contains the add user form and checks for any registration attempts.
     *
     * This works the same as the frontend home->register() method with a
     * few differences based on being in the admin area. The differences
     * will be commented to explain.
     *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	         /app/views/admin/users.php
     * @link 	         http://yoursite/Admin/Users/Add
     */
    public function add($_args=null) {
        // If we have parameters send to the 404 page
        if($_args){Redirect::to('404');}

        //Set the default view data.
        $view_data = [
            'page_name' => 'Create new account',
            'page_type' => 'register',
            'errors' => null,
        ];


        // If the form has been posted, attempt to process it
        if (Input::exists(['name'=>'add_'.strtolower($this->_single_name)])) {
            unset($_POST['add_'.strtolower($this->_single_name)]);

            $post_data = $_POST;

            $validation = $this->_base_model->validate($_POST, $post_data='insert');

            if ($validation->passed()) {
                // Validation passed so unset unrequired fields
                unset($post_data['confirm_password']);

                /*
                    As the user is being created in the admin area, we automatically verify them.
                 */
                $post_data['status'] = 1;

                // Attempt the insert
                if($this->_base_model->create($post_data)) {
                    // The insert was successful
                    $this->_base_model->userAlerts([
                        'msg' => 'create_success',
                        'insert_id' =>  $this->_base_model->_insertId
                    ]);
                    $this->_base_model->userAlerts([
                        'msg' => 'create_fail',
                        'errors' => ['unspecified', '']
                    ]);
                } // attempt insert
            } else {
                $this->_base_model->userAlerts([
                    'msg' => 'create_fail',
                    'errors' => $validation->errors()
                ]);
            } // check validation
        } // form posted

        /*
            All we need to do now is pass in the form with any errors from a previous post.
         */
        $view_data['form'] = $this->_base_model->defaultForm([
            'errors' => $validation->errors(),
            'version' => 'create',
            'area' => 'admin',
        ]);

        // Pass the data to the view
        $this->view('admin/users',$view_data);

    } // add()

	/**
	 * Delete a user from the database
	 * @param  int      $data   User id
	 * @return boolean          Delete status
	 */
	 /**
	  * Delete a user
	  *
	  * Shows both the button to delete the specified user, along with processing
	  * the deletion when the button is clicked.
	  *
	  * @param  int/string/email    $_user   User reference
	  * @return 	        /app/views/admin/users.php
	  * @example 	    http://yoursite/Admin/Users/Delete/{User}
	  *
	  **/
	public function delete($_user=null) {
		// Default view data
		$view_data = [
			'page_name' => 'Delete User',
			'page_type' => 'delete',
		];

		/*
			Check if the user has been passed in

			If a user has been passed in, we have two options. If the user
			actually exists, we need to show the delete form, otherwise we need
			to show a message that the user does not exist.

			If a user has not been passed in, we redirect to the 404 page.
		 */
		if(!$_user) {
			Redirect::to('404');
		} else {
			/*
				There is a user passed in so we now check that they exist.

				If it does, we process any delete requests that exist, otherwise
				we show the delete form.

				The process is the same as edit() in this file which has extra
				commenting, aside from the fact that the function we use is
				M_Users->delete().
			*/
			if($this->_base_model->find($_user)) {
				// Check if the delete form has been posted
				if (Input::exists(['name'=>'delete_'.strtolower($this->_base_model->_single_name)])) {

					// The delete form has been posted so unset the form button
					unset($_POST['delete_'.strtolower($this->_single_name)]);

					// Attempt to delete the user
					if($this->_base_model->delete($this->_base_model->data()->id, $this->_base_model->data()->username)) {
						$view_data['message'] = $this->_base_model->userAlerts('admin_account_delete_success');
					}
				} else {
					// The delete form has not been posted so show it
					$view_data['delete_form'] = $this->_base_model->deleteForm([
						'version' => 'delete',
						'area' => 'admin',
					]);
				} // form posted
			} else {
				// No user found so show a message
				$view_data['message'] = $this->_base_model->userAlerts('admin_not_found');
			} // check user exists
		} // check user set

		// Pass the data to the view
		$this->view('admin/users', $view_data);
	} // delete()

    /**
     * Edit a user
     *
     * Shows both the update and change password form for the specified
     * user, including any validation formatting, as well as attempting
     * to process any submissions of these.
     *
     * The user is passed in as the last part of the url and this can
     * either be their username, id or email address.
     *
     * This works the same as the frontend Members->edit() method with a
     * few differences based on being in the admin area. The differences
     * will be commented to explain.
     *
     * @param  int/string/email    $_user   User reference
     * @return 	        /app/views/admin/users.php
     * @example 	    http://yoursite/Admin/Users/Edit/{User}
     *
     **/
    public function edit($_user=null) {
        // Set the default view data.
        $view_data = [
            'page_name' => 'Edit User',
            'page_type' => 'edit',
        ];

        /*
            Check if the user has been passed in

            If a user has been passed in, we have two options. If the user
            actually exists, we need to show the edit form, otherwise we need
            to show a message that the user does not exist.

            If a user has not been passed in, we redirect to the 404 page.
         */
        if(!$_user) {
            Redirect::to('404');
        } else {
            /*
                From this point, we follow the same process as in Members->edit()
                other than when the username has been changed. As this is what is
                used as the identifier in the url, if it is changed, the link will
                no longer be correct, so we redirect to the new name and set the
                message to a session.
             */
            if($this->_base_model->find($_user)) {
                // Pass the user status to format the page
                $view_data['user_status'] = $this->_base_model->data()->status;

                // If the form has been posted, attempt to process it
                if (Input::exists(['name'=>'update_'.strtolower($this->_single_name)])) {
                    unset($_POST['update_'.strtolower($this->_single_name)]);

                    $post_data = stripPostData ($_POST, $this->_base_model->data());

                    $validation = $this->_base_model->validate($post_data, $type='update', $this->_base_model->data()->id);

                    if($post_data) {
                        if ($validation->passed()) {
                            // Validation passed so attempt the update
                            if($this->_base_model->update(
                                $this->_base_model->data()->id, $post_data)
                            ) {
                                /*
                                    The update was successful.

                                    If the username has been changed, we need to
                                    redirect the user to the edit page of the new
                                    username as the old one no longer exists. We
                                    also need to set the message to a $_SESSION
                                    to make sure the new page picks it up.

                                    We do this by checking the posted username
                                    field against the existing username.
                                 */
                                 // Update successful
                                $this->_base_model->userAlerts([
                                     'msg' => 'update_success',
                                ]);

                                if(isset($post_data[$this->_base_model->_display_column]) && $this->_base_model->data()->group_name !== $post_data[$this->_base_model->_display_column]) {
             						Redirect::to('/Admin/'.$this->_base_model->_admin_dir.'/Edit/'.slugify($post_data[$this->_base_model->_display_column]));
    								}

                                // Re-find the user to pass updated details to the view
                                $this->_base_model->find($this->_base_model->data()->id);

                            } else {
                                // Update failed
                                $view_data['message'] = $this->_base_model->userAlerts('update_failed_unspecified');
                            } // attempt update
                        } else {
                            // Validation failed so send the message and errors
                            $view_data['message'] = $this->_base_model->userAlerts('validation_failed');
                            $view_data['errors'] = $validation->errors();
                        } // check validation
                    } else {
                    // No data had changed so just set the status
                    $view_data['message'] = $this->_base_model->userAlerts('account_update_no_change');
                } // data changed
            } // update password form posted

            // CHeck for an process the change password form
            if (Input::exists(['name'=>'reset_password'])) {
                unset($_POST['reset_password']);

                $post_data = stripPostData ($_POST, $this->_base_model->data());

                if($post_data) {
                    $_rules = stripValidateRules (
                        $post_data,
                        $this->_base_model->validation_rules()
                    );

                    $_validate = new Validate();
                    $validation = $_validate->check(
                        $post_data,
                        $_rules
                    );

                    if ($validation->passed()) {
                        unset($post_data['confirm_password']);
                        $post_data['salt'] = Hash::salt(32);
                        $post_data['password'] = Hash::make(Input::get('password'), $post_data['salt']);

                        if($this->_base_model->update($this->_base_model->data()->id, $post_data)) {
                            $view_data['message'] = $this->_base_model->userAlerts('admin_pw_update_success');

                        } else {
                            $view_data['message'] = $this->_base_model->userAlerts('pw_update_failed_unspecified');
                        }
                    } else {
                        $view_data['message'] = $this->_base_model->userAlerts('validation_failed');
                        $view_data['errors'] = $validation->errors();
                    } // attempt update
                } else {
                    $view_data['message'] = $this->_base_model->userAlerts('no_change');
                } // check validation
            } // reset password form posted

            // Re-find the user to pass updated details to the view
            $this->_base_model->find($_user);
            // Pass the user status to format the page
            $view_data['user_status'] = $this->_base_model->data()->status;

            $view_data['edit_form'] = $this->_base_model->defaultForm([
                'errors' => (isset($view_data['errors'])) ? $view_data['errors'] : '',
                'version' => 'edit',
                'area' => 'admin',
                'data' => $this->_base_model->data()
            ]);

            $view_data['password_form'] = $this->_base_model->resetPasswordForm([
                'errors' => (isset($_params['errors'])) ? $view_data['errors'] : '',
            ]);
        } else {
            // The user was not found so set the message
            $view_data['message'] = $this->_base_model->userAlerts('admin_not_found');
        } // check user exists
    } // check user set

    // Pass the data to the view
    $this->view('admin/users',$view_data);
} // edit ()

    /**
     * Users Overview and User Profile Page
     *
     * We actually power two different pages from this method. If no arguments
     * are passed in, we are on the members overview page. If  an argument has
     * been passed in, it is assumed to be a username so we will attempt to show
     * a user profile.
     *
     * @param  string   $_args  User reference if in profile mode
     * @return 	        /app/views/home/admin/users.php
     * @link        	http://site.com/Admin/Users/
     * @link        	http://site.com/Admin/Users/{Username}
     *
     */
    public function index($_args=null) {
        /*
            If there is anything in $_args, we are assuming that we are looking at a users profile page, otherwise, we are on the members overview page.
         */
        if ($_args) {
            /*
                As we are attempting to show a users profile, we need to first make sure that the user exists. If they do not, we simply pass the page name and page type, along with a message.

                If they do exist, then we replaced the usergroup id that has been stored with the actual group name.
             */
            if (!$this->_base_model->find($_args)) {
                // User does not exist so set relevent view data
                $view_data = [
                    'page_name' => 'User not found',
                    'page_type' => 'profile',
                    'message' => $this->_base_model->userAlerts('admin_not_found'),
                ];
            } else {
                /*
                    The user exists so store their data against a variable called $_user_data.
                 */
                $_user_data = $this->_base_model->data();

                /*
                    As we want to replace the user group id with the actual name, we set the M_Usergroups model to $_groups and then run the find() function to get the details from the users group id.

                    We then overwrite the group in $_user_data with the name of the group.
                 */
                $_groups = $this->model('M_Usergroups');
                $_groups->find($_user_data->group);
                $_user_data->group = $_groups->data()->group_name;

                /*
                    Set the page name as a friendly one including the users username, as well as passing in the data as 'userdata'. This is what will be checked in the view to decide whether or not there is a record to show.
                 */
                $view_data = [
                    'page_name' => $_user_data->username.'\'s Profile',
                    'page_type' => 'profile',
                    'user' => $_user_data,
                    'user_status' => $_user_data->status
                ];

                if($this->_base_model->getLogs ($_user_data->user_id)) {
                    $view_data['logs'] = $this->_base_model->getLogs ($this->_base_model->data()->id);
                    foreach ($view_data['logs'] as $key => $value) {
                        if($this->_base_model->find($value->record)) {
                            $view_data['logs'][$key]->record_name = $_list[$value->record]->{$this->_base_model->_display_column};
                        } else if($value->type == '3') {
                            $view_data['logs'][$key]->record_name = $value->fields[0]->value . ' ('.$value->record.')';
                        } else {
                            $view_data['logs'][$key]->record_name = $value->record.' (Deleted)';
                        }

                        $date = new DateTime ($value->stamp);
                        $view_data['logs'][$key]->updated = $date->format('d/m/Y g:ia');
                    }
                }
            }  // find user

        } else {
            /*
                No arguments have been passed in so we are on the overview page.

                As well as the page name, we pass in the count of users and a listing of all users via various functions in $this->_base_model.
             */
            $view_data = [
                'page_name' => 'Members Overview',
                'page_type' => 'overview',
                'usercount' => $this->_base_model->count(),
                'latestuser' => $this->_base_model->mostRecent(),
            ];

            $_list = $this->_base_model->listing ();

        } // if $_args

        // Pass the data to the view
        $this->view('admin/users',$view_data);
    } // index()

    /**
     * Show a listing of all Users
     *
     * Collects a list of users from the M_Users->listing() passes it to the view.
     *
     * $_args is not used for anything other than to cause a 404
     * error if there is anything after /Listing in the url.
     *
     * @param   mixed    $_args     If not null, forces a 404
     * @return 	        /app/views/home/admin/users.php
     * @example 	http://yoursite/Admin/Users/Listing
     *
     **/
    public function listing($_args=null) {
        // 404 page if we have any url parameters
        if($_args){Redirect::to('404');}

        // Pass the data to the view
        $this->view(
            'admin/users',
            [
                'page_name' => 'Users List',
                'page_type' => 'listing',
                'list' => $this->_base_model->listing()
            ]

        ) ;
    } // listing ()

}










=================================================================================================================










<?php

/**
 * Database class
 *
 * Controls all database CRUD functions as well as opening up an instance
 * of this class.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 *
 */

// Include the inititisation file
require_once 'src/init.php';

class DB
{
	// Set any private variables
    private static $_instance = null,
                   $_instance_old = null,
                   $_instance_data = null;
    private $_pdo,
            $_query,
            $_error = false,
            $_results,
            $_count = 0;

	/**
	 * Construct the database connection
	 *
	 *	Opens up a connection to the database and assigns it to
	 *	$this->_pdo to make it re-usable.
	 *
	 * The connection parameters are called using the values set in
     * '/app/core/SiteSettings.php->db()'
	 *
	 * @return 	Database connection
	 */
    private function __construct($type='new') {

        $db = SiteSettings::db();

        if($type=='old') {$db['dbname'] = 'dev_scripting';}
        if($type=='data') {$db['dbname'] = 'selenium_data';}

        try {
            $this->_pdo = new PDO('mysql:host=' . $db['host'] . ';dbname=' . $db['dbname'],  $db['username'], $db['password']);

        } catch(PDOException $e) {
            die($e->getMessage());
        }
    } //__construct ()

	/**
	 * Create a new Database instance
	 *
	 * Creates a new instance of the database class that can be assigned to a
	 * variable and re-used.
	 *
	 * @return Database connection
	 * @example $this->db = DB::dbConnect();
	 */
    public static function dbConnect() {
		// If an instance has not already been set, set it
        if(!isset(self::$_instance)) {
            self::$_instance = new DB();
        }
		// Return the instance
        return self::$_instance;
    } // dbConnect()

    public static function dbConnect_dev() {
		// If an instance has not already been set, set it
        if(!isset(self::$_instance_old)) {
            self::$_instance_old = new DB($type='old');
        }
		// Return the instance
        return self::$_instance_old;
    } // dbConnect()


    public static function dbConnect_data() {
        // If an instance has not already been set, set it
        if(!isset(self::$_instance_data)) {
            self::$_instance_data = new DB($type='data');
        }
        // Return the instance
        return self::$_instance_data;
    } // dbConnect()

	/**
	 * Perform a query on an SQL statement
	 *
	 * All of the variables created are private so cannot be called
	 * externally, but each has it's own public function.
	 *
	 * If you are using parameters, you need to replace the position where
	 * their values would be with ?
	 *
	 * self::db()->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash));
	 *
	 * @param  string 	$sql    SQL statement
	 * @param  array  	$params Paremeters to add to the string
	 * @return array         	Query results, errors and count
	 */
    public function query ($sql, $params = array()) {
        //echo $sql;
        //nicePrint_r($params);



		// Set error to false by default
        $this->error = false;
		/*
			We attempt to prepare the query and if it is succesful,
			we bind the parameters and execute it.
		 */
        if ($this->_query = $this->_pdo->prepare($sql)) {
			/*
				The query is prepared so we have to check to see if
				there are any parameters.

				If there are we loop through them annd then bind them
				to the query
			 */

			// Set the counter to one
            $x = 1;

			// Check to see if there are any parameters
            if(count($params)) {
				/*
					There are parameters so we loop through them and
					bind each
				 */
                foreach($params as $param) {
					// Bind the parameter with it's counter position
                    $this->_query->bindValue($x, $param);

					// Increment the counter
                    $x++;
                }
            }

			/*
				Now that the parameters have been bound, we try to execute
				the query.
				If succesful we set the results and row count, otherwise we
				set the error.
			 */
            if($this->_query->execute()) {
				// The query executed succesfully so set the results and count
                $this->_results = $this->_query->fetchAll(PDO::FETCH_OBJ);
                $this->_count = $this->_query->rowCount();
            } else {
				// The query failed so set error to true
                $this->_error = true;
            }
        } // prepare

		// Return anything that has been set as a result of the wquery attempt
        return $this;

    } // query ()


	/**
	 * Perfom a simple action on a table
	 *
	 * Allows you to perform a quick SELECT or DELETE on a table when
	 * only one parameter needs to be set.
	 *
	 * @param  string $action SELECT/DELETE
	 * @param  string $table  The name of the table
	 * @param  array  $where  An array of parameters - field, operator, value
	 * @return array          The output from the query() function in this class
	 */
    public function action ($action, $table, $where = array()) {
		/*
			A $where array MUST contain exactly three paramenters for this to
			work so the first thing to do is check that.

		 */
        if (count($where) === 3) {
			// There are three parameters so set the available operators
            $operators = array('=', '>', '<', '>=', '<=');

			/*
				As the $where array is set as field, operator, value we can easily set them to named variables
			 */
            $field = $where[0];
            $operator = $where[1];
            $value = $where[2];

			/*
				The next check is to make sure that the supplied operator is
				one of the ones set in $operators
			 */
            if (in_array($operator, $operators)) {
				// The operator matches so create the SQL statement
                $sql = "{$action} FROM {$table} WHERE {$field} {$operator} ?";

				// Try to execute the query using the query() function.
                if(!$this->query($sql, array($value))->error()) {

					// Return anything returned from the query
                    return $this;
                }
            } // Operator check
        }// count check

        return false;
    } // action ()

	/**
	 * Perform a quick select on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example get('users', array('joined', '>', '2017-01-01'))
	 */
    public function get ($table, $where) {
        return $this->action('SELECT *', $table, $where);
    } // get ()

	/**
	 * Perform a quick delete on a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  $where  An array of parameters - field, operator, value
	 * @return 	Query results
	 * @example delete('users', array('joined', '>', '2017-01-01'))
	 */
    public function delete ($table, $where) {
        return $this->action('DELETE', $table, $where);
    } // delete ()


	/**
	 * Insert a row into a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example insert('users', array('username' => 'SteveB', 'active' => '1'))
	 */
    public function insert ($table, $fields = array()) {
		/*
			The $fields array will have a $key => $value pairing for
			each field having data inserted. The $key will matche the
			table field name and the $value will be the value to insert.

			We use array_keys extract the keys from the $fields array
			and assigned them to $keys.
		 */
        $keys = array_keys($fields);

		// Create a default $values variable
        $values = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create a ? to
			place in the fields section of the insert statement
		 */
        foreach($fields as $field) {
			// Add a placeholder to $values
            $values .= '?';

			// If we are not on the last pairing, add a comma to $values
            if ($x < count($fields)) {
                $values .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach

		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the fields and values.

			Using the example at the top of this function, the statement would be
			INSERT INTO `users` (`username`, `active`) VALUES (?, ?)

			We then pass the statement into the query() function
		 */
        $sql = "INSERT INTO `{$table}` (`" . implode('`,`', $keys) . "`) VALUES ({$values})";


		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error()) {
			// Return anything returned from the query
			return true;
        }

        return false;

    } // insert()


	/**
	 * Update a row in a table
	 *
	 * @param  	string 	$table 	Table name
	 * @param   int 	$id     The id of the row to update
	 * @param  	array  	$fields An array of table fields and values
	 * @return 	Query results
	 * @example update('users', 1, array('username' => 'SteveBNew', 'active' => '0'))
	 */
    public function update ($table, $id, $fields = array(), $id_column=null) {
		// Create a default $set variable to hold the values and fields
        $set = '';

		// Set the counter to 1
        $x = 1;

		/*
			Loop through the fields and for each one, create an x=? to
			place in the values section of the update statement
		 */
        foreach ($fields as $name => $value) {
			// Add a field = ?
            $set .= "`{$name}` = ?";

			// If we are not on the last pairing, add a comma to $set
            if ($x < count($fields)) {
                $set .= ', ';
            }

			// Increment the counter
            $x++;
        } // foreach


		/*
			We now have all the information to build the SQL statement by
			inserting the passed table as well as the values in $set.

			Using the example at the top of this function, the statement would be
			UPDATE `users` SET `username`='SteveBNew',`active`='0' WHERE id=1

			We then pass the statement into the query() function
		 */

        $id_column = ($id_column) ? $id_column: 'id';
        $sql = "UPDATE `{$table}` SET {$set} WHERE {$id_column} = {$id}";
		// Try to execute the query using the query() function.
        if (!$this->query($sql,$fields)->error()) {
			// Return anything returned from the query
			return true;
        }

        return false;

    } // update ()

	//////////////////////////////////////////////////
	// Public functions to call private variables  //
	//////////////////////////////////////////////////

	// Allow a single row of results data to be called publically
    public function first () {
        return $this->results()[0];
    }

	// Allow a results set data to be called publically
    public function results () {
        return $this->_results;
    }

	// Return a row count
    public function count () {
        return $this->_count;
    }

	// Return an error
    public function error () {
        return $this->_error;
    }

     //  Get the id of the last inserted row
    public function insertId () {
       return $this->_pdo->lastInsertId();
    } // insertId ()

}











=================================================================================================================










<?php

/**
 * Logs class
 *
 * Manages the activity logs. Still only a concept at the moment.
 *
 * Places details of updates in an 'activity' table in the database,
 * along with any other relevant tables such as reasons for login
 * failures.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 *
 * TODO: Failed verification attempts, Password reset requests
 *
 */

// Include the inititisation file
require_once '/src/init.php';

class Logs
{
	// Set any private variables
    private $_db, // used when opening a connection to the database
            $_params, // default parameter name in functions where a more unique one is not required
            $_record, // default parameter for any functions where a record is passed in
            $_results, // used to build and store record listings with the id as the key
            $_results_sort, // stores a list of activity dates and is usedd to sort the logs
            $_table, // default parameter for any functions where a table is passed in
            $_types, // used to store a listing of activity types
            $_user; // used for any user references

    /**
     * Get a list of activity types
     *
     * Querys the 'activity_types' table and returns all records as an object. We loop
     * through this and build a new array called $_list with the same data but
     * with the key now set to the record id.
     *
     * @return array  List of Records
     */
    private static function activity_types () {

        // Open a connection to the database
        $_db = DB::dbConnect();

        // Create an empty array to build the new list against
        $_results = [];

        // Query the table and instantly loop through it
        foreach ($_db->query('SELECT * FROM `activity_types`')->results() as $key => $value) {
            /*
                Create a new key based on the record id and set all the details
                of the record to it.
             */
            $_results[$value->id] = $value;

            /*
                As the id is the key, we do not need it in the details so we
                unset it.
             */
            unset($_results[$value->id]->id);
        }
        // Return the results as an array
        return $_results;
    } // activity_types()

    /**
     * Get activity logs
     *
     * Retrieves the activity logs for the specified table and, if requested,
     * the logs for a specified record from that table.
     *
     * @param  string       $_table     Name of the table
     * @param  int/null     $_record    Optional id of a record
     * @return array        Activity log records
     */
    public static function get_table ($_table, $_record=null) {

        // Open a connection to the database
        $_db = DB::dbConnect();

        /*
            We have two different types of query that we perform. If a record has
            been specified we query the 'activity' table's 'target' column for a
            record that matches the passed in $_table AND the record matches the
            one passed in.

            If $_record has not been specified, we simply query on the table.
         */
        if($_record) {
            $_results = $_db->query('SELECT * FROM `activity` WHERE `target` = ? AND `record` = ?', [$_table, $_record])->results();
        } else {
            $_results = $_db->get('activity',['target','=',$_table])->results();
        }

        /*
            Now we have the required logs stored to $_results, as long as they are
            not empty, we loop through  them manipulating and adding information
            where required.
         */
        if ($_results) {

            // There are records stored in $_results so loop through them
            foreach ($_results as $key => $value) {

                /*
                    For failed inserts, succesful or failed updates and succesful
                    deletes, we also add entries to the 'activity_table_updates'
                    table. On each loop, we query that table for a 'ref' that
                    matches the activity record id and if we find a match, we
                    add it to results as 'fields'.
                */
                $table_results = $_db->get('activity_table_updates',['ref','=',$value->id]);
                if($table_results->count()) {
                    $_results[$key]->fields = $table_results->results();
                }

                /*
                    For display purposes, we create a new value called 'd_area'
                    to display whether this was logged in the frontend or the
                    admin area.

                    This is set by using a switch statement on the records
                    'area' value.
                 */
                switch ($value->area) {
                    case 'a':
                        $_results[$key]->d_area = 'Admin';
                        break;
                    case 'f':
                        $_results[$key]->d_area = 'Frontend';
                        break;
                    default:
                        $_results[$key]->d_area = 'Frontend';
                        break;
                }

                /*
                    Again for display purposes, we create a new value called
                    'd_status' in the same way we did with 'd_area' above but
                    using the records 'status' value.
                 */
                switch ($value->status) {
                    case 'p':
                        $_results[$key]->d_status = 'Passed';
                        break;
                    case 'f':
                        $_results[$key]->d_status = 'Failed';
                        break;
                    default:
                        $_results[$key]->d_status = 'Passed';
                        break;
                }

                /*
                    Next up, we want to show a text version of the integer stored
                    for 'type' and set that to 'd_type'. The activity_types()
                    function retrieves the list of these from the database so we
                    set that to a variable $_types.

                    We then use this, passing in the record's type and then
                    request it returns the 'type_name' column value. Just to keep
                    it tidy, we set it to start with a capital letter before
                    assigning it to 'd_type'.
                 */
                $_types = self::activity_types();
                $_results[$key]->d_type = ucfirst($_types[$value->type]->type_name);

                /*
                    Next we add the 'username' of the user to 'd_user' by using the find() and data() functions in the M_Users model.
                 */
                $_users = new M_Users();
                $_users->find($value->user);
                $_results[$key]->d_user = $_users->data()->username;

                /*
                    Finally, we build a new array called $_results_name, simply
                    to store the dattime stamp of the activity record. This will
                    be used as the data to sort the final results on.
                 */
                $_results_sort[$key] = $value->stamp;
            }

            // Sort the $_results in descending order using $_results_name as an order
            array_multisort($_results_sort, SORT_DESC, $_results);

            // Return the all of the logs, inclusing any manipulation
            return $_results;
        }

        // No logs were found so simply return null
        return null;
    } // get_table ()





    private static function insert_activity ($_params) {

        $db = DB::dbConnect();
        $db->insert(
            'activity',
            $_params
        );
        return $db->insertId();
    }

    private static function table_updates ($_params) {
        $db = DB::dbConnect();

        $db->insert(
            'activity_table_updates',
            $_params
        );

        return $db->insertId();
    }

    public static function delete_table_success ($_params) {
        $_user = new M_Users();
        $area = (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? 'a': 'f';

        $id = self::insert_activity ([
            'user' => $_user->currentUser(),
            'stamp' => date('Y-m-d H:i:s'),
            'type' => 3,
            'status' => 'p',
            'area' => $area,
            'target' => $_params['target'],
            'record' => $_params['record']
        ]);

        $data = [
            'ref' => $id,
            'value' => $_params['name']
        ];

        self::table_updates ($data);
    }

    public static function insert_table_success ($_params) {
        $_user = new M_Users();
        $area = (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? 'a': 'f';

        $_params['type'] = 1;
        $_params['area'] = $area;
        $_params['status'] = 'p';
        $_params['user'] = $_user->currentUser();
        $_params['stamp'] = date('Y-m-d H:i:s');

        self::insert_activity ($_params);
    } // insert_table_success ()

    public static function insert_table_fail ($_params) {
        $_user = new M_Users();
        $area = (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? 'a': 'f';

        $_params['type'] = 1;
        $_params['area'] = $area;
        $_params['status'] = 'f';
        $_params['user'] = $_user->currentUser();
        $_params['stamp'] = date('Y-m-d H:i:s');

        foreach (['errors', 'post'] as $value) {
            if (isset($_params[$value])) {
                $$value = $_params[$value];
                unset($_params[$value]);
            }
        };

        $id = self::insert_activity ($_params);

        if(isset($errors)) {
            $_data = [];
            foreach ($errors as $key => $value) {
                $_data[$key] = $post[$key];
                if (empty($_data[$key])) {
                    $_data[$key] = 'null';
                } else {
                    $_data[$key] = $value;
                }
            }

            foreach ($_data as $key => $value) {
                $data = [
                    'ref' => $id,
                    'field' => $key,
                    'value' => $value
                ];

                self::table_updates ($data);
            }
        }
    } // insert_table_fail ()
    # public static function register_fail ($errors, $post)
    public static function register_fail ($params) {
        // TODO: put password length and username lengths in settings
        //nicePrint_r($errors, 'Errors');
        //nicePrint_r($post, 'Post');
        //
        foreach (['errors', 'post'] as $value) {
            if (isset($params[$value])) {
                $$value = $params[$value];
                unset($params[$value]);
            }
        };

        $_data = [];
        foreach ($errors as $key => $value) {
            $_data[$key] = $post[$key];

            if (empty($_data[$key])) {
                $_data[$key] = 'null';
            } else if ($key == 'password' || $key == 'confirm_password') {
                if(strlen($_data[$key]) < 6){
                    $_data[$key] = 'min_length';
                } else {
                    if ($key == 'confirm_password') {
                        $_data[$key] = 'no_match';
                    }
                }
            } else if ($key == 'username') {
                if($value == 'Username already exists') {
                    $_data[$key] = 'exists';
                } else if (strlen($_data[$key]) < 6){
                    $_data[$key] = 'min_length';
                } else if (strlen($_data[$key]) > 20){
                    $_data[$key] = 'max_length';
                } else {
                    $_data[$key] = 'preg_match';
                }
            } else if ($key == 'email') {
                if($value == 'Email already exists') {
                    $_data[$key] = 'exists';
                } else {
                    $_data[$key] = 'preg_match';
                }
            }


        }

        $_params['type'] = 6;
        $_params['status'] = 'f';
        $_params['area'] = 'f';
        $_params['stamp'] = date('Y-m-d H:i:s');

        $id = self::insert_activity ($_params);

        self::insert_failed_register ($_data, $id);
    } // register_fail (_

    public static function update_table_success ($_params) {
        $_user = new M_Users();
        $area = (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? 'a': 'f';

        $id = self::insert_activity ([
            'area' => $area,
            'user' => $_user->currentUser(),
            'stamp' => date('Y-m-d H:i:s'),
            'type' => 2,
            'status' => 'p',
            'target' => $_params['target'],
            'record' => $_params['record']
        ]);
        unset($_params['new']['modified']);
        foreach ($_params['new'] as $key => $value) {
            $data = [
                'ref' => $id,
                'field' => $key,
                'value' => $value,
                'old_value' => $_params['old'][$key]
            ];
            self::table_updates ($data);
        }
    } // update_table_success

    public static function update_table_fail ($_params) {
        $_user = new M_Users();
        $area = (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? 'a': 'f';

        $_params['type'] = 2;
        $_params['area'] = $area;
        $_params['status'] = 'f';

        $_params['stamp'] = date('Y-m-d H:i:s');

        $id = self::insert_activity ([
            'area' => $area,
            'user' => $_user->currentUser(),
            'stamp' => date('Y-m-d H:i:s'),
            'type' => 2,
            'status' => 'f',
            'target' => $_params['target'],
            'record' => $_params['record']
        ]);

        foreach (['errors', 'post'] as $value) {
            if (isset($_params[$value])) {
                $$value = $_params[$value];
                unset($_params[$value]);
            }

        };

        if(isset($errors)) {
            self::field_errors ($id, $errors, $post);
        }

    } // update_table_fail ()

    public static function login_fail ($params) {

        $id = self::insert_activity ([
            'area' => (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? 'a': 'f',
            'stamp' => date('Y-m-d H:i:s'),
            'type' => 4,
            'status' => 'f'
        ]);

        $params['ref'] = $id;

        self::insert_failed_login ($params);
    }


    public static function update_table_no_change ($_params) {
        $_user = new M_Users();
        $area = (explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL))[1] == 'Admin') ? 'a': 'f';

        $id = self::insert_activity ([
            'area' => $area,
            'user' => $_user->currentUser(),
            'stamp' => date('Y-m-d H:i:s'),
            'type' => 2,
            'status' => 'f',
            'target' => $_params['target'],
            'record' => $_params['record']
        ]);

        $data = [
            'ref' => $id,
            'field' => 'All fields',
            'value' => 'No data was changed'
        ];

        self::table_updates ($data);
    } // update_table_no_change ()




    private static function field_errors ($id, $errors, $post) {

        $_data = [];

        foreach ($post as $key => $value) {

            if(isset($errors[$key])) {
                $_data[$key] = $errors[$key];

                if (empty($_data[$key])) {
                    $_data[$key] = 'null';
                } else {
                    $_data[$key] = $errors[$key];
                }
            }

        }

        foreach ($_data as $key => $value) {
            $data = [
                'ref' => $id,
                'field' => $key,
                'value' => $value
            ];

            self::table_updates ($data);
        }
    }













    private static function insert_failed_register ($data, $id) {

        foreach ($data as $key => $value) {
            $_data[] = [
                $id, $key,$value
            ];
        }



        $values = array();
        foreach($_data as $key => $value){
          $_value = "(".$value[0].",'".$value[1]."','".$value[2]."')";
          array_push($values,$_value);
        }
        $values_ = implode(",",$values);

        $sql = 'INSERT INTO `activity_failed_registrations`(`ref`, `field`, `value`) VALUES ' . $values_;
        $db = DB::dbConnect();

        $db->query($sql);
    }

    private function insert_failed_login ($data) {

        $db = DB::dbConnect();
        $db->insert(
            'activity_failed_logins',
            $data
        );
    }



    public static function register_success ($id) {
        $_params['type'] = 6;
        $_params['status'] = 'p';
        $_params['user'] = $id;
        $_params['area'] = 'f';
        $_params['stamp'] = date('Y-m-d H:i:s');

        self::insert_activity ($_params);
    }





    public static function login_success ($var=null) {
        $_user = new M_Users();
        $_params['type'] = 4;
        $_params['status'] = 'p';
        $_params['user'] = $_user->currentUser();
        $_params['area'] = ($var=='admin') ? 'a':'f' ;
        $_params['stamp'] = date('Y-m-d H:i:s');

        self::insert_activity ($_params);
    }

    public static function logout_success ($var) {
        $_user = new M_Users();
        $_params['type'] = 5;
        $_params['status'] = 'p';
        $_params['user'] = $_user->currentUser();
        $_params['area'] = ($var=='admin') ? 'a':'f' ;
        $_params['stamp'] = date('Y-m-d H:i:s');

        self::insert_activity ($_params);
    }


}











=================================================================================================================











<?php

/**
 * Users Model
 *
 * This is the default model for any data relating to users and contains the
 * standard functions for data manipulation, insertion, deletion retrieval and
 * displays.
 *
 * Note that Users have a lot more functionality than most sections so there is
 * a lot more to this one than most models will contain. As a result, this file
 * is used as a reference for all other models and therefore contains a lot
 * more commenting. To find out more information on the functions in another
 * model, use the same named one here as a guide.
 *
 * The functions are split into two sections - standard ones that are generally
 * used in all models such as insert, update, delete, display and retrieval ones
 * and model specific ones which cover functionality only relating to this model.
 *
 * An functions that have examples in the comments are shown as being called from
 * another file so include instantiation of the model. To use them within this
 * model, they can be called with $this->.
 *
 * @package Core
 * @author  Steve Ball <steve@follyball.co.uk>
 * @copyright Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 */

/*
    Include the initiation file

    This file includes the required App and Controller core files, all functions
    that are used, enables the autoloading of classes and handles any login/logout
    requests and checks.
 */
require_once '/src/init.php';

class M_Users
{
    /*
        Declare all variables that are either shared between functions within
        the class or can be accesed from other files.

        We set any shared variables that will be used at the start and set their
        visibility. Some of them have values if we know them already while others
        are just set to prevent undefined index errors when we attempt to set them
        later on.

        Both variables and methods can be set to
        private     -   Can only be accessed from within this class
        protected   -   Can be accessed from this class and any class that extends it
        public      -   Can be accesssed from any files as long as this file is included in it.

        All of these can be called from within this file by using $this-> followed
        by the variable name without the dollar sign. So to use the database table
        name stored as $_db_table, we would use $this->_db_table.

        The public variables can also be accessed from any files where a connection
        to this model has been opened. To access the $_display_column column from
        another file you would use

        $_var = new M_Users();
        $col_name = $_var->_display_column

        To access a public variable from within this file, you would still use
        $this-> as the call and response are from the same file.
     */
    private $_admin_area, // used when specifying if we are in the frontend or admin area
            $_data, // stores any data returned when the default table has been queried using the find() function
            $_db, // stores a connection to the database class
            $_logs, // stores a connection to the logs class
            $_model_name = 'M_Users'; // the name of this file - used in error reporting of inserts, deletes and updates

    public  $_admin_dir = 'Users', // the root directory/url for the section in the admin area
            $_user_dir = 'Users', // the root directory/url for the section in the front end. If the same as $_admin_dir, just use that
            $_insertId, // id of the last inserted database record
            $_db_table = 'users', // default database table
            $_display_column = 'username',// the column in the default table that is the main displayed one
            $_id_column = 'user_id',
            $_single_name = 'User', // descriptive name to use in the singular
            $_plural_name = 'Users'; // descriptive name to use in plural

    /**
     * Construct the class
     *
     * There are two other classes that we use regularly within the functions in
     * this one, so rather that calling them each time we need them, we call them
     * as soon as this file is called and add them to re-usable variables.
     *
     * $this->_db creates a re-usable instance of the database
     * $this->_logs opens the Logs core class (/app/core/Logs.php) used to record
     * activity.
     *
     * We also run a check to see if we are in the admin area by exploding the
     * url and checking the first part after the domain name. If this equals
     * 'Admin' then we are in the admin area. We set this to $this->_admin_area
     * and use it later on for various things that need to be either hidden or
     * shown, depending on which side of the site we are in, such as when deciding
     * whether to include the user group dropdown on the defaultForm() function
     * (yes in admin, no in frontend).
     */
    public function __construct() {
        $this->_db = DB::dbConnect();
        $this->_logs = new Logs();
        $this->_admin_area = is_admin_area();
    } //__construct ()

    //////////////////////////////
    // Standard class functions //
    //////////////////////////////

    /**
     * Get the total number of records
     *
     * Queries the database for all records for the table set in $_db_table
     * when declaring the variables at the start and returns the number of rows
     * found.
     *
     * This is all done via the DB.php core class and uses two of it's functions
     * inline - query(), which executes an SQL statement and count() which
     * returns the number of rows found.
     *
     * Examples
     * $_var = new M_Users();
     *
     * echo $_var->count() - returns the number of records in the 'users' table
     *
     * if($_var->count()) {
     *      // code to execute if any rows are found
     * }
     *
     * if(!$_var->count()) {
     *      // code to execute if no rows are found
     * }
     *
     * @return int 	    Count of rows
     */
    public function count() {
        return $this->_db->query('SELECT * FROM '.$this->_db_table)->count();
    } // count()

    /**
     * Create a new record
     *
     * Inserts a new record into 'users' table in the database following a valid
     * posting of the form. All posted data should have been validated in the
     * controller and take the form of key->value pairings of field name->value,
     * before being passed to this function.
     *
     * We also use this point to set the created date to the current datetime,
     * rewrite the password to something more secure , the user who created it,
     * if it applies as users can be created both frontend as a new registration
     * or from the admin area. It adds these to the posted data and then passes
     * that to the insert() function in the DB.php core class.
     *
     * Upon success or fail, it creates new records in the 'activity' table along
     * with an unspecifed message in the 'activity_table_updates' table. These are
     * controlled via functions in the Logs.php core class.
     *
     * If something has gone wrong at this point, it will be most likely due to
     * an error in the insert query so turning on 'debug_mode' in the settings.
     *
     * On succesful insertion it also assigns the id of the new record to
     * $this->_insertId, which can then be accessed via the connection to this
     * model.
     *
     * @param  array    $post_data  $post_data data
     * @return bool                 Success status
     */
    public function create ($post_data=[]) {
        /*
            For security reasons, we do not want to store the password that has
            been entered but want to store something that cannot be used.

            We do this by creating a 32 character hash and then rewriting the
            entered password with that as a salt. Both the rewritten password and
            the salt are stored in the database. When a user tries to log in, their
            password is merged with the has stored form them in the database and
            if that results as the same value as the password in the database,
            they are logged in.

            We do this using two functions in the Hash core file.
            salt() simply returns a random string to the length specified, in
            this case 32 characters
            make() takes the posted 'password' and the created salt and concatenates
            them into a single string before returning it with 'sha256' encryption.
         */
        $post_data['salt'] = Hash::salt(32);
        $post_data['password'] = Hash::make(Input::get('password'), $post_data['salt']);

        /*
            Most database tables will have 'created' and 'user' columns to store
            the date that the record was created and the user who created it, if
            applicable, so we need to add those to $post_data.

            We use the currentUser() function in this class to return the id of
            the current user if they are logged in or null if they are not and set
            that to 'user'.

            For 'created', we simply use the current date and time.
         */
        $post_data['user'] = $this->currentUser();
        $post_data['created'] = date('Y-m-d H:i:s');

        /*
            Attempt the insert, passing in the table name and the remaining
            validated $post_data data as $post_data.

            If unsuccesful, a record will be placed in the 'activity' table with
            a generic error inserted and the script will end. If debug_mode is on,
            you should also see details of the insert query on screen.
         */
        if (!$this->_db->insert($this->_db_table, $post_data)){
            // The insert was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with '.$this->_model_name.'->create()';
            }

            Logs::insert_table_fail([
                'target' => $this->_db_table,
                'errors' => ['unspecified'=>null],
            ]);
            return false;
        }

        /*
            If the script has not stopped by now, the insert was successful so
            we set the id of the new record to $this->_insertId. This then gets
            displayed in the success messages in the admin area.

            We also place a success record in the activity table.
         */
        $this->_insertId = $this->_db->insertId();
        Logs::insert_table_success([
            'record' => $this->_insertId,
            'target' => $this->_db_table,
            'user' => $this->currentUser()
        ]);
        return true;

    } // create()

    /**
     * Return a records data
     *
     * After using the find() function in this model the details of a user, is
     * stored in the private '$this->_data' variable as an object of columns and
     * values.
     *
     * This public function allows that data to be viewed from any file that has
     * opened a connection to the model.
     *
     * Examples
     * $_var = new M_Users();
     * $_var->find('1'); // Search by user id
     * $_var->find('superadmin@email.com'); // Search by email
     * $_var->find('SuperAdmin'); // Search by username
     *
     * return $_var->data() would give the following object
     * stdClass Object (
     *      [id] => 1
     *      [username] => SuperAdmin
     *      [firstname] => Super
     *      [lastname] => Admin
     *      ..all other fields...
     * )
     *
     * echo $_var->data()->firstname . ' ' . $_var->data()->firstname; returns
     * 'Super Admin'
     *
     * @return array 	Record data
     *
     */
    public function data() {
        return $this->_data;
    } // data()

    /**
     * Add / Edit form
     *
     * Wherever possible, we will use the same form for both adding and editing
     * a record, with fields shown and hidden as necessary. We do this with the
     * user form but as this also controls the front end registration form, there
     * are more parameters in this one than most.
     *
     * The parameters that can be passed in are
     * 'errors' following a failed post attempt this will contain an array of
     * the errors as a key->value pairing where the field name is the key and
     * the error details is the value.
     * 'version' whether we are in create mode or edit mode so we know which
     * fields to show or hide.
     * 'area' shows which part of the site we are on where 'user' refers to front
     * end and 'admin' refers to backend.
     * 'data' will contain the user information in an array as a key->value
     * pairing where the field name is the key and the feld value is the value.
     *
     * @param  array    $params    Version, record, area and error details
     * @return string               User create/edit form
     */
    public function defaultForm ($params=null) {
        /*
            After a failed post, want to repopulate the form with the posted
            data so the user does not have to fill it all in again, as well as
            applying any required field validation styles.

            We use an array called $field_data to store these ready for use
            so create an empty version before doing the checks.
         */
        $field_data = [];

        /*
            Create an array of the fields that will always be used in the form. The field names used should always match the database table column
            that they are used for.

            As we go along, we add any others that we require, based on the
            type of form we are using before we generate the form.
         */
        $form_fields = [
            'username' => [
                'help_text' => 'Usernames must be between 5 and 20 characters, only using letters, numbers and underscores. Usernames CANNOT start with a number.'
            ]
            , 'email' => [
                'help_text' => 'This must be your valid @saga.co.uk email address.'
            ]
            , 'firstname' => [
            ]
            , 'lastname' => [
            ]
            , 'ext' => [
                'help_text' => 'Your internal extension number.'
            ]

        ];
        /*
            As we can use the form for both adding a new record or editing an
            existing one, we need to know which version we are showing.

            We can pass in a parameter called 'version' to specify which one we
            need. If this is not passed in we default to 'create' as that is
            the most common.
         */
        $version = (isset($params['version']) && $params['version'] == 'edit') ? 'edit' : 'create';



        /*
            If we are in create mode we need the password fields so add those to $form_fields. If we are in the front end, we also need the terms
            added.

            As we are in an if else to see if we are in create or edit mode we
            also use the opportunity to set the names and display text for each
            version of the button.
         */
        if($version == 'create') {
            $form_fields['password'] = [
                'help_text' => 'Passwords must be a minimum of 6 characters.'
            ];
            $form_fields['confirm_password'] = [
            ];

            if(!$this->_admin_area) {
                $form_fields['terms'] = [];
                $button_name = 'register';
                $button_text = 'Register';
            } else {
                $button_name = 'add_'.strtolower($this->_single_name);
                $button_text = 'Add User';
            }

        } else {
            $button_name = 'update_'.strtolower($this->_single_name);
            $button_text = 'Update';
        } // if $version == 'create'

        /*
            We now loop through the form fields array to check for validation
            and data.

            First we check to see if there is a matching value in the 'errors'
            parameter passed in to the function. If there is we set the class
            for that field in $field_data to 'is-invalid'. If there is no
            matching value, if there is any post data, we assume it must have
            been succesful so set the class to 'is-valid', otherwise we just
            leave it blank.

            Then we check for any posted data, from a failed form submit. If
            there is a match, we set it to the 'val' for that field in
            $field_data. If there is no match, we check to see if a record has been passed in via the 'data' parameter passed in to the function (create mode).
            Again, if there is a match, we add that to 'val', otherwise we are left
            with nothing to use as 'val' so leave it blank.

            When creating the actual input for the field, we add anything in 'class'
            to the input class="" and the 'val' to the value="".
        */


        foreach ($form_fields as $fields => $field) {
            $field_data[$fields]['val'] = '';
            $field_data[$fields]['class'] = '';

            // Check for posted data if an account update has been attempted
            if (Input::exists(['name'=>$fields]) && trim(Input::get($fields)) !== false) {

                // There is posted data so set that as the value
                $field_data[$fields]['val'] = Input::get($fields);

                if (isset($params['errors'][$fields])) {
                    // Errors found for the field so add invalid class
                    $field_data[$fields]['class'] = 'is-invalid';
                } else {
                    // No errors found so if there is posted data, add the valid class
                    $field_data[$fields]['class'] = (Input::exists()) ? 'is-valid' : '';
                }

            } else {
                $field_data[$fields]['val'] = $field;

                if(isset($params['data']->$fields)) {
                    $field_data[$fields]['val'] = $params['data']->$fields;
                }
            } // if (Input::exists($value))


            // Check for errors



        } // foreach($form_fields)

        /*
            We now have everything we need so can start building the form.

            We create the content first and then pass it into the form once we
            have all of the fields created.

            To start, we create an empty variable to hold the content and then
            add to it as we go along.
         */
        $content = '';

        // Add the Username and Email form row
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            # Username
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Username',
                    'content' => 'Username',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Username',
                    'name' => 'username',
                    'placeholder' => 'Username',
                    'class' => $field_data['username']['class'],
                    'value' => $field_data['username']['val'],
                    'aria' => [
                        'describedby' => 'Username'
                    ],
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Email
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Email',
                    'content' => 'Email',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_email ([
                    'id' => 'Email',
                    'name' => 'email',
                    'placeholder' => 'Email',
                    'class' => $field_data['email']['class'],
                    'value' => $field_data['email']['val'],
                    'aria' => [
                        'describedby' => 'Email'
                    ],
                ]) // Php2Bs::bs_input_email
            ]) // Php2Bs::bs_form_group
        ]); // Username and password row

        // First and Last Names Row
        $content .= Php2Bs::bs_form_row ([
            'content' =>
            # Firstname
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Firstname',
                    'content' => 'Firstname',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Firstname',
                    'name' => 'firstname',
                    'placeholder' => 'Firstname',
                    'class' => $field_data['firstname']['class'],
                    'value' => $field_data['firstname']['val'],
                    'aria' => array (
                        'describedby' => 'Firstname'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
            # Lastname
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Lastname',
                    'content' => 'Lastname',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Lastname',
                    'name' => 'lastname',
                    'placeholder' => 'Lastname',
                    'class' => $field_data['lastname']['class'],
                    'value' => $field_data['lastname']['val'],
                    'aria' => array (
                        'describedby' => 'Lastname'
                    ),
                ]) // Php2Bs::bs_input_text
            ]) // Php2Bs::bs_form_group
        ]); // First and last names row

        // Password Row - only if we are in create mode
        if($version == 'create') {
            // Password Row
            $content .= Php2Bs::bs_form_row ([
                //'class' => '',
                'content' =>
                # Password
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Password',
                        'content' => 'Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .Php2Bs::bs_input_password ([
                        'id' => 'Passsword',
                        'name' => 'password',
                        'placeholder' => 'Passsword',
                        'class' => $field_data['password']['class'],
                        'value' => $field_data['password']['val'],
                        'aria' => [
                            'describedby' => 'Password'
                        ],
                    ]) // password
                ]) // Php2Html::div.form-group
                # Confirm_Password
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'Confirm_Password',
                        'content' => 'Confirm Password',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                        'id' => 'Confirm_Password',
                        'name' => 'confirm_password',
                        'placeholder' => 'Confirm Password',
                        'class' => $field_data['confirm_password']['class'],
                        'value' => $field_data['confirm_password']['val'],
                        'aria' => [
                            'describedby' => 'Confirm_Password'
                        ],
                    ]) // Php2Bs::bs_input_password
                ]) // Php2Bs::bs_form_group
            ]); // Php2Bs::bs_form_row
        } // Password row

        // Extension number row
        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Firstname
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Ext_number',
                    'content' => 'Extension number',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_text ([
                    'id' => 'Ext_number',
                    'name' => 'ext',
                    'placeholder' => 'Extension number',
                    'class' => $field_data['ext']['class'],
                    'value' => $field_data['ext']['val'],
                    'aria' => array (
                        'describedby' => 'Ext_number'
                    ),
                ]) // Php2Bs::bs_input_text
                . Php2Bs::bs_form_text ([
                    'id' => 'extention_help',
                    'class' => 'text-muted',
                    'content' => $form_fields['ext']['help_text']
                ]) // Php2Bs::bs_form_text
            ]) // Php2Bs::bs_form_group
        ]); // Extension number row

        /*
            If we are in edit mode in the admin area, we can also change the
            usergroup and the users status (active, banned, unverified) from
            the same form so we have to add them to $content.

            We create them individually as  $group_select and $status_select
            before passing them into the form.

            Finally, we add a field to update the created date.
         */
        if($version == 'edit' && $this->_admin_area) {

            // Open up the Usergroups model
            $groups = new M_Usergroups ();

            /*
                Create an empty $options variable to hold the contents of the
                select menu that we will use to choose a group.
             */
            $options = '';

            /*
                Loop through the list of usergroups and for each one, create
                and <option> tag to go inside the select menu and add it
                to $content.
             */
            foreach ($groups->listing() as $key => $value) {
                $options .= Php2Html::option ([
                    'content' => $value->group_name,
                    'value' => $value->id,
                    'is_selected' => ($value->id == $params['data']->group) ? true: false,
                ]);
            }

            /*
                Create the select menu, using the $options variable and
                assign it to $group_select.
             */
            $group_select = Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'GroupName',
                'name' => 'group'
            ]);

            /*
                We now do exactly the same for the $status_select, except
                that the listing is a hand built array that we create
                directly in the foreach
             */
            $options = '';
            foreach (['-1' =>'Banned', '0' => 'Unverified', '1' => 'Active'] as $key => $value) {

                $options .= Php2Html::option ([
                    'content' => $value,
                    'value' => $key,
                    'is_selected' => ($key == $params['data']->status) ? true: false,
                ]);
            }

            $status_select =  Php2Bs::bs_select ([
                'content' =>$options,
                'id' => 'StatusName',
                'name' => 'status'
            ]);

            // Now add both dropdowns to the form
            $content .= Php2Bs::bs_form_row ([
                'content' =>
                # User Group
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'GroupName',
                        'content' => 'User Group',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .$group_select
                ]) // Php2Html::div.form-group

                # Status
                .Php2Bs::bs_form_group ([
                    'class' => 'col-md-6',
                    'content' => Php2Html::label ([
                        'for' => 'StatusName',
                        'content' => 'Status',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                .$status_select
                ]) // Php2Bs::bs_form_group
            ]); // Usergroupd and status row

            $content .= Php2Bs::bs_form_row ([
                'content' =>
                Php2Bs::bs_form_group ([
                    'class' => 'col-md-12',
                    'content' => Php2Html::label ([
                        'for' => 'Created',
                        'content' => 'Created',
                        'class' => 'mb-0',
                    ]) // Php2Html::label
                    .Php2Bs::bs_input_text ([
                        'class' => '',
                        'type' => 'text',
                        'id' => 'Created',
                        'value' => $field_data['created']['val'],
                        'name' => 'created',
                        'placeholder' => 'Add Created Date',
                        'aria' => [
                            'label' => 'Created',
                        ],
                    ]) // Php2Bs::bs_input_text
                ])// Php2Bs::bs_form_group
            ]); // Created row

        } // if($version == 'edit' && $this->_admin_area)



        /*
            If we are in front end create mode, we require both the Accept Terms
            checkbox as well as the submit button, otherwise we just need the
            submit button.

            As we do not know if we will need both, we create an empty $bottom_row
            variable and add what it requires, before passing it into a form row.
         */
        $bottom_row = '';

        /*
            If we are in front end create mode, we need to create a 'terms'
            checkbox and its parameters.
         */
        if($version == 'create' && !$this->_admin_area) {
            // Create the parameters for the checkbox
            $checkbox_array = [
                'id' => 'Terms',
                'name' => 'terms',
                'class' => $field_data['terms']['class'],
                'aria' => [
                    'describedby' => 'Terms'
                ],
            ];

            // If it was checked on a previous post attempt, re-check it
            if($field_data['terms']['val']) {
                $checkbox_array['checked'] = '';
            } // if($field_data['terms']['val'])

            // Create the terms form group with the parameters set above
            $bottom_row .= Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' =>
                # Terms
                Php2Bs::bs_form_check ([
                    'label' => [
                        'for' => 'Terms',
                        'content' => 'Accept Terms Below',
                    ],
                    'checkbox' => $checkbox_array,
                    'outer' => [

                    ]
                ]) // Php2Bs::bs_form_check
            ]); // Php2Bs::bs_form_group
        } // if($version == 'create' && !$this->_admin_area)



        /*
            The submit button also comes in a form-group but as we always want
            it to appear on the right, we give it a class of 'col-md-6' when the
            terms form-group is also required (that also uses 'col-md-6'), and
            'col-12' when we are showing just the button.

            We set this to $button_group_size, based on whether or not 'terms'
            has been added (frontend create mode) to the $form_fields array.
         */
        $button_group_size = ($version == 'create' && !$this->_admin_area) ? 'col-md-6': 'col-12';

        $content .= Php2Bs::bs_form_row ([
            'content' => $bottom_row.Php2Bs::bs_form_group ([
                'class' => $button_group_size,
                'content' => Php2Bs::bs_button ([
                    'button_type' => 'submit',
                    'color' => 'primary',
                    'size' => 'sm',
                    'class' => 'float-right',
                    'content' => $button_text,
                    'name' => $button_name
                ]) // Php2Bs::bs_button
            ])// Php2Bs::bs_form_group
        ]); // Bottom row

        /*
            All of the fields, in form groups and form rows, are now stored in
            $content, so we return that as the content of a form.
         */
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]); //  Php2Html::form
    } // defaultForm ()

    /**
     * Delete a record
     *
     * Deletes the specified record and from the default table and creates a new
     * record in the 'activity' table with details of the deletion. We pass in
     * the name of the record (in this case 'username') to add it to the activity
     * log as a future reference.
     *
     * Note that all checks and validating should be done before this point in
     * the controller as this function physically does the deletion.
     *
     * @param  int  $record  Record ID
     */
    public function delete ($record, $name) {
        /*
            We do not have to unset, add or amend anything so purely run the
            delete.

            As with create, if the delete fails we stop the script but this time
            we do not set any activity record. This is purely because any issues
            by this stage should only be in the query not the data.
         */
        if(!$this->_db->delete($this->_db_table, array('id', '=', $record))) {
            // The delete was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with'.$this->_model_name.'->delete()';
                /*
                    If the script has not stopped by now, the delete was successful so
                    we place a success record in the activity table, including the
                    display name of the deleted record for reference purposes.
                 */
                return false;
            }
        }

        Logs::delete_table_success([
            'record' => $record,
            'name' => $name,
            'target' => $this->_db_table
        ]);
        return true;
    } // delete()

    /**
     * Delete record form
     *
     * Simply shows a button to delete the current record. We do not need to pass
     * in any parameters as the user is set in the url. As we only have the button
     * to show, we create it in one go, unlike defaultForm() where we built it
     * bit by bit.
     *
     * @return string               User delete form
     */
    public function deleteForm () {
        // Compile the form
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => Php2Bs::bs_form_row ([
                'content' => Php2Bs::bs_form_group ([
                    'class' => '',
                    'content' => Php2Bs::bs_button ([
                        'button_type' => 'submit',
                        'color' => 'danger',
                        'size' => 'sm',
                        'class' => 'float-right',
                        'content' => 'Delete',
                        'name' => 'delete_'.strtolower($this->_single_name)
                    ])
                ]),
            ])
        ]); //  Php2Html::form
    } // deleteForm ()

    /**
     * Find a record
     *
     * Querys the default table with a passed in identifier and checks to see if
     * a matching record exists. If it does, it assigns it's details to
     * '$this->_data' variable as an object of columns and values. This can then
     * be accessed publically from other files using the data() function in this
     * model.
     *
     * The one in users is more complicated than the others as there are three
     * ways to identify a user, while most models have two.
     *
     * Examples
     *
     * $_var = new M_Users();
     *
     * if($_var->find('1')) {
     *      // code to execute if a user with an id of '1' is found
     * }
     *
     * if(!$_var->find('Admin')) {
     *      // code to execute if a user with an username of 'Admin' is not found
     * }
     *
     * Other examples of how to use this have already been covered in the comments
     * for data() above.
     *
     * @param  string/email/int 	$group  	User identifier
     * @return Boolean/Array
     */
    public function find($record=null) {

        /*
            We can only run this if a record has been passed in so check for it
            before we do anything else. If it has not been passed in we simply
            skip over this section at return false at the end of the function,
            otherwise we attempt to find it.
         */
        if ($record) {
            /*
                A record has been passed in so we now need to check what parameter
                has been used to determine which field we are going to check it
                against in the table.

                For Users, the $record will either be the id, username or email,
                all of which can be checked without manipulation (most variations
                on this required manipulation such as when we need to replace spaces
                with underscores to make the url work - see '/models/M_Usergroups.php'
                for an example).

                If $record is a number, we will assume it is the id field as
                usernames must start with a letter so we will set 'id' to a variable
                called $field that we will use to search the table on.

                If it is not numeric, it might be an email address or the username.
                We check to see if it is a valid email and if so, assign 'email'
                to field. If it is not an email, we set $field to the default
                display colum, in this case 'username'.
             */
            if(is_numeric($record) && (int) $record == $record) {
                /*
                    The passed in $record is numeric so we need to perform the
                    search on the id field.
                 */
                $field = 'user_id';
            } else {
                /*
                    The passed in $record is not numeric so we need to perform the
                    search on the the username or email field depending on the type
                    of data stored in $record.
                 */
                $field = (filter_var($record, FILTER_VALIDATE_EMAIL)) ? 'email' :   $this->_display_column;
            }
            /*
                Now that we have the record identifier and the field name to check
                it against, we use the get() function in the DB.php core class
                specifying that we want the $field to equal the passed in $record.
             */
            $this->_db->get($this->_db_table, array($field, '=', $record));

            /*
                The get() function returns two values
                $this->_results contains the record details returned as an object
                $this->_count contains the number of records returned

                Although $this->_count is set as private, we can access it via
                the count() function in the DB.php core class. If that is more
                than 0, we set the data to $this->_data and return true.
             */
            if ($this->_db->count()) {
                $this->_data = $this->_db->first();
                return true;
            }
        }
        /*
            If the script has not already stopped by this point, the user was not
            found so we simply return false.
         */
        return false;
    } // find()

    /**
     * Return a list of activity logs
     *
     * Querys the default table and returns all records as an object. We loop
     * through this and build a new array called $_list with the same data but
     * with the key now set to the record id.
     *
     * @return array  List of Records
     */
    public function getLogs ($record=null) {
        return Logs::get_table ($this->_db_table, $record);
    }

    /**
     * Return a list of records
     *
     * Querys the default table and returns all records as an object. We loop
     * through this and build a new array called $_list with the same data but
     * with the key now set to the record id.
     *
     * @return array  List of Records
     */
    public function listing() {
        // Create an empty array to build the new list against
        $list = [];

        // Query the table and instantly loop through it
        foreach ($this->_db->query('SELECT * FROM `' . $this->_db_table . '`')->results() as $key => $value) {
            /*
                Create a new key based on the record id and set all the details
                of the record to it.
             */
            $list[$value->user_id] = $value;

            /*
                As the id is the key, we do not need it in the details so we
                unset it.
             */
            unset($list[$value->user_id]->id);
        }

        // Return the results as an array
        return $list;
    } // listing()

    /**
     * Update a user
     *
     * Updates a users details in the 'users' table based on validated
     * following a valid posting of the form. All posted data should have been
     * validated in the controller and take the form of key->value pairings of
     * field name->value, before being passed to this function.
     *
     * We also use this point to set the modified date to the current datetime,
     * rewrite the password to something more secure , the user who created it,
     * if it applies as users can be created both frontend as a new registration
     * or from the admin area. It adds these to the posted data and then passes
     * that to the insert() function in the DB.php core class.
     *
     * Upon success or fail, it creates new records in the 'activity' table along
     * with an unspecifed message in the 'activity_table_updates' table. These are
     * controlled via functions in the Logs.php core class.
     *
     * If something has gone wrong at this point, it will be most likely due to
     * an error in the insert query so turning on 'debug_mode' in the settings.
     *
     * @param  int      $record     User ID
     * @param  array    $post_data  $post_data data
     * @return bool                 Success status
     */
    public function update($record, $post_data) {
        /*
            Most database tables will have a 'modified' column to store
            the date that the record was updated so we need to add it to
            $post_data.

            For 'modified', we simply use the current date and time.
         */
        $post_data['modified'] = date('Y-m-d H:i:s');

        /*
            Attempt the update, passing in the table name and the remaining
            validated $post_data data as $post_data.

            If unsuccesful, a record will be placed in the 'activity' table with
            a generic error inserted and the script will end. If debug_mode is on,
            you should also see details of the insert query on screen.
         */
        if (!$this->_db->update($this->_db_table, $record->user_id, $post_data, $this->_id_column)) {
            // The update was unsuccesful
            if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with '.$this->_model_name.'->update()';
            }

            Logs::update_table_fail([
                'record' => $record->user_id,
                'target' => $this->_db_table,
                'errors' => ['unspecified'=>null],
            ]);
            return false;
        }

        Logs::update_table_success([
            'record' => $record->user_id,
            'target' => $this->_db_table,
            'old' => objectToArray($record),
            'new' => $post_data
        ]);
        return true;
     } // update ()

    /**
     * Set messages to be displayed
     *
     * An array of messages relating to the model that will be shown as a Bootstrap
     * alert following form posts or to show errors. This can either be retieved
     * as the entire array (by ommitting the $msg parameter), or individually by
     * passing in a key such as messages('already_verified').
     *
     * For an explanation on how the messages work, please refer to
     * '/src/functions/show_page_alerts.php'.
     *
     * @param  string $msg  Optional key to retreive a single message
     * @return array        Either a single element or all
     */
    public function userAlerts ($params) {

        $admin_record_link = Php2Bs::bs_alert_link([
            'content' => 'View',
            'href'=>'/Admin/'.$this->_admin_dir.'/{{insert_id}}'
        ]).' in admin area';

        $admin_list_link = Php2Bs::bs_alert_link([
            'content' => 'View',
            'href'=>'/Admin/'.$this->_admin_dir
        ]).' the list or add a new one';

        $user_list_link = Php2Bs::bs_alert_link([
            'content' => 'View',
            'href'=> '/'.$this->_user_dir
        ]).' the list';

        $array = [
            'account_verified' => [
                'title' => 'Account Verified',
                'alert_color' => 'success',
                'content' => 'Your account has been verified. You can now log in using the details you used to register.<br>{{alert_link}}',
                'dismissible' => false,
            ],
            'already_verified' => [
                'title' => 'Account Already Verified',
                'alert_color' => 'info',
                'content' => 'The account associated with that email address has already bee verified.',
                'dismissible' => false,
            ],
            'create_success' => [
				'title' => $this->_single_name.' created',
				'alert_color' => 'success',
				'content' => 'The '.
                    strtolower($this->_single_name).
                    ' has been created.'.
                    ($this->_admin_area) ? '<br>'.$admin_record_link :'',
			],
            'create_fail' => [
                'title' => ($this->_admin_area) ? $this->_single_name.' not created' : 'Not registered',
                'alert_color' => 'danger',
                'content' => 'Please correct the following errors...<br>{{errors}}',
			],
            'delete_success' => [
				'title' => $this->_single_name.' deleted',
				'alert_color' => 'success',
				'content' => 'The '. strtolower($this->_single_name).' has been deleted.'.
                ($this->_admin_area) ? '<br>'.$admin_list_link :'',
				'dismissible' => false,
			],
            'incorrect_hash' => [
                'title' => 'Incorrect Link',
                'alert_color' => 'danger',
                'content' => 'The details provided did not match that account.<br>Please use the link provided in your registration email or click the link below to send another.<br>{{alert_link}}',
            ],
            'incorrect_verify_link' => [
                'title' => 'Incorrect Link',
                'alert_color' => 'success',
                'content' => 'The details provided did not match any accounts. Please use the link provided in your registration email.'.Php2Bs::bs_column(['content'=>(isset($params['form'])) ? $params['form'] : null, 'class'=>'clearfix']),
            ],
            'login_banned' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you are banned.',
                'alert_color' => 'info',
            ],
            'login_empty_fields' => [
                'title' => 'Login failed',
                'content' => 'Both fields must be filled in.',
                'alert_color' => 'danger',
            ],
            'login_not_found' => [
                'title' => 'Login failed',
                'content' => 'The user was not found.',
                'alert_color' => 'info',
            ],
            'login_not_pw' => [
                'title' => 'Login failed',
                'content' => 'The password was incorrect.',
                'alert_color' => 'danger',
            ],
            'login_success' => [
                'title' => 'Login succesful',
                'content' => 'You are now logged in.',
                'alert_color' => 'success',
            ],
            'login_unverified' => [
                'title' => 'Login failed',
                'content' => 'You cannot login as you have not verified your account. Please check your email for the verification link.',
                'alert_color' => 'info',
            ],
            'logout_success' => [
                'title' => 'Logout succesful',
                'content' => 'You are now logged out.',
                'alert_color' => 'success',
            ],
            'no_change' => [
				'title' => $this->_single_name.' not updated',
				'alert_color' => 'info',
				'content' => 'You did not change any data.'
			],
            'not_found' => [
				'title' => $this->_single_name.' not found',
                'alert_color' => 'warning',
				'content' => 'The '. strtolower($this->_single_name).' could not be found.'. ($this->_admin_area) ? $admin_list_link :'',
                'dismissible' => false,
			],
            'not_logged_in' => [
                'title' => 'Unauthorised',
                'content' => 'You must be logged in to view this page.',
                'alert_color' => 'info',
                'dismissible' => false
            ],
            'register_success_auto' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and you can now log in. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_success_email' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created. You will receive an email containing a link to complete the registration. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'register_success_manual' => [
                'title' => 'Account Registered',
                'alert_color' => 'success',
                'content' => 'Your account has been created and is awaiting authorisation. For future reference, your user id is {{insert_id}}.',
                'dismissible' => false,
            ],
            'resend_email' => [
                'title' => 'Email sent',
                'content' => 'A new link to verify your account has been sent.',
                'dismissible' => false,
            ],
            'update_fail' => [
                'title' => ($this->_admin_area) ? $this->_single_name.' not updated' : 'Account not updated' ,
                'alert_color' => 'danger',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],
            'update_success' => [
                'title' => ($this->_admin_area) ? $this->_single_name.' updated' : 'Account updated' ,
                'alert_color' => 'success',
                'content' => ($this->_admin_area) ? 'The '. strtolower($this->_single_name).' has been updated.' : 'Your account has been successfully updated'
            ],
            'verify_not_found' => [
                'title' => 'User not found',
                'alert_color' => 'danger',
                'content' => 'The details provided did not match any accounts. Please use the link provided in your registration email.'.Php2Bs::bs_column(['content'=>(isset($params['form'])) ? $params['form'] : null, 'class'=>'clearfix']),
            ],











            'register_validation' => [
                'title' => 'Registration unsuccesful',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],

            'update_validation_failed' => [
                'title' => 'Update unsuccesful',
                'content' => 'Please correct the following errors...<br>{{errors}}',
            ],












            'send_link_fail' => [
                'title' => 'Link not sent',
                'alert_color' => 'danger',
                'content' => 'Please enter something to search for.'
            ],
            'pw_email_sent' => [
                'title' => 'Email sent',
                'alert_color' => 'success',
                'content' => [
                    'The email has been sent to the account matching the details. Please click on the link in it to reset your password.',
                    ' If you do do receive it, check your spam or junk folders. Otherwise, <a class="alert-link" href="/Members/ResetPassword">try again</a>..']
            ],
            'hash_fail' => [
                'title' => 'Incorrect Parameters',
                'alert_color' => 'warning',
                'content' => 'We could not recognise the details. Please use the link from the email you received or enter your username, email or user id below to send another.'
            ],

            'admin_create_success' => [
                'title' => 'Account Created',
                'alert_color' => 'success',
                'content' => 'The account has been created.',
            ],

            'pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'Your password has been updated.',
                'dismissible' => false,
            ],
            'admin_pw_update_success' => [
                'title' => 'Password Updated',
                'alert_color' => 'success',
                'content' => 'The password has been updated.',
            ],


            'admin_account_delete_success' => [
                'title' => 'Account Deleted',
                'alert_color' => 'success',
                'content' => 'The account has been deleted.',
                'dismissible' => false,
            ],
            'admin_account_update_success' => [
                'title' => 'Account Updated',
                'alert_color' => 'success',
                'content' => 'The account has been updated.',
            ],



            'admin_user_unverified' => [
                'title' => 'Account not verified',
                'alert_color' => 'warning',
                'content' => '',
                'dismissible' => false,
            ],
            'admin_user_banned' => [
                'title' => 'Account banned',
                'alert_color' => 'danger',
                'content' => '',
                'dismissible' => false,
            ]
        ];
        /*
            If a message key has been passed in, just return that element, otherwise return the whole array.
         */
        if(isset($params['msg'])) {
            Messages::userAlert($array[$params['msg']], $params);
        } else {
            return $array;
        }
    } // userAlerts()

    /**
     * Validate posted data
     *
     * Takes a set of posted form data and checks it against a set of
     * validation rules returning the success or fail status, along with
     * an array of errors in a key->paring of field name->error reason.
     *
     * The validation itself is done using the 'Validate.php' core
     * file's check() function while the rules are stored in
     * validation_rules() within this model.
     *
     * We also use the stripValidateRules() function from the
     * strip_validation_rules.php function file, to remove anything
     * we do not require before running the check.
     *
     * When we call this function, we pass in a $type parameter of either
     * 'insert' or 'update' an use that to determine which function for the
     * Logs.php core class, we need to use.
     *
     * On updates, we also pass in the id of the record as that is also
     * stored in the activity log for failed updates.
     *
     * Before using this function, if we are in update mode, we should
     * have run the $_POST data through the stripPostData () function
     * to elminate any fields that have not changed.
     *
     * EXAMPLES
     *
     * $_var = new M_Users();
     *
     * $validation = $_var->validate($_POST, $type='insert');
     * $validation = $_var->validate($_POST, $type='update',43);
     *
     * if($validation->passed()) {
     *      // code to execute if validation was successful
     * }
     *
     * if(!$validation->passed()) {
     *      // code to execute if validation was not successful
     * }
     *
     * if($validation->errors()) {
     *      // code to execute if there are errors
     * }
     *
     * if(!$validation->errors()) {
     *      // code to execute if there are no errors
     * }
     *
     * foreach ($validation->errors() as $key => $value) {
     *     // loop through the errors
     * }
     *
     * @param  array    $post_data  Form $_POST data
     * @param  string   $type       Whether we are updating or inserting. Insert is default.
     * @param  int      $record     Id of the record on updates
     * @return array                Status and errors
     */
    public function validate ($post_data, $type='insert', $record=null) {
        if($type=='update') {
            $rules = stripValidateRules (
                $post_data,
                $this->validation_rules()
            );
        } else {
            $rules = $this->validation_rules();
        }

        /*
            We now open the Validate class and pass in the posted data along
            required rules to the check() function, returning the results to a variable called $check.
            This function is fully commented in the 'core/Validate.php' file.
         */
        $validate = new Validate();
        $check = $validate->check(
            $post_data,
            $rules
        );

        /*
            The Validate class provides two public functions that we can access
            following the check() function being run.

            passed() returns a boolean value depending on the success of the
            check, errors() contains an array of any errors

            We return everything in $check at the end of the function but if the validation has failed we want to insert the relevant information
            into the activity logs.
         */
        if(!$check->passed()) {

            if($type=='insert') {
                Logs::insert_table_fail([
                    'target' => $this->_db_table,
                    'errors' => $check->errors(),
                    'post' => $post_data
                ]);
            }

            if($type=='update') {
                Logs::update_table_fail([
                    'record' => $record,
                    'target' => $this->_db_table,
                    'errors' => $check->errors(),
                    'post' => $post_data
                ]);
            }

            if($type=='register') {
                $this->_logs->register_fail([
                    'errors' => $check->errors(),
                    'post' => $post_data
                ]);
            }

        }

        // Return the contents of $check
        return $check;
    } // validate ()

    /**
     * Set the validation rules
     *
     * Sets the rules for any form fields the class uses when being processed.
     *
     * See the '/app/core/Validate.php' class for information how these work.
     *
     * @return array Validation rules
     */
    public function validation_rules() {
        return[
            'username' => [
                'required' => true,
                'min' => 6,
                'max' => 20,
                'preg_match' => '/^[a-zA-Z]\w*[a-zA-Z0-9_]$/',
                'unique' => $this->_db_table,
                'error_text' => 'Usernames must be between 6 and 20 characters, start with a letter and only using letters, numbers and underscores.'
            ],
            'email' => [
                'required' => true,
                'filter' => "email",
                'unique' => $this->_db_table,
                'error_text' => 'You must use a valid and accessible email address.'
            ],
            'firstname' => [
                'required' => true,
            ],
            'lastname' => [
                'required' => true,
            ],
            'password' => [
                'required' => true,
                'min' => 6
            ],
            'confirm_password' => [
                'required' => true,
                'matches' => 'password',
                'error_text' => 'Confirm password does not match.'
            ],
            'terms' => [
                'required' => true,
                'error_text' => 'You must read and accept the terms and conditions.'
            ]
        ];
    } // validation_rules()


    ////////////////////////////////////
    // Model-specific class functions //
    ////////////////////////////////////

    /**
     * Attempt a login
     *
     * Takes the $post_data data from the login form and checks the information
     * against the `users` table in the database.
     *
     * If a login attempt fails, it also stores the url the request was made
     * from before redirecting to the full login page. On successful login from
     * there, the user is return to the page from which they made the original
     * request.
     *
     * All attempts also see a record added to the activity table, via functions
     * in the Logs.php core class.
     *
     * @return Session/Cookie Login status and attempt information
     */
    public function login() {
        /*
            If we have a failed attempt at a login, followed by a succesfule one
            from the full login page, we want to take the user back to the page
            that they made the original attempt.

            To do this, when a login is attempted, if $_SESSION['refer_page']
            does not already exist and we are NOT on the full login page, we
            we set it with the current URL to redirect back to.
         */
        if (!Session::exists('refer_page') && $_SERVER['REQUEST_URI'] !== '/Login/') {
            Session::put('refer_page', $_SERVER['REQUEST_URI']);
        }

        /*
            We check the login attempt in stages as there are certain things that will mean a failure so we check those before we attempt to process anything.

            As soon as anything fails, we set the failure details as a session and redirect to the full login page. We also set a login failed record to the activity table via login_fail() in the Logs core class, set in the __construct() of this file to $this->_logs.
         */

        // Check if both fields have been filled
        if (!Input::get('username')|| !Input::get('password')) {
            $this->userAlerts([
                'msg' => 'login_empty_fields',
            ]);

            // At least one field is empty so fail
            $this->_logs->login_fail([
                'user' => (!empty(Input::get('username'))) ? Input::get('username') : 'unknown',
                'reason' => 'empty_field',
                'area' => ($this->_admin_area) ? 'a':'f'
            ]);

            Redirect::to('/Login/');
        } else {
            // Both fields have been filled so check that the username exists
            if (!$this->find (Input::get('username'))) {
                // The username does not exist so fail
                $this->_logs->login_fail([
                    'user' => Input::get('username'),
                    'reason' => 'user_not_found',
                    'area' => (Input::get('login')=='admin') ? 'a':'f'
                ]);
                $this->userAlerts([
                    'msg' => 'login_not_found',
                ]);
                Redirect::to('/Login/');
            } else {
                // The username does exist check they are allowed to login
                if($this->data()->status == '0') {
                    // The user has not verified so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_unverified',
                        'area' => (Input::get('login')=='admin') ? 'a':'f'
                    ]);
                    $this->userAlerts([
                        'msg' => 'login_unverified',
                    ]);
                    Redirect::to('/Login/');
                }

                if($this->data()->status == '-1') {
                    // The user is banned so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'user_banned',
                        'area' => (Input::get('login')=='admin') ? 'a':'f'
                    ]);
                    $this->userAlerts([
                        'msg' => 'login_banned',
                    ]);
                    Redirect::to('/Login/');
                }

                /*
                    If we have got this far, the user exists, is verified and is not banned, so are allowed to login.

                    We check the users password from the database against a string created using the posted password and the users salt from the database, via the make() function in core/Hash.php.
                 */
                if ($this->data()->password === Hash::make(Input::get('password'), $this->data()->salt)) {
                    /*
                        The password is correct for the user so log them in by
                        setting their id to the login session, as set in members()
                        in core/Settings.php
                     */
                    Session::put(SiteSettings::get('session_user_id'), $this->data()->user_id);
                    Session::put(SiteSettings::get('session_user_group'), $this->data()->group);

                    // Enter the login success record into the 'activity' table.
                    $this->_logs->login_success(Input::get('login'));

                    $this->userAlerts([
                        'msg' => 'login_success',
                    ]);
                    // If the user has ticked the 'Remember Me' box, store a login cookie.
                    if (Input::exists(['name'=>'remember'])) {
                        $this->setCookie();
                    }

                    /*
                        If we are on the full login page and the original request
                        came from any page another page, send them back there.

                        If they started on the full login page, send them to the
                        home page.
                     */
                    if(Input::get('login')=='admin') {
                        Redirect::to('/Admin');
                    } else {
                        if($_SERVER['REQUEST_URI'] == '/Login/') {
                            if(Session::exists('refer_page')) {
                                Redirect::to(Session::get('refer_page'));
                            } else {
                                Redirect::to('/home');
                            }
                        }
                    }

                } else {
                    // The password is incorrect so fail
                    $this->_logs->login_fail([
                        'user' => Input::get('username'),
                        'reason' => 'incorrect_pw',
                        'area' => (Input::get('login')=='admin') ? 'a':'f'
                    ]);
                    $this->userAlerts([
                        'msg' => 'login_not_pw',
                    ]);
                    Redirect::to('/Login/');
                } // password check
            } // user exists
        } // username and password filled
    }// login()

    /**
     * Attempt a logout
     *
     * Simply deletes all existing $_SESSION variables and cookies relating to
     * the current user and and enters it into the activity table using
     * logout_success() function in the Logs core class. We call this first as
     * we need the $_SESSION data to create the record.
     *
     * @return Session/Cookie Login deletion
     */
    public function logout() {

        // Enter a record in the activity table
        $this->_logs->logout_success(Input::get('logout'));

        // Delete the users $_SESSION data
        Session::delete(SiteSettings::get('session_user_id'));
        Session::delete(SiteSettings::get('session_user_group'));

        // If a login cookie is set, delete that as well
        if($this->hasCookie()) {
            $this->deleteCookie();
        }

        $this->userAlerts([
            'msg' => 'logout_success',
        ]);
    } // logout()




    /**
     * Check the user cookie
     *
     * Checks to see if there is a login cookie stored, based on the 'user_cookie'
     * record in the `settings` database table.
     *
     * If a cookie exists, it checks for a matching record in the `login_cookie`
     * table and if one is found, sets the $_SESSION to log the user in. If a
     * cookie exists but no match is found, the cookie is just deleted.
     *
     * @param string $hash The hash value stored in the login cookie table
     */
    public function checkCookie() {

        /*
            We only need to do anything if a cookie exists so we first check that using exists() in /'app/core/Cookie.php' passing the the 'user_cookie' value from the `settings` database table.
         */
        if (Cookie::exists(SiteSettings::get('user_cookie'))) {
            /*
                There is a cookie do we check the `login_cookie` table for any records where the 'hash' column matches the hash in the cookie.
             */
            $hashCheck = $this->_db->get('login_cookie', array('hash', '=', Cookie::get(SiteSettings::get('user_cookie'))));

            /*
                If there is a matching record, we can now log the user in.

                We first use the find() function within this class, using the value of the user_id column in the `login_cookie` table as the user reference.
                This will store the users details in $this->data() and we then create two $_SESSION variables, based on names set in the `settings` table in the database, to store the users id as the login reference, and their user group.
                The reason we also store the user group as a $_SESSION is so we do not have to queery the database each time we need to access it.

                If there is no matching record, we simply delete the cookie.
             */
            if ($hashCheck->count()) {
                if ($this->find($hashCheck->first()->user_id)) {
                    Session::put(SiteSettings::get('session_user_id'), $this->data()->id);
                    Session::put(SiteSettings::get('session_user_group'), $this->data()->group);
                }
            } else {
                Cookie::delete(SiteSettings::get('user_cookie'));
            }
        }
    } // checkCookie()

    /**
     * Check the user hash
     *
     * Checks an email/hash combination for a matching value in the user_hash
     * table, returning the true or false depending on whether a match was found.
     *
     * @param  email 	$email 	Users Email address
     * @param  sha256 	$hash  	Stored hash
     * @return int        		Count of returned results
     *
     */
    public function checkUserHash ($email, $hash) {
        if($this->_db->query("SELECT * FROM user_hash WHERE email = ? AND hash = ?", array($email, $hash))->count()) {
            return true;
        }
        return false;
    } // checkUserHash()

    /**
     * Creates a record in the user_hash table
     *
     * Whenever a user has to verify by email, the link they are sent will
     * contain their email address and a hash string that matches a row in the
     * `user_hash` table.
     *
     * This is to ensure a valid request has been used.
     *
     * @param  array 	$fields 	Email and Hash
     */
    public function createUserHash($fields) {
        /*
            The fields passed in will be the email address and hash. We also want to enter the time the record was inserted in the 'stamp' column so we create that first.
         */
        $fields['stamp'] = SiteSettings::current_datetime()->format('Y-m-d H:i:s');

        // Insert into the `user_hash` table
        if (!$this->_db->insert('user_hash', $fields)) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->createUserHash()';
            }
        }
    } // createUserHash()







    /**
     * Delete the user cookie
     *
     * Deletes the remember me cookie and also removes the record from the
     * `login_cookie` table. The cookie name is based on the name set in
     * 'user_cookie' in the `settings` database table
     *
     * @param  int 	$user 	User ID
     */
    public function deleteCookie() {
        /*
            Delete the record from the `login_cookie` table where the hash column matches the hash in the coookie.
         */
        $this->_db->delete('login_cookie', array('hash', '=', Cookie::get(SiteSettings::get('user_cookie'))));

        /*
            Delete the cookie.
         */
        Cookie::delete(SiteSettings::get('user_cookie'));
    } // deleteCookie()

    /**
     * Delete user hash
     *
     * Deletes any records from the 'user_hash' table that match the passed in
     * email address.
     *
     * @param  email  $_email  Email address
     */
    public function deleteUserHash ($_email) {

        if(!$this->_db->delete('user_hash', array('email', '=', $_email))) {
            // The delete was unsuccesful
			if (SiteSettings::get('debug_mode')) {
                throw new Exception();
            } else {
                echo 'Issue with M_Users->deleteUserHash()';
            }

            return false;
        }
    } // deleteUserHash ()


    /**
	 * Check if a remember me cookie exists
	 *
	 * Simply checks if a cookie, based on the 'user_cookie' record in the
	 * `settings` database table is stored on the users device, returning a true
	 * or false, using exists() in /'app/core/Cookie.php.
     *
	 * @return boolean Cookie existence
	 */
	public function hasCookie() {
        return (Cookie::exists(SiteSettings::get('user_cookie'))) ? true : false ;
    } // hasCookie()

    /**
     * Check a user has the required permission
     *
     * Each user group can have multiple permissions and these are stored as a
     * json string in the 'permissions' column of the usergroups table. If the
     * required permission is there, it returns true, otherwise it reurns false.
     *
     * For example, if a groups permissions were as follows
     * {"super_admin":0, "admin": 1,"mod":1}
     *
     * hasPermission('super_admin') would return false
     * hasPermission('admin') would return true
     * hasPermission('mod') would return true
     *
     * @param  string  $key The permission name
     * @return boolean      Permission status
     * @example hasPermission('admin')
     */
    public function hasPermission ($key) {
        // Get the user group details for the current user
        $this->_db->get(
            'user_groups',
            ['usergroup_id', '=', Session::get(SiteSettings::get('session_user_group'))]
        );

        // As long as the user group is set, check if that group has the requested permission
        if($this->_db->count()) {
            // Set the permissions of the users group to $permissions array
            $permissions = json_decode($this->_db->first()->permissions, true);

            // Check if the requested permission exists in the array
            if ($permissions[$key] == true) {
                // The permission exists so return true
                return true;
            }
        }
        return false;
    } // hasPermission()

    /**
     * Get id of current user
     *
     * If the current user is logged in, returns their id, otherwise returns null.
     * @return int/boolean      User ID or null
     */
    public function currentUser () {
        return ($this->isLoggedIn())
            ? Session::get(SiteSettings::get('session_user_id'))
            : '0' ;
    } // currentUser()

    /**
     * Check if a user is logged in
     *
     * Simply checks for existance of the login $_SESSION variable deined by the
     * 'session_user_id' in the `settings` table in the database.
     * @return boolean Login Status
     */
    public function isLoggedIn() {
        return (Session::exists(SiteSettings::get('session_user_id'))) ? true : false ;
    } // isLoggedIn()


    /**
     * Show the login form
     *
     * Displays the login form that is both shown from the user box on every page
     * but also the login page at http://yoursite/Login and the admin login page
     * http://yoursite/Admin/Login.
     *
     * One of the things that can be shown on the form is a link to the full
     * login page for help. We do not need this if we are already on that page
     * or in the admin area so we can use the $params to pass in
     * 'hide_help'=>true if we do not need it.
     *
     * @param  array    $params    Settings
     * @return 	string 	Login Form
     */
    public function loginForm($params=null){

        /*
            To start the form , we create an empty variable to hold the content and then add
            to it as we go along. As it is a small form, we simply build it in a linear fashion.

            For the username and password, we use the input groups from Bootstrap, with the contents set as FontAwesome icons.
         */

        $content = '';
        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],
            'prepend' => [
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],
            'input' => [
                //'class' => 'bg-info',
                'type' => 'text',
                'id' => 'login-user',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],
        ]); // #Username


        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-3'
            ],
            'prepend' => [
                'content' => '<i class="fas fa-key fa-sm"></i>',
                'id' => 'password_field'
            ],
            'input' => [
                'type' => 'password',
                'id' => 'login-password',
                'name' => 'password',
                'placeholder' => 'Password',
                'aria' => [
                    'label' => 'Password',
                    'describedby' => 'password_field',
                ]
            ],
        ]); // #Password

        /*
            Next we add a checkbox to allow the user to specify whether wants to remain logged in, even when the browser is closed.

            When this is selected, a cookie is stored on the users machine/device that allows the system to recognise them on future visits.
         */
        $content .= Php2Bs::bs_form_check ([
            'label' => [
                'for' => 'Remember',
                'content' => 'Remember Login?',
                'class' => 'mb-0',
            ],
            'checkbox' => [
                'id' => 'Remember',
                'name' => 'remember',
                'class' => 'form-check-input',
            ],
            'outer' => [

            ]
        ]); // #Remember

        /*
            If we are not in the admin area and have not specifed that we want the link to the full login/help page to be show, we add it to $content.
         */
        if(!isset($params['admin']) && !isset($params['hide_help'])) {
            $content .= Php2Html::a ([
                'content' => 'Login Help',
                'href' => '/Login/'
            ]);
        }

        /*
            The last thing that we add to content is the submit button.
         */
        $content .= Php2Bs::bs_button ([
            'value' => (isset($params['admin'])) ? 'admin':'frontend',
            'button_type' => 'submit',
            'color' => 'primary',
            'size' => 'sm',
            'class' => 'float-right',
            'content' => 'Login',
            'name' => 'login'
        ]);

        /*
            Finally, we pass whatever is stored in $content, into a form, along with a method of post. There is no need to set action as we are posting back to the same page.

            We simply return the form.
         */
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

    } // loginForm()

    /**
     * Show the logout form
     *
     * Displays the logout form that is both shown from the user box on every page
     * when a user is logged in and is simply a single button, created in the
     * same way as the submit button for the login form.
     *
     * @return 	string 	Logout Form
     */
    public function logoutForm($admin=false) {

        /*
            Create the button.
         */
        if($admin) {
            $content = Php2Bs::bs_button ([
                'value' => 'admin',
                'button_type' => 'submit',
                'color' => 'primary',
                'size' => 'sm',
                'class' => 'btn-block',
                'content' => '<i class="fas fa-sign-out-alt"></i>',
                'name' => 'logout'
            ]);
        } else {
            $content = Php2Bs::bs_button ([
                'value' => 'frontend',
                'button_type' => 'submit',
                'color' => 'primary',
                'size' => 'sm',
                'class' => 'btn-block',
                'content' => 'Logout',
                'name' => 'logout'
            ]);
        }


        /*
            Return the form with the button passed in. There is no need to set action as we are posting back to the same page.
         */
        return Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => 'req-token',
            'content' => $content
        ]);

    } // loginForm()





    /**
     * Get the total most recent record
     *
     * To get the latest record, we run a select query on $this->_db_table,
     * ordering by the most recent created date and limiting to just the first
     * (most recent) record.
     *
     * @return int 	    Count of rows
     */
    public function mostRecent() {
        // Select the most recent record from the database
        return  $this->_db->query('SELECT * FROM '.$this->_db_table .' ORDER BY `created` DESC LIMIT 1')->first();

    } // mostRecent()

    /**
     * Set the user cookie
     *
     * Sets a cookie when a user selects 'Remember me' on the login form.
     *
     * The cookie is stored with the name set in 'user_cookie' in the `settings`
     * database table and contains a unique hash with an expiry based on what is
     * set as 'cookie_expiry in the `settings` database table.
     *
     * A corresponding record is placed in the `login_cookie` database table with
     * the hash and the users id.
     *
     * @param string $hash The hash value stored in the login cookie table
     */
    public function setCookie() {
        /*
            Create a new hash to store in the cookie using the unique() function in '/app/core/Hash.php'.
         */
        $_hash = Hash::unique();

        /*
            Check to see if this user already has a login hash. If there is, something is wrong with logouts, but all we will do is just re-use those details.
         */
        $hashCheck = $this->_db->get('login_cookie', array('user_id', '=', $this->data()->id));

        /*
            If there is no existing record, we add a new one to the `login_cookie` table, otherwise we simply use the hash already stored for that user in the `login_cookie` table.
         */
        if (!$hashCheck->count()) {
            $this->_db->insert('login_cookie', array(
                'user_id' => $this->data()->id,
                'hash' => $_hash
            ));
        } else {
            $_hash = $hashCheck->first()->hash;
        }

        /*
            Set the cookie using the put() function in '/app/core/Cookie.php'.
         */
        Cookie::put(SiteSettings::get('user_cookie'), $_hash, SiteSettings::get('cookie_expiry'));
    } // setCookie()

    /**
     * Check the user hash
     *
     * Checks an email/hash combination for a matching value in the user_hash
     * table, returning the true or false depending on whether a match was found.
     *
     * @param  email 	$_email 	Users Email address
     * @param  sha256 	$_hash  	Stored hash
     *
     */
    public function sendRegistrationMail ($_email, $_hash) {
        try {
            SendMail::registration($_email, $_hash);
        } catch(Exception $e) {
        die();
        }
    } // sendVerificationMail()




    ####################################################



    /**
	 *	Change a users password
	 *
	 *	Creates a new salt and hashed password and updates a users
	 *	record with them.
	 *
	 *	@param 	int		$user		User ID
	 **/
	public function changePassword ($user) {
		// We always use validation as an object so we do this for constency
		$validate = (object)array();

		// Place the $post_data data into a variable that will get manipulated.
		$post_data = $post_data;

		/*
			The forms all have .req-token to prevent double-posting on page
			refresh. This generates a new $_SESSSION['token'] value and also
			adds a hidden form element containing the $_SESSSION['token'].

			We need to check that the posted token matches the current $_SESSSION['token']
			and only proceed if it does.
		 */
		if(!Token::check(Input::get('token'))) {
    		// The token check failed so set the errors to 'token'
    		$validate->error = 'token';

    	} else {
			/*
				The token check is succesful, so we again unset that from the $post_data array, along with the
				submit button, to ensure we only have insert data left.
			*/
			unset($post_data->token);
			unset($post_data->reset_password_submit);

			/*
				We now attempt to validate the contents of $post_data.

				The validation for this form is passed directly into Form_Functions::postValidate(), along with the $post_data and
				this checks each field in $post_data against it's relevant validation if it exists.

				The function returns a boolean 'status' as to  whether validation was passed. If validation failed, it will also contain any
				validation errors that have been generated.
			 */
			$validate = Form_Functions::postValidate($post_data,
			array (
			    'password' => [
					'validation' => [
					    'required' => true,
					    'min' => 6
					],
				],
			    'confirm_password' => array(
				'type' => 'password',
				'error' => 'You must enter a confirmation password that matches the password',
				'validation' => array(
				    'required' => true,
				    'matches' => 'password'
				),
			    ))
			);

			if($validate->status)
			{
				// Create a new salt
				$salt = Hash::salt(32);

				/*
					The original $post_data -> password cannot be entered as it is a raw string of readable data.

					We replace this with a hashed password, generated using the salt we just created and also create
					a new element in $post_data with the salt as when logging in, we will need the updated salt to match
					the stored, hashed, password.
				*/
				$post_data = array(
				'password' => Hash::make(Input::get('password'), $salt),
				'salt' => $salt
				);

				// Now we have the correct $post_data so use quickUpdate() to process it.
				$this->quickUpdate($user, $post_data);
			}
		}

		// Return any errors
		return (isset($validate->error)) ? $validate->error : false ;
    } // changePassword()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordForm($post_data=[]){

        /*
            After a failed post, want to repopulate the form with
            the posted data so the user does not have to fill it all in again, along with any required field validation styles.

            We use an array called $field_data to stored these ready for use
            so create an empty version before doing the checks.
         */
        $field_data = [];

        /*
            Create an array of the fields that will always be used in the form.

            As we go along, we any others that we require, based on the type of
            form we are using before we generate the form.
         */
        $form_fields = [
            'password', 'confirm_password'
        ];

        foreach ($form_fields as $value) {
            // Check for errors
            if (isset($post_data['errors'][$value])) {
                // Errors found for the field so add invalid class
                $field_data[$value]['class'] = 'is-invalid';
            } else {
                // No errors found so if there is posted data, add the valid class
                $field_data[$value]['class'] = (Input::exists()) ? 'is-valid' : '';
            }

            // Check for posted data
            if (Input::exists($value)) {
                // There is posted data so set that as the value
                $field_data[$value]['val'] = Input::get($value);
            } else {
                // There is no posted data so see if a record has been passed in
                if (isset($post_data['data'])) {
                    // There is a record passed in so set that as the value
                    $field_data[$value]['val'] = $post_data['data']->$value;
                } else {
                    // There is no record passed in so set the value as blank
                    $field_data[$value]['val'] = '';
                }
            } // if (Input::exists($value))
        } // foreach($form_fields)


        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_form_row ([
            //'class' => '',
            'content' =>
            # Password
            Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Password',
                    'content' => 'Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
                .Php2Bs::bs_input_password ([
                    'id' => 'Passsword',
                    'name' => 'password',
                    'placeholder' => 'Passsword',
                    'class' => $field_data['password']['class'],
                    'value' => $field_data['password']['val'],
                    'aria' => [
                        'describedby' => 'Password'
                    ],
                ]) // password
            ]) // Php2Html::div.form-group
            # Confirm_Password
            .Php2Bs::bs_form_group ([
                'class' => 'col-md-6',
                'content' => Php2Html::label ([
                    'for' => 'Confirm_Password',
                    'content' => 'Confirm Password',
                    'class' => 'mb-0',
                ]) // Php2Html::label
            .Php2Bs::bs_input_password ([
                    'id' => 'Confirm_Password',
                    'name' => 'confirm_password',
                    'placeholder' => 'Confirm Password',
                    'class' => $field_data['confirm_password']['class'],
                    'value' => $field_data['confirm_password']['val'],
                    'aria' => [
                        'describedby' => 'Confirm_Password'
                    ],
                ]) // Php2Bs::bs_input_password
            ]) // Php2Bs::bs_form_group
        ]); // Php2Bs::bs_form_row

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Reset',
            'name' => 'reset_password'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()


    /**
     * Show the reset password  link form
     *
     * Displays the reset password link
     *
     * @return 	string Reset Password Link Form
     */
    public function resetPasswordLinkForm(){
        /**
         * Set the output variable
         *
         * The final output will be built as a variable called
         * $text so create it ready to add to
         *
         * @var null
         */
        $text = '';

        $content = '';

        $content .= Php2Bs::bs_input_group ([
            'group' => [
                'class' => 'mb-2'
            ],

            'prepend' => [
                'class' => '',
                'content' => '<i class="fas fa-user fa-sm"></i>',
                'id' => 'username_field'
            ],

            'input' => [
                'class' => '',
                'type' => 'text',
                'id' => 'Username',
                'name' => 'username',
                'placeholder' => 'Username, email or id',
                'aria' => [
                    'label' => 'Username',
                    'describedby' => 'username_field',
                ]
            ],

        ]); // Php2Html::div.form-group

        $content .= Php2Html::button ([
            'button_type' => 'submit',
            'class' => 'btn btn-primary btn-sm float-right',
            'content' => 'Send Email',
            'name' => 'send_reset_email'
        ]);

        $text .= Php2Html::form([
            'id' => '',
            'action' => '',
            'method' => 'post',
            'class' => '',
            'content' => $content
        ]);

        // Return the output
        return $text;
    } // loginForm()


    public function sendPasswordLinkMail ($_email, $_hash) {
        // Insert the email and has as a record in user_hash
        try {
            SendMail::sendPasswordLink($_email, $_hash);
        } catch(Exception $e) {
        die();
        }

    } // sendVerifyMail()



}










=================================================================================================================











<?php

/**
 * Admin Users View
 *
 * There is full commenting on how the views are structured and
 * all of the parameters that can be passed used in app/views/admin/index.php.
 *
 * As a result, this file only comments or includes anything that is
 * different from that file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @example 	http://yoursite/Admin/Users
 * @example 	http://yoursite/Admin/Listing
 * @example 	http://yoursite/Admin/Users/{Username}
 * @example 	http://yoursite/Admin/Users/Edit/{Username}
 * @example 	http://yoursite/Admin/Users/Delete/{Username}
 *
 */

nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');

//Set the parameters for the page
$params['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$params['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;

// Highlight the correct menu item
$params['menu_category'] = 'Users';

$content = '';

// Show any messages that have been sent to the page as an alert
$content .= showPageAlerts ($data);
$content .= Php2Bs::bs_alert([
    'color' => 'info',
    'heading' => 'Site Maintainence',
    'content' => 'We are working on a few backend bits today so do not be alarmed if things do not work or disappear for a while!'
]);
/*
    There are two pages that use this view where details of an individual user
    will be shown - profile and edit.

    For each of these the users details will be passed through as $data['user']
    and we use the status from that to show an extra message at the top for any
    user that is either banned or unverified.
*/
if(isset($data['user']) && $data['user']->status !== '1') {
    switch ($data['user']->status) {
        case '-1':
            $message = 'This user is banned';
            $color = 'danger';
            break;

        case '0':
            $message = 'This user is not verified';
            $color = 'warning';
            break;
    }
    $content .= Php2Bs::bs_alert (['heading'=> $message, 'color'=> $color]);


} // user status alert

/////////////////////////////////////////////////////////////////////////
// Show the relevant content based on the $data['page_type'] passed in //
/////////////////////////////////////////////////////////////////////////

/**
 * Edit page
 *
 * Shows the edit form and change password form for the specified
 * user, along with any validation from previous form post attempts. This is
 * all done in the controller and the passed in $data['edit_form'] and
 * $data['password_form'] are ready to display.
 *
 * @link 	    http://yoursite/Admin/Users/Edit
 */
if($data['page_type'] == 'edit') {

    /*
        We will only have passed $data['edit_form'] to the view if the page is
        being viewed by a logged in user, so we use that to check whether we need
        to show anything. If the user is not logged in, a messaage to that effect
        will have been passed trough and shown as an alert.

        If the user is logged in, we always need the forms, even after posting so
        just add them to the content inside cards.
     */
	if(isset($data['edit_form'])) {

        /*
            If the user is banned or unverified, show an give the card
            header a suitable background colour, otherwise just let it
            be default.
         */
        switch ($data['user_status']) {
            case '-1':
                $header_style = 'bg-danger text-light';
                break;
            case '0':
                $header_style = 'bg-warning text-dark';
                break;
            default:
                $header_style = 'bg-light';
                break;
        } // card header style

        // Add the form to the content in a card
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update Profile',
                'class' => $header_style,
            ],
            'class' => 'border-dark mb-1 ',
            'body' => [
                'content' => $data['edit_form'],
                'class' => '',
            ],
        ]);// bs_card edit form

        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Change Password'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['password_form'],
                'class' => '',
            ],
        ]);// bs_card passwordform
    } // if $data->password_form
} // $data['page_type'] == 'edit'

/**
 * Show a list of users
 *
 * The list of users will have been passed in via $data['list'] but on this
 * occassion, it is still in the raw data stored in the database, when sent
 * through.
 *
 * We want to show it in a table, via the make_table() function in Php2Html, but
 * before that, we turn the username into a link to their profile, and replace
 * the created date with a more readable format.
 *
 * @example 	http://yoursite/Admin/Listing
 **/
if($data['page_type'] == 'listing') {

    // Highlight the 'List' item in the 'Users' menu
    $params['menu_item'] = 'List';

    /*
        Loop through the list passed to the view and for each one,
        making any amendments required before passing it to the table.
     */
    foreach ($data['list'] as $key => $value) {

        /*
            Create a new key in the list called 'edit' and assigned it three buttons - view, edit and delete.
            The buttons are created using the a() and i() Php2Html. The i() 'class' has Bootstrap text color and margin styles, plus the name of the FontAwesome icon it uses.
        */
        $data['list'][$key]->edit = Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-search text-info mr-2'
            ]),
            'href' => '/Admin/Users/'.$value->username

        ])
        .Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-edit text-success mr-2'
            ]),
            'href' => '/Admin/Users/Edit/'.$value->username

        ])
        .Php2Html::a ([
            'content' => Php2Html::i ([
                'content' => '',
                'class' => 'fas fa-times-circle text-danger mr-2'
            ]),
            'href' => '/Admin/Users/Delete/'.$value->username

        ]);

        /*
            Take the username of the current record and overwrite it in the list
            as a link to that users profile.

            $data['list'][$key]->username = SteveB
            becomes
            $data['list'][$key]->username = <a href="/Admin/Users/SteveB">SteveB</a>
        */
        $data['list'][$key]->username = Php2Html::a ([
            'content' => $value->username,
            'href' => '/Users/'.$value->username
        ]);

        /*
            Creates a new key in the list called 'full_name' and sets the
            users firstname and lastname to it.

            This would create
            $data['list'][$key]->full_name = Steve Ball
        */
        $data['list'][$key]->full_name = $value->firstname.' '.$value->lastname;

        /*
            Create a new DateTime object from the 'created' value and then
            overwrite it with a formatted version.

            $data['list'][$key]->created = 2017-05-11 14:58:00
            becomes
            $data['list'][$key]->created = 22/05/2017 2:58pm
        */
        $join_date = new DateTime($value->created);
        $data['list'][$key]->created = $join_date->format('d/m/Y g:ia');

        /*
            If the user status is '-1' (banned) or '0' unverified we
            add a background colour to the table row
         */
		switch ($value->status) {
			case -1:
				$data['list'][$key]->tr_class = 'table-danger';
				break;

			case 0:
				$data['list'][$key]->tr_class = 'table-warning';
				break;
		} // switch status

    } // foreach $data['list']

    /*
        Now that $data['list'] has been modified to how we need it, we need to pass it into the table via make_table(). We will explain what is being used here but there is far more commenting against that function in '/app/core/Php2Html.php'.

        When calling make_table() we pass in an array that has three keys

            'columns' - sets the name of the columns, an alias to show in the header and any classes either for the <th>, the <td> or both. Each of the keys must exist in each record of $data['list']

            'data' - the records to show so in this case $data['list'], but tweaked

            'settings' - anything specific to the table itself but not data related such as an overall table class

        You can see that we are specifying to show 4 columns 'username', 'full_name', 'created' and 'edit'.

        For 'username' and 'created' we simply set the header to show a capitilised version of the column name and set it to have light text on a dark background.

        For 'edit', we choose to have an empty header so there is no need to add a class and we just set 'alias' as empty.

        We do a lot more in 'full_name'. Firstly we set the header to show as 'Full Name'. Next we set the <th> to have light text and a dark background as we did with 'username' and 'created'. This time though we also set a 'td_class' which means that the full_names will have a different colour to the rest. Finally, we set a 'global_class' which applies to both the <th> and <td>. We are using a Bootstrap class that simply hides the column on small screens and shows it on larger ones.

        The second key is 'data' and that is simply our amended $data['list']. However, the way that our database functions work, this list is currently an object not an array but the function requires an array. We have built a function in '/src/functions/object_to_array.php' called  objectToArray() that we used to turn it into the array we require.

        Finally we have the 'settings' key. We have two parameters here - 'show_header' is set to true to denote that we want the table header to show and 'class' has a couple of Bootstrap classes.

        TODO:: Create a make_bs_table in Php2Bs
    */
    $table = Php2Html::make_table ([
        'columns' => [
            'username' => [
                'alias' => 'Username',
                'th_class' => 'bg-dark text-light'
            ],
            'full_name' => [
                'alias' => 'Full Name',
                'th_class' => 'bg-dark text-light ',
                'td_class' => 'text-info',
                'global_class' => 'd-none d-md-table-cell'
            ],
            'created' => [
                'alias' => 'Joined',
                'th_class' => 'bg-dark text-light',
            ],
            'edit' => [
                'alias' => '',
            ],
        ],
        // The listing is an object so convert it to an array
		'data' => objectToArray($data['list']),
        'settings' => [
            'show_header' => true,
            'class' =>'table mb-0'
        ]
	]); // make table()

    /*
        Finally, now that we have a fully fledged html table set to $table,
        We wrap it in a Boostraps card and add it to $content.
    */
    $content .= Php2Bs::bs_card ([
        'class' => 'border-secondary bg-light mb-1',
        'body' => [
            'content' => $table,
            'class' => 'p-0',
        ],
    ]);// bs_card
} // $data['page_type'] == 'listing'

/**
 * Member overview page
 *
 * Three sets of data get passsed into this view, are count of all users,
 * details of the latest user and a list of all users.
 *
 * The list of users will have been passed in via $data['list'] but on this
 * occassion, it is still in the raw data stored in the database, when sent
 * through.
 *
 * We want to show it in a table, via the make_table() function in Php2Html, but
 * before that, we turn the username into a link to their profile, and replace
 * the created date with a more readable format.
 *
 * @link 	    http://Users/
 */
if($data['page_type'] == 'overview') {

    // Highlight the correct submenu item
    $params['menu_item'] = 'Overview';

    /*
        With the count of all users and latest user, we currently just show them inside a Bootstrap card. But this needs improving. The only manipulation we do is to change the joined date of th latest user into a more readable format, using DateTime().
     */
    $latest_user_date = new DateTime($data['latestuser']->created);
    $content .= Php2Bs::bs_card ([
            'class' => 'border-secondary bg-light mb-1',
            'header' => [
                'content' => 'User Details'
            ],
            'body' => [
            'content' => Php2Html::li ([
                'content' => 'Total Users : ' . $data['usercount'],
                'class' => 'list-group-item border-warning'
            ])
            .Php2Html::li ([
                'content' => 'Latest User : ' . $data['latestuser']->username . ' (' . $latest_user_date->format('d/m/Y g:ia') . ')',
                'class' => 'list-group-item border-info'

            ]),
        ],
    ]);// bs_card
} // $data['page_type'] == 'overview'

/**
 * User Create page
 *
 * We always show the form as there may be occassions where several users are
 * being created, unlie the front end where a user would only register once so
 * we hide it once processed..
 *
 * The only thing we do here is set the menu item to highlight and show the form
 * in a card as everything else is controilled via messages passed through from
 * the controller.
 *
 * @link 	    http://yoursite/Register
 */
if($data['page_type'] == 'register') {
    // Highlight the correct item in the 'Users' menu
    $params['menu_item'] = 'Add';

    /*
        As we want the form to show again, even after we succesfully
        create a new account, we simply add that to the content.

        Any other messages following an attempte create is handled by
        the showPageAlerts()  function above.
     */
    $content .= Php2Bs::bs_card ([
        'class' => 'border-dark bg-light mb-1',
        'body' => [
            'content' => $data['form'],
            'class' => '',
        ],
    ]);// bs_card register
} // $data['page_type'] == 'register'

/**
 * Profile page
 *
 * We only show the profile if there has been user data passed through, stored
 * as $data['user']. If this has not been passed it, it would be safe to
 * assume that the user was not found, so anything required to be shown will be
 * passed as $data['message'] and show as an alert.
 *
 * @link 	    http://Users/{Username}
 */
if($data['page_type'] == 'profile') {
    /*
        We only show the profile if the user was found in the controller
        function so we only add to the content if the $data['user'] exists.

        If is does, we show some basic details about the user.
     */
    if(isset($data['user'])) {

        // The user was found so start building the output as a variable
        $profile = 'Full Name : ' . $data['user']->firstname.' '.$data['user']->lastname;
        $profile .= '<hr>';

        $join_date = new DateTime($data['user']->created);
        $profile .= 'Joined : ' . $join_date->format('l, jS F, Y \a\t g:ia');

        $profile .= '<hr>';
        $profile .= 'User Group : ' . $data['user']->group;

        // Add to the content by passing $profile into a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-secondary bg-light mb-1',
            'body' => [
                'content' => $profile,
            ],
        ]);// bs_card profile
    } // $data->status not 'admin_not_found'
} // $data['page_type'] == 'profile'













# Show the required data based on passed in page type
if($data['page_type'] == 'delete') {
    $params['menu_item'] = 'Delete';
    /*
        We only need the forms if the user is found  and we do not
        already have a delete request so, in the controller, we only
        pass the 'delete_form' parameter with the form this criteria
        is met, otherwise it is null.

        We only need to add to the content if $data->delete_form contains
        anything. If no user was found or the delete had already been
        processed, any page content is handled by the showPageAlerts()
        function above.
     */
    if(isset($data['delete_form'])) {
        // Show the delete form
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Delete account'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => Php2Html::p(['content'=>'This will delete the account and cannot be undone.']).$data['delete_form'],
                'class' => '',
            ],
        ]);// bs_card delete form
    } // if $data->delete_form
} // $data['page_type'] == 'delete'





// Pass the details to the template
new T_Admin ($content,$params);











=================================================================================================================









<?php

/**
 * Home Page View
 *
 * This only controls the view from the home page of the site.
 *
 * No formatting is carried out anywhere and all that is passed in is an
 * array. The entire layout is styled within this file.
 *
 * @package 	Core
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2017 Steve Ball <steve@follyball.co.uk>
 * @example 	/app/controllers/home.php->index()
 * @link 		http://site.com/
 *
 */


# Uncomment the below to see any data passed in or any $_POST data
// nicePrint_r($data, 'Data');
// nicePrint_r($_SESSION, 'Session');

/**
 * Set the parameters for the page
 **/
$params['layout'] = 'full-width';
$params['page_title'] = (isset($data->page_name)) ? $data->page_name : null;
$params['page_subtitle'] = (isset($data->page_subtitle)) ? $data->page_subtitle : null;
$params['meta'] = array(
    'description' => 'Description set in page',
);

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= Php2Bs::bs_column ([
    'content' => Session::flash('userAlert'),
    'class' => 'col pt-2'


]);

$help_text = Php2Html::p(['content'=>'You can log in using either the Username or Email address you registered with or your user id.']).Php2Html::p(['content'=>'If you cannot remember your password, <a href="/Members/ResetPassword">click here</a> to reset it.']).Php2Html::p(['content'=>'If you cannot remember your username or email use to register, <a href="/Contact">email me</a>.']);



$content .= Php2Bs::bs_column ([
    'class' => 'col-12',
    'content' => Php2Bs::bs_row ([

        'content' => Php2Bs::bs_column ([
            'content' => Php2Bs::bs_card ([
                'class' => 'border-secondary bg-dark text-light',
                'body' => array (
                    'content' => $help_text,
                    'class' => '',
                ),
            ]),
            'class' => 'col-12 col-md-4 mb-1'
        ])
        .Php2Bs::bs_column ([
            'content' =>  Php2Bs::bs_card ([
                'class' => 'border-dark bg-light',
                'body' => array (
                    'content' => $data['form'],
                    'class' => '',
                ),
            ]),
            'class' => 'col-12 col-md-8 mb-1'
        ]),
    ]),
]);





/**
 * Pass the details to the template
 *
 * @var string 	Data to be shown
 * @var string 	Version on template to use
 * @var string 	Title of the page
 */
new T_Main ($content,$params);












=================================================================================================================









<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
/**
 * Users View
 *
 * Covers all pages that are used to view user information, as well as the
 * registration page.
 *
 * There is full commenting on how the views are structured and all of the
 * parameters that can be passed used in app/views/home/index.php. As a
 * result, this file only comments or includes anything that is different
 * from that file.
 *
 * This file does have one thing that the example one mentioned above does
 * not have and that is powering several different pages. That is explained
 * below and itself works as the guide for other files that require it.
 *
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 	    http://yoursite/Register
 * @link 	    http://yoursite/Members
 * @link     	http://yoursite/Members/Listing
 * @link    	http://yoursite/Members/{Username}
 * @link    	http://yoursite/Members/ResetPassword
 *
 */

// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
//nicePrint_r($_SESSION, 'Session');

//Set the parameters for the page
$settings['layout'] = 'right-col';
$settings['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$settings['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;
$settings['meta'] = ['description' => 'Description set in page'];

$content = '';

// Show any messages that have been sent ot the page as an alert
$content .= Session::flash('userAlert');

/////////////////////////////////////////////////////////////////////////
// Show the relevant content based on the $data['page_type'] passed in //
/////////////////////////////////////////////////////////////////////////

# When the view is called from the controller, one of the parameters that can
# be passed in is 'page_type'. On views that control multiple pages, this
# specifies which page and therefore which data to show.
# There will always be the page title and the call to the template at the end
# but this allows you to restrict display to only what is required.
# For example, you may have an add page and an edit page that both use a
# form, passed in as 'form'. The page type will prevent the wrong form from s
# howing at the wrong time.
#
/**
 * Edit page
 *
 * Shows the edit form and change password form for the currently logged in
 * user, along with any validation from previous form post attempts. This is
 * all done in the controller and the passed in $data['edit_form'] and
 * $data['password_form'] are ready to display.
 *
 * @link 	    http://yoursite/Members/Edit
 */
if($data['page_type'] == 'edit') {
    /*
        We will only have passed $data['edit_form'] to the view if the page is
        being viewed by a logged in user, so we use that to check whether we need
        to show anything. If the user is not logged in, a messaage to that effect
        will have been passed trough and shown as an alert.

        If the user is logged in, we always need the forms, even after posting so
        just add them to the content inside cards.
     */
    if(isset($data['edit_form'])) {
        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Update Profile'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['edit_form'],
                'class' => '',
            ],
        ]);// bs_card edit form


        $content .= Php2Bs::bs_card ([
            'header' => [
                'content' => 'Change Password'
            ],
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['password_form'],
                'class' => '',
            ],
        ]);// bs_card change password
    }

} // $data['page_type'] == 'edit'

/**
 * Member overview page
 *
 * Three sets of data get passsed into this view, are count of all users,
 * details of the latest user and a list of all users.
 *
 * The list of users will have been passed in via $data['list'] but on this
 * occassion, it is still in the raw data stored in the database, when sent
 * through.
 *
 * We want to show it in a table, via the make_table() function in Php2Html, but
 * before that, we turn the username into a link to their profile, and replace
 * the joined date with a more readable format.
 *
 * @link 	    http://Members/
 * TODO: switch table to Bootstrap
 */
if($data['page_type'] == 'overview') {
    /*
        With the count of all users and latest user, we currently just show them inside a Bootstrap card. But this needs improving. The only manipulation we do is to change the joined date of th latest user into a more readable format, using DateTime().
     */
    $latest_user_date = new DateTime($data['latestuser']->created);
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1',
        'header' => [
            'content' => 'User Details'
        ],
        'body' => [
            'content' => Php2Html::li ([
                'content' => 'Total Users : ' . $data['usercount'],
                'class' => 'list-group-item border-warning'
            ])
            .Php2Html::li ([
                'content' => 'Latest User : ' . $data['latestuser']->username . ' (' . $latest_user_date->format('d/m/Y g:ia') . ')',
                'class' => 'list-group-item border-info'

            ]),
        ],
    ]);// bs_card

    /*
        Loop through the list passed to the view and for each one, replace the
        'username' element with a link to that elements edit page.

        We also replace the 'joined' element with a long date and time using the
        php DateTime function.

     */
    foreach ($data['list'] as $key => $value) {
        /*
            Take the username of the current record and overwrite it in the list
            as a link to that users profile.

            $data['list'][$key]->username = SteveB
            becomes
            $data['list'][$key]->username = <a href="/Admin/Users/SteveB">SteveB</a>
        */
        $data['list'][$key]->username = Php2Html::a ([
            'content' => $value->username,
            'href' => '/Users/'.$value->username
        ]);

        /*
            Creates a new key in the list called 'full_name' and sets the
            users firstname and lastname to it.

            This would create
            $data['list'][$key]->full_name = Steve Ball
        */
        $data['list'][$key]->full_name = $value->firstname.' '.$value->lastname;

        /*
            Create a new DateTime object from the 'joined' value and then
            overwrite it with a formatted version.

            $data['list'][$key]->joined = 2017-05-11 14:58:00
            becomes
            $data['list'][$key]->joined = 22/05/2017 2:58pm
        */
        $join_date = new DateTime($value->created);
        $data['list'][$key]->joined = $join_date->format('d/m/Y g:ia');

    } // foreach $data->list

    /*
        Now that $data['list'] has been modified to how we need it, we need to pass it into the table via make_table(). We will explain what is being used here but there is far more commenting against that function in '/app/core/Php2Html.php'.

        When calling make_table() we pass in an array that has three keys

            'columns' - sets the name of the columns, an alias to show in the header and any classes either for the <th>, the <td> or both. Each of the keys must exist in each record of $data['list']

            'data' - the records to show so in this case $data['list'], but tweaked

            'settings' - anything specific to the table itself but not data related such as an overall table class

        You can see that we are specifying to show 3 columns 'username', 'full_name' and 'joined'.

        For 'username' and 'joined' we simply set the header to show a capitilised version of the column name and set it to have light text on a dark background.

        We do a lot more in 'full_name'. Firstly we set the header to show as 'Full Name'. Next we set the <th> to have light text and a dark background as we did with 'username' and 'joined'. This time though we also set a 'td_class' which means that the full_names will have a different colour to the rest. Finally, we set a 'global_class' which applies to both the <th> and <td>. We are using a Bootstrap class that simply hides the column on small screens and shows it on larger ones.

        The second key is 'data' and that is simply our amended $data['list']. However, the way that our database functions work, this list is currently an object not an array but the function requires an array. We have built a function in '/src/functions/object_to_array.php' called  objectToArray() that we used to turn it into the array we require.

        Finally we have the 'settings' key. We have two parameters here - 'show_header' is set to true to denote that we want the table header to show and 'class' has a couple of Bootstrap classes.
    */
    $table = Php2Html::make_table ([
        'columns' => [
            'username' => [
                'alias' => 'Username',
                'th_class' => 'bg-dark text-light',
                'global_class' => 'text-danger'
            ],
            'full_name' => [
                'alias' => 'Full Name',
                'th_class' => 'bg-dark text-light',
                'td_class' => 'text-info',
                'global_class' => 'd-none d-md-table-cell'
            ],
            'created' => [
                'alias' => 'Joined',
                'th_class' => 'bg-dark text-light',
            ],
        ],
        // The listing is an object so convert it to an array
		'data' => objectToArray($data['list']),
        'settings' => [
            'show_header' => true,
            //'border' =>'1',
            'class' =>'table mb-0'
        ]
    ]); // make table()

    /*
        Finally, now that we have a fully fledged html table set to $table,
        We wrap it in a Boostraps card and add it to $content.
    */
    $content .= Php2Bs::bs_card ([
        'class' => 'border-primary bg-light mb-1',
        'body' => [
            'content' => $table,
            'class' => 'p-0',
        ],
    ]);// bs_card table


} // $data['page_type'] == 'overview'

/**
 * Profile page
 *
 * We only show the profile if there has been user data passed through, stored
 * as $data['userdata']. If this has not been passed it, it would be safe to
 * assume that the user was not found, so anything required to be shown will be
 * passed as $data['message'] and show as an alert.
 *
 * @link 	    http://Members/{Username}
 */
if($data['page_type'] == 'profile') {

    /*
        We only show the profile if the user was found in the controller
        function so we only add to the content if the $data['user_data'] exists.

        If is does, we show some basic details about the user.
     */
    if(isset($data['userdata'])) {

        // The user was found so start building the output as a variable
        $profile = 'Full Name : ' . $data['userdata']->firstname.' '.$data['userdata']->lastname;
        $profile .= '<hr>';

        $join_date = new DateTime($data['userdata']->created);
        $profile .= 'Joined : ' . $join_date->format('l, jS F, Y \a\t g:ia');

        $profile .= '<hr>';
        $profile .= 'User Group : ' . $data['userdata']->group;

        // Add to the content by passing $profile into a card
        $content .= Php2Bs::bs_card ([
            'class' => 'border-primary bg-light mb-1',
            'body' => [
                'content' => $profile,
            ],
        ]);// bs_card profile
    } // if user found
} // $data['page_type'] == 'profile'

/**
 * Registration page
 *
 * We only show the form if it has been passed in from the controller and add
 * the terms of registration from the 'site_terms' record in the `settings`
 * table in the database.
 *
 * If the form has already been posted, $data['form'] will not have been passed
 * in so all the page will display is any messages passed through.
 *
 * @link 	    http://yoursite/Register
 */
if($data['page_type'] == 'register') {
    if (isset($data['form'])) {
        $terms = SiteSettings::get('site_terms');

        $content .= Php2Bs::bs_card ([
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $data['form']
                            .$terms,
                'class' => '',
            ],
        ]);// bs_card registration form
    } // if $data['form']
} // $data['page_type'] == 'register'

/**
 * Reset password page
 *
 * In it's initial state, this page simply shows a form to enter an email
 * address or username, to request an email with a link to reset the password,
 * and processes it when posted.
 *
 * This page is also used to process the link from the email, show the change
 * password form and process it.
 *
 * @link    	http://yoursite/Members/ResetPassword
 */
if($data['page_type'] == 'reset_password') {
    /*
        If we need to show the form, it is passed in from the controller.

        Everything else is passed in as a status and added via the
        showPageAlerts () function aboce
     */
    if($data['form']) {
        $text = Php2Html::p([
            'content' => 'Please enter your username, the email you registered with or your user id to receive an email containing a link to reset your password.'
        ]);
        $content .= Php2Bs::bs_card ([
            'class' => 'border-dark bg-light mb-1',
            'body' => [
                'content' => $text.$data['form'],
                'class' => '',
            ],
        ]);// bs_card edit form
    }
} // $data['page_type'] == 'reset_password'


// Pass the details to the template
new T_Main ($content,$settings);













=================================================================================================================








<?php

/**
 * Home Page View
 *
 * This only controls the view from the home page of the site.
 *
 * As very little is actually done in this file, we use it as the guideline for
 * all other views and as a result, there will be more commenting in this view
 * than any others, including things that might not get used here but might get
 * used elsewhere.
 *
 * The only view related thing that is not covered is showing the different
 * content for different page types. This is covered in the home/users view.
 *
 * @author  	Steve Ball <steve@follyball.co.uk>
 * @copyright 	Copyright (c) 2018 Steve Ball <steve@follyball.co.uk>
 * @link 		http://yoursite/
 *
 */

/*
    Any information passed to the view from the controller will be available as as a variable called $data. This will contain all of the required information but without any formatting (mainly) as this will be done in this file.

    You can uncomment the first line below to see any data passed in as a formatted array. There are also lines that can be uncommented to show any $_POST or $_SESSION data in the same way.

    The nicePrint_r() function that these use can be found in '/src/functions/globals.php'.
*/
// nicePrint_r($data, 'Data');
// nicePrint_r($_POST, 'Post');
// nicePrint_r($_SESSION, 'Session');


/**
 * Set the parameters for the page
 *
 * As well as the content to display, there are some other parameters that
 * the call to the template also accepts. These are stored in an array called
 * $settings and can either be set within this file, or passed in from the
 * controller.
 *
 * This example file contains all available parameters to give an explanation
 * of what can be used an how to use it, some of which are set within this file,
 * some of which are passed from the controller.
 */

/*
    Set the page version.

    The default template system provides several different layouts that can be
    used, within a standard wrapper.

    The layouts can be edited and new ones added in the layout_switcher() function
    in the called template file and the demos ones are
    'full-width' - single column layout
    'left-col'  - two column layout with left sidebar and content to the right
    'right-col' - two column layout with right sidebar and content to the left
    'three-col' - three column layout with both sidebars and content in the middle
    'test' - a playground for testing styles.

    This parameter can be ommitted and if so, the layout will default to the
    default case within the switch statement in layout_switcher().

    In this demo, the layout is set within this file, but can be passed in from
    the controller.
 */
$settings['layout'] = 'full-width';

/*
    Set the page title and subtitle.

    To set the page title, which will be shown at the top of the page and also part of the <title> in <head> set it to $settings['page_title'].

    In this demo, we are sending the title from the controller as
    'page_name' but have set it to only populate $settings['page_title'] if
    it has been passed in. You can set it manually in this file.

    This parameter can be ommitted and if so, no title or subtitle will
    show and the <title> in <head> will not include anything and default
    to whatever is set as the $title variable in the head() function in
    the Base template.

    To set a subtitle for the page set a $settings['page_subtitle']. This
    works in exactly the same way as the page title other than it does not
    affect the  <title> in <head> and will not show if a page title is not
    set. Again, for this demo, we are assuming it to be from the controller, this time as 'page_subtitle', and leave it empty if it does not exist.

 */
$settings['page_title'] = (isset($data['page_name'])) ? $data['page_name'] : null;
$settings['page_subtitle'] = (isset($data['page_subtitle'])) ? $data['page_subtitle'] : null;

/*
    Override meta tags

    You can override any of the default meta tags stored in the meta_tags()
    function in /app/core/Settings.php by including them in via $settings['meta'].

    You can override as many as needed and simply created a key/value pair for
    each one that you want to override.

    It would be recommended to set this in the $data passed to this page from
    the controller, espcially if this view is being used for multiple page
    types and content.

    If you do not need to override any, you can omit the variable completely.
 */
$settings['meta'] = ['description' => 'Description set in page'];

/*
    Add page specific css

    You can any page specific stylesheets stored called from the css() function in /app/core/Settings.php by including them in via $settings['css'].

    These are set in a multidimensional array and return the full stylesheet link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4' would return the string at
    'remote' => 'bootstrap' => 'v4'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$settings['css'] = [
    'remote/simple-line-icons',
    #'path/to/css2',
    #'path/to/css3'
];

/*
    Add page specific js

    You can any page specific stylesheets stored called from the js() function in /app/core/Settings.php by including them in via $settings['js'].

    These are set in a multidimensional array and return the full script link
    as a string.
    When setting, simply set the path to the stylesheet separated by slashes so
    'remote/bootstrap/v4' would return the string at
    'remote' => 'bootstrap' => 'v4'.

    If you do not need to add any css, you can omit the variable completely.

    In this demo, the additional css is set within this file, rather than passed
    in from the controller.
 */
$settings['js'] = [
    'remote/jquery_ui',
    #'path/to/js2',
    #'path/to/js3'
];

/*
    With the index page, we use it like a landing page in that we want it to still keep the navigation menu and footer that other areas of the site use but not have the banner at the top of the page, as well as giving the whole page a dark background and light text.

    We do this by using two extra $settings.
    'hide_banner' will not show the the header at the top of the page is set to true. If set to false or not set at all, the banner will show.
    'body_class' allows you to add classes to the opening body tag. In this case we just set the bg and text.
*/
$settings['hide_banner'] = true;
$settings['body_class'] = 'bg-dark text-light';

/*
    Everything that needs to be displayed on this page is currently created here against a variable called $content. This will change so this is only here as a temporary filler.
 */
 $content = '';

 /*
    Show any messages that have been sent ot the page as an alert.

    If there are any user messages that need to be shown, such as success or failure messages following a form post, we set the paramaters of it in the controller and pass it through as $data['messages']. This, itself, gets populated from details in a function called userAlerts() in the current model being used.

    Each model has it's own userAlerts() function to make the messages relevant to the area of the site being viewed and a full explanation of how they work can be found in '/app/models/M_Users.php'.

    When we require one of these messages, we set it to $data['messages'] and that will now contain an array of values that can be used as an alert. Rather than checking to see if $data['message'] exists on every view, we simply pass all of $data into the showPageAlerts () function in '/app/core/global.php' and that checks if there is message to show. There is a full commenting of showPageAlerts () to explain exactly how it works and how, as an alternative, we can use $_SESSIONS to pass the message.
 */
$content .= Session::flash('userAlert');

 /*
    Finally, we add the actual content that needs to be displayed on the page. In this example we currently only show some hardcoded stuff so that will need improving.

    TODO: Replace the below with something more useful and amend the comments.
  */
 $content .= '<h4>Welcome to the UAT Hub!</h4>';
 $content .= '<p>Although still a work in process, this is the first working version of the long-promised UAT Hub - an area that will eventually become the go-to resource for any UAT and CMT things.</p>';
 $content .= '<p>As well as help files and automation tools, this will also contain a few new things and some replacements for existing methods.</p>';




  $content .= '<div class="col">';
  $content .= '<div class="row mb-3">';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-light bg-secondary">';

  $content .= '    <i class="fas fa-lightbulb fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>Ideas</h2>';
 $content .= '            <p>Got an idea that you think could improve life in the derpartment? Share it in the Ideas section, make comments on other ideas and vote for your favourites.</p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-secondary" href="/Ideas" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-left-0 border-light bg-dark">';

  $content .= '    <i class="fas fa-question fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>One Thing</h2>';
 $content .= '            <p>Feel uncomfortable placing something in the \'One Thing\' box? You can now do it via an online form, either anonymously or with your name. You can even set it so it can be viewed by others if you want! </p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-dark" href="/OneThing" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '   <div class="col-lg-4 d-flex flex-column text-center border border-left-0 border-light bg-secondary">';

  $content .= '    <i class="fas fa-phone-volume fa-fw fa-7x mx-auto mt-3"></i>';

 $content .= '            <h2>Call Log</h2>';
 $content .= '            <p>Still in concept stage, this is a potential replacement for the Excel sheet currently used for UAT calls. Only to be used if told to for now.</p>';
 $content .= '            <p class="mt-auto"><a class="btn btn-secondary" href="/CallLog" role="button">View now »</a></p>';
 $content .= '          </div><!-- /.col-lg-4 -->';
 $content .= '        </div>';

  $content .= '</div>';


 $content .= '<div class="card mb-3 border-secondary text-dark w-100">';
 $content .= '    <h4 class="card-header bg-secondary text-light">';
 $content .= '    Links';
 $content .= '    </h4>';
 $content .= '  <div class="card-body">';
 $content .= '  <b>Original Selenium Folders</b><br>';
 $content .= '    <a href="http://10.60.151.86/current/Selenium" target="_blank">Current</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/regression/Selenium" target="_blank">Regression</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting1/Selenium" target="_blank">Scripting 1</a>' ;
 $content .= ' | ';
 $content .= '    <a href="http://10.60.151.86/scripting2/Selenium" target="_blank">Scripting 2</a>' ;

 $content .= '  <br><br><b>Interim site</b><br>';
 $content .= '    <a href="/dev/Selenium" target="_blank">Home Page</a>' ;

 $content .= '  <br><br><b>New Hub site</b><br>';
 $content .= '    <a href="/Selenium" target="_blank">Home Page</a>' ;
 $content .= '   | ';
 $content .= '    <a href="/Admin" target="_blank">Admin</a>' ;
 $content .= '  <br><br><b>Other Links</b><br>';
 $content .= '    <a href="http://10.60.151.86/phpmyadmin" target="_blank">Database</a>' ;

 $content .= '  <br><br><b>File Locations</b>';
 $content .= '    <br>WebOpts MVT list - \\\\ZEUS\\Ecommerce\\Webopt MVT folder\\Agendas\\' ;
 $content .= '    <br>Firefox 54.0.1 Installation - \\\\10.60.151.86\\files\\Firefox Installs\\' ;

 $content .= '  <br><br><b>Known Issues</b>';
 $content .= '  <br>Remember me function causes count() on boolean error in M_Users line 991(ish)' ;
 $content .= '  <br>Main template edit link goes to /Members/ instead of /Users/' ;
 $content .= '  <br>User box not visible when scrolled down the page.' ;


 $content .= '</div>';

 $img = Php2BS::bs_figure_img ([
     'src' => 'https://nav.files.bbci.co.uk/orbit/2.0.0-134.88fa804/img/blq-orbit-blocks_grey.svg',
     'alt' => 'my-image',
     'class' => 'rounded',
 ]);

 $caption = Php2BS::bs_figure_caption ([
     'class' => 'text-danger',
     'content' => 'Descriptive caption'
 ]);

$content .= Php2BS::bs_figure ([
     'content' => $img.$caption,
     'id' => 'show_image',
 ]);

$content .= Php2Bs::bs_alert([
    'heading' => 'Alert Example',
    'content' => Php2Html::p([
        'content' => 'Stuff can go here.'
    ]),
    'dismissible' => false,
    'color' => 'warning',
]);

$content .=  '<h4>Badge '.Php2Bs::bs_badge([
    'content' => 'Badge text',
    'color' => 'success',
]).'</h4>';

$content .=  '<h4>Badge '.Php2Bs::bs_badge_pill([
    'content' => 'Badge text',
    'color' => 'success',
]).'</h4>';

$content .=  '<h4>Badge '.Php2Bs::bs_badge_link([
    'content' => 'Badge text',
    'color' => 'success',
    'href' => 'contact.php'
]).'</h4>';

$content .=  '<h4>Badge '.Php2Bs::bs_badge_pill_link([
    'content' => 'Badge text',
    'color' => 'success',
    'href' => 'contact.php'
]).'</h4>';

$content .= Php2BS::bs_breadcrumbs ([
     'items' => [
         'Home' => '/',
         'Contact' => '/Contact',
         'Users' => '',
     ],
     'nav_class' => 'mt-4',
     'ol_class' => 'bg-dark mx-4'
 ]);


 $content .= Php2Bs::bs_button ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'primary',
     //'size' => 'sm',
     'content' => 'aaa',
     'name' => 'bbb'
 ]);

 $content .= Php2Bs::bs_button_link ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'primary',
     'size' => 'sm',
     'content' => 'aaa',
     'name' => 'bbb',
     'href' => "/Copntact.php"
 ]);

 $content .= Php2Bs::bs_button_input_button ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'primary',
     //'size' => 'sm',
     'value' => 'aaa',
     'name' => 'bbb'
 ]);

 $content .= Php2Bs::bs_button_input_submit ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'info',
     //'size' => 'sm',
     'value' => 'aaa',
     'name' => 'bbb'
 ]);

 $content .= Php2Bs::bs_button_input_reset ([
     'button_type' => 'submit',
     'class' => '',
     'color' => 'warning',
     //'size' => 'sm',
     'value' => 'aaa',
     'name' => 'bbb'
 ]);

/**
 * Pass the details to the template
 *
 * All that is left to do is pass the information that we have created above,
 * through to the template that we are using for this view.
 *
 * In this instance, we are using the Main template at /'app/core/Templates/T_Main.php'.
 *
 * @var string 	    $content    The actual page relevant content to be shown
 * @var array 	    $settings     Any other required page settings.
 */
new T_Main ($content,$settings);














=================================================================================================================









<?php

/**
 * cHECK IF ADMIN
 *
 * @param  array  $dirs List of directories to look for class files
 * @return require       Class file
 */
function is_admin_area () {

    $array = explode('/', filter_var(rtrim($_SERVER['REQUEST_URI'], '/'), FILTER_SANITIZE_URL));

    return (isset($array[1]) && $array[1]=='Admin') ? true : false;
}












=================================================================================================================










<?php
/**
 * Unset unrequired rules
 *
 * After a form is posted, we only want to attempt to validate
 * and update any fields that have changed.
 *
 * This function takes a set of $_POST data and matches it
 * against the validation rules for the table being updated. It
 * unsets any rules that are not required due to unchanged form
 * field data.
 *
 * @param  array    $post    Form $_POST data
 * @param  array    $_rules  Table validation rules
 * @return array             Rules that are still required
 */
function stripValidateRules ($_postdata, $_rules) {        

    // Loop through the posted data
    foreach($_postdata as $key => $value) {
        // Loop through the rules
        foreach ($_rules as $key => $value) {
            /*
                If the field does not exist unset the matching rule.
             */
            if(!isset($_postdata[$key])) {
                unset($_rules[$key]);
            }
        }
    } // foreach

    return $_rules;
} // stripValidateRules











=================================================================================================================





















=================================================================================================================







